<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome -Sterne&#39;s Blog-</title>
  
  <subtitle>And in that light, I find deliverance——</subtitle>
  <link href="https://github.com/sterne012/sterne012.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/sterne012/sterne012.github.io/"/>
  <updated>2022-03-22T09:19:40.182Z</updated>
  <id>https://github.com/sterne012/sterne012.github.io/</id>
  
  <author>
    <name>sterne</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Arcaea-从零开始的玩蛇生活</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/03/22/Arcaea/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/03/22/Arcaea/</id>
    <published>2022-03-22T08:00:00.000Z</published>
    <updated>2022-03-22T09:19:40.182Z</updated>
    
    <content type="html"><![CDATA[<p>ARCAEA——这是一款促进人类进化的出张模拟器。</p><p><del>暴论：mush是纵连模拟器，lanota倒打模拟器，ADOFAI音押模拟器，arc出张模拟器，phi要素过多</del></p><p>欢迎萌新多多入坑，大佬多多暴打</p><hr><h2 id="2021-6-18-入坑"><a href="#2021-6-18-入坑" class="headerlink" title="2021/6/18 入坑"></a>2021/6/18 入坑</h2><img src="/2022/03/22/Arcaea/577F99608F8237EDB8A2A9B2FEF510DA.png" class="" title="img"><p>第一个fr，同时这首也是先前打phi萌新时期的练手谱</p><hr><h2 id="2021-8-12-10-0"><a href="#2021-8-12-10-0" class="headerlink" title="2021/8/12 10.0"></a>2021/8/12 10.0</h2><p>经过一个考试月+军训的折磨之后终于10.0</p><img src="/2022/03/22/Arcaea/6D9DE46978DB36666E9BD2959D02DEF9.png" class="" title="img"><hr><p>2021/8/30</p><p>第一个p的8</p><img src="/2022/03/22/Arcaea/57C1AF723391D8EC8B1F692676F2B19C.png" class="" title="img"><p>当时的我仍未理解这个游戏到底该怎么玩</p><hr><h2 id="2021-11-24-11-0"><a href="#2021-11-24-11-0" class="headerlink" title="2021/11/24 11.0"></a>2021/11/24 11.0</h2><p>本文原标题：arcaea红框纪念</p><p>所以这里格外长</p><p>不愧是我 </p><img src="/2022/03/22/Arcaea/9A9326969C9F34F7F56C1111D854AD06.jpg" class="" title="img"><img src="/2022/03/22/Arcaea/3E4EACE455AF0B5E2F9D8AE953A4775F.jpg" class="" title="img"><img src="/2022/03/22/Arcaea/8D55AF670FE801E48BF4C3669F03C411.jpg" class="" title="img"><img src="/2022/03/22/Arcaea/image-20211124150310139.png" class="" title="image-20211124150310139"><p>红框时间2021-11-23-16:00左右</p><p>我音游龄算长了，大概小学就在玩，大概从乐动时代（都没什么人听说过的音游）到少量节奏大师、诺亚瓶子、cy2、喵赛克、phigros/musedash、Arcaea的历程，时间跨度还是挺大的，不过arc真的是一上来就让我感觉这个音游挺难，也可能是因为phi打习惯了吧，换手接蛇，按不到键等等…</p><p>不过当初想玩主要是因为phi瓶颈很久了（2.0的rks14.4左右），想玩Arc提提准度，于是六七月份左右开始玩</p><p>这个美术风格真的好棒，Seirra老师很早就有所听闻了，Arc也像cy2一样很有自己的风格。</p><p>然后经历了9-11月的躺平之后我们社团办了个音游挑战赛在结识各路神仙之后就开始尝试红</p><p>挑战赛冠军说他当时红只用了25天，我直接进行亿个您的喊并祝他早日制霸</p><p>最主要还是要靠多练，每天都打打一定有进步这是真的</p><p>再就有个明确的目标吧，比如我就是想红，（然后现在红了又躺平了）于是就比较有动力去推一些难曲</p><p>作为一个4k gamer，也许个人差和二指比较大，毕竟四指主要是靠协调然后弥补那些自己二指底力不够的操作</p><p>还有一个很好用的软件叫音乐游戏训练（界面一看就是机翻hh），ios商店有，安卓不太清楚，可以把自己的录像放进去调倍速拆谱用，图上Vindication有一段3+3+3双押就是拆出来才打会的，但是感觉蛇不太好拆，就纯靠多练吧</p><p>虽然没人问过我但是我调成English纯因为中文页面那个字体太丑了233 英文真的很好康</p><p>phi的近况是比赛的时候收了一个然后直接进决赛了233 不过打了arc之后准度确实有提升，但是底力永远都不是一蹴而就的，还有很多15我都是靠糊</p><p>下一步继续练双押，然后多推一推九级上位曲吧？暂时没有什么目标了，摘星离我还有挺遥远的距离</p><p>突然发现这个还挺有的写（水），可能以后想说点什么还会有吧~诶嘿</p><hr><p>嘿嘿 好看捏（轻微剧透？</p><img src="/2022/03/22/Arcaea/33C28A3BB3C874D387572693CE4FDF38.png" class="" title="img"><img src="/2022/03/22/Arcaea/AC838C3A0A7C8B5ED2B27CA32A33458B.png" class="" title="img"><img src="/2022/03/22/Arcaea/F77ECE19347A6D21F602C9C7A9AED981.png" class="" title="img"><p>arcahv解锁时候忘了调中文然后。。。悲叹自己的英语水平太差了</p><hr><h2 id="2021-12-29-11-4"><a href="#2021-12-29-11-4" class="headerlink" title="2021/12/29 11.4"></a>2021/12/29 11.4</h2><p>学了一天（概率论+课程论文）后的底力爆发之夜11.39-11.43</p><img src="/2022/03/22/Arcaea/F37611351E7CAAAC9D62F84AE01D1FF7.png" class="" title="img"><img src="/2022/03/22/Arcaea/F2D98DD3274ABD548C63E917A74526C6.png" class="" title="img"><p>我的评价是，ej交互难个球，难的是天地散打（</p><p>后将vt推上986w再加0.01</p><hr><p>2021/1/1</p><p>元旦觉醒了光</p><img src="/2022/03/22/Arcaea/4DAAB4806E15DC38976B5A0C4E4DCB70.png" class="" title="img"><p>细看背景是p歌列表（）以一堆7-8和少量水9为主</p><hr><h2 id="2021-1-16-11-5"><a href="#2021-1-16-11-5" class="headerlink" title="2021/1/16 11.5"></a>2021/1/16 11.5</h2><p>如今打算把这一篇当作玩arc的记录ww</p><p>11.50了，很艰难，短时间内必不可能摘星</p><img src="/2022/03/22/Arcaea/B2BD4BE67B24A5F4AB5242F53F1717C2.png" class="" title="img"><p>这首在b30里凑了个数然后终于11.5了……</p><p>抛开众多的小二连三连不提，本身配置并不难，但真的好吃爆发力，这种我是拆不成交互就只能硬抗了。。</p><p>并且11.5多由9+曲目堆积而成，10里面打得好的就变石（会了真的简单）、魔女（第一个上ex+的10，但癖了），会一点点的mirzam（暴far，总之打不好）、xanatos（尾杀寄）、黑魔王（同尾杀寄）、vh（还是尾杀寄）、vt（底力爆发时打上best1后至今一直到不了当时水平），嫖了里红（很有代表性的位移天地交互不会）以及上面的felis</p><p>欢迎各位大爹加好友多多暴打我OOOOOOOOOrz</p><img src="/2022/03/22/Arcaea/6D481B9BB81AF9C1BAEC27CF1990328C.jpg" class="" title="6D481B9BB81AF9C1BAEC27CF1990328C"><hr><p>2022/2/17</p><p>升天</p><p>梦 幻 联 动</p><p>这个游戏也去玩了下…然后第一周目使我明白我只想做个咸鱼我不想要那么多粉，后面开始刷成就狂魔然后逐渐失去本心了，不过有些结局那确实相当有意思ww</p><p>然后看过花花直播发现确实有连播30d的可能，于是刷出了近900w粉的结局…</p><img src="/2022/03/22/Arcaea/881719DA24446994B53B9C22C49B9815.png" class="" title="img"><p>然后发现爆小p户后来又小推了一下</p><hr><p>2022/2/26</p><p>来学校，练了四五天vt一点进步都没然后打了把vh手感起飞</p><img src="/2022/03/22/Arcaea/0091A3BCABECCB6BEC18C3C846868797.png" class="" title="img"><hr><h2 id="2022-3-2-11-6"><a href="#2022-3-2-11-6" class="headerlink" title="2022/3/2 11.6"></a>2022/3/2 11.6</h2><p>谢谢新出background的random随机到xanatos，虽然我不理解为什么就990</p><img src="/2022/03/22/Arcaea/EB48515E6A67EF23905A2D1ABDD0A106.png" class="" title="img"><p>看到群里巨佬爆鲨体罚，然后再次被体罚打爆</p><p><del>这就是寄点突然飞升的原因吗？</del></p><p>天地交互可能略微的好了那么一点点点吧..应该说谢谢vt和ac（ac练了一下午，现在970-&gt;11.5爽嫖状态）</p><img src="/2022/03/22/Arcaea/478B0BD9373FE15C501332FB01DEF50C.png" class="" title="img"><p>几乎全在推10的上升到11.6了。。</p><p>整体上没有11.5时候那么着急的想去提一提ptt什么的了，这大概就目前的水平，底力耗尽了牡蛎牡蛎</p><p>后面怎么办捏</p><p>首先周年庆全曲一下，但是支线包齐了，ether drop+55</p><p>黑魔王尾杀好了一些，慢速看一下中间4双押4交互段，练练后边</p><p>剩下的随缘吧，想打啥打啥</p><p>另外红枪真的听着好塑料啊</p><img src="/2022/03/22/Arcaea/FD5BE1A3A52A93BC908BD54422D7510E.png" class="" title="img"><p>另外新background好看！期待很久啦</p><img src="/2022/03/22/Arcaea/B51B1661FB54F8594534CF0704AB2247.png" class="" title="img"><p>关于我查了个分然后群友针对牛奶和vh谁是10.0最上吵起来后打三把牛奶上ex+并推分这件事</p><p>每 天 一 杯 奶，强 壮 音 游 人</p><hr><h2 id="2022-3-22-11-7"><a href="#2022-3-22-11-7" class="headerlink" title="2022/3/22 11.7"></a>2022/3/22 11.7</h2><p>历经20d ptt+0.1</p><p>前段时间的两张：</p><p>里红除了天地位移交互的读不懂之外其他打的基本没什么毛病（不过印象中这把当时板子非常不顺滑还漏蛇（</p><img src="/2022/03/22/Arcaea/8FC96AF697B62B97C1DA253347B1E6BF.png" class="" title="img"><p>你倒是p啊！p！</p><p>打歌方差很大，这个状态好的时候几乎不失误，状态差的时候撑死986</p><img src="/2022/03/22/Arcaea/485F623C1246E7918AC033B242FDD9E7.png" class="" title="img"><p>谢谢衔尾蛇。。虽然我感觉我还是没打明白，第一个单曲定数12.0了耶</p><img src="/2022/03/22/Arcaea/0B468E376885FFE8F21409279112AEE3.png" class="" title="img"><p>地板已经萌新线了淦。。。通常这个时候大佬差不多都已经摘了吧（</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ARCAEA——这是一款促进人类进化的出张模拟器。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;暴论：mush是纵连模拟器，lanota倒打模拟器，ADOFAI音押模拟器，arc出张模拟器，phi要素过多&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;欢迎萌新多多入坑，大佬多多暴打&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id</summary>
      
    
    
    
    
    <category term="games" scheme="https://github.com/sterne012/sterne012.github.io/tags/games/"/>
    
    <category term="Arc" scheme="https://github.com/sterne012/sterne012.github.io/tags/Arc/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-逻辑回归</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/03/20/deep-logistic-regression/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/03/20/deep-logistic-regression/</id>
    <published>2022-03-20T13:04:33.000Z</published>
    <updated>2022-03-20T13:18:32.296Z</updated>
    
    <content type="html"><![CDATA[<p>在linear regression基础上修改了loss和gradient函数，添加了sigmoid函数，添加了测试集结果输出，acc、精确率、召回率计算、ROC曲线绘制、auc计算等</p><p>实验过程：（遇到各种问题后解决的过程）</p><p>1.修改线性回归为逻辑回归，主要是增加sigmoid函数、修改了梯度下降的公式，逻辑回归主体迭代过程不变</p><p>2.刚开始运行时初始值还是用了上次线性回归的数据，即w=1，b=60，然后得到了曲线方向完全相反的结果，运行测试集发现loss大概在21左右，感觉误差过大后根据测试集loss输出和预测结果的整体loss调整之后将b逐步调小，b=5左右得到比较好的训练结果。</p><p>在这之中又发现了过拟合的问题，具体如下：</p><p>根据绘制的counter图知，梯度下降的最优结果区间大致在这里：</p><img src="/2022/03/20/deep-logistic-regression/image-20220320211244928.png" class="" title="image-20220320211244928"><p>但如果进一步增大迭代次数，训练集的loss进一步减小，但测试集的loss开始上升，为避免过拟合最终选择初始值w=1，b=5，iter=10000，learningrate=0.001</p><p>3.接下来的问题和一个报错有关：</p><img src="/2022/03/20/deep-logistic-regression/image-20220320211704979.png" class="" title="image-20220320211704979"><p>简单来说就是log（0）-&gt;无穷的情况，询问老师后增加一个小正数可以解决，随后完善loss函数，这也是第二个问题中图片右上全部是白色的原因</p><img src="/2022/03/20/deep-logistic-regression/image-20220320211716098.png" class="" title="image-20220320211716098"><p>至此，逻辑回归主体部分已经完成，开始着手绘制roc曲线</p><p>4.绘制roc曲线调用sklearn的roc_courve函数，计算auc调用auc函数，在调用roc_courve函数时遇到了一点小问题，在先前计算precision和recall时，提前将y_pred进行了四舍五入的处理，导致roc曲线只有一个拐点，查阅资料后发现了这个问题，并修改测试集输出函数如下：</p><img src="/2022/03/20/deep-logistic-regression/image-20220320211729712.png" class="" title="image-20220320211729712">roc曲线问题<img src="/2022/03/20/deep-logistic-regression/image-20220320211734594.png" class="" title="image-20220320211734594">修改后的函数<p>5.最后的运行结果：Acc=0.800，precision=0.8333，recall=0.8333，auc=0.9583，图上是更详细的结果</p><img src="/2022/03/20/deep-logistic-regression/clip_image002.jpg" class="" title="img"><p>画图：</p><img src="/2022/03/20/deep-logistic-regression/image-20220320211813733.png" class="" title="image-20220320211813733"><img src="/2022/03/20/deep-logistic-regression/image-20220320211818580.png" class="" title="image-20220320211818580"><img src="/2022/03/20/deep-logistic-regression/image-20220320211823629.png" class="" title="image-20220320211823629"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> roc_curve, auc<br><br><br><br>xdata = [<span class="hljs-number">8.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">9.</span>, <span class="hljs-number">7.</span>, <span class="hljs-number">16.</span>, <span class="hljs-number">05.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">10.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">6.</span>]<br>ydata = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br><br>xtest = [<span class="hljs-number">5.</span>, <span class="hljs-number">4.5</span>, <span class="hljs-number">9.8</span>, <span class="hljs-number">8.</span>, <span class="hljs-number">22.</span>, <span class="hljs-number">17.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">19.</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>]<br>ytest = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br>plt.cla()<br><br>w_init = <span class="hljs-number">1.</span><br>b_init = <span class="hljs-number">5.</span><br><br>w_change = [w_init]<br>b_change = [b_init]<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sigmoid</span>(<span class="hljs-params">x</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1.</span> / (<span class="hljs-number">1.</span> + np.exp(-x))<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loss</span>(<span class="hljs-params">w, b</span>):</span><br>    res = <span class="hljs-number">0</span><br>    exp = <span class="hljs-number">1e-8</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(xdata)):<br>        y_pred = sigmoid(w * xdata[i] + b)<br>        res += - (<span class="hljs-number">1</span> - ydata[i]) * np.log(<span class="hljs-number">1</span> - y_pred+exp)-ydata[i] * np.log(y_pred+exp)<br>    <span class="hljs-keyword">return</span> res / <span class="hljs-built_in">len</span>(xdata)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">grad</span>(<span class="hljs-params">w, b</span>):</span><br>    w_grad = <span class="hljs-number">0</span><br>    b_grad = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(xdata)):<br>        y_pred = sigmoid(w * xdata[i] + b)<br>        w_grad += -(ydata[i] - y_pred) * xdata[i]<br>        b_grad += -(ydata[i] - y_pred)<br>    <span class="hljs-keyword">return</span> w_grad, b_grad<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">logistic_regression</span>(<span class="hljs-params">w_pred, b_pred, lr=<span class="hljs-number">0.001</span>, <span class="hljs-built_in">iter</span>=<span class="hljs-number">10000</span></span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">iter</span>):<br>        gradf = grad(w=w_pred, b=b_pred)<br>        w_pred = <span class="hljs-built_in">float</span>(w_pred - learning_rate * gradf[<span class="hljs-number">0</span>])<br>        b_pred = <span class="hljs-built_in">float</span>(b_pred - learning_rate * gradf[<span class="hljs-number">1</span>])<br>        w_change.append(w_pred)<br>        b_change.append(b_pred)<br>    <span class="hljs-keyword">return</span> w_pred, b_pred<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_set</span>(<span class="hljs-params">xtest, ytest, w, b</span>):</span><br>    ytest_pred = []<br>    tp = fp = tn = fn = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(xtest)):<br>        y_pred = sigmoid(w * xtest[i] + b)<br>        ytest_pred.append(y_pred)<br>        <span class="hljs-keyword">if</span> y_pred &gt; <span class="hljs-number">0.5</span>:<br>            y_pred = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            y_pred = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> ytest[i] == y_pred &amp; y_pred == <span class="hljs-number">1</span>:<br>            tp += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> ytest[i] == y_pred &amp; y_pred == <span class="hljs-number">0</span>:<br>            tn += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> ytest[i] != y_pred &amp; y_pred == <span class="hljs-number">1</span>:<br>            fp += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> ytest[i] != y_pred &amp; y_pred == <span class="hljs-number">0</span>:<br>            fn += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> ytest_pred, tp, fp, tn, fn<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_loss</span>(<span class="hljs-params">w, b</span>):</span><br>    res = <span class="hljs-number">0</span><br>    exp = <span class="hljs-number">1e-8</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(xtest)):<br>        y_pred = sigmoid(w * xtest[i] + b)<br>        res += - (<span class="hljs-number">1</span> - ytest[i]) * np.log(<span class="hljs-number">1</span> - y_pred+exp)-ytest[i] * np.log(y_pred+exp)<br>    <span class="hljs-keyword">return</span> res / <span class="hljs-built_in">len</span>(xtest)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;data set:&quot;</span>)<br><span class="hljs-built_in">print</span>(xdata)<br><span class="hljs-built_in">print</span>(ydata)<br>plt.figure(<span class="hljs-number">1</span>)<br>plt.scatter(xdata, ydata,label=<span class="hljs-string">&quot;training set&quot;</span>)<br>plt.title(<span class="hljs-string">&quot;output&quot;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;x&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;y&quot;</span>)<br><br><span class="hljs-comment"># 测试集</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;test set:&quot;</span>)<br><span class="hljs-built_in">print</span>(xtest)<br><span class="hljs-built_in">print</span>(ytest)<br>plt.scatter(xtest, ytest, marker=<span class="hljs-string">&#x27;v&#x27;</span>,label=<span class="hljs-string">&quot;test set&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;initial input:&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;w = &quot;</span> + <span class="hljs-built_in">str</span>(w_init))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b = &quot;</span> + <span class="hljs-built_in">str</span>(b_init))<br><br>learning_rate = <span class="hljs-number">0.001</span><br><span class="hljs-built_in">iter</span> = <span class="hljs-number">10000</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Logistic Regression: learning_rate = &quot;</span> + <span class="hljs-built_in">str</span>(learning_rate) + <span class="hljs-string">&quot;,iteration = &quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">iter</span>))<br>w_pred, b_pred = logistic_regression(w_pred=w_init, b_pred=b_init, lr=learning_rate, <span class="hljs-built_in">iter</span>=<span class="hljs-built_in">iter</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;result: w_pred = &quot;</span> + <span class="hljs-built_in">str</span>(w_pred) + <span class="hljs-string">&quot;, b_pred = &quot;</span> + <span class="hljs-built_in">str</span>(b_pred))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;loss = &quot;</span>+<span class="hljs-built_in">str</span>(loss(w_pred,b_pred)))<br>x = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">40</span>, <span class="hljs-number">0.1</span>)<br>y = sigmoid(w_pred * x + b_pred)<br>plt.plot(x, y)<br>plt.legend()<br>plt.show()<br><br><span class="hljs-comment"># ROC曲线</span><br>plt.figure(<span class="hljs-number">2</span>)<br>ytest_pred, tp, fp, tn, fn = test_set(xtest, ytest, w_pred, b_pred)<br>acc = <span class="hljs-built_in">float</span>(tp + tn) / <span class="hljs-built_in">float</span>(<span class="hljs-built_in">len</span>(xtest))<br>precision = <span class="hljs-built_in">float</span>(tp) / <span class="hljs-built_in">float</span>(tp + fp)<br>recall = <span class="hljs-built_in">float</span>(tp) / <span class="hljs-built_in">float</span>(tp + fn)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;y_pred:&quot;</span>)<br><span class="hljs-built_in">print</span>(ytest_pred)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;test loss = &quot;</span>+<span class="hljs-built_in">str</span>(test_loss(w_pred,b_pred)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;tp = &quot;</span>+<span class="hljs-built_in">str</span>(tp)+<span class="hljs-string">&quot; fp = &quot;</span>+<span class="hljs-built_in">str</span>(fp)+<span class="hljs-string">&quot; tn = &quot;</span>+<span class="hljs-built_in">str</span>(tn)+<span class="hljs-string">&quot; fn = &quot;</span>+<span class="hljs-built_in">str</span>(fn))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;acc = &quot;</span> + <span class="hljs-built_in">str</span>(acc))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;precision = &quot;</span> + <span class="hljs-built_in">str</span>(precision))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;recall = &quot;</span> + <span class="hljs-built_in">str</span>(recall))<br><br>fpr, tpr, thresholds = roc_curve(ytest, ytest_pred,pos_label=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;fpr = &quot;</span>+<span class="hljs-built_in">str</span>(fpr))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;tpr = &quot;</span>+<span class="hljs-built_in">str</span>(tpr))<br>roc_auc = auc(fpr, tpr)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;auc = &quot;</span>+<span class="hljs-built_in">str</span>(roc_auc))<br>plt.plot(fpr, tpr, <span class="hljs-string">&#x27;k--&#x27;</span>, label=<span class="hljs-string">&#x27;ROC (area = &#123;0:.2f&#125;)&#x27;</span>.<span class="hljs-built_in">format</span>(roc_auc), lw=<span class="hljs-number">2</span>)<br>plt.xlabel(<span class="hljs-string">&quot;FPR&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;TPR&quot;</span>)<br>plt.show()<br><br><br><br><span class="hljs-comment"># counter图</span><br>plt.figure(<span class="hljs-number">3</span>)<br>x = np.arange(-<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0.1</span>)<br>y = np.arange(-<span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">0.2</span>)<br><span class="hljs-comment"># 对x,y网格化，得到X,Y</span><br>X, Y = np.meshgrid(x, y)<br><span class="hljs-comment"># 等高线</span><br>Z = loss(X, Y)<br>fig, ax = plt.subplots(figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">8</span>), dpi=<span class="hljs-number">100</span>)<br><span class="hljs-comment"># 画contour图</span><br>CS = ax.contourf(X, Y, Z, <span class="hljs-number">100</span>)<br><span class="hljs-comment"># 画轮廓线</span><br>CS = ax.contour(X, Y, Z, <span class="hljs-number">100</span>, colors=<span class="hljs-string">&#x27;white&#x27;</span>)<br><br>plt.scatter(w_change, b_change)<br>plt.title(<span class="hljs-string">&quot;predict change&quot;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;w_change&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;b_change&quot;</span>)<br>plt.tight_layout()<br>plt.show()<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在linear regression基础上修改了loss和gradient函数，添加了sigmoid函数，添加了测试集结果输出，acc、精确率、召回率计算、ROC曲线绘制、auc计算等&lt;/p&gt;
&lt;p&gt;实验过程：（遇到各种问题后解决的过程）&lt;/p&gt;
&lt;p&gt;1.修改线性回归为逻</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
    <category term="deeplearning" scheme="https://github.com/sterne012/sterne012.github.io/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-线性回归</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/03/20/deep-linear-regression/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/03/20/deep-linear-regression/</id>
    <published>2022-03-20T13:04:20.000Z</published>
    <updated>2022-03-20T13:10:20.236Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>xdata = [<span class="hljs-number">8.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">9.</span>, <span class="hljs-number">7.</span>, <span class="hljs-number">16.</span>, <span class="hljs-number">05.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">10.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">6.</span>]<br>ydata = [<span class="hljs-number">30.</span>, <span class="hljs-number">21.</span>, <span class="hljs-number">35.</span>, <span class="hljs-number">27.</span>, <span class="hljs-number">42.</span>, <span class="hljs-number">24.</span>, <span class="hljs-number">10.</span>, <span class="hljs-number">38.</span>, <span class="hljs-number">22.</span>, <span class="hljs-number">25.</span>]<br>plt.cla()<br><br>w_init = <span class="hljs-number">2.</span><br>b_init = <span class="hljs-number">60.</span><br><br>w_change = [w_init]<br>b_change = [b_init]<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">grad</span>(<span class="hljs-params">w, b</span>):</span><br>    w_grad = <span class="hljs-number">0</span><br>    b_grad = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(xdata)):<br>        y_pred = w * xdata[i] + b<br>        w_grad += <span class="hljs-built_in">float</span>(<span class="hljs-number">2</span> * (ydata[i] - y_pred) * (-xdata[i]))<br>        b_grad += <span class="hljs-built_in">float</span>(<span class="hljs-number">2</span> * (ydata[i] - y_pred) * (-<span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">return</span> w_grad, b_grad<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loss</span>(<span class="hljs-params">w, b</span>):</span><br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(xdata)):<br>        y_pred = w * xdata[i] + b<br>        res += <span class="hljs-built_in">pow</span>(ydata[i] - y_pred, <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> res/<span class="hljs-number">10</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gradient_descent</span>(<span class="hljs-params">w_pred, b_pred, learning_rate=<span class="hljs-number">0.001</span>, <span class="hljs-built_in">iter</span>=<span class="hljs-number">10000</span></span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">iter</span>):<br>        lossf = loss(w=w_pred, b=b_pred)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;range &quot;</span> + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&quot;: loss = &quot;</span> + <span class="hljs-built_in">str</span>(lossf))<br>        gradf = grad(w=w_pred, b=b_pred)<br>        w_pred = <span class="hljs-built_in">float</span>(w_pred - learning_rate * gradf[<span class="hljs-number">0</span>])<br>        b_pred = <span class="hljs-built_in">float</span>(b_pred - learning_rate * gradf[<span class="hljs-number">1</span>])<br>        w_change.append(w_pred)<br>        b_change.append(b_pred)<br>    <span class="hljs-keyword">return</span> w_pred, b_pred<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;data set:&quot;</span>)<br><span class="hljs-built_in">print</span>(xdata)<br><span class="hljs-built_in">print</span>(ydata)<br>plt.figure(<span class="hljs-number">1</span>)<br>plt.scatter(xdata, ydata)<br>plt.title(<span class="hljs-string">&quot;output&quot;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;xdata&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;ydata&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;initial input:&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;w = &quot;</span> + <span class="hljs-built_in">str</span>(w_init))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b = &quot;</span> + <span class="hljs-built_in">str</span>(b_init))<br><br>learning_rate = <span class="hljs-number">0.001</span><br><span class="hljs-built_in">iter</span> = <span class="hljs-number">10000</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Linear Regression: learning_rate = &quot;</span> + <span class="hljs-built_in">str</span>(learning_rate) + <span class="hljs-string">&quot;,iteration = &quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">iter</span>))<br>res = gradient_descent(w_pred=w_init, b_pred=b_init, learning_rate=learning_rate, <span class="hljs-built_in">iter</span>=<span class="hljs-built_in">iter</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;result: w_pred = &quot;</span> + <span class="hljs-built_in">str</span>(res[<span class="hljs-number">0</span>]) + <span class="hljs-string">&quot;, b_pred = &quot;</span> + <span class="hljs-built_in">str</span>(res[<span class="hljs-number">1</span>]))<br>x = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>)<br>y = res[<span class="hljs-number">0</span>] * x + res[<span class="hljs-number">1</span>]<br>plt.plot(x, y)<br>plt.show()<br><br><span class="hljs-comment">#counter图</span><br>plt.figure(<span class="hljs-number">2</span>)<br>x = np.arange(-<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">0.2</span>)<br>y = np.arange(-<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">1</span>)<br><span class="hljs-comment">#对x,y网格化，得到X,Y</span><br>X,Y = np.meshgrid(x,y)<br><span class="hljs-comment"># 等高线</span><br>Z = loss(X, Y)<br>fig, ax = plt.subplots(figsize=(<span class="hljs-number">8</span>,<span class="hljs-number">8</span>),dpi=<span class="hljs-number">100</span>)<br><span class="hljs-comment"># 画contour图</span><br>CS = ax.contourf(X, Y, Z, <span class="hljs-number">100</span>)<br><span class="hljs-comment"># 画轮廓线</span><br>CS = ax.contour(X, Y, Z, <span class="hljs-number">100</span>, colors=<span class="hljs-string">&#x27;white&#x27;</span>)<br><br>plt.scatter(w_change,b_change)<br>plt.title(<span class="hljs-string">&quot;predict change&quot;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;w_change&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;b_change&quot;</span>)<br>plt.tight_layout()<br>plt.show()<br></code></pre></td></tr></table></figure><img src="/2022/03/20/deep-linear-regression/image-20220320210953425.png" class="" title="image-20220320210953425"><img src="/2022/03/20/deep-linear-regression/image-20220320211003005.png" class="" title="image-20220320211003005">]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
    <category term="deeplearning" scheme="https://github.com/sterne012/sterne012.github.io/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>滴答清单，沉浸式出发！</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/03/16/dida/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/03/16/dida/</id>
    <published>2022-03-16T08:05:31.000Z</published>
    <updated>2022-03-16T08:06:34.101Z</updated>
    
    <content type="html"><![CDATA[<p>强力安利，待我慢慢写完</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;强力安利，待我慢慢写完&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="recommends" scheme="https://github.com/sterne012/sterne012.github.io/tags/recommends/"/>
    
  </entry>
  
  <entry>
    <title>修 网 大 胜 利</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/03/09/fixmysshkey/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/03/09/fixmysshkey/</id>
    <published>2022-03-09T07:32:21.000Z</published>
    <updated>2022-03-09T07:46:29.694Z</updated>
    
    <content type="html"><![CDATA[<p>简而言之，开学之后突然发现上传不了，在3/9即arc5th周年的这天修网1h后终于复活</p><p>原因大概是寒假时候换了梯子</p><p>首先换sshkey</p><p><code>ssh-keygen -t rsa -C &quot;youremail&quot;</code></p><p>在<code>C:\Users\用户名\.ssh</code>下的<code>id_rsa.pub</code>中内容到settings-keys-add deploy key，新建，勾选可修改</p><p>然后git运行</p><p><code>ssh -T git@github.com</code></p><p>这才真正开始修网</p><h3 id="1-ssh-Could-not-resolve-hostname-github-com-Name-or-service-not-known"><a href="#1-ssh-Could-not-resolve-hostname-github-com-Name-or-service-not-known" class="headerlink" title="1.ssh: Could not resolve hostname github.com: Name or service not known"></a>1.<code>ssh: Could not resolve hostname github.com: Name or service not known</code></h3><p>ping github.com发现ping命令用不了，然后去搜添加环境变量（也许是装什么东西的时候不小心删了吧）</p><p>装好ping之后<del>发现请求超时</del>挂梯子连得到github的ip</p><p>用管理员权限运行任意文本编辑软件修改<code>C:\Windows\System32\drivers\etc</code>目录下的hosts，在最后一行添加</p><p><code>xxx.xxx.xxx.xxx github.com</code>（就是ping到ip）</p><p>这算第一步弄完，再次尝试<code>ssh -T git@github.com</code></p><h3 id="2-ssh-connect-to-host-github-com-port-22-Connection-timed-out"><a href="#2-ssh-connect-to-host-github-com-port-22-Connection-timed-out" class="headerlink" title="2.ssh: connect to host github.com port 22: Connection timed out"></a>2.<code>ssh: connect to host github.com port 22: Connection timed out</code></h3><p>在<code>C:\Users\用户名\.ssh</code>下添加<code>config</code>文件（没有后缀名）</p><p>内容：</p><p>Host github.com<br>User git<br>Hostname ssh.github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_rsa<br>Port 443</p><p>（意思应该是使用443端口什么的）</p><p>尝试<code>ssh -T git@github.com</code>，提示有一个修改什么的没截图，yes回车</p><p>然后就行了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;简而言之，开学之后突然发现上传不了，在3/9即arc5th周年的这天修网1h后终于复活&lt;/p&gt;
&lt;p&gt;原因大概是寒假时候换了梯子&lt;/p&gt;
&lt;p&gt;首先换sshkey&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ssh-keygen -t rsa -C &amp;quot;youremail&amp;quot;</summary>
      
    
    
    
    <category term="帮助文档" scheme="https://github.com/sterne012/sterne012.github.io/categories/%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="hexo" scheme="https://github.com/sterne012/sterne012.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>cifar100电脑跑不动啊不中用啊</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/01/17/py-cifar100-train/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/01/17/py-cifar100-train/</id>
    <published>2022-01-17T08:58:39.000Z</published>
    <updated>2022-01-17T09:37:04.799Z</updated>
    
    <content type="html"><![CDATA[<p>速寄了，cpu使用率拉满跑了30min还不到一半</p><p>我不理解代码但我大受震撼</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> layers, optimizers, datasets, Sequential<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> ssl<br>ssl._create_default_https_context = ssl._create_unverified_context<br><span class="hljs-comment"># 忽略ssl认证否则下载数据集报错</span><br><br>os.environ[<span class="hljs-string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-comment"># 用于忽略级别 2 及以下的消息（级别 1 是提示，级别 2 是警告，级别 3 是错误）。</span><br>tf.random.set_seed(<span class="hljs-number">2345</span>)<br><br>conv_layers = [  <span class="hljs-comment"># 5 units: conv+max pooling</span><br>    <span class="hljs-comment"># unit1</span><br>    <span class="hljs-comment"># padding=&quot;same&quot; 输入和输出的图像大小相同</span><br>    layers.Conv2D(<span class="hljs-number">64</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),  <span class="hljs-comment"># 创建一个卷积层</span><br>    layers.Conv2D(<span class="hljs-number">64</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.MaxPool2D(pool_size=[<span class="hljs-number">2</span>, <span class="hljs-number">2</span>], strides=<span class="hljs-number">2</span>, padding=<span class="hljs-string">&quot;same&quot;</span>), <span class="hljs-comment"># max pooling</span><br><br>    <span class="hljs-comment"># unit2</span><br>    layers.Conv2D(<span class="hljs-number">128</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.Conv2D(<span class="hljs-number">128</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.MaxPool2D(pool_size=[<span class="hljs-number">2</span>, <span class="hljs-number">2</span>], strides=<span class="hljs-number">2</span>, padding=<span class="hljs-string">&quot;same&quot;</span>),<br><br>    <span class="hljs-comment"># unit3</span><br>    layers.Conv2D(<span class="hljs-number">256</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.Conv2D(<span class="hljs-number">256</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.MaxPool2D(pool_size=[<span class="hljs-number">2</span>, <span class="hljs-number">2</span>], strides=<span class="hljs-number">2</span>, padding=<span class="hljs-string">&quot;same&quot;</span>),<br><br>    <span class="hljs-comment"># unit4</span><br>    layers.Conv2D(<span class="hljs-number">512</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.Conv2D(<span class="hljs-number">512</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.MaxPool2D(pool_size=[<span class="hljs-number">2</span>, <span class="hljs-number">2</span>], strides=<span class="hljs-number">2</span>, padding=<span class="hljs-string">&quot;same&quot;</span>),<br><br>    <span class="hljs-comment"># unit5</span><br>    layers.Conv2D(<span class="hljs-number">512</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.Conv2D(<span class="hljs-number">512</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.MaxPool2D(pool_size=[<span class="hljs-number">2</span>, <span class="hljs-number">2</span>], strides=<span class="hljs-number">2</span>, padding=<span class="hljs-string">&quot;same&quot;</span>),<br>]<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">preprocess</span>(<span class="hljs-params">x, y</span>):</span><br>    <span class="hljs-comment"># 预处理，x转换到0-1的范围(?)</span><br>    x = tf.cast(x, dtype=tf.float32) / <span class="hljs-number">255.</span><br>    y = tf.cast(y, dtype=tf.int32)<br>    <span class="hljs-keyword">return</span> x, y<br><br><br>(x, y), (x_test, y_test) = datasets.cifar100.load_data()<br>y = tf.squeeze(y, axis=<span class="hljs-number">1</span>)<br>y_test = tf.squeeze(y_test, axis=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(x.shape, y.shape, x_test.shape, y_test.shape)<br><br>train_db = tf.data.Dataset.from_tensor_slices((x, y))<br>train_db = train_db.shuffle(<span class="hljs-number">1000</span>).<span class="hljs-built_in">map</span>(preprocess).batch(<span class="hljs-number">64</span>)<br><br>test_db = tf.data.Dataset.from_tensor_slices((x_test, y_test))<br>test_db = test_db.<span class="hljs-built_in">map</span>(preprocess).batch(<span class="hljs-number">64</span>)<br><br>sample = <span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(train_db))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sample:&#x27;</span>, sample[<span class="hljs-number">0</span>].shape, sample[<span class="hljs-number">1</span>].shape,<br>      tf.reduce_min(sample[<span class="hljs-number">0</span>]), tf.reduce_max(sample[<span class="hljs-number">0</span>]))<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-comment"># Convolution</span><br>    <span class="hljs-comment"># [b, 32, 32, 3] -&gt; [b, 1, 1, 512]</span><br>    conv_net = Sequential(conv_layers)<br>    conv_net.build(input_shape=[<span class="hljs-literal">None</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">3</span>])<br>    <span class="hljs-comment"># x = tf.random.normal([4, 32, 32, 3])</span><br>    <span class="hljs-comment"># out = conv_net(x)</span><br>    <span class="hljs-comment"># print(out.shape)</span><br><br>    <span class="hljs-comment"># Full connection</span><br>    fc_net = Sequential([<br>        layers.Dense(<span class="hljs-number">256</span>, activation=tf.nn.relu),<br>        layers.Dense(<span class="hljs-number">128</span>, activation=tf.nn.relu),<br>        layers.Dense(<span class="hljs-number">100</span>, activation=<span class="hljs-literal">None</span>),<br>    ])<br><br>    conv_net.build(input_shape=[<span class="hljs-literal">None</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">3</span>])<br>    fc_net.build(input_shape=[<span class="hljs-literal">None</span>, <span class="hljs-number">512</span>])<br><br>    <span class="hljs-comment"># 优化器  learning rate=0.0001</span><br>    optimizer = optimizers.Adam(learning_rate=<span class="hljs-number">1e-4</span>)<br><br>    <span class="hljs-comment"># list合并 [a,b]+[c,d]=[a,b,c,d]</span><br>    variables = conv_net.trainable_variables + fc_net.trainable_variables<br><br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>        <span class="hljs-keyword">for</span> step, (x, y) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_db):<br>            <span class="hljs-keyword">with</span> tf.GradientTape() <span class="hljs-keyword">as</span> tape:<br>                out = conv_net(x)<br>                <span class="hljs-comment"># squeeze/flatten =&gt; [b,512]</span><br>                out = tf.reshape(out, [-<span class="hljs-number">1</span>, <span class="hljs-number">512</span>])<br>                <span class="hljs-comment"># [b,512] =&gt; [b,100]</span><br>                logits = fc_net(out)<br>                <span class="hljs-comment"># [b] =&gt; [b,100]</span><br>                y_onehot = tf.one_hot(y, depth=<span class="hljs-number">100</span>)<br>                <span class="hljs-comment"># compute loss</span><br>                loss = tf.keras.losses.categorical_crossentropy(y_onehot, logits, from_logits=<span class="hljs-literal">True</span>)<br>                <span class="hljs-comment"># avg loss</span><br>                loss = tf.reduce_mean(loss)<br><br>            grads = tape.gradient(loss, variables)<br>            optimizer.apply_gradients(<span class="hljs-built_in">zip</span>(grads, variables))<br><br>            <span class="hljs-keyword">if</span> step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(epoch, step, <span class="hljs-string">&#x27;loss:&#x27;</span>, <span class="hljs-built_in">float</span>(loss))<br><br>        <span class="hljs-comment"># test</span><br>        total_num = <span class="hljs-number">0</span><br>        total_correct = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> test_db:<br>            out = conv_net(x)<br>            out = tf.reshape(out, [-<span class="hljs-number">1</span>, <span class="hljs-number">512</span>])<br>            logits = fc_net(out)<br>            prob = tf.nn.softmax(logits, axis=<span class="hljs-number">1</span>)<br>            pred = tf.argmax(prob, axis=<span class="hljs-number">1</span>)<br>            pred = tf.cast(pred, dtype=tf.int32)<br><br>            correct = tf.cast(tf.equal(pred, y), dtype=tf.int32)<br>            correct = tf.reduce_sum(correct)<br><br>            total_num += x.shape[<span class="hljs-number">0</span>]<br>            total_correct += <span class="hljs-built_in">int</span>(correct)<br><br>        acc = total_correct / total_num<br>        <span class="hljs-built_in">print</span>(epoch, <span class="hljs-string">&#x27;acc:&#x27;</span>, acc)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;速寄了，cpu使用率拉满跑了30min还不到一半&lt;/p&gt;
&lt;p&gt;我不理解代码但我大受震撼&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>番组汇总(´▽｀)ノ♪</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/01/15/ACG/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/01/15/ACG/</id>
    <published>2022-01-15T03:13:30.000Z</published>
    <updated>2022-01-17T09:38:26.181Z</updated>
    
    <content type="html"><![CDATA[<p>大致是所有看过的番了orz</p><p>随缘写写漫评</p><p>除续作外，其他均按照时间顺序从近到远，但是没有记年份</p><p>另，都来看看爱看动漫的泛哥哥吧 诶嘿酱诶嘿诶嘿&gt;&lt;<a href="https://space.bilibili.com/63231/">https://space.bilibili.com/63231/</a></p><p>爱好/标签方向：NGNL 白毛 泽野 松冈 芳文跳  泛式狂喜</p><p>后期会给番们补一些图片ww敬请期待</p><hr><ol><li><p><strong>更衣人偶坠入爱河</strong></p><p>看了一集然后迫不及待去把漫画看到50话了，你这漫画怎么全是恋爱漫画啊.jpg</p><p>（指白圣女与黑牧师、辉夜，这个简称什么？）</p></li><li><p><strong>古见同学有交流障碍症</strong></p><p>肉眼可见的动画组厨力，然后古贺葵的演绎真的很不错（虽然基本没啥台词）</p><p>最震撼的是第一集那个黑板的拉镜，就那一点足够我一直追了</p></li><li><p><strong>宿命回响</strong></p><p>没看完，也真就应该没看完，绷不住了</p></li><li><p><strong>世界最强暗杀者转生成异世界贵族</strong></p><p>彳亍，十月周指活</p><p>十月真的番荒但好在快考试了吧，再就86一直快到更完我才找着资源</p></li><li><p><strong>未来日记</strong></p><p>由乃.jpg</p><p>emmmmmmmm我不好说，题材是大逃杀，不过不建议带脑子看，那个图太出名了</p></li><li><p><strong>异世界迷宫黑心企业</strong></p><p>后来太过无聊然后发现然后一口气差不多看完的，观感1-3集最佳，后边有点扯淡，本来以为还会走男主吃瘪的路的，没想到还能再穿越一次</p></li><li><p><strong>魔法少女小圆</strong></p><p>基本猜到剧情了，并且三集定律先前有所耳闻，补番体验不算好，和命运石之门相比都是神坛常客但个人更偏向石头门了</p></li><li><p><strong>见面五秒开始战斗</strong></p><p>不错的智斗片，但是确实穷，七月周指活了差不多</p></li><li><p><strong>侦探已死</strong></p><p>惊叹于自己怎么看完的，又是冲国人均白毛控吗</p></li><li><p><strong>女友成双</strong></p><p>没看完，自己的价值观在不断被霓虹人洗礼</p></li><li><p><strong>白砂的水族馆</strong></p><p>没看完，可能是因为没什么很戳的地方或者太过平淡了？喜欢key社可以试试</p></li><li><p><strong>Steins;Gate</strong></p><p>绝对的神作，也是21年最强推的一部，十年前的神作放在今天也是神作</p><p>不过并不后悔没早点看什么的hh万一中二的时候看了恐酿成大祸</p><p>但也许会有很奇妙的体验吧。。。？</p><p>追完当时的评价：（大龄中二病发作）</p><p>​        “特に意味はない”<br>　　<br>　　真的不是我说男主不中二这番根本不成立<br>　　它是那么不可思议的合理……而且确实我能猜到后面剧情，但是这真结局谁能想得到<br>　　前面12集确实算慢热，但是就也有剧情进展但是在那种很小的视角设定的感觉之中就没什么大用<br>　　没什么大用个锤子<br>　　这也是很有魅力的一个地方<br>　　大学生，和前沿科技之间很有限的联系着<br>　　<br>　　本来想写不太懂嘟嘟噜……<br>　　是，这里面最有日常感的角色啊<br>　　哪一个都不能缺，缺了都不合理<br>　　太过完美了<br>　　<br>　　一切都是命运石之门的选择<br>　　El Psy Congroo</p></li><li><p><strong>Steins;Gate 负荷领域的既视感</strong></p></li><li><p><strong>Steins;Gate0</strong></p></li><li><p><strong>吹响吧！上低音号</strong></p></li><li><p><strong>吹响吧！上低音号第二季</strong></p></li><li><p><strong>吹响吧！上低音号 利兹与青鸟</strong></p></li><li><p><strong>吹响吧！上低音号 誓言的终章</strong></p></li><li><p><strong>打了300年的史莱姆，不知不觉练到满级</strong></p></li><li><p><strong>青梅竹马绝对不会输的恋爱喜剧</strong></p></li><li><p><strong>狂赌之渊</strong></p><p>好康</p></li><li><p><strong>狂赌之渊第二季</strong></p><p>真好康，补了血赚，借一句话说就我也想看梦子和赤木打麻将</p></li><li><p><strong>#86-不存在的战区-</strong></p><p>好看！白毛+泽野它太香了</p><p>记得评论区说，很难想象一个女作者会那么热爱高达和吊带袜</p><p>不过确实我看机战就挺少的</p></li><li><p><strong>#86-不存在的战区- 2</strong></p></li><li><p><strong>Vivy-Fluorite Eye’s Song-</strong></p></li><li><p><strong>赛马娘</strong></p></li><li><p><strong>赛马娘 第二季</strong></p><p><a href="https://www.bilibili.com/video/BV1DZ4y1D7xQ">https://www.bilibili.com/video/BV1DZ4y1D7xQ</a></p><p>脑子里全是这个了，回不去了</p><p>2021新番最力荐，和第一季关联不大，直接看！</p><p>不好看我请你喝奶茶！</p></li><li><p><strong>回复术士的重启人生</strong></p></li><li><p><strong>进击的巨人</strong></p></li><li><p><strong>进击的巨人第二季</strong></p></li><li><p><strong>进击的巨人第三季</strong></p></li><li><p><strong>进击的巨人最终季</strong></p><p><del>这就不得不提一个hxd当时疯狂向我安利然后我一个寒假看完1-3之后听说完结突然蚌不住了这件事了</del></p><p>静待22年1月mappa救救巨人</p><p>塔塔开！</p></li><li><p><strong>进击的巨人OAD</strong></p><p>真的好喜欢这里面那首歌</p></li><li><p><strong>工作细胞</strong></p></li><li><p><strong>工作细胞 第二季</strong></p></li><li><p><strong>工作细胞BLACK</strong></p></li><li><p><strong>堀与宫村</strong></p><p>之前看过漫画，但是被b站过度宣传/宣传语整的印象不是特别好。。</p><p>客观来讲还是不错的</p></li><li><p><strong>无限滑板SK8</strong></p></li><li><p><strong>无职转生<del>到了异世界就拿出真本事</del></strong></p></li><li><p><strong>无职转生<del>到了异世界就拿出真本事</del>2</strong></p></li><li><p><strong>弱势角色友崎君</strong></p></li><li><p><strong>在魔王城说晚安</strong></p></li><li><p><strong>摇曳露营Δ</strong></p><p>wwwwwww第2本命</p><p>20年冬指活</p></li><li><p><strong>摇曳露营Δ 2</strong></p></li><li><p><strong>无能力者娜娜</strong></p><p>后来补了漫画，但与我心中对它的期待不太相同的番</p><p>自高中时候就想看一部，讲杀手的番，这算是了却当时一个心愿</p><p>虽穷但观感不差，除去有些解释略微有点牵强外</p></li><li><p><strong>魔女之旅</strong></p></li><li><p><strong>成神之日</strong></p></li><li><p><strong>安达与岛村</strong></p></li><li><p><strong>总之就是非常可爱</strong></p><p><del>总之就是非常穷</del></p><p>纯狗粮，观感可以，但是看完总感觉 有点 有点。。</p><p>空虚呢hhh</p></li><li><p><strong>文豪野犬1</strong></p></li><li><p><strong>文豪野犬2</strong></p></li><li><p><strong>文豪野犬剧场版</strong></p></li><li><p><strong>文豪野犬3</strong></p><p>两个字评价：王道</p></li><li><p><strong>我的青春恋爱物语果然有问题。</strong></p></li><li><p><strong>我的青春恋爱物语果然有问题。续</strong></p></li><li><p><strong>我的青春恋爱物语果然有问题。完</strong></p></li><li><p><strong>公主连结Re:Dive</strong></p></li><li><p><strong>公主连结Re:Dive 2</strong></p><p>kono PULICONE wa KONOSUBA no 精 神 续 作 nanoda！</p><p>我也玩游戏的，猫猫好棒，食我new year burst</p></li><li><p><strong>转生成为了只有乙女游戏破灭flag的邪恶大小姐</strong></p></li><li><p><strong>转生成为了只有乙女游戏破灭flag的邪恶大小姐 第二季</strong></p></li><li><p><strong>路人女主的养成方法</strong></p></li><li><p><strong>路人女主的养成方法 b</strong></p><img src="/2022/01/15/ACG/image-20220116120547896.png" class="" title="image-20220116120547896">.jpg 败犬之犬了属于是</li><li><p><strong>路人女主的养成方法 fine</strong></p></li><li><p><strong>异度侵入 ID：INVADED</strong></p></li><li><p><strong>邻家索菲</strong></p></li><li><p><strong>虚构推理</strong></p><p>说实话一季从3-12全在讲一个案件我是不认可的。。。什么，第二季，那没事了，看！</p></li><li><p><strong>虚构推理 2</strong> 2022/1</p></li><li><p><strong>Nekopara</strong></p></li><li><p><strong>青春猪头少年不会梦到兔女郎学姐</strong></p></li><li><p><strong>青春猪头少年不会梦到兔女郎学姐 剧场版</strong></p></li><li><p><strong>鬼灭之刃</strong></p></li><li><p><strong>鬼灭之刃 无限列车篇 剧场版</strong> 2021/12</p></li><li><p><strong>鬼灭之刃 无限列车篇(再 放 送)</strong></p></li><li><p><strong>恋爱小行星</strong></p></li><li><p><strong>理科生落入情网，故尝试证明</strong></p></li><li><p><strong>这个勇者明明超强却过分慎重</strong></p></li><li><p><strong>喜欢本大爷的竟然就你一个</strong></p></li><li><p><strong>FGO绝对魔兽战线</strong></p></li><li><p><strong>碧蓝航线</strong></p></li><li><p><strong>碧蓝航线 微速前进</strong></p><p>一集三分钟不过瘾啊！多来点！</p></li><li><p><strong>埃尔梅罗二世事件簿</strong></p></li><li><p><strong>辉夜大小姐想让我告白？～天才们的恋爱头脑战～</strong></p></li><li><p><strong>辉夜大小姐想让我告白？～天才们的恋爱头脑战～2</strong></p></li><li><p><strong>女高中生的虚度日常</strong></p></li><li><p><strong>我们无法一起学习1</strong></p></li><li><p><strong>我们无法一起学习2</strong></p></li><li><p><strong>实况主的逃脱游戏</strong></p></li><li><p><strong>重来吧！魔王大人</strong></p></li><li><p><strong>平凡职业造就世界最强</strong></p></li><li><p><strong>少女前线人形小剧场</strong></p></li><li><p><strong>少女前线人形小剧场第二季</strong></p></li><li><p><strong>女武神的餐桌</strong></p></li><li><p><strong>在地下城寻求邂逅是否搞错了什么1</strong></p></li><li><p><strong>在地下城寻求邂逅是否搞错了什么2</strong></p></li><li><p><strong>在地下城寻求邂逅是否搞错了什么3</strong></p></li><li><p><strong>地下城剧场版</strong></p></li><li><p><strong>某科学的一方通行</strong></p></li><li><p><strong>境界的彼方</strong></p></li><li><p><strong>神探夏洛克1</strong></p></li><li><p><strong>神探夏洛克2</strong></p></li><li><p><strong>神探夏洛克3</strong></p><p><del>完了这么一说这个不也可以泛式狂喜吗</del></p></li><li><p><strong>异世界的四重奏</strong></p><p>re0&amp;OVERLORD&amp;KONOSUBA&amp;幼女战记</p></li><li><p><strong>CAROLE&amp;TUESDAY</strong></p></li><li><p><strong>贤者之孙</strong></p></li><li><p><strong>天使降临到我身边</strong></p></li><li><p><strong>非自然死亡</strong></p><p>唯一看完的一部日剧，但具体不太记得了，想来就是为什么我感觉也有泛式狂喜的要素啊</p></li><li><p><strong>黑执事</strong></p></li><li><p><strong>关于我转生变成史莱姆这件事</strong></p></li><li><p><strong>关于我转生变成史莱姆这件事 第二季</strong></p></li><li><p><strong>转生史莱姆日记</strong></p></li><li><p><strong>冰菓</strong></p></li><li><p><strong>杀戮天使Angels of Death</strong></p></li><li><p><strong>Daring in the FrankXX</strong></p></li><li><p><strong>龙王的工作！</strong></p></li><li><p><strong>紫罗兰永恒花园</strong></p></li><li><p><strong>紫罗兰永恒花园外传</strong></p></li><li><p><strong>凹凸世界1</strong></p></li><li><p><strong>凹凸世界2</strong></p></li><li><p><strong>凹凸世界3</strong></p></li><li><p><strong>NEW GAME！</strong></p></li><li><p><strong>NEW GAME！！</strong></p></li><li><p><strong>欢迎来到实力至上主义的教室</strong></p></li><li><p><strong>欢迎来到实力至上主义的教室 轻小说1-11.5</strong></p><p>唯一完整看完并且全册（台版）的轻小说</p></li><li><p><strong>欢迎来到实力至上主义的教室 轻小说 二年级1-4</strong></p></li><li><p><strong>Re：CREATORS</strong></p></li><li><p><strong>OVERLORD</strong></p></li><li><p><strong>OVERLORDⅡ</strong></p></li><li><p><strong>OVERLORDⅢ</strong></p></li><li><p><strong>埃罗芒阿老师</strong></p></li><li><p><strong>时钟机关之星</strong></p></li><li><p><strong>小林家的龙女仆</strong></p></li><li><p><strong>小林家的龙女仆S</strong></p></li><li><p><strong>伽百璃的堕落</strong></p></li><li><p><strong>为美好的世界献上祝福！1</strong></p></li><li><p><strong>为美好的世界献上祝福！2</strong></p><p>异世界日常天花板，独具一格的搞笑风格和风靡一时的智障女神阿库娅，不看这还能叫看过异世界日常吗</p></li><li><p><strong>为美好的世界献上祝福！红传说</strong></p></li><li><p><strong>在下坂本有何贵干</strong></p></li><li><p><strong>请问您今天要来点兔子吗？</strong></p><p>还没看完，2022年1月的一天才想起来这是芳文社！超，让我补完</p></li><li><p><strong>Fate/ZERO</strong></p><p>FZ为什么是神 在讨论这个问题之前…</p></li><li><p><strong>Fate/Stay Night UBW</strong></p></li><li><p><strong>Fate/Grand Order</strong></p></li><li><p><strong>Fate/Apocrypha</strong></p></li><li><p><strong>你的名字</strong></p></li><li><p><strong>少女编号</strong></p></li><li><p><strong>食戟之灵1</strong></p></li><li><p><strong>食戟之灵2</strong></p></li><li><p><strong>Rewrite1</strong></p></li><li><p><strong>魔装学园H×H</strong></p></li><li><p><strong>RE：从零开始的异世界生活</strong></p></li><li><p><strong>RE：从零开始的异世界生活2</strong></p></li><li><p><strong>RE：从零开始的异世界生活 雪之回忆</strong></p></li><li><p><strong>RE：从零开始的异世界生活2 后半</strong></p></li><li><p><strong>星之梦</strong></p></li><li><p><strong>弹丸论破1</strong></p></li><li><p><strong>线上游戏的老婆不可能是女生</strong></p></li><li><p><strong>苍之彼方的四重奏</strong></p></li><li><p><strong>樱花庄的宠物女孩</strong></p></li><li><p><strong>春&amp;夏推理事件簿</strong></p></li><li><p><strong>重装武器</strong></p></li><li><p><strong>東京喰種</strong></p></li><li><p><strong>终结的炽天使</strong></p></li><li><p><strong>绯弹的亚里亚</strong></p></li><li><p><strong>绯弹的亚里亚AA</strong></p></li><li><p><strong>约会大作战1</strong></p></li><li><p><strong>约会大作战2</strong></p></li><li><p><strong>约会大作战 万由里的裁决</strong></p></li><li><p><strong>约会大作战3</strong></p></li><li><p><strong>约战狂三外传</strong></p></li><li><p><strong>刀剑神域1</strong></p></li><li><p><strong>刀剑神域2</strong></p></li><li><p><strong>刀剑神域OS 序列之争</strong></p></li><li><p><strong>刀剑神域3 Alicization</strong></p></li><li><p><strong>刀剑神域3 Alicization2</strong></p></li><li><p><strong>刀剑神域3 Alicization3</strong></p></li><li><p><strong>绝对双刃</strong></p><p>文艺复兴作，据说当年还很火</p></li><li><p><strong>罪恶王冠</strong></p><p>从这时候开始喜欢泽野的歌，到巨人，铁甲城，recreators，86，好耶</p></li><li><p><strong>中二病也要谈恋爱</strong></p></li><li><p><strong>干物妹！小埋</strong></p></li><li><p><strong>干物妹！小埋R</strong></p></li><li><p><strong>落第骑士英雄谭</strong></p></li><li><p><strong>四月是你的谎言</strong></p></li><li><p><strong>Charlotte</strong></p></li><li><p><strong>斩！赤红之瞳</strong></p></li><li><p><strong>缘之空</strong></p></li><li><p><strong>黑岩射手</strong></p></li><li><p><strong>NO GAME NO LIFE</strong></p><p><strong>入宅番，心中无可争议的第一名，安利给看到这里的你。</strong></p></li><li><p><strong>NO GANE NO LIFE 0</strong></p></li><li><p><strong>某科学的超电磁炮</strong></p></li><li><p><strong>某科学的超电磁炮S</strong></p></li><li><p><strong>某科学的超电磁炮T</strong></p></li><li><p><strong>魔法禁书目录1</strong></p></li><li><p><strong>魔法禁书目录2</strong></p></li><li><p><strong>蔷薇少女1</strong></p></li><li><p><strong>蔷薇少女2</strong></p></li><li><p><strong>蔷薇少女3</strong></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大致是所有看过的番了orz&lt;/p&gt;
&lt;p&gt;随缘写写漫评&lt;/p&gt;
&lt;p&gt;除续作外，其他均按照时间顺序从近到远，但是没有记年份&lt;/p&gt;
&lt;p&gt;另，都来看看爱看动漫的泛哥哥吧 诶嘿酱诶嘿诶嘿&amp;gt;&amp;lt;&lt;a href=&quot;https://space.bilibili.com/6</summary>
      
    
    
    
    
    <category term="games" scheme="https://github.com/sterne012/sterne012.github.io/tags/games/"/>
    
  </entry>
  
  <entry>
    <title>Hacking to The CS Homework</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/01/05/DSpta/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/01/05/DSpta/</id>
    <published>2022-01-05T07:08:19.000Z</published>
    <updated>2022-01-05T11:01:02.416Z</updated>
    
    <content type="html"><![CDATA[<p> 淦，错好多</p><blockquote><p>稀疏矩阵采用三元组存储的时候，一般需要一个行逻辑链接的顺序表，用以指出每一行的第一个非零元素在三元组中的位置。用这个顺序表的主要目的是为了___。</p><p>(2分)</p><p>A.节省存储空间</p><p>B.更清晰表示每行元素所在位置</p><p>C.更清晰表示每列元素所在位置</p><p>D.加快算法运行效率</p></blockquote><p><strong>指出每一行的第一个非零元素在三元组中的位置</strong></p><p>这个不是矩阵转置用的那个吗 加快运行D</p><p>（当时选了B）（甚至我记得以前还选过A）</p><blockquote><p>Given the result of the 2nd run of a sorting method as { 11, 12, 13, 7, 8, 9, 23, 4, 5 }. Then among the following methods, this method has to be:</p><p>(1分)</p><p>A.bubble sort</p><p>B.selection sort</p><p>C.insertion sort</p><p>D.merge sort</p></blockquote><p>（错选D）merge是归并吧？</p><blockquote><p>To sort 10 elements by simple selection sort, the worst-case number of swaps is:</p><p>(1分)</p><p>A.9</p><p>B.36</p><p>C.45</p><p>D.100</p></blockquote><p>（错选C）</p><blockquote><p>将序列{ 2, 12, 16, 88, 5, 10, 34 }排序。若前2趟排序的结果如下：</p><ul><li>第1趟排序后：2, 12, 16, 10, 5, 34, 88</li><li>第2趟排序后：2, 5, 10, 12, 16, 34, 88</li></ul><p>则可能的排序算法是：</p><p>(1分)</p><p>A.冒泡排序</p><p>B.快速排序</p><p>C.归并排序</p><p>D.插入排序</p></blockquote><p>（错选A）完了这不是冒泡？</p><blockquote><p>数据序列{ 3, 1, 4, 11, 9, 16, 7, 28 }只能是下列哪种排序算法的两趟排序结果？</p><p>(1分)</p><p>A.冒泡排序</p><p>B.快速排序</p><p>C.插入排序</p><p>D.堆排序</p></blockquote><p>（错选D）完了</p><blockquote><p>无向连通图边数一定大于顶点个数减1。</p><p>(1分)</p><p>T</p><p>F</p></blockquote><p>（错选T）寄</p><blockquote><p>如果从有向图 <em>G</em> 的每一点均能通过深度优先搜索遍历到所有其它顶点，那么该图一定不存在拓扑序列。</p><p>(2分)</p><p>T</p><p>F</p></blockquote><p>（错选F）啊啊啊啊</p><blockquote><p>在用邻接表表示有<em>N</em>个结点<em>E</em>条边的图时，深度优先遍历算法的时间复杂度为：</p><p>(2分)</p><p>A.<em>O</em>(<em>N</em>)</p><p>B.</p><p>O*(<em>N</em>+<em>E</em>)</p><p>C.</p><p><em>O</em>(<em>N</em>2)</p><p>D.<em>O</em>(<em>N</em>2×<em>E</em>)</p></blockquote><p>（错选C）</p><blockquote><p>试利用Floyed算法，求下图所示有向图的各对顶点之间的最短路径。下列选项哪个给出了正确的最短路径长度矩阵和最短路径矩阵？</p><img src="/2022/01/05/DSpta/51cc76b9-d3b6-4ec6-bdf7-cfb542755b8b.JPG" class="" title="51cc76b9-d3b6-4ec6-bdf7-cfb542755b8b"><img src="/2022/01/05/DSpta/image-20220105190051921.png" class="" title="image-20220105190051921"></blockquote><p>（错选D）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 淦，错好多&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;稀疏矩阵采用三元组存储的时候，一般需要一个行逻辑链接的顺序表，用以指出每一行的第一个非零元素在三元组中的位置。用这个顺序表的主要目的是为了___。&lt;/p&gt;
&lt;p&gt;(2分)&lt;/p&gt;
&lt;p&gt;A.节省存储空间&lt;/p&gt;
&lt;p&gt;B</summary>
      
    
    
    
    
    <category term="c" scheme="https://github.com/sterne012/sterne012.github.io/tags/c/"/>
    
    <category term="review" scheme="https://github.com/sterne012/sterne012.github.io/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>Java</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2021/12/27/Java/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2021/12/27/Java/</id>
    <published>2021-12-27T12:49:14.000Z</published>
    <updated>2021-12-27T12:49:47.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自qt以来见到了更强-菜-的做界面语言"><a href="#自qt以来见到了更强-菜-的做界面语言" class="headerlink" title="自qt以来见到了更强(菜)的做界面语言!"></a>自qt以来见到了更强(菜)的做界面语言!</h1><h3 id="首先记得写各种变量并且统一加private"><a href="#首先记得写各种变量并且统一加private" class="headerlink" title="首先记得写各种变量并且统一加private"></a>首先记得写各种变量并且统一加private</h3><h3 id="然后把这些东西拍在构造函数开头"><a href="#然后把这些东西拍在构造函数开头" class="headerlink" title="然后把这些东西拍在构造函数开头:"></a>然后把这些东西拍在构造函数开头:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">super</span>(<span class="hljs-string">&quot;title&quot;</span>);<br>      <span class="hljs-keyword">this</span>.setSize(<span class="hljs-number">800</span>,<span class="hljs-number">300</span>);<span class="hljs-comment">//大小</span><br>      <span class="hljs-keyword">this</span>.setDefaultCloseOperation();<span class="hljs-comment">//按退出关闭，数据库连接的关闭见javaDB</span><br>      <span class="hljs-keyword">this</span>.setLocationRelativeTo(<span class="hljs-keyword">null</span>);<span class="hljs-comment">//设置位置居中</span><br>      <span class="hljs-keyword">this</span>.setLayout(<span class="hljs-keyword">new</span> xxxLayout());<span class="hljs-comment">//你想要的布局</span><br>      <span class="hljs-keyword">this</span>.setVisible(<span class="hljs-keyword">true</span>);<span class="hljs-comment">//可见，写在构造函数最后一行</span><br></code></pre></td></tr></table></figure><h3 id="为JPanel加小标题："><a href="#为JPanel加小标题：" class="headerlink" title="为JPanel加小标题："></a>为JPanel加小标题：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Border titleBorder = BorderFactory.createTitledBorder(<span class="hljs-string">&quot;数据操作&quot;</span>);<br>panel_operate.setBorder(titleBorder);<br></code></pre></td></tr></table></figure><h3 id="int-String转换"><a href="#int-String转换" class="headerlink" title="int/String转换:"></a>int/String转换:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer.parseInt(String s)<br>edge.toString()<span class="hljs-comment">//某个类中重写的toString函数</span><br></code></pre></td></tr></table></figure><h3 id="拆文件中字符串"><a href="#拆文件中字符串" class="headerlink" title="拆文件中字符串:"></a>拆文件中字符串:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String arr[<span class="hljs-number">4</span>],s=<span class="hljs-string">&quot;11 45 14 1919810&quot;</span>;<br>arr=s.spilt(<span class="hljs-string">&quot; &quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="对话框"><a href="#对话框" class="headerlink" title="对话框:"></a>对话框:</h3><p>消息对话框</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">JOptionPane.showMessageDialog(<span class="hljs-keyword">this</span>(填一个组件),<span class="hljs-string">&quot;主体显示的内容&quot;</span>);<br>JOptionPane.showMessageDialog(<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;neirong&quot;</span>,<span class="hljs-string">&quot;haoye&quot;</span>, JOptionPane.INFORMATION_MESSAGE);<span class="hljs-comment">//图标一个叹号,默认的</span><br></code></pre></td></tr></table></figure><p><code>JOptionPane.INFORMATION_MESSAGE</code>:</p><img src="/2021/12/27/Java/image-20211208182903152.png" class="" title="image-20211208182903152"><p><code>JOptionPane.PLAIN_MESSAGE</code>:</p><img src="/2021/12/27/Java/image-20211208182945771.png" class="" title="image-20211208182945771"><p><code>JOptionPane.ERROR_MESSAGE</code>:</p><img src="/2021/12/27/Java/image-20211208183021788.png" class="" title="image-20211208183021788"><p><code>JOptionPane.WARNING_MESSAGE:</code></p><img src="/2021/12/27/Java/image-20211208183101003.png" class="" title="image-20211208183101003"><p><code>JOptionPane.QUESTION_MESSAGE</code>: 诶 这个挺可爱的</p><img src="/2021/12/27/Java/image-20211208183142876.png" class="" title="image-20211208183142876"><h3 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h3><h4 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h4><h4 id="Jcomponent"><a href="#Jcomponent" class="headerlink" title="Jcomponent"></a>Jcomponent</h4><h4 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h4><h4 id="JFrame"><a href="#JFrame" class="headerlink" title="JFrame"></a>JFrame</h4><p>最好使用<code>this.getContentPane().add()</code>添加组件</p><h4 id="JPanel"><a href="#JPanel" class="headerlink" title="JPanel"></a>JPanel</h4><h4 id="JDialog"><a href="#JDialog" class="headerlink" title="JDialog"></a>JDialog</h4><h4 id="JLabel"><a href="#JLabel" class="headerlink" title="JLabel"></a>JLabel</h4><p>一般就是显示一行文本(idea里面中文会乱码注意)</p><h4 id="JTextField"><a href="#JTextField" class="headerlink" title="JTextField"></a>JTextField</h4><p>一个文本输入区,构造函数的参数设置输入区宽度（如果不写就只有一点点大）</p><h4 id="JTextArea"><a href="#JTextArea" class="headerlink" title="JTextArea"></a>JTextArea</h4><h4 id="JButton"><a href="#JButton" class="headerlink" title="JButton"></a>JButton</h4><p>记得<code>button.addActionListener(this)</code></p><h4 id="JCheckBox"><a href="#JCheckBox" class="headerlink" title="JCheckBox"></a>JCheckBox</h4><p>复选按钮</p><h4 id="JRadioButton"><a href="#JRadioButton" class="headerlink" title="JRadioButton"></a>JRadioButton</h4><p>单选按钮</p><h4 id="JButtonGroup"><a href="#JButtonGroup" class="headerlink" title="JButtonGroup"></a>JButtonGroup</h4><p>一组按钮才能实现单选</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ButtonGroup bg=<span class="hljs-keyword">new</span> ButtonGroup();<br>bg.add(rb_male=<span class="hljs-keyword">new</span> JRadioButton(<span class="hljs-string">&quot;男&quot;</span>));<br>bg.add(rb_female=<span class="hljs-keyword">new</span> JRadioButton(<span class="hljs-string">&quot;女&quot;</span>));<br>rb_male.setSelected(<span class="hljs-keyword">true</span>);<br></code></pre></td></tr></table></figure><h4 id="JList-amp-DefaultListModel"><a href="#JList-amp-DefaultListModel" class="headerlink" title="JList&amp;DefaultListModel"></a>JList&amp;DefaultListModel</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">model=<span class="hljs-keyword">new</span> DefaultListModel&lt;&gt;();<br>list=<span class="hljs-keyword">new</span> JList&lt;&gt;(<span class="hljs-keyword">this</span>.model);<br></code></pre></td></tr></table></figure><p>其他方法在课本P165 常用</p><h4 id="JTable"><a href="#JTable" class="headerlink" title="JTable"></a>JTable</h4><p>太智障了，问就智障</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">JTable jt;<br>DefaultTableModel model;<br><br>model=<span class="hljs-keyword">new</span> DefaultTableModel(title,<span class="hljs-number">20</span>);<br>jt=<span class="hljs-keyword">new</span> JTable(model);<br><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">(String name)</span></span>&#123;<br>        String sql=<span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">while</span>(model.getRowCount()!=<span class="hljs-number">0</span>) model.removeRow(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(name==<span class="hljs-keyword">null</span>)&#123;<br>            sql=<span class="hljs-string">&quot;SELECT * FROM mydb.goods&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            sql= <span class="hljs-string">&quot;SELECT * FROM mydb.goods WHERE type LIKE &#x27;%&quot;</span> +name+<span class="hljs-string">&quot;%&#x27;&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            st= stmt.executeQuery(sql);<br>            <span class="hljs-keyword">while</span> (st.next())&#123;<br>                String[] s=<span class="hljs-keyword">new</span> String[]&#123;st.getString(<span class="hljs-number">1</span>),st.getString(<span class="hljs-number">2</span>),<br>                        st.getString(<span class="hljs-number">3</span>),st.getString(<span class="hljs-number">4</span>),<br>                        st.getString(<span class="hljs-number">5</span>)&#125;;<br>                model.addRow(s);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="JComboBox"><a href="#JComboBox" class="headerlink" title="JComboBox"></a>JComboBox</h4><p>组合框</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">JComboBox jcbox=<span class="hljs-keyword">new</span> JComboBox&lt;&gt;(<span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;品牌&quot;</span>,<span class="hljs-string">&quot;型号&quot;</span>,<span class="hljs-string">&quot;颜色&quot;</span>,<span class="hljs-string">&quot;马力&quot;</span>&#125;);<br><span class="hljs-keyword">int</span> val=jcbox.getSelectedIndex();<br></code></pre></td></tr></table></figure><p>布局类:</p><h4 id="BorderLayout"><a href="#BorderLayout" class="headerlink" title="BorderLayout"></a>BorderLayout</h4><p>边布局,有东西南北的</p><h4 id="FlowLayout"><a href="#FlowLayout" class="headerlink" title="FlowLayout"></a>FlowLayout</h4><p>流布局,一直往后加</p><h4 id="GridLayout"><a href="#GridLayout" class="headerlink" title="GridLayout"></a>GridLayout</h4><p>网格布局,两个参数rows行 cols列</p><h3 id="中间容器"><a href="#中间容器" class="headerlink" title="中间容器:"></a>中间容器:</h3><h4 id="JScrollPane"><a href="#JScrollPane" class="headerlink" title="JScrollPane"></a>JScrollPane</h4><p>带有滚动条的视图容器,为其他组件提供可滚动视图,只要组件内容超过视图大小就会自动显示水平或垂直滚动条</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">panel1.add(<span class="hljs-keyword">new</span> JScrollPane(list));<br></code></pre></td></tr></table></figure><h4 id="JSpiltPane"><a href="#JSpiltPane" class="headerlink" title="JSpiltPane"></a>JSpiltPane</h4><p>分割窗格</p><h1 id="java-sql-server从入门到完全放弃到mySQL真香"><a href="#java-sql-server从入门到完全放弃到mySQL真香" class="headerlink" title="java-sql server从入门到完全放弃到mySQL真香"></a>java-sql server从入门到完全放弃到mySQL真香</h1><ol><li><p>DriverManager驱动管理</p><ul><li><p>负责注册驱动 static void registerDriver(Driver driver)</p><p>Class.forName(“com.mysql.jdbc.Driver”);//加载对应包中的Driver类，使用registerDriver方法</p><p>但由于jdbc包已经自动注册了驱动所以可以不写，并且会有如下报错：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">Loading class `com.mysql.jdbc.Drive<span class="hljs-string">r&#x27;. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver&#x27;</span>. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.<br></code></pre></td></tr></table></figure></li><li><p>获取数据库连接 static Connection getConnection(String url,String user,String password)</p><p>url:指定连接路径jdbc:mysql://localhost:3306(ip地址:端口号)/MyDB(数据库名)</p><p>在hexo中这个还是有点熟悉</p></li></ul></li><li><p>Connection</p><ul><li><p>获取执行sql的对象</p><p>CreateStatement() 创建Statement对象，用于将sql语句发送到数据库</p><p>prepareStatement(String sql)</p></li><li><p>管理事务</p><p>开启事务 setAutoCommit(boolean autoCommit) 参数false即关闭自动提交，开启事务</p><p>提交事务 commit()</p><p>回滚事务 rollback()</p></li></ul></li><li><p>Statement 执行静态sql并返回结果对象</p><ul><li><p>执行sql</p><p>boolean execute(String sql) 执行任意语句 true：第一个结果是ResultSet；false：更新计数或没有结果（？）</p><p>int executeUpdate(String sql) 执行DML (insert update delete) &amp; DDL(create alter drop) (不常用)；返回值：影响的行数；DDL语句没有返回结果（返回0）</p><p>Result executeQuery(String sql) 执行DQL(select)</p></li></ul></li><li><p>ResultSet 结果集对象，用类似游标读取</p><ul><li>boolean next():游标向下移一行（默认在第0行，向下一行之后才能获取表中数据）（若此行为空，返回false）</li><li>以及类似next的 详见p321</li><li>getxxx(参数):获取数据 （getString 获取String类型数据）；参数：int（table列号，<strong>从1开始</strong>）or String（table列名）</li></ul></li><li><p>PreparedStatement(Statement的子类) 执行动态（预编译）sql并返回</p></li></ol><p>导包：<code>C:\Program Files (x86)\MySQL\Connector J 8.0</code></p><p>idea：复制这个文件到目录下，右键lib包 add as library</p><p>eclipse：<a href="https://www.cnblogs.com/fnng/archive/2011/07/18/2110023.html">https://www.cnblogs.com/fnng/archive/2011/07/18/2110023.html</a></p><p>工程文件夹右键-&gt;build path-&gt;add external archives选择包路径导入</p><p>草，好奇幻，我从我写的另一个文件里复制过去会自动import，从这就不行。。</p><h3 id="类开头写："><a href="#类开头写：" class="headerlink" title="类开头写："></a>类开头写：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Connection connection=<span class="hljs-keyword">null</span>;<br>   Statement stmt = <span class="hljs-keyword">null</span>;<br>   ResultSet st=<span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure><h3 id="连接数据库："><a href="#连接数据库：" class="headerlink" title="连接数据库："></a>连接数据库：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>    connection = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/MyDB&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;zaq123456&quot;</span>);<br>    stmt = connection.createStatement();<br><br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="一般insert："><a href="#一般insert：" class="headerlink" title="一般insert："></a>一般insert：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(Person per)</span></span>&#123;<br>    String sql=<span class="hljs-string">&quot;INSERT INTO mydb.person VALUES(&quot;</span>+per.toString()+<span class="hljs-string">&quot;)&quot;</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        stmt.executeUpdate(sql);<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="一般query："><a href="#一般query：" class="headerlink" title="一般query："></a>一般query：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">(String name)</span></span>&#123;<br>    model.removeAllElements();<br>    String sql=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">if</span>(name==<span class="hljs-keyword">null</span>)&#123;<br>        sql=<span class="hljs-string">&quot;SELECT * FROM mydb.person&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        sql= <span class="hljs-string">&quot;SELECT * FROM mydb.person WHERE name LIKE &#x27;%&quot;</span> +name+<span class="hljs-string">&quot;%&#x27;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        st= stmt.executeQuery(sql);<br>        <span class="hljs-keyword">while</span> (st.next())&#123;<br>            String s=st.getString(<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;,&quot;</span>+st.getString(<span class="hljs-number">2</span>)+<span class="hljs-string">&quot;,&quot;</span>+<br>                    st.getString(<span class="hljs-number">3</span>)+<span class="hljs-string">&quot;,&quot;</span>+st.getString(<span class="hljs-number">4</span>)+<span class="hljs-string">&quot;,&quot;</span>+<br>                    st.getString(<span class="hljs-number">5</span>)+<span class="hljs-string">&quot;,&quot;</span>+st.getString(<span class="hljs-number">6</span>);<br>            model.addElement(s);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="释放资源："><a href="#释放资源：" class="headerlink" title="释放资源："></a>释放资源：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDefaultCloseOperation</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(st!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                st.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(stmt!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                stmt.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(connection!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                connection.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        setDefaultCloseOperation(EXIT_ON_CLOSE);<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="线程：也写在这算了"><a href="#线程：也写在这算了" class="headerlink" title="线程：也写在这算了"></a>线程：也写在这算了</h1><img src="/2021/12/27/Java/image-20211219113425612.png" class="" title="image-20211219113425612"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(e.getSource()==button_count)&#123;<br>    <span class="hljs-keyword">if</span>(thread.getState()!=Thread.State.NEW) &#123;<br>        thread=<span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">this</span>);<br>    &#125;<br>    thread.start();<br>    button_count.setEnabled(<span class="hljs-keyword">false</span>);<br>    button_stop.setEnabled(<span class="hljs-keyword">true</span>);<br><br>&#125;<br> <span class="hljs-keyword">if</span>(e.getSource()==button_stop)&#123;<br>    thread.interrupt();<br>    utton_stop.setEnabled(<span class="hljs-keyword">false</span>);<br>    button_count.setEnabled(<span class="hljs-keyword">true</span>);<br>&#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">double</span> i=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                label_thread.setText(String.format(<span class="hljs-string">&quot;%.1f&quot;</span>,i));<br>                i+=<span class="hljs-number">0.1</span>;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException ex) &#123;<br>                <span class="hljs-keyword">break</span>;<span class="hljs-comment">//默认是backTrace，改为跳出循环</span><br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="字节-amp-字符流：这绝对是最没有格式的一篇"><a href="#字节-amp-字符流：这绝对是最没有格式的一篇" class="headerlink" title="字节&amp;字符流：这绝对是最没有格式的一篇"></a>字节&amp;字符流：这绝对是最没有格式的一篇</h1><p>字节输入（即读取）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">FileInputStream fis= <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">int</span> len;<br>String ans=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;src\\JavaExam\\re2017\\types.txt&quot;</span>);<br>    <span class="hljs-keyword">while</span>((len=fis.read())!=-<span class="hljs-number">1</span>)&#123;<br>        ans+=(<span class="hljs-keyword">char</span>)len;<br>    &#125;<br>    System.out.println(ans);<br>&#125;<span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><p>字节输出（即写入）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    fos =<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;src\\javaExam\\re2018\\out.txt&quot;</span>,<span class="hljs-keyword">true</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt; model.size();i++)&#123;<br>        String s=model.getElementAt(i)+<span class="hljs-string">&#x27;\n&#x27;</span>;<br>        <span class="hljs-comment">//ohhhhhhhhhh</span><br>        fos.write(s.getBytes(StandardCharsets.UTF_8));<br>    &#125;<br><br>&#125; <span class="hljs-keyword">catch</span> (IOException ex) &#123;<br>    JOptionPane.showMessageDialog(<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;未找到文件&quot;</span>);<br>    ex.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自qt以来见到了更强-菜-的做界面语言&quot;&gt;&lt;a href=&quot;#自qt以来见到了更强-菜-的做界面语言&quot; class=&quot;headerlink&quot; title=&quot;自qt以来见到了更强(菜)的做界面语言!&quot;&gt;&lt;/a&gt;自qt以来见到了更强(菜)的做界面语言!&lt;/h1&gt;&lt;h3</summary>
      
    
    
    
    
    <category term="java" scheme="https://github.com/sterne012/sterne012.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>sqlQuery-对答案</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2021/12/24/sqlQuery2/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2021/12/24/sqlQuery2/</id>
    <published>2021-12-24T00:55:33.000Z</published>
    <updated>2022-01-07T12:49:27.302Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验1"><a href="#实验1" class="headerlink" title="实验1"></a>实验1</h2><h2 id="实验2"><a href="#实验2" class="headerlink" title="实验2"></a>实验2</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--2.列出年龄超过平均值的所有学生名单，按年龄降序显示</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sage<span class="hljs-operator">&gt;=</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(sage) <span class="hljs-keyword">from</span> student)<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sage <span class="hljs-keyword">desc</span><br><span class="hljs-comment">-- 注意这个嵌套查询</span><br><br><span class="hljs-comment">--3.显示在1985年以后出生的学生的基本信息；</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span>( <span class="hljs-keyword">year</span>(getdate())<span class="hljs-operator">-</span>Sage)<span class="hljs-operator">&gt;</span><span class="hljs-number">1985</span><br><span class="hljs-comment">-- 使用year(getdate())-Sage（我直接写的2021，会不泛用）</span><br><br><span class="hljs-comment">--10.按照出生年份升序显示所有学生的学号、姓名、性别、出生年份及院系，在结果集中列标题分别指定为“学号，姓名，性别，出生年份，院系”；</span><br><span class="hljs-keyword">SELECT</span> Sno <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;学号&#x27;</span>,Sname <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;姓名&#x27;</span>,Ssex <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;性别&#x27;</span>,<span class="hljs-keyword">year</span>(getdate()<span class="hljs-operator">-</span>Sage) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;出生年份&#x27;</span>,Sdept <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;院系&#x27;</span><br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;出生年份&#x27;</span> <span class="hljs-keyword">ASC</span>;<br><span class="hljs-comment">-- 下面order by可以直接使用改名之后的</span><br><br><span class="hljs-comment">--16.列出有二门以上课程（含两门）不及格的学生的学号及该学生的平均成绩；</span><br>我的答案属于是直接不对<br><span class="hljs-keyword">SELECT</span> Sno,<span class="hljs-built_in">AVG</span>(Grade) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;平均成绩&#x27;</span><br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Grade<span class="hljs-operator">&lt;</span><span class="hljs-number">60</span> <span class="hljs-comment">-- 会导致avg算出的是低于60分课程的平均分</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Sno<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&gt;=</span><span class="hljs-number">2</span>;<br><br>再写一遍：<br><span class="hljs-keyword">SELECT</span> Sno, <span class="hljs-built_in">AVG</span>(grade) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;平均成绩&#x27;</span><br><span class="hljs-keyword">FROM</span> SC X<br><span class="hljs-keyword">WHERE</span> EXIST(<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> SC Y<br><span class="hljs-keyword">WHERE</span> X.Sno<span class="hljs-operator">=</span>Y.Sno <span class="hljs-keyword">AND</span> grade<span class="hljs-operator">&lt;</span><span class="hljs-number">60</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Sno<br>    <span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&gt;=</span><span class="hljs-number">2</span><br>)<span class="hljs-comment">-- 或者这里用sno in什么什么，EXIST习惯了也得记得相关子查询的关联</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Sno<br><br>标答另一种写法：<br><span class="hljs-keyword">select</span> sno,<span class="hljs-built_in">avg</span>(grade) 平均成绩<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sno<br><span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> grade <span class="hljs-operator">&lt;</span><span class="hljs-number">60</span> <span class="hljs-keyword">then</span> <span class="hljs-number">1</span> <span class="hljs-keyword">end</span>)<span class="hljs-operator">&gt;=</span><span class="hljs-number">2</span><br><br><span class="hljs-comment">--19. 查询各个专业男生、女生的人数</span><br><span class="hljs-keyword">SELECT</span> Sdept,Ssex,<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;人数&#x27;</span><br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Ssex,Sdept;<span class="hljs-comment">-- 注意是专业-性别的聚合，先聚合性别后专业</span><br><br><span class="hljs-comment">--20. 查询各种姓氏的人数（假设没有复姓）；</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">left</span>(Sname,<span class="hljs-number">1</span>)姓氏,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)人数<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">left</span>(Sname,<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">--21查询选修课程数最多的学号及选修课程数最少的学号</span><br><span class="hljs-keyword">select</span> sno, <span class="hljs-built_in">count</span> (<span class="hljs-operator">*</span>) 选课门数<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sno<br><span class="hljs-keyword">having</span>  <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&gt;=</span><span class="hljs-keyword">all</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sno) <span class="hljs-keyword">or</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&lt;=</span><span class="hljs-keyword">all</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sno)<br><br><span class="hljs-comment">--5．求使用零件数量在200-400之间的工程号</span><br><span class="hljs-keyword">select</span> JNO<br><span class="hljs-keyword">from</span> SPJ<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> JNO<br><span class="hljs-keyword">having</span> <span class="hljs-built_in">sum</span>(QTY)<span class="hljs-keyword">between</span> <span class="hljs-number">200</span> <span class="hljs-keyword">and</span> <span class="hljs-number">400</span><br><span class="hljs-comment">-- 工程不止有一个条目所以是sum</span><br><br><span class="hljs-comment">--6．查询每种零件的零件号，以及使用该零件的工程数。</span><br><span class="hljs-keyword">SELECT</span> P.PNO,<span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> JNO) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;工程数&#x27;</span><br><span class="hljs-keyword">from</span> p <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> spj <span class="hljs-keyword">on</span> spj.PNO<span class="hljs-operator">=</span>p.PNO<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> p.PNO<br><span class="hljs-comment">-- 1我没用distinct，2没用左外连接，会忽略掉没被任何工程使用的零件</span><br></code></pre></td></tr></table></figure><h2 id="实验3"><a href="#实验3" class="headerlink" title="实验3"></a>实验3</h2><p>好久没看了，快忘了</p><p>记忆修复中……</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--1.查询以‘DB_’开头,且倒数第3个字符为‘s’的课程的详细情况；</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> Course<br><span class="hljs-keyword">WHERE</span> Cname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;DB_%s__&#x27;</span>;<br><span class="hljs-comment">-- 错了 下划线是任意字符 需要转码</span><br><span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;DB\_%s__&#x27;</span> <span class="hljs-keyword">ESCAPE</span> <span class="hljs-string">&#x27;\&#x27;&#x27;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">--6.查询所选课程的平均成绩大于张毅的平均成绩的学生学号、姓名及平均成绩；</span><br><span class="hljs-string">SELECT Student.Sno,Sname,AVG(Grade) AS &#x27;</span>平均成绩<span class="hljs-string">&#x27;</span><br><span class="hljs-string">FROM Student JOIN SC ON(Student.Sno=SC.Sno)</span><br><span class="hljs-string">GROUP BY Student.Sno,Sname</span><br><span class="hljs-string">HAVING AVG(Grade)&gt;(</span><br><span class="hljs-string">SELECT AVG(Grade) </span><br><span class="hljs-string">FROM Student JOIN SC ON(Student.Sno=SC.Sno)</span><br><span class="hljs-string">WHERE Sname=&#x27;</span>张力<span class="hljs-string">&#x27;);</span><br><span class="hljs-string">-- 要用avg是聚合函数所以需要groupby having里面也可以嵌套查询</span><br><span class="hljs-string"></span><br><span class="hljs-string">感觉是不是EXISTS的多看看</span><br><span class="hljs-string">--10.查询至少选修“数据库”和“数据结构”课程的学生的基本信息；</span><br><span class="hljs-string">我称之为“两个不存在问题”</span><br><span class="hljs-string">select *</span><br><span class="hljs-string">from student</span><br><span class="hljs-string">where not exists (select *</span><br><span class="hljs-string">              from course </span><br><span class="hljs-string">      where cname in (&#x27;</span>数据库<span class="hljs-string">&#x27;,&#x27;</span>数据结构<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">   and not exists(select *</span><br><span class="hljs-string">   from sc</span><br><span class="hljs-string">   where student.sno = sc.sno and sc.cno =course.cno))</span><br><span class="hljs-string">   </span><br><span class="hljs-string">或者：</span><br><span class="hljs-string">SELECT *</span><br><span class="hljs-string">FROM Student X</span><br><span class="hljs-string">WHERE EXISTS(</span><br><span class="hljs-string">SELECT Student.Sno</span><br><span class="hljs-string">FROM Student JOIN SC ON(Student.Sno=SC.Sno) JOIN Course ON(SC.Cno=Course.Cno)</span><br><span class="hljs-string">WHERE Cname=&#x27;</span>数据库<span class="hljs-string">&#x27; AND Student.Sno=X.Sno</span><br><span class="hljs-string">INTERSECT</span><br><span class="hljs-string">SELECT Student.Sno</span><br><span class="hljs-string">FROM Student JOIN SC ON(Student.Sno=SC.Sno) JOIN Course ON(SC.Cno=Course.Cno)</span><br><span class="hljs-string">WHERE Cname=&#x27;</span>数据结构<span class="hljs-string">&#x27; AND Student.Sno=X.Sno);</span><br><span class="hljs-string"></span><br><span class="hljs-string">--11.查询没有选修张毅所选修的全部课程的学生的姓名；</span><br><span class="hljs-string">--（就是查找一个学生，存在张毅选修的一个课程，他没有选修）</span><br><span class="hljs-string">select Sname</span><br><span class="hljs-string">from student S1</span><br><span class="hljs-string">where exists(-- 存在一门课</span><br><span class="hljs-string">    select * </span><br><span class="hljs-string">    from sc SC1</span><br><span class="hljs-string">    where Sno=(</span><br><span class="hljs-string">        select Sno</span><br><span class="hljs-string">        from student</span><br><span class="hljs-string">        where Sname=&#x27;</span>张毅<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    ) and not exists (-- 没有选修</span><br><span class="hljs-string">        select *</span><br><span class="hljs-string">        from sc SC2</span><br><span class="hljs-string">        where S1.Sno=SC2.Sno and SC1.Cno=SC2.Cno</span><br><span class="hljs-string">    )</span><br><span class="hljs-string">);</span><br><span class="hljs-string"></span><br><span class="hljs-string">--15.列出同时选修“1”号课程和“2”号课程的所有学生的姓名；（使用三种方法实现）</span><br><span class="hljs-string">--(1)exists</span><br><span class="hljs-string">select Sname</span><br><span class="hljs-string">from student S</span><br><span class="hljs-string">where exists(</span><br><span class="hljs-string">    select *</span><br><span class="hljs-string">    from sc</span><br><span class="hljs-string">    where S.Sno=sc.Sno and Cno=&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">) and exists(</span><br><span class="hljs-string">    select *</span><br><span class="hljs-string">    from sc</span><br><span class="hljs-string">    where S.Sno=sc.Sno and Cno=&#x27;</span><span class="hljs-number">2</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">);</span><br><span class="hljs-string">--(2)求交集</span><br><span class="hljs-string">select Sname</span><br><span class="hljs-string">from student</span><br><span class="hljs-string">where Sno in</span><br><span class="hljs-string">    ((select Sno</span><br><span class="hljs-string">    from sc</span><br><span class="hljs-string">    where Cno=&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;)</span><br><span class="hljs-string">    intersect </span><br><span class="hljs-string">    (select Sno</span><br><span class="hljs-string">    from sc</span><br><span class="hljs-string">    where Cno=&#x27;</span><span class="hljs-number">2</span><span class="hljs-string">&#x27;));</span><br><span class="hljs-string">--(3)</span><br><span class="hljs-string">select Sname</span><br><span class="hljs-string">from student</span><br><span class="hljs-string">where Sno in</span><br><span class="hljs-string">    (select Sno</span><br><span class="hljs-string">    from sc</span><br><span class="hljs-string">    where Cno=&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;and </span><br><span class="hljs-string">sno in(select Sno</span><br><span class="hljs-string">    from sc</span><br><span class="hljs-string">    where Cno=&#x27;</span><span class="hljs-number">2</span><span class="hljs-string">&#x27;))</span><br><span class="hljs-string">    </span><br><span class="hljs-string">--17.使用嵌套查询查询其它系中年龄小于CS系的某个学生的学生姓名、年龄和院系；</span><br><span class="hljs-string">某个（任意）学生用any，所有用all</span><br><span class="hljs-string">SELECT Sname,Sage,Sdept</span><br><span class="hljs-string">FROM Student</span><br><span class="hljs-string">WHERE Sdept!=&#x27;</span>CS<span class="hljs-string">&#x27; AND Sage&lt;ANY(</span><br><span class="hljs-string">SELECT Sage</span><br><span class="hljs-string">FROM Student</span><br><span class="hljs-string">WHERE Sdept=&#x27;</span>CS<span class="hljs-string">&#x27;);</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h2 id="实验4"><a href="#实验4" class="headerlink" title="实验4"></a>实验4</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--4.创建每门课程的平均分和选课人数的视图（课程号，课程名，平均分，人数）。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> course_data<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> kc.课程号,课程名,<span class="hljs-built_in">AVG</span>(成绩) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;平均分&#x27;</span>,<span class="hljs-built_in">COUNT</span>(学号) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;人数&#x27;</span><br><span class="hljs-keyword">FROM</span> kc <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> cj <span class="hljs-keyword">ON</span>(kc.课程号<span class="hljs-operator">=</span>cj.课程号)<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> kc.课程号,课程名;<br>注意左连接<br><br><span class="hljs-comment">--10.显示选修课程数最多的学号及选修课程数最少的学号，姓名（使用派生表实现）。</span><br><span class="hljs-keyword">SELECT</span> X.学号,姓名<br><span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> TOP <span class="hljs-number">1</span> 学号 <span class="hljs-keyword">FROM</span> cj <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 学号 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">DESC</span>) <span class="hljs-keyword">AS</span> maxsno,<br> (<span class="hljs-keyword">SELECT</span> TOP <span class="hljs-number">1</span> 学号 <span class="hljs-keyword">FROM</span> cj <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 学号 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">ASC</span>) <span class="hljs-keyword">AS</span> minsno,xs X<br><span class="hljs-keyword">WHERE</span> X.学号<span class="hljs-operator">=</span>maxsno.学号 <span class="hljs-keyword">or</span> X.学号<span class="hljs-operator">=</span>minsno.学号;<br><br><span class="hljs-comment">--11.查询每个学生成绩高于自己的平均成绩的学号，姓名，课程号和成绩（使用派生表实现）。</span><br><span class="hljs-keyword">SELECT</span> xs.学号,姓名,课程号,成绩<br><span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> 学号,<span class="hljs-built_in">AVG</span>(成绩) <span class="hljs-keyword">AS</span> score <span class="hljs-keyword">FROM</span> cj <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 学号) <span class="hljs-keyword">AS</span> avgscore,xs <span class="hljs-keyword">JOIN</span> cj <span class="hljs-keyword">ON</span>(xs.学号<span class="hljs-operator">=</span>cj.学号)<br><span class="hljs-keyword">WHERE</span> xs.学号<span class="hljs-operator">=</span>avgscore.学号 <span class="hljs-keyword">AND</span> cj.成绩<span class="hljs-operator">&gt;</span>avgscore.score;<br>派生表？好怪哦<br><br><span class="hljs-comment">--12.自己验证with check option的作用。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> CS_stu<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> xs<br><span class="hljs-keyword">WHERE</span> 专业<span class="hljs-operator">=</span><span class="hljs-string">&#x27;计算机&#x27;</span><br><span class="hljs-keyword">WITH</span> <span class="hljs-keyword">CHECK</span> OPTION;<br>GO<br><span class="hljs-keyword">INSERT</span><br><span class="hljs-keyword">INTO</span> CS_stu<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;100&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;1987-05-20&#x27;</span>,<span class="hljs-string">&#x27;信息管理&#x27;</span>,<span class="hljs-number">10</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-keyword">NULL</span>);<br>报错：<br><span class="hljs-comment">--试图进行的插入或更新已失败，原因是目标视图或者目标视图所跨越的某一视图指定了 WITH CHECK OPTION</span><br><span class="hljs-comment">--而该操作的一个或多个结果行又不符合 CHECK OPTION 约束。</span><br><span class="hljs-keyword">with</span> <span class="hljs-keyword">check</span> option更新视图要满足<span class="hljs-keyword">where</span>条件<br><br><span class="hljs-comment">--17.查询没有选修数据结构、操作系统和英语三门课的学生的学号，姓名，课程号，课程名和成绩。</span><br>写一个练练手<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-comment">-- 懒得写了</span><br><span class="hljs-keyword">FROM</span> XS <span class="hljs-keyword">JOIN</span> KC <span class="hljs-keyword">ON</span>(..) <span class="hljs-keyword">JOIN</span> CJ <span class="hljs-keyword">ON</span>(..)<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>(<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> KC Y<br><span class="hljs-keyword">WHERE</span> Y.课程名<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据结构&#x27;</span> <span class="hljs-keyword">OR</span> Y.课程名<span class="hljs-operator">=</span><span class="hljs-string">&#x27;操作系统&#x27;</span> <span class="hljs-keyword">OR</span> Y.课程名<span class="hljs-operator">=</span><span class="hljs-string">&#x27;英语&#x27;</span>);<br><br>以前写的作弊版（遇事不决建<span class="hljs-keyword">view</span>）<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> DS_OP_EN<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> X.学号<br><span class="hljs-keyword">FROM</span> xs X <span class="hljs-keyword">JOIN</span> cj Y <span class="hljs-keyword">ON</span>(X.学号<span class="hljs-operator">=</span>Y.学号) <span class="hljs-keyword">JOIN</span> kc Z <span class="hljs-keyword">ON</span>(Y.课程号<span class="hljs-operator">=</span>Z.课程号)<br><span class="hljs-keyword">WHERE</span> Z.课程名<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据结构&#x27;</span> <span class="hljs-keyword">OR</span> Z.课程名<span class="hljs-operator">=</span><span class="hljs-string">&#x27;操作系统&#x27;</span> <span class="hljs-keyword">OR</span> Z.课程名<span class="hljs-operator">=</span><span class="hljs-string">&#x27;英语&#x27;</span>;<br>GO <br><span class="hljs-keyword">SELECT</span> X.学号,姓名,Y.课程号,课程名,成绩<br><span class="hljs-keyword">FROM</span> xs X <span class="hljs-keyword">JOIN</span> cj Y <span class="hljs-keyword">ON</span>(X.学号<span class="hljs-operator">=</span>Y.学号) <span class="hljs-keyword">JOIN</span> kc Z <span class="hljs-keyword">ON</span>(Y.课程号<span class="hljs-operator">=</span>Z.课程号)<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>(<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> DS_OP_EN A<br><span class="hljs-keyword">WHERE</span> A.学号<span class="hljs-operator">=</span>X.学号);<br><br><span class="hljs-comment">--18.将没有选课的学生的总学分设置为0。</span><br>UPDATE xs<br><span class="hljs-keyword">SET</span> 总学分<span class="hljs-operator">=</span><span class="hljs-number">0</span><br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>(<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> cj<br><span class="hljs-keyword">WHERE</span> xs.学号<span class="hljs-operator">=</span>cj.学号);<br><br><br></code></pre></td></tr></table></figure><h2 id="实验5"><a href="#实验5" class="headerlink" title="实验5"></a>实验5</h2><p>安全性</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--1．创建一windows用户（名字自定），用sql语句建立windows验证模式的登录名。默认数据库为student</span><br><span class="hljs-keyword">CREATE</span> LOGIN [DESKTOP<span class="hljs-number">-8</span>QRH2EV\liu] <span class="hljs-keyword">FROM</span> WINDOWS<span class="hljs-comment">--注意：DESKTOP-8QRH2EV是计算机名，liu是Windows用户名</span><br><span class="hljs-keyword">WITH</span> DEFAULT_DATABASE <span class="hljs-operator">=</span> Student;<br><span class="hljs-comment">--2．用sql语句和系统存储过程建立登录名sqluser,密码为1234</span><br><span class="hljs-keyword">CREATE</span> LOGIN sqluser <span class="hljs-keyword">WITH</span> PASSWORD <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1234&#x27;</span><br><span class="hljs-keyword">exec</span> sp_addlogin sqluser, <span class="hljs-string">&#x27;1234&#x27;</span><br><span class="hljs-comment">--3．为student数据库新建用户u1，其登录名为sqluser。</span><br>USE student<br>GO<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> u1 <span class="hljs-keyword">FOR</span> LOGIN sqluser<br><span class="hljs-keyword">exec</span> sp_adduser sqluser,u1<br><span class="hljs-comment">--4．新建登录usersf，并将其加入到sysadmin固定服务器角色中。</span><br><span class="hljs-keyword">exec</span> sp_addlogin usersf, <span class="hljs-string">&#x27;1234&#x27;</span><br><span class="hljs-keyword">exec</span> sp_addsrvrolemember <span class="hljs-string">&#x27;usersf&#x27;</span>,<span class="hljs-string">&#x27;sysadmin&#x27;</span><span class="hljs-comment">--由于sysadmin是系统管理员角色，拥有所有权限。</span><br><span class="hljs-comment">--5．将student用户u1（登录名为sqluser）加入到db_owner角色中，使其全权负责该数据库,并验证其权限。</span><br>USE student<br>GO <br><span class="hljs-keyword">exec</span> sp_addrolemember <span class="hljs-string">&#x27;db_owner&#x27;</span>,u1<br> <span class="hljs-comment">-- 验证:以sqluser登录,在新建查询界面输入以下内容验证</span><br>    USE student<br>    GO<br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> SC<span class="hljs-comment">-- 成功，db_owner拥有查询权限</span><br>    UPDATE SC<br>    <span class="hljs-keyword">SET</span> Grade <span class="hljs-operator">=</span> <span class="hljs-number">75</span><br>    <span class="hljs-keyword">WHERE</span> Sno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;200515001&#x27;</span> <span class="hljs-keyword">AND</span> cno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;4&#x27;</span> <span class="hljs-comment">-- 成功，db_owner拥有修改表项的权限</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> course <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;12&#x27;</span>,<span class="hljs-string">&#x27;大数据&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-number">3</span>)<span class="hljs-comment">--成功，db_owner拥有插入的权限</span><br>    <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> SC<br>        <span class="hljs-keyword">ADD</span> temp tinyint <span class="hljs-comment">-- 成功，db_owner拥有更改表结构的权限</span><br><br><span class="hljs-comment">--6．为SPJ数据库新建用户u2，u3，其登录名分别为u2，u3。</span><br><span class="hljs-keyword">CREATE</span> LOGIN u2 <span class="hljs-keyword">WITH</span> PASSWORD <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1234&#x27;</span>, DEFAULT_DATABASE <span class="hljs-operator">=</span> SPJ<br><span class="hljs-keyword">CREATE</span> LOGIN u3 <span class="hljs-keyword">WITH</span> PASSWORD <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1234&#x27;</span>, DEFAULT_DATABASE <span class="hljs-operator">=</span> SPJ<br>USE SPJ<br>GO<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> u2 <span class="hljs-keyword">FOR</span> LOGIN u2<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> u3 <span class="hljs-keyword">FOR</span> LOGIN u3<br><br><span class="hljs-comment">--（1）授予用户u2对S表有SELECT 权，对P表颜色（COLOR）具有更新权限；</span><br>    <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> S <span class="hljs-keyword">TO</span> u2 <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> OPTION;<br>    <span class="hljs-keyword">GRANT</span> UPDATE(COLOR) <span class="hljs-keyword">ON</span> P <span class="hljs-keyword">TO</span> u2<br>    <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> OPTION;<br><span class="hljs-comment">--（2）u2将其拥有的权限授予u3；</span><br>    <span class="hljs-comment">-- 本小题在u2登录下执行.验证u2获得权限，并给u3授权</span><br>USE SPJ<br>GO<br> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> S; <span class="hljs-comment">-- 成功</span><br> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> P; <span class="hljs-comment">-- 拒绝</span><br> UPDATE P <span class="hljs-keyword">SET</span> COLOR<span class="hljs-operator">=</span><span class="hljs-string">&#x27;红&#x27;</span><span class="hljs-comment">--成功</span><br> update P <span class="hljs-keyword">set</span> color<span class="hljs-operator">=</span><span class="hljs-string">&#x27;绿&#x27;</span> <span class="hljs-keyword">where</span> pno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;p1&#x27;</span><span class="hljs-comment">--拒绝，因为u2没有对P的查询权限</span><br> <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> S <span class="hljs-keyword">TO</span> u3;<br> <span class="hljs-keyword">GRANT</span> UPDATE(COLOR) <span class="hljs-keyword">ON</span> P <span class="hljs-keyword">TO</span> u3<br><span class="hljs-comment">--（3）用sql语句逐一验证u3所获得的权限。</span><br>    <span class="hljs-comment">-- 以u3身份登录:</span><br> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> S; <span class="hljs-comment">-- 成功</span><br> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> P; <span class="hljs-comment">-- 拒绝</span><br> UPDATE P <span class="hljs-keyword">SET</span> COLOR<span class="hljs-operator">=</span><span class="hljs-string">&#x27;红&#x27;</span><span class="hljs-comment">--成功</span><br> update P <span class="hljs-keyword">set</span> color<span class="hljs-operator">=</span><span class="hljs-string">&#x27;绿&#x27;</span> <span class="hljs-keyword">where</span> pno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;p1&#x27;</span><span class="hljs-comment">--拒绝，因为u2没有对P的查询权限</span><br>  <span class="hljs-comment">--（4）撤销用户u3所获得的权限，并验证。</span><br>    <span class="hljs-comment">-- 以u2身份登录并操作:</span><br>    <span class="hljs-keyword">REVOKE</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> S <span class="hljs-keyword">FROM</span> u3;<br>    <span class="hljs-keyword">REVOKE</span> UPDATE(COLOR) <span class="hljs-keyword">ON</span> P <span class="hljs-keyword">FROM</span> u3;<br>    <span class="hljs-comment">-- 以u3身份登录并操作:</span><br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> S <span class="hljs-comment">-- 拒绝</span><br>    UPDATE P <span class="hljs-keyword">SET</span> COLOR<span class="hljs-operator">=</span><span class="hljs-string">&#x27;红&#x27;</span> <span class="hljs-comment">--拒绝</span><br><span class="hljs-comment">--7.在student数据库中建立角色operate,该角色具有对student和course表的查询权限；具有对表sc的插入和修改权限。</span><br>USE student<br>GO<br><span class="hljs-keyword">CREATE</span> ROLE operate<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> student <span class="hljs-keyword">TO</span> operate<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> course <span class="hljs-keyword">TO</span> operate<br><span class="hljs-keyword">GRANT</span> update,<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">ON</span> SC <span class="hljs-keyword">TO</span> operate<br><span class="hljs-comment">--8.拒绝用户u1对sc表的修改权限。</span><br>DENY update <span class="hljs-keyword">ON</span> SC <span class="hljs-keyword">TO</span> u1<br><span class="hljs-comment">--9.使用存储过程将角色operate赋给用户u1,并用sql语句验证其权限。（特别验证u1对sc表的修改权限）</span><br><span class="hljs-keyword">exec</span> sp_addrolemember operate,u1<br><span class="hljs-comment">-- 验证:这里用登录名sqluser登录</span><br>USE student<br>GO<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Student<span class="hljs-comment">-- 成功</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> course<span class="hljs-comment">-- 成功</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> sc <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;200515003&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-number">88</span>,<span class="hljs-keyword">NULL</span>)<span class="hljs-comment">--成功</span><br>update sc <span class="hljs-keyword">set</span> temp<span class="hljs-operator">=</span><span class="hljs-number">0</span><br><span class="hljs-comment">--消息 229，级别 14，状态 5，第 6 行</span><br><span class="hljs-comment">--拒绝了对对象 &#x27;sc&#x27; (数据库 &#x27;student&#x27;，架构 &#x27;dbo&#x27;)的 UPDATE 权限。</span><br><span class="hljs-comment">--这是因为用户u1通过operate角色获得的对SC的update权限，由于被DENY了，因此该语句的执行被拒绝了.</span><br><span class="hljs-comment">--10.创建数据库架构jg_test,其所有者为student用户u1。</span><br>use student<br>go<br><span class="hljs-keyword">create</span> schema jg_test<br><span class="hljs-keyword">authorization</span> u1<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">alter</span><br><span class="hljs-keyword">on</span> schema::dbo<br><span class="hljs-keyword">to</span> u1<br><span class="hljs-comment">--（1）授予用户u1建表权限；</span><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span><br><span class="hljs-keyword">to</span> u1<br><span class="hljs-comment">--（2）授予用户（自己建立wei）对架构jg_test进行查询、插入的权限</span><br><span class="hljs-keyword">exec</span> sp_addlogin wei<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> wei<br><span class="hljs-keyword">for</span> login wei<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span>,<span class="hljs-keyword">insert</span><br><span class="hljs-keyword">on</span> schema::jg_test<br><span class="hljs-keyword">to</span> wei<br><span class="hljs-comment">--（3）以u1身份登录sql srver,新建一个表，观察表的架构名称。验证用户wei对该表的查询和插入权限，并验证其是否可对该表进行删除。</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> jg_test.s<br>(s1 <span class="hljs-type">char</span>(<span class="hljs-number">10</span>),s2 <span class="hljs-type">int</span>)<br><span class="hljs-comment">--命令成功完成</span><br><span class="hljs-comment">--以wei身份登录sql srver</span><br>use student<br>go<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> jg_test.s<span class="hljs-comment">--命令成功完成</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> jg_test.s <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;t1234&#x27;</span>,<span class="hljs-number">10</span>)<span class="hljs-comment">--命令成功完成</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> jg_test.s<br><span class="hljs-comment">--消息 229，级别 14，状态 5，第 5 行</span><br><span class="hljs-comment">--拒绝了对对象 &#x27;s&#x27; (数据库 &#x27;student&#x27;，架构 &#x27;jg_test&#x27;)的 DELETE 权限。</span><br>补充：<br><span class="hljs-comment">--11. 在student数据库中创建架构（schema）teacher指定给用户teacher（也就是要先创建一个teacher用户）</span><br>use student<br>go<br><span class="hljs-keyword">CREATE</span> LOGIN tt <span class="hljs-keyword">WITH</span> PASSWORD <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1234&#x27;</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> teacher <span class="hljs-keyword">for</span> login tt<br><span class="hljs-keyword">create</span> schema teacher <span class="hljs-keyword">AUTHORIZATION</span> teacher<br><span class="hljs-comment">--12.在已创建的teacher架构中创建“tea”表，表结构为（tno(编号), tname(姓名), tsd（专业）,tphone, te_mail）(数据类型和长度自己定义)，通过teacher架构为teacher1用户设置查询权限，验证teacher1用户对表tea是否具有select权限和delete权限，为什么？</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> teacher.tea<br>(tno <span class="hljs-type">char</span>(<span class="hljs-number">10</span>),<br> tname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br> tsd <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<br> tphone <span class="hljs-type">char</span>(<span class="hljs-number">11</span>),<br> te_mail <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>)<br> )<br> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teacher.tea <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;1234567890&#x27;</span>,<span class="hljs-string">&#x27;王伟&#x27;</span>,<span class="hljs-string">&#x27;计算机&#x27;</span>,<span class="hljs-string">&#x27;13963112345&#x27;</span>,<span class="hljs-string">&#x27;123.com&#x27;</span>)<br> <span class="hljs-comment">--验证过程</span><br> <span class="hljs-comment">/*在“对象资源管理器”中展开数据库“student”→“安全性”→“架构”，选择新创建的架构teacher，</span><br><span class="hljs-comment"> 右键单击鼠标，在弹出的快捷菜单中选择“属性”菜单项，打开“架构属性”窗口，</span><br><span class="hljs-comment"> 在该架构属性的“权限”选项页中，单击“搜索”按钮，选择用户u1（假设已经创建），为用户授予“选择”权限。单击“确定”*/</span><br> <span class="hljs-comment">--以sqluser登录</span><br> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teacher.tea<span class="hljs-comment">--成功</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> teacher.tea<span class="hljs-comment">--拒绝了对对象 &#x27;tea&#x27; (数据库 &#x27;student&#x27;，架构 &#x27;teacher&#x27;)的 DELETE 权限</span><br></code></pre></td></tr></table></figure><p>全复制了qwq</p><h2 id="实验6"><a href="#实验6" class="headerlink" title="实验6"></a>实验6</h2><p>数据库完整性约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--1.将stu数据库中student表的sno定义为主键；</span><br>USE STU<br>go<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> STUDENT <br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">COLUMN</span> SNO <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><span class="hljs-comment">/*将某属性设置为主键之前，必须先将该属性设置为NOT NULL*/</span>？？还有这种事<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> STUDENT<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> P1 <span class="hljs-keyword">PRIMARY</span> KEY(SNO)<br><br><span class="hljs-comment">--3.为表course中的字段cname添加唯一值约束；</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> COURSE<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> U1 <span class="hljs-keyword">UNIQUE</span>(CNAME)<br><br><span class="hljs-comment">--4.将数据库stu的表sc的sno及cno字段组合定义为主键，约束名称为sc_pk;</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> SC<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">COLUMN</span> SNO <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> SC<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">COLUMN</span> CNO <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> SC<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> SC_PK <span class="hljs-keyword">PRIMARY</span> KEY(SNO,CNO)<br><br><span class="hljs-comment">--5)向sc表添加记录时，如果该记录的sno字段的值在student中不存在，则拒绝插入；</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> SC<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> F4 <span class="hljs-keyword">FOREIGN</span> KEY(SNO)  <span class="hljs-keyword">REFERENCES</span> STUDENT(SNO)<br>就是添加外码的意思<br><br><span class="hljs-comment">--6.定义check约束，要求学生学号sno必须为9位数字字符，且不能以0开头，第二三位皆为0；</span><br>必须是数字字符！<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> STUDENT <br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> C1 <span class="hljs-keyword">CHECK</span>(SNO <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;[1-9]00[0-9][0-9][0-9][0-9][0-9][0-9]&#x27;</span>)<br>错误：<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Student<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> stu_sno_check <span class="hljs-keyword">CHECK</span>(Sno <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;[1-9]00______&#x27;</span>);<br><br><span class="hljs-comment">--13.设计触发器实现如果一个学生转专业了，那么输出一条信息显示该学生各门课程的平均分。</span><br>USE STUDENT<br>GO<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> A1<br><span class="hljs-keyword">ON</span> STUDENT<br><span class="hljs-keyword">FOR</span><br>UPDATE<br><span class="hljs-keyword">AS</span> <br>IF UPDATE(SDEPT)<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@AVG</span> <span class="hljs-type">NUMERIC</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>),<span class="hljs-variable">@SNO</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>)<br><span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@SNO</span><span class="hljs-operator">=</span>(<span class="hljs-keyword">SELECT</span> SNO <span class="hljs-keyword">FROM</span> DELETED)<br><span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@AVG</span><span class="hljs-operator">=</span>(<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(GRADE) <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> SNO<span class="hljs-operator">=</span><span class="hljs-variable">@SNO</span>) <br>PRINT <span class="hljs-variable">@SNO</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;各门课的平均成绩&#x27;</span><span class="hljs-operator">+</span><span class="hljs-built_in">cast</span>(<span class="hljs-variable">@AVG</span> <span class="hljs-keyword">as</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">5</span>))<br><span class="hljs-keyword">END</span><br>我的：<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> t13 <span class="hljs-keyword">ON</span> Student AFTER UPDATE <span class="hljs-keyword">AS</span><br>    IF(UPDATE(Sdept))<br>        <span class="hljs-keyword">BEGIN</span><br>            <span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@sno</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>)<br>            <span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@sno</span><span class="hljs-operator">=</span>Sno <span class="hljs-keyword">FROM</span> inserted<br>            <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(Grade) <span class="hljs-string">&#x27;平均分&#x27;</span> <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> SC.Sno<span class="hljs-operator">=</span><span class="hljs-variable">@sno</span><br>        <span class="hljs-keyword">end</span>;<br>GO<br><span class="hljs-comment">--测试</span><br>UPDATE STUDENT <span class="hljs-keyword">SET</span> SDEPT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CS&#x27;</span> <span class="hljs-keyword">WHERE</span> SNO<span class="hljs-operator">=</span><span class="hljs-string">&#x27;200515008&#x27;</span><span class="hljs-comment">/*只有修改sdept时，触发器才触发执行*/</span><br>UPDATE STUDENT <span class="hljs-keyword">SET</span> SAGE<span class="hljs-operator">=</span><span class="hljs-number">26</span> <span class="hljs-keyword">WHERE</span> SNO<span class="hljs-operator">=</span><span class="hljs-string">&#x27;200515008&#x27;</span><span class="hljs-comment">/*该语句只修改了学生的年龄，A1触发器并没有执行*/</span><br>if(update(sdept))总感觉在哪见过，记一下，要忘了<br><br><span class="hljs-number">15.</span>在课程表里添加一列：选课人数，设置触发器每门课如果有人选修了那么课程表里的选课人数相应修改，考虑批量插入选课记录的情况。<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> cnt_add<br><span class="hljs-keyword">on</span> sc <br><span class="hljs-keyword">for</span> <span class="hljs-keyword">insert</span><br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">begin</span><br>if @<span class="hljs-variable">@ROWCOUNT</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br>update course <span class="hljs-keyword">set</span> cnt<span class="hljs-operator">=</span>cnt<span class="hljs-operator">+</span><span class="hljs-number">1</span><br><span class="hljs-keyword">where</span> course .cno <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> cno  <span class="hljs-keyword">from</span> inserted)<br><span class="hljs-keyword">else</span> <br>update course <span class="hljs-keyword">set</span> cnt<span class="hljs-operator">=</span>cnt<span class="hljs-operator">+</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(sno) <span class="hljs-keyword">from</span> inserted <span class="hljs-keyword">where</span> course .cno <span class="hljs-operator">=</span>inserted.cno ) <br><span class="hljs-keyword">where</span> course.cno <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> cno <span class="hljs-keyword">from</span> inserted)<br><span class="hljs-keyword">end</span><br>看看没用游标版（用update...in）<br>建在sc上<br><br><span class="hljs-comment">--16.设计一触发器，约束每门课程的课容量为120。</span><br>use student<br>go<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> ex16<br><span class="hljs-keyword">on</span> sc<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">insert</span><br><span class="hljs-keyword">as</span> <br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@count</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@kecheng</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@count</span><span class="hljs-operator">=</span><span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> cno <span class="hljs-keyword">from</span> inserted)<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@kecheng</span><span class="hljs-operator">=</span>cname <span class="hljs-keyword">from</span> course <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> cno <span class="hljs-keyword">from</span> inserted)<br>if(<span class="hljs-variable">@count</span><span class="hljs-operator">&gt;</span><span class="hljs-number">120</span>)<br><span class="hljs-keyword">begin</span><br>print <span class="hljs-string">&#x27;课程&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@kecheng</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;人数已经达到课容量&#x27;</span><br><span class="hljs-keyword">rollback</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">begin</span><br>print <span class="hljs-string">&#x27;选课&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@kecheng</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;成功&#x27;</span><br><span class="hljs-keyword">end</span><br>看<span class="hljs-variable">@count</span>是如何得到的<br><br><span class="hljs-comment">--20.使用第19题的两个表设计触发器实现如果员工的工资发生变化则向工资变化表插入一条记录，包含教工编号，原工资，新工资。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> t20 <span class="hljs-keyword">ON</span> Teacher AFTER UPDATE <span class="hljs-keyword">AS</span><br>    IF(UPDATE(TSALARY))<span class="hljs-comment">-- 不应该是更新，工资发生变化有一个和原值比较的步骤</span><br>        <span class="hljs-keyword">BEGIN</span><br>            <span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@osalary</span> MONEY,<span class="hljs-variable">@nsalary</span> MONEY,<span class="hljs-variable">@tno</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>)<br>            <span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@osalary</span><span class="hljs-operator">=</span>TSALARY <span class="hljs-keyword">FROM</span> deleted<br>            <span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@nsalary</span><span class="hljs-operator">=</span>TSALARY,<span class="hljs-variable">@tno</span><span class="hljs-operator">=</span>TNO <span class="hljs-keyword">FROM</span> inserted<br><br>            <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Salary(TNO, T_old_salary, T_new_salary)<br>            <span class="hljs-keyword">VALUES</span>(<span class="hljs-variable">@tno</span>,<span class="hljs-variable">@osalary</span>,<span class="hljs-variable">@nsalary</span>)<br>        <span class="hljs-keyword">end</span>;<br>    GO<br>    <br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> tri20 <span class="hljs-keyword">on</span> teacher<br>after update<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@a</span> <span class="hljs-type">char</span>(<span class="hljs-number">9</span>), <span class="hljs-variable">@b</span> <span class="hljs-type">int</span>, <span class="hljs-variable">@c</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@a</span> <span class="hljs-operator">=</span> tno, <span class="hljs-variable">@b</span> <span class="hljs-operator">=</span> salary <span class="hljs-keyword">from</span> deleted<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@c</span> <span class="hljs-operator">=</span> salary <span class="hljs-keyword">from</span> inserted<br>if (<span class="hljs-variable">@b</span><span class="hljs-operator">&lt;&gt;</span><span class="hljs-variable">@c</span>) <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> salary_change<br><span class="hljs-keyword">values</span>(<span class="hljs-variable">@a</span>, <span class="hljs-variable">@b</span>, <span class="hljs-variable">@c</span>)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h2 id="实验7"><a href="#实验7" class="headerlink" title="实验7"></a>实验7</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--4.编写一个存储过程，统计某门课程的优秀（90-100）人数、良好（80-89）人数、中等（70-79）人数、及格（60-69）人数和及格率，</span><br><span class="hljs-comment">--其输入参数是课程号，输出的是各级别人数及及格率，及格率的形式是90.25%，执行存储过程，在消息区显示1号课程的统计信息。</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> p1<br><span class="hljs-variable">@cno</span> <span class="hljs-type">char</span>(<span class="hljs-number">4</span>),<br><span class="hljs-variable">@great</span> <span class="hljs-type">int</span> output,<br><span class="hljs-variable">@good</span> <span class="hljs-type">int</span> output,<br><span class="hljs-variable">@medium</span> <span class="hljs-type">int</span> output,<br><span class="hljs-variable">@pass</span> <span class="hljs-type">int</span> output,<br><span class="hljs-variable">@passper</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) output<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@sum</span> <span class="hljs-type">float</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@great</span><span class="hljs-operator">=</span><span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span> <span class="hljs-keyword">and</span> grade <span class="hljs-keyword">between</span> <span class="hljs-number">90</span> <span class="hljs-keyword">and</span> <span class="hljs-number">100</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@good</span><span class="hljs-operator">=</span><span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span> <span class="hljs-keyword">and</span> grade <span class="hljs-keyword">between</span> <span class="hljs-number">80</span> <span class="hljs-keyword">and</span> <span class="hljs-number">89</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@medium</span><span class="hljs-operator">=</span><span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span> <span class="hljs-keyword">and</span> grade <span class="hljs-keyword">between</span> <span class="hljs-number">70</span> <span class="hljs-keyword">and</span> <span class="hljs-number">79</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@pass</span><span class="hljs-operator">=</span><span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span> <span class="hljs-keyword">and</span> grade <span class="hljs-keyword">between</span> <span class="hljs-number">60</span> <span class="hljs-keyword">and</span> <span class="hljs-number">69</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@sum</span><span class="hljs-operator">=</span><span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@passper</span> <span class="hljs-operator">=</span> str(<span class="hljs-built_in">cast</span>((<span class="hljs-variable">@great</span><span class="hljs-operator">+</span><span class="hljs-variable">@good</span><span class="hljs-operator">+</span><span class="hljs-variable">@medium</span><span class="hljs-operator">+</span><span class="hljs-variable">@pass</span>)<span class="hljs-operator">*</span><span class="hljs-number">100</span><span class="hljs-operator">/</span><span class="hljs-variable">@sum</span> <span class="hljs-keyword">as</span> <span class="hljs-type">numeric</span>(<span class="hljs-number">5</span>,<span class="hljs-number">2</span>)))<br><span class="hljs-comment">--select @passper=(str(cast((@great)*100.0/@sum*1.0 as ) ) +&#x27;%&#x27;)</span><br><span class="hljs-keyword">declare</span><span class="hljs-variable">@gr</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@go</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@me</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@pa</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@pap</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>)<br><span class="hljs-keyword">exec</span> p1 <span class="hljs-string">&#x27;1&#x27;</span> ,<br><span class="hljs-variable">@gr</span> output,<br><span class="hljs-variable">@go</span>  output,<br><span class="hljs-variable">@me</span>  output,<br><span class="hljs-variable">@pa</span> output,<br><span class="hljs-variable">@pap</span> output<br>print <span class="hljs-string">&#x27;优秀人数&#x27;</span><span class="hljs-operator">+</span>str(<span class="hljs-variable">@gr</span>) <br>print <span class="hljs-string">&#x27;良好人数&#x27;</span><span class="hljs-operator">+</span>str(<span class="hljs-variable">@go</span>)  <br>print <span class="hljs-string">&#x27;中等人数&#x27;</span><span class="hljs-operator">+</span>str(<span class="hljs-variable">@me</span>) <br>print <span class="hljs-string">&#x27;及格人数&#x27;</span><span class="hljs-operator">+</span>str(<span class="hljs-variable">@pa</span>) <br>print <span class="hljs-string">&#x27;及格率&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@pap</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;%&#x27;</span><br><br>我的：<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> Course_percent <span class="hljs-variable">@cno</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">AS</span><br>    <span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@S</span> <span class="hljs-type">INT</span>,<span class="hljs-variable">@A</span> <span class="hljs-type">INT</span>,<span class="hljs-variable">@B</span> <span class="hljs-type">INT</span>,<span class="hljs-variable">@C</span> <span class="hljs-type">INT</span>,<span class="hljs-variable">@per</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>)<br>    <span class="hljs-keyword">SELECT</span>  <span class="hljs-variable">@S</span><span class="hljs-operator">=</span><span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> Grade <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">90</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">100</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">END</span>),<br>            <span class="hljs-variable">@A</span><span class="hljs-operator">=</span><span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> Grade <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">80</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">89</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">END</span>),<br>            <span class="hljs-variable">@B</span><span class="hljs-operator">=</span><span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> Grade <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">70</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">79</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">END</span>),<br>            <span class="hljs-variable">@C</span><span class="hljs-operator">=</span><span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> Grade <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">60</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">69</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">END</span>),<br>            <span class="hljs-variable">@per</span><span class="hljs-operator">=</span>CONCAT(<span class="hljs-built_in">CAST</span>(<span class="hljs-keyword">CONVERT</span>(<span class="hljs-type">FLOAT</span>,<span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> Grade <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">60</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">100</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">END</span>))<span class="hljs-operator">/</span><span class="hljs-keyword">CONVERT</span>(<span class="hljs-type">FLOAT</span>,<span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> Sno))<span class="hljs-operator">*</span><span class="hljs-number">100.0</span> <span class="hljs-keyword">AS</span> <span class="hljs-type">NUMERIC</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>)),<span class="hljs-string">&#x27;%&#x27;</span>)<br>    <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">JOIN</span> Course C2 <span class="hljs-keyword">on</span> C2.Cno <span class="hljs-operator">=</span> SC.Cno <span class="hljs-keyword">WHERE</span> <span class="hljs-variable">@cno</span><span class="hljs-operator">=</span>SC.Cno<br>    PRINT <span class="hljs-string">&#x27;优秀人数：&#x27;</span><span class="hljs-operator">+</span><span class="hljs-built_in">CAST</span>(<span class="hljs-variable">@S</span> <span class="hljs-keyword">AS</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>))<span class="hljs-operator">+</span><span class="hljs-string">&#x27; 良好人数：&#x27;</span><span class="hljs-operator">+</span><span class="hljs-built_in">CAST</span>(<span class="hljs-variable">@A</span> <span class="hljs-keyword">AS</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>))<span class="hljs-operator">+</span><span class="hljs-string">&#x27; 中等人数：&#x27;</span><span class="hljs-operator">+</span><span class="hljs-built_in">CAST</span>(<span class="hljs-variable">@B</span> <span class="hljs-keyword">AS</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>))<span class="hljs-operator">+</span><span class="hljs-string">&#x27; 及格人数：&#x27;</span><span class="hljs-operator">+</span><span class="hljs-built_in">CAST</span>(<span class="hljs-variable">@C</span> <span class="hljs-keyword">AS</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>))<span class="hljs-operator">+</span><span class="hljs-string">&#x27; 及格率：&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@per</span>;<br>GO<br><br><span class="hljs-comment">--7. 请设计一个存储过程实现下列功能：</span><br><span class="hljs-comment">--判断某个专业某门课程成绩排名为n的学生的成绩是否低于该门课程的平均分，如果低于平均分</span><br><span class="hljs-comment">--，则将其成绩改为平均分，否则输出学号、姓名、课程号、课程名、成绩。（提示：可以在存储过程内部使用游标）。</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> ex7 <span class="hljs-variable">@dept</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<span class="hljs-variable">@cno</span> <span class="hljs-type">char</span>(<span class="hljs-number">4</span>),<span class="hljs-variable">@n</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@avggrade</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@avggrade</span><span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(grade)<span class="hljs-keyword">from</span> sc<span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span>)<br><span class="hljs-keyword">declare</span> c <span class="hljs-keyword">scroll</span> <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span><br><span class="hljs-keyword">select</span> student.sno,sname,sc.cno,cname,grade <span class="hljs-keyword">from</span> student,sc,course<br><span class="hljs-keyword">where</span> student.sno<span class="hljs-operator">=</span>sc.sno <span class="hljs-keyword">and</span> course.cno<span class="hljs-operator">=</span>sc.cno <span class="hljs-keyword">and</span> course.cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span> <span class="hljs-keyword">and</span> student.sdept<span class="hljs-operator">=</span><span class="hljs-variable">@dept</span> <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> grade <span class="hljs-keyword">desc</span><br><span class="hljs-keyword">open</span> c<br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@sno</span> <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),<span class="hljs-variable">@sname</span> <span class="hljs-type">nchar</span>(<span class="hljs-number">6</span>),<span class="hljs-variable">@cno1</span>  <span class="hljs-type">char</span>(<span class="hljs-number">4</span>),<span class="hljs-variable">@cname</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<span class="hljs-variable">@grade</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">fetch</span> absolute <span class="hljs-variable">@n</span> <span class="hljs-keyword">from</span> c <span class="hljs-keyword">into</span> <span class="hljs-variable">@sno</span>,<span class="hljs-variable">@sname</span>,<span class="hljs-variable">@cno1</span>,<span class="hljs-variable">@cname</span>,<span class="hljs-variable">@grade</span><br>if <span class="hljs-variable">@grade</span><span class="hljs-operator">&gt;</span><span class="hljs-variable">@avggrade</span><br>print <span class="hljs-variable">@sno</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;   &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@sname</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;    &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@cno1</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;    &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@cname</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;    &#x27;</span><span class="hljs-operator">+</span><span class="hljs-built_in">cast</span>(<span class="hljs-variable">@grade</span> <span class="hljs-keyword">as</span> <span class="hljs-type">char</span>(<span class="hljs-number">4</span>))<br><span class="hljs-keyword">else</span><br>update sc<br><span class="hljs-keyword">set</span> grade<span class="hljs-operator">=</span><span class="hljs-variable">@avggrade</span><br><span class="hljs-keyword">where</span> <span class="hljs-keyword">current</span> <span class="hljs-keyword">of</span> c<br><span class="hljs-keyword">close</span> c<br><span class="hljs-keyword">deallocate</span> c<br><span class="hljs-comment">--测试</span><br><span class="hljs-keyword">exec</span>  ex7 <span class="hljs-string">&#x27;CS&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-number">3</span><br><br>完蛋，某个专业我就没看见<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span>  Student_grade_update <span class="hljs-variable">@cno</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>),<span class="hljs-variable">@rank</span> <span class="hljs-type">INT</span> <span class="hljs-keyword">AS</span><br>    <span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@avg</span> <span class="hljs-type">INT</span>,<span class="hljs-variable">@sno</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>),<span class="hljs-variable">@grade</span> <span class="hljs-type">SMALLINT</span><br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@avg</span><span class="hljs-operator">=</span><span class="hljs-built_in">AVG</span>(Grade) <span class="hljs-keyword">FROM</span> Student <span class="hljs-keyword">JOIN</span> SC S <span class="hljs-keyword">on</span> Student.Sno <span class="hljs-operator">=</span> S.Sno <span class="hljs-keyword">WHERE</span> <span class="hljs-variable">@cno</span><span class="hljs-operator">=</span>Cno<br>    <span class="hljs-keyword">DECLARE</span> csr3 <span class="hljs-keyword">SCROLL</span> <span class="hljs-keyword">CURSOR</span> <span class="hljs-keyword">FOR</span><br>        <span class="hljs-keyword">SELECT</span> Sno,Cno,Grade<br>        <span class="hljs-keyword">FROM</span> SC<br>        <span class="hljs-keyword">WHERE</span> <span class="hljs-variable">@cno</span><span class="hljs-operator">=</span>Cno<br>        <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> Grade <span class="hljs-keyword">DESC</span><br>    <span class="hljs-keyword">OPEN</span> csr3<br>    <span class="hljs-keyword">FETCH</span> ABSOLUTE <span class="hljs-variable">@rank</span> <span class="hljs-keyword">FROM</span> csr3 <span class="hljs-keyword">INTO</span> <span class="hljs-variable">@sno</span>,<span class="hljs-variable">@cno</span>,<span class="hljs-variable">@grade</span><br>    IF <span class="hljs-variable">@grade</span><span class="hljs-operator">&lt;</span><span class="hljs-variable">@avg</span><br>        <span class="hljs-keyword">BEGIN</span><br>            PRINT <span class="hljs-string">&#x27;成绩低于这门课程平均分&#x27;</span><br>            UPDATE SC <span class="hljs-keyword">SET</span> Grade<span class="hljs-operator">=</span><span class="hljs-variable">@avg</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-variable">@sno</span><span class="hljs-operator">=</span>Sno <span class="hljs-keyword">AND</span> <span class="hljs-variable">@cno</span><span class="hljs-operator">=</span>Cno<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">ELSE</span> <span class="hljs-keyword">BEGIN</span><br>            <span class="hljs-keyword">SELECT</span> S2.Sno,Sname,C.Cno,Cname,Grade<br>            <span class="hljs-keyword">FROM</span> Student <span class="hljs-keyword">JOIN</span> SC S2 <span class="hljs-keyword">on</span> Student.Sno <span class="hljs-operator">=</span> S2.Sno <span class="hljs-keyword">JOIN</span> Course C <span class="hljs-keyword">on</span> C.Cno <span class="hljs-operator">=</span> S2.Cno<br>            <span class="hljs-keyword">WHERE</span> <span class="hljs-variable">@cno</span><span class="hljs-operator">=</span>C.Cno <span class="hljs-keyword">AND</span> <span class="hljs-variable">@sno</span><span class="hljs-operator">=</span>S2.Sno<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">CLOSE</span> csr3<br>    <span class="hljs-keyword">DEALLOCATE</span> csr3<br>GO<br><br><br><span class="hljs-comment">--10.现有图书管理数据库， 其中包含如下几个表：</span><br><span class="hljs-comment">--读者表：reader(学号，姓名，性别，余额)</span><br><span class="hljs-comment">--借书表：lend（学号，书号，借书日期，应还日期，是否续借）</span><br><span class="hljs-comment">--欠款表：debt(学号，日期，欠款金额)</span><br><span class="hljs-comment">--还书表：return(学号，书号，还书日期) </span><br><span class="hljs-comment">--请设计一个存储过程实现续借或还书操作，具体要求如下：</span><br><span class="hljs-comment">--只有没有超期的书才可以续借（借书和续借时间都为30天），并修改应还日期，否则只能还书；还书时删除借书表内的借阅记录，并向还书表中插入一条还书记录，注意还书日期为当前日期，并且对超期图书，按照超期的天数计算出罚款金额（每天每本书罚款0.1元），并将罚款信息插入到欠款表中，同时将罚款从读者表的余额里扣除。</span><br>use 图书管理<span class="hljs-comment">--已建数据库</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> reader<br>(学号 <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),姓名 <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),性别 <span class="hljs-type">char</span>(<span class="hljs-number">2</span>),余额 money)<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> lend<br>(学号 <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),书号 <span class="hljs-type">char</span>(<span class="hljs-number">20</span>),借书日期 <span class="hljs-type">date</span>,应还日期 <span class="hljs-type">date</span>,是否续借 <span class="hljs-type">varchar</span>(<span class="hljs-number">6</span>))<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> debt<br>(学号 <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),日期 <span class="hljs-type">date</span>,欠款金额 money)<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> [<span class="hljs-keyword">return</span>]<br>(学号 <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),书号 <span class="hljs-type">char</span>(<span class="hljs-number">20</span>),还书日期 <span class="hljs-type">date</span>)<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> return_book <span class="hljs-variable">@sno</span> <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),<span class="hljs-variable">@bno</span> <span class="hljs-type">char</span>(<span class="hljs-number">20</span>)<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@rdate</span> <span class="hljs-type">date</span>,<span class="hljs-variable">@xujie</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">6</span>),<span class="hljs-variable">@day</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@rdate</span><span class="hljs-operator">=</span>应还日期,<span class="hljs-variable">@xujie</span><span class="hljs-operator">=</span>是否续借<br><span class="hljs-keyword">from</span> lend<br><span class="hljs-keyword">where</span> 学号<span class="hljs-operator">=</span><span class="hljs-variable">@sno</span> <span class="hljs-keyword">and</span> 书号<span class="hljs-operator">=</span><span class="hljs-variable">@bno</span><br> if (<span class="hljs-variable">@xujie</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;续借&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-variable">@rdate</span><span class="hljs-operator">&gt;=</span>getdate() ) <br> update lend <span class="hljs-keyword">set</span> 应还日期<span class="hljs-operator">=</span>dateadd(<span class="hljs-keyword">day</span>,<span class="hljs-number">30</span>,应还日期)<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>       <span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> lend<br>   <span class="hljs-keyword">where</span> 学号<span class="hljs-operator">=</span><span class="hljs-variable">@sno</span> <span class="hljs-keyword">and</span> 书号<span class="hljs-operator">=</span><span class="hljs-variable">@bno</span><br>   <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> [<span class="hljs-keyword">return</span>] <span class="hljs-keyword">values</span> (<span class="hljs-variable">@sno</span>,<span class="hljs-variable">@bno</span>,getdate())<br>   <span class="hljs-keyword">end</span><br>if(<span class="hljs-variable">@rdate</span><span class="hljs-operator">&lt;</span>getdate())<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">set</span> <span class="hljs-variable">@day</span><span class="hljs-operator">=</span>datediff(<span class="hljs-keyword">day</span>,<span class="hljs-variable">@rdate</span>,getdate())<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> debt <span class="hljs-keyword">values</span>(<span class="hljs-variable">@sno</span>,getdate(),<span class="hljs-variable">@day</span><span class="hljs-operator">*</span><span class="hljs-number">0.1</span>)<br>update reader <span class="hljs-keyword">set</span> 余额<span class="hljs-operator">=</span>余额<span class="hljs-operator">-</span><span class="hljs-variable">@day</span><span class="hljs-operator">*</span><span class="hljs-number">0.1</span><br><span class="hljs-keyword">where</span> 学号<span class="hljs-operator">=</span><span class="hljs-variable">@sno</span> <br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--测试</span><br><span class="hljs-keyword">exec</span> return_book <span class="hljs-string">&#x27;201900801&#x27;</span>,<span class="hljs-string">&#x27;12345678&#x27;</span><br><span class="hljs-keyword">exec</span> return_book <span class="hljs-string">&#x27;201900801&#x27;</span>,<span class="hljs-string">&#x27;112345678&#x27;</span><br><span class="hljs-keyword">exec</span> return_book <span class="hljs-string">&#x27;201900802&#x27;</span>,<span class="hljs-string">&#x27;12345678&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实验1&quot;&gt;&lt;a href=&quot;#实验1&quot; class=&quot;headerlink&quot; title=&quot;实验1&quot;&gt;&lt;/a&gt;实验1&lt;/h2&gt;&lt;h2 id=&quot;实验2&quot;&gt;&lt;a href=&quot;#实验2&quot; class=&quot;headerlink&quot; title=&quot;实验2&quot;&gt;&lt;/a&gt;实验2&lt;/h</summary>
      
    
    
    
    
    <category term="sql" scheme="https://github.com/sterne012/sterne012.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>数据库复习</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2021/12/18/sqlReview/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2021/12/18/sqlReview/</id>
    <published>2021-12-18T07:50:45.000Z</published>
    <updated>2022-01-07T03:33:23.059Z</updated>
    
    <content type="html"><![CDATA[<p>往往，最不详细的地方，可能更要考。  </p><h1 id="Chapter1-绪论"><a href="#Chapter1-绪论" class="headerlink" title="Chapter1.绪论"></a>Chapter1.绪论</h1><h2 id="1-1数据库系统概述"><a href="#1-1数据库系统概述" class="headerlink" title="1.1数据库系统概述"></a>1.1数据库系统概述</h2><h3 id="1-1-1概念"><a href="#1-1-1概念" class="headerlink" title="1.1.1概念"></a>1.1.1概念</h3><p>数据：是数据库中存储的基本对象</p><p>数据库：长期存储在计算机内、有组织的、可共享的大量数据的集合</p><p>数据库管理系统（DBMS）：主要功能：数据定义功能；数据组织、存储和管理；数据操纵功能；数据库的事务管理和运行管理；数据库的建立和维护功能；其他功能</p><h3 id="1-1-2历史"><a href="#1-1-2历史" class="headerlink" title="1.1.2历史"></a>1.1.2历史</h3><p>jump↑jump↓jump↑jump↓jump↑jump↓</p><p>人工管理-&gt;文件系统-&gt;数据库系统</p><h3 id="1-1-3数据库系统的特点"><a href="#1-1-3数据库系统的特点" class="headerlink" title="1.1.3数据库系统的特点"></a>1.1.3数据库系统的特点</h3><p>数据结构化：整体数据结构化，面向全组织，数据用数据模型描述，可以边长，最小存取单位是数据项</p><p>数据的共享性高、冗余度低、易扩充</p><p><strong>数据独立性高：</strong>物理独立性、逻辑独立性</p><ul><li><p>​    物理独立性：内模式，数据的物理存储改变，应用程序不用改变</p></li><li><p>​    逻辑独立性：外模式，数据的逻辑结构改变，用户程序不用改变</p></li></ul><p>数据由DBMS统一管理和控制：安全性保护、完整性检查、并发控制、数据库恢复</p><h2 id="1-2数据模型"><a href="#1-2数据模型" class="headerlink" title="1.2数据模型"></a>1.2数据模型</h2><p>数据模型是严格定义的一组概念的集合（说了跟没说）</p><p>用数据模型来抽象、表示和处理现实世界中的数据和信息</p><h3 id="1-2-1两大数据模型"><a href="#1-2-1两大数据模型" class="headerlink" title="1.2.1两大数据模型"></a>1.2.1两大数据模型</h3><ol><li>概念模型：也叫信息模型，按用户的观点对数据和信息建模</li><li>逻辑模型&amp;物理模型：按计算机观点<ul><li>逻辑模型：网状模型、层次模型、关系模型、面向对象模型等，按计算机系统的观点对数据建模，用DBMS实现</li><li>物理模型是对数据最底层的抽象，描述数据在系统内部的表示和存取方法。</li></ul></li></ol><p>抽象过程：现实世界中客观对象-&gt;概念模型-&gt;DBMS支持的数据模型</p><h3 id="1-2-2概念模型"><a href="#1-2-2概念模型" class="headerlink" title="1.2.2概念模型"></a>1.2.2概念模型</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ol><li><p>实体：客观存在并可相互区别的事物，可以是人、事、物或抽象概念</p></li><li><p>属性：实体所具有的某一特性</p></li><li><p>码：唯一标识实体的属性集</p></li><li><p>域：某一属性的取值范围</p></li><li><p>实体型：用实体名及属性名集合来抽象和刻画同类实体的模型？</p></li><li><p>实体集：同一类型实体的集合</p></li><li><p>联系：现实世界中事物内部及事物之间的联系在信息世界中反映为实体内部和实体之间的联系</p><p>实体内部：指组成实体的各属性之间的联系</p><p>实体之间：不同实体集之间的联系</p></li></ol><h4 id="两个实体型之间的联系"><a href="#两个实体型之间的联系" class="headerlink" title="两个实体型之间的联系"></a>两个实体型之间的联系</h4><p>一对一，一对多，多对多</p><h4 id="实体-联系方法（E-R图）"><a href="#实体-联系方法（E-R图）" class="headerlink" title="实体-联系方法（E-R图）"></a>实体-联系方法（E-R图）</h4><p>咋整啊，一个大题，找点题做</p><p>实体型：矩形</p><p>属性：实体的属性/联系的属性，用椭圆形，并且和相应实体连接</p><p>联系：菱形，与实体相连，并在边上标注联系的类型（1:1 1:n m:n 同一个节点上的编号不要重复)</p><h3 id="1-2-3数据模型的组成要素"><a href="#1-2-3数据模型的组成要素" class="headerlink" title="1.2.3数据模型的组成要素"></a>1.2.3数据模型的组成要素</h3><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>描述数据库的组成对象，以及对象之间的联系</p><p>是对系统静态特性的描述</p><h4 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h4><p>对各种对象的实例允许执行的操作和操作规则（突然java？），对系统动态特性的描述</p><p>主要是查询、更新</p><h4 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h4><p>给定数据模型中数据及联系所具有的制约和存储规则</p><p>用于限定数据库状态和数据库状态的变化，保证数据正确、有效、相容</p><h3 id="1-2-4常用数据模型"><a href="#1-2-4常用数据模型" class="headerlink" title="1.2.4常用数据模型"></a>1.2.4常用数据模型</h3><p>jump↑jump↓jump↑jump↓jump↑jump↓</p><h3 id="1-2-5关系模型"><a href="#1-2-5关系模型" class="headerlink" title="1.2.5关系模型"></a>1.2.5关系模型</h3><p>关系：对应一张表</p><p>元组：一行</p><p>属性：一列即一个属性，属性的名称就是属性名</p><p>主码：可以唯一确定一个元组的属性集</p><p>域：属性的取值范围</p><p>分量：元组中的一个属性值</p><p>关系模式：对关系的描述 Student(sno,sname,ssex,sdept,sage…)</p><h4 id="※关系的完整性约束"><a href="#※关系的完整性约束" class="headerlink" title="※关系的完整性约束"></a>※关系的完整性约束</h4><h5 id="实体完整性"><a href="#实体完整性" class="headerlink" title="实体完整性"></a>实体完整性</h5><h5 id="参照完整性"><a href="#参照完整性" class="headerlink" title="参照完整性"></a>参照完整性</h5><h5 id="用户定义的完整性"><a href="#用户定义的完整性" class="headerlink" title="用户定义的完整性"></a>用户定义的完整性</h5><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p>优点：建立在严格的数学概念基础上；概念单一；存取路径对用户透明</p><p>缺点：查询效率不如非关系数据模型；对用户请求进行优化提高了DBMS开发难度</p><h4 id="E-R模型到关系模型转化"><a href="#E-R模型到关系模型转化" class="headerlink" title="E-R模型到关系模型转化"></a>E-R模型到关系模型转化</h4><table><thead><tr><th>E-R模型</th><th>关系模型</th></tr></thead><tbody><tr><td>实体 属性 码</td><td>关系 属性 码</td></tr><tr><td>联系 1:1</td><td>转换为独立的关系模式，或与任意一端关系模式合并</td></tr><tr><td>1：n</td><td>转换为独立的关系模式，或与n端关系模式合并</td></tr><tr><td>m：n</td><td>转换为一个关系模式</td></tr></tbody></table><h2 id="1-3数据库系统结构"><a href="#1-3数据库系统结构" class="headerlink" title="1.3数据库系统结构"></a>1.3数据库系统结构</h2><h3 id="1-3-1数据库系统模式的概念"><a href="#1-3-1数据库系统模式的概念" class="headerlink" title="1.3.1数据库系统模式的概念"></a>1.3.1数据库系统模式的概念</h3><p>型type：对值的抽象类型</p><p>值value：型的具体值</p><p>模式schema：型的描述</p><p>实例instance：模式的具体值</p><h3 id="1-3-2数据库三级模式结构"><a href="#1-3-2数据库三级模式结构" class="headerlink" title="1.3.2数据库三级模式结构"></a>1.3.2数据库三级模式结构</h3><img src="/2021/12/18/sqlReview/AA8C70DC2A3A31D2117B6C2F9ADCFF22.png" class="" title="img"><h4 id="内模式（存储模式）"><a href="#内模式（存储模式）" class="headerlink" title="内模式（存储模式）"></a>内模式（存储模式）</h4><p>数据物理结构和存储方式的描述，在数据库内部的表示方式</p><p><strong>一个数据库只有一个内模式</strong></p><p>存储方式（顺序？B树？hash？）</p><p>索引</p><p>压缩存储</p><p>加密</p><p>存储记录结构的规定</p><h4 id="模式（逻辑模式）"><a href="#模式（逻辑模式）" class="headerlink" title="模式（逻辑模式）"></a>模式（逻辑模式）</h4><p>内模式和外模式的中间层，<strong>一个数据库只有一个模式</strong></p><p>数据库中<strong>全体</strong>数据的逻辑结构和特征的描述</p><p>所有用户的公共数据视图，综合所有用户需求</p><p>模式的定义：</p><ul><li>数据的逻辑结构（数据项名字、类型、取值范围）</li><li>数据之间的关系</li><li>数据有关的安全性、完整性要求</li></ul><p><strong>是数据库的中心与关键，独立于数据库其他层次，应该首先设计模式</strong></p><h4 id="外模式（子模式或用户模式）"><a href="#外模式（子模式或用户模式）" class="headerlink" title="外模式（子模式或用户模式）"></a>外模式（子模式或用户模式）</h4><p>用户使用的<strong>局部</strong>逻辑结构和特征的描述</p><p>模式-外模式：一对多</p><p><strong>一个数据库可以有多个外模式</strong>，反映不同用户的应用需求，看待数据的方式、保密需求</p><p>外模式-应用：一对多</p><p>同一外模式也可为某一用户的多个应用系统使用</p><p>用途：安全性；用户只能看见部分数据，保密性</p><h3 id="1-3-3数据库二级映像功能与数据独立性"><a href="#1-3-3数据库二级映像功能与数据独立性" class="headerlink" title="1.3.3数据库二级映像功能与数据独立性"></a>1.3.3数据库二级映像功能与数据独立性</h3><p>二级映像在DBMS内部实现三个抽象层次（模式）的联系和转换</p><h4 id="外模式-模式映像"><a href="#外模式-模式映像" class="headerlink" title="外模式/模式映像"></a>外模式/模式映像</h4><p>定义外模式与模式间的对应关系，</p><p>映像定义通常包含在各自外模式的描述中？</p><p>保证数据逻辑独立性：模式改变时，修改映像，使外模式不变；从而应用程序不必修改</p><h4 id="模式-内模式映像"><a href="#模式-内模式映像" class="headerlink" title="模式/内模式映像"></a>模式/内模式映像</h4><p>定义数据全局逻辑结构与存储结构之间的对应关系</p><p>模式/内模式映像唯一（模式和内模式都唯一了显然）</p><p>映像定义通常包含在模式描述中</p><p>保证数据物理独立性：存储结构改变，修改映像，使模式不变；从而外模式、应用程序不必修改</p><h2 id="1-4数据库系统组成"><a href="#1-4数据库系统组成" class="headerlink" title="1.4数据库系统组成"></a>1.4数据库系统组成</h2><h3 id="硬件平台及数据库"><a href="#硬件平台及数据库" class="headerlink" title="硬件平台及数据库"></a>硬件平台及数据库</h3><p>足够大的内外存，较高的通道能力，提高数据传送率</p><h3 id="软件：DBMS"><a href="#软件：DBMS" class="headerlink" title="软件：DBMS"></a>软件：DBMS</h3><h3 id="人员"><a href="#人员" class="headerlink" title="人员"></a>人员</h3><img src="/2021/12/18/sqlReview/0C46E2209A9A5AB1BF0B487973EF0C90.png" class="" title="img"><h4 id="数据库管理员"><a href="#数据库管理员" class="headerlink" title="数据库管理员"></a>数据库管理员</h4><p>决定数据库中信息内容和结构</p><p>存储结构和存取策略</p><p>安全性要求和完整性约束条件</p><p>监控数据库的使用和运行</p><p>数据库的改进和重组</p><h4 id="系统分析员和数据库设计人员"><a href="#系统分析员和数据库设计人员" class="headerlink" title="系统分析员和数据库设计人员"></a>系统分析员和数据库设计人员</h4><p>系统分析员：与用户协商，数据库系统概要设计</p><p>设计人员：用户需求调查和系统分析，确定数据库中的数据，设计各级模式</p><h4 id="应用程序员"><a href="#应用程序员" class="headerlink" title="应用程序员"></a>应用程序员</h4><p>设计和编写应用系统的程序模块</p><p>进行调试和安装</p><h4 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h4><p>偶然用户：不经常访问，但每次访问往往需要不同的数据库信息，中高级管理人员</p><p>简单用户：查询和更新数据库，职员</p><p>复杂用户：直接使用数据库语言访问数据库，工程师，科学家</p><h1 id="Chapter2-关系数据库"><a href="#Chapter2-关系数据库" class="headerlink" title="Chapter2.关系数据库"></a>Chapter2.关系数据库</h1><h2 id="2-1关系模型概述"><a href="#2-1关系模型概述" class="headerlink" title="2.1关系模型概述"></a>2.1关系模型概述</h2><p>域：一组具有相同数据类型的值的集合 D={1,2,3}</p><p>基数：域中数据个数</p><p>笛卡尔积：就笛卡尔积</p><p>元组：笛卡尔积中每一个元素(d1,d2,d3,…,dn)</p><p>分量：di叫分量</p><p>基数：各集合基数相乘</p><p>关系：从笛卡尔积构造出的表中选取有实际意义的元组构造关系</p><p>D1*D2*…*Dn的子集叫做在域D1，D2，…，Dn上的关系，表示为R(D1，D2，…，Dn)</p><p><strong>候选码：关系中的某一属性组能唯一识别一个元组</strong></p><p><strong>主码：若某个关系有多个候选码，选定其中一个作主码</strong></p><p><strong>主属性：候选码的所有属性</strong></p><p><strong>非码属性：不包含在任何候选码中的属性</strong></p><p><strong>全码：关系模式的所有属性组是这个关系的候选码</strong></p><p>关系模式：关系的型</p><p>关系：很多条内容，关系模式和关系又统称为关系</p><h2 id="2-2关系操作"><a href="#2-2关系操作" class="headerlink" title="2.2关系操作"></a>2.2关系操作</h2><p>查询：选择、投影、连接、除、并、交、差、笛卡尔积</p><p>数据更新：插入、删除、修改</p><p><strong>5种基本操作：选择、投影、并、差、笛卡尔积</strong></p><p>能够用来表达其他的运算</p><h2 id="2-3关系的完整性"><a href="#2-3关系的完整性" class="headerlink" title="2.3关系的完整性"></a>2.3关系的完整性</h2><p>关系的完整性约束：实体完整性，参照完整性，用户定义的完整性</p><p><strong>实体完整性和参照完整性又叫关系的两个不变性</strong>，用户定义的完整性体现具体领域中的语义约束</p><h3 id="实体完整性-1"><a href="#实体完整性-1" class="headerlink" title="实体完整性"></a>实体完整性</h3><p><strong>若属性A是关系R的主属性，则属性A不能取空值</strong></p><h3 id="参照完整性-1"><a href="#参照完整性-1" class="headerlink" title="参照完整性"></a>参照完整性</h3><p>1.关系间的引用：引用关系或其他关系的某个属性</p><p>2.外码：F是R的一个或一组属性，但不是R的码，如果F与基本关系S的主码K相对应，则称F是基本关系R的外码</p><p>R称为参照关系，S为被参照关系</p><p>所以F必是原来关系中的一个主码</p><p><strong>参照完整性：外码F或者取空值（若F是一组属性，F的每个属性值都为空值），或者等于S中某个元组的主码值</strong></p><h3 id="用户定义的完整性-1"><a href="#用户定义的完整性-1" class="headerlink" title="用户定义的完整性"></a>用户定义的完整性</h3><p>针对某一具体关系数据库的约束条件，反映某一具体应用所涉及的数据必须满足的语义要求。</p><p>关系模型提供定义和检验这类完整性的机制</p><p>例如：性别只能输入男或女</p><h2 id="2-4关系代数"><a href="#2-4关系代数" class="headerlink" title="2.4关系代数"></a>2.4关系代数</h2><p>一种抽象查询语言</p><p>看ppt</p><p>运算符：</p><p>集合运算符（并、差、交、笛卡尔积）</p><p>专门的关系运算符（选择、投影、连接、除）</p><p>算数运算符（加减乘除，比较大小）</p><p>逻辑运算符（与或非）</p><p>元组的连接</p><p>象集<br>$$<br>选择：\sigma_{Sage&lt;20}(Student) \<br>投影：\pi_{Sname,Sdept}(Student)\<br>(关系的)连接：R\Join_{R.a=S.a} S\<br>除：R\div S<br>$$<br>自然连接：连有一个属性列相等的</p><p>连接还有左外连接、右外连接、全外连接（左+右），外连接其他属性上填NULL</p><p>关系代数不能表达：最大最小值，排序，模糊查询</p><p>没了！</p><h1 id="Chapter3-5-8-SQL各种操作"><a href="#Chapter3-5-8-SQL各种操作" class="headerlink" title="Chapter3.5.8 SQL各种操作"></a>Chapter3.5.8 SQL各种操作</h1><p>3-关系数据库标准语言SQL</p><p>5-数据库完整性</p><p>T-sql编程</p><p>8-数据库编程</p><p>见另一篇</p><h1 id="Chapter4-数据库安全性"><a href="#Chapter4-数据库安全性" class="headerlink" title="Chapter4.数据库安全性"></a>Chapter4.数据库安全性</h1><p>概念部分还是再写一下</p><h2 id="4-1数据库安全性概述"><a href="#4-1数据库安全性概述" class="headerlink" title="4.1数据库安全性概述"></a>4.1数据库安全性概述</h2><h3 id="4-1-1数据库的不安全因素"><a href="#4-1-1数据库的不安全因素" class="headerlink" title="4.1.1数据库的不安全因素"></a>4.1.1数据库的不安全因素</h3><ol><li><p>非授权用户对数据库的恶意存取和破坏</p><p>安全机制：用户身份鉴别、存取控制、视图</p></li><li><p>数据库中重要或敏感的数据被泄露</p><p>安全机制：强制存取控制、数据加密存储和加密传输、审计日志分析</p></li><li><p>安全环境的脆弱性：与计算机系统的安全性紧密联系</p><p>安全机制：建立一套可信计算机系统的概念和标准</p></li></ol><h4 id="计算机系统安全性问题"><a href="#计算机系统安全性问题" class="headerlink" title="计算机系统安全性问题"></a>计算机系统安全性问题</h4><p>技术安全类：系统采用具有一定安全性的硬件、软件来实现对计算机系统及其所存数据的安全保护，当系统受到供给时仍能保证系统正常运行，保证数据不增加、不丢失、不泄露。</p><p>管理安全类：管理不善导致的计算机设备和数据介质的物理破坏、丢失等软硬件意外故障、场地的意外事故等安全问题</p><p>政策法律类：政府部门建立的有关计算机犯罪、数据安全保密的法律道德准则和政策法规、法令</p><h3 id="4-1-2安全标准简介"><a href="#4-1-2安全标准简介" class="headerlink" title="4.1.2安全标准简介"></a>4.1.2安全标准简介</h3><h4 id="TCESC-TDI：安全策略、责任、保证、文档"><a href="#TCESC-TDI：安全策略、责任、保证、文档" class="headerlink" title="TCESC/TDI：安全策略、责任、保证、文档"></a>TCESC/TDI：安全策略、责任、保证、文档</h4><p>四组七个等级，A表示可靠性最高，各安全级别 偏序向下兼容</p><h5 id="D"><a href="#D" class="headerlink" title="D"></a>D</h5><p>一切不符合更高标准的系统</p><p>DOS</p><h5 id="C-C1-C2"><a href="#C-C1-C2" class="headerlink" title="C(C1,C2)"></a>C(C1,C2)</h5><p>C1：初级的安全保护；能够实现对用户和数据的分离，进行自主存取控制（DAC）(?)，保护或限制用户权限的传播</p><p>C2：安全产品的最低档次；提供受控的存取保护，DAC细化，以个人身份注册负责，实施审计和资源隔离</p><p>win2000 oracle7</p><h5 id="B-B1-B2-B3"><a href="#B-B1-B2-B3" class="headerlink" title="B(B1,B2,B3)"></a>B(B1,B2,B3)</h5><p>B1：标记安全保护；安全和可信的产品；对系统的数据加标记，对标记的主体和客体试试强制存取控制（MAC，用户需要与标记的数据标签对等才能使用数据）、审计等安全机制</p><p>Trusted Oracle 7、sql server 11.0.6</p><p>B2：结构化保护；建立形式化的安全策略模型并对系统内的所有主体和客体实施DAC&amp;MAC</p><p>B3：安全域；TCB满足访问监控器的要求，审计跟踪能力更强，提供系统恢复功能</p><h5 id="A-A1"><a href="#A-A1" class="headerlink" title="A(A1)"></a>A(A1)</h5><p>A1：验证设计；提供B3的同时给出系统的形式化设计说明和验证以确信各安全保护真正实现；理论阶段</p><h4 id="CC"><a href="#CC" class="headerlink" title="CC"></a>CC</h4><p>提出国标公认的表述信息技术安全性的结构</p><p>把信息产品的安全要求分为：安全功能要求、安全保证要求</p><h2 id="4-2数据库安全性控制"><a href="#4-2数据库安全性控制" class="headerlink" title="4.2数据库安全性控制"></a>4.2数据库安全性控制</h2><h3 id="非法使用数据库的情况"><a href="#非法使用数据库的情况" class="headerlink" title="非法使用数据库的情况"></a>非法使用数据库的情况</h3><ol><li>编写合法程序绕过DBMS及其授权机制</li><li>直接或编写应用程序执行非授权操作</li><li>通过多次合法查询数据库从中推导出一些保密数据</li></ol><h3 id="安全性控制的常用方法（举例）"><a href="#安全性控制的常用方法（举例）" class="headerlink" title="安全性控制的常用方法（举例）"></a>安全性控制的常用方法（举例）</h3><ol><li>用户标识与鉴别</li><li>存取控制</li><li>视图</li><li>审计</li><li>加密（存储加密、传输加密）</li></ol><h3 id="4-2-1用户标识与鉴别"><a href="#4-2-1用户标识与鉴别" class="headerlink" title="4.2.1用户标识与鉴别"></a>4.2.1用户标识与鉴别</h3><p>用户身份鉴别：系统提供最外层安全保护措施；用户标识由用户名和用户标识号组成（用户标识号在系统整个声明周期唯一）</p><h4 id="静态口令鉴别"><a href="#静态口令鉴别" class="headerlink" title="静态口令鉴别"></a>静态口令鉴别</h4><p>一般由用户自己设定静态口令（密码）</p><h4 id="动态口令鉴别"><a href="#动态口令鉴别" class="headerlink" title="动态口令鉴别"></a>动态口令鉴别</h4><p>每次产生新的动态口令，一次一密（短信验证码）</p><h4 id="生物特征鉴别"><a href="#生物特征鉴别" class="headerlink" title="生物特征鉴别"></a>生物特征鉴别</h4><p>通过生物特征认证（指纹、虹膜）</p><h4 id="智能卡鉴别"><a href="#智能卡鉴别" class="headerlink" title="智能卡鉴别"></a>智能卡鉴别</h4><p>智能卡是一种不可复制的硬件，内置集成电路芯片，硬件加密功能</p><h3 id="4-2-2存取控制"><a href="#4-2-2存取控制" class="headerlink" title="4.2.2存取控制"></a>4.2.2存取控制</h3><h4 id="存取控制子系统"><a href="#存取控制子系统" class="headerlink" title="存取控制子系统"></a>存取控制子系统</h4><h5 id="用户权限定义"><a href="#用户权限定义" class="headerlink" title="用户权限定义"></a>用户权限定义</h5><p>用户对某一数据对象的操作权利称为权限</p><p>DBMS定义的用户权限存放在数据字典中，定义规则称为安全规则或授权规则</p><h5 id="合法权限检查"><a href="#合法权限检查" class="headerlink" title="合法权限检查"></a>合法权限检查</h5><p>用户发出存取数据库操作请求</p><p>DBMS查找数据字典，进行合法权限检查</p><h4 id="常用存取控制方法"><a href="#常用存取控制方法" class="headerlink" title="常用存取控制方法"></a>常用存取控制方法</h4><p>4.2.3&amp;4.2.6</p><h3 id="4-2-3自主存取控制方法"><a href="#4-2-3自主存取控制方法" class="headerlink" title="4.2.3自主存取控制方法"></a>4.2.3自主存取控制方法</h3><p>DAC</p><ol><li>用户对不同的数据对象有不同存取权限</li><li>不同用户对同一对象也有不同权限</li><li>用户还可将其拥有的存取权限转授给其他用户</li></ol><p>GRANT/REVOKE语句</p><p>用户权限组成：数据库对象；操作类型</p><p>定义用户存取权限：定义用户可以在哪些数据库对象上进行哪些类型的操作（？</p><p>↑这个词（定义用户存取权限）叫做授权</p><p>缺点：仅仅通过对数据的存取权限进行安全控制，数据本身并无安全标记，收权后，数据可能还存在于原用户中</p><h3 id="4-2-4授权与回收"><a href="#4-2-4授权与回收" class="headerlink" title="4.2.4授权与回收"></a>4.2.4授权与回收</h3><p>sql语句见另一篇</p><p>循环授权：A-&gt;B-&gt;C-(x)&gt;A</p><h3 id="4-2-5数据库角色"><a href="#4-2-5数据库角色" class="headerlink" title="4.2.5数据库角色"></a>4.2.5数据库角色</h3><p>被命名的一组与数据库操作相关的权限，角色是权限的集合，可以为一组具有相同权限的用户创建一个角色，以简化为每个用户授权的过程</p><p>角色的sql语句</p><h3 id="4-2-6强制存取控制方法"><a href="#4-2-6强制存取控制方法" class="headerlink" title="4.2.6强制存取控制方法"></a>4.2.6强制存取控制方法</h3><ol><li>B1级</li><li>每一个数据对象被标以一定的密级</li><li>每一个用户被授予某一个级别的许可证</li><li>对于任意一个对象，只有具有合法许可证的用户才可以存取</li></ol><p>主体：系统中的活动实体（DBMS所管理的实际用户，代表用户的各进程）</p><p>客体：系统中被动实体，受主体操作的（文件、基表、索引、视图）</p><p>敏感度标记：对于主体和客体，DBMS为每个实例指派一个敏感度标记</p><p>敏感度标记级别：绝密TS、机密S、可信C、公开P</p><p>主体的敏感度标记称为<strong>许可证级别</strong></p><p>客体的敏感度标记称为<strong>密级</strong></p><h4 id="强制存取控制规则"><a href="#强制存取控制规则" class="headerlink" title="强制存取控制规则"></a>强制存取控制规则</h4><ol><li>仅当主体许可证级别大于或等于客体密级时，该主体可以读相应客体（不能写）</li><li>仅当主体许可证级别小于或等于客体密级时，该主题可以写相应客体（不能读）</li></ol><p>禁止了拥有高许可证级别的主题更新低密级的数据对象</p><p>举个例子，高考试卷（客体）我（主体，密级低于高考试卷）阅卷人（主体，密级高于高考试卷）</p><p>我可以写，不能读答案（这个地方感觉不够严谨）；阅卷人可以读，但不能写试卷</p><p>强制存取控制是对数据本身进行密级标记，<strong>标记和数据是不可分的整体</strong></p><p>实现MAC首先要实现DAC（高级的向下兼容）</p><h2 id="4-3视图机制"><a href="#4-3视图机制" class="headerlink" title="4.3视图机制"></a>4.3视图机制</h2><p>吧保密的数据对无权存取这些数据的用户隐藏起来，对数据提供一定的安全保护；提供数据独立性</p><p>剩下的都交给sql语句</p><h2 id="4-4审计"><a href="#4-4审计" class="headerlink" title="4.4审计"></a>4.4审计</h2><p>审计日志：将用户对数据库的所有操作自动记录下来存入其中</p><p>管理员用日志找出非法存取数据的人、时间和内容；对潜在的威胁提前采取措施加以防范</p><p>C2以上必须具有审计机制</p><h3 id="审计功能的可选性"><a href="#审计功能的可选性" class="headerlink" title="审计功能的可选性"></a>审计功能的可选性</h3><p>审计费时间空间，可以根据应用对安全性的要求，灵活地打开或关闭审计功能</p><h3 id="审计事件"><a href="#审计事件" class="headerlink" title="审计事件"></a>审计事件</h3><h4 id="服务器事件"><a href="#服务器事件" class="headerlink" title="服务器事件"></a>服务器事件</h4><p>审计数据库服务器发生的事件</p><h4 id="系统权限"><a href="#系统权限" class="headerlink" title="系统权限"></a>系统权限</h4><p>对系统拥有的结构或模式对象进行操作的审计</p><p>要求该操作的权限是通过系统权限获得的</p><h4 id="语句事件"><a href="#语句事件" class="headerlink" title="语句事件"></a>语句事件</h4><p>SQL语句的审计（DDL DML DQL DCL）</p><h4 id="模式对象事件"><a href="#模式对象事件" class="headerlink" title="模式对象事件"></a>模式对象事件</h4><p>对特定模式对象（?）上进行的SELECT或DML操作的审计</p><h3 id="审计功能"><a href="#审计功能" class="headerlink" title="审计功能"></a>审计功能</h3><p>不是很懂诶</p><img src="/2021/12/18/sqlReview/739EE19E97F381466E58E432FC2AA67D.png" class="" title="img"><h3 id="审计分类"><a href="#审计分类" class="headerlink" title="审计分类"></a>审计分类</h3><h4 id="用户级审计"><a href="#用户级审计" class="headerlink" title="用户级审计"></a>用户级审计</h4><p>针对自己创建的数据库表视图进行审计</p><p>记录所有用户的一切成功和不成功访问要求以及各种类型的SQL操作</p><h4 id="系统级审计"><a href="#系统级审计" class="headerlink" title="系统级审计"></a>系统级审计</h4><p>DBA设置(DATABASE ADMIN)</p><p>检测成功或失败的登录请求</p><p>检测GRANT和REVOKE以及其他数据库级权限下的操作</p><p>AUDIT：设置审计</p><p>NOAUDIT：取消审计</p><p>what怎么感觉从来没见过</p><h2 id="4-5数据加密"><a href="#4-5数据加密" class="headerlink" title="4.5数据加密"></a>4.5数据加密</h2><p>防止数据库中数据在存储和传输中失密</p><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>根据一定算法将原始数据（明文）变为不可直接识别的格式（密文）</p><h3 id="加密方法"><a href="#加密方法" class="headerlink" title="加密方法"></a>加密方法</h3><h4 id="存储加密"><a href="#存储加密" class="headerlink" title="存储加密"></a>存储加密</h4><h5 id="透明存储加密（内核级加密）"><a href="#透明存储加密（内核级加密）" class="headerlink" title="透明存储加密（内核级加密）"></a>透明存储加密（内核级加密）</h5><p>将数据写到磁盘时对数据进行加密，授权用户读取时解密</p><p>性能较好，安全完备性较高</p><h5 id="非透明存储加密"><a href="#非透明存储加密" class="headerlink" title="非透明存储加密"></a>非透明存储加密</h5><p>通过多个加密函数实现</p><h4 id="传输加密（计算机网络）"><a href="#传输加密（计算机网络）" class="headerlink" title="传输加密（计算机网络）"></a>传输加密（计算机网络）</h4><h5 id="链路加密"><a href="#链路加密" class="headerlink" title="链路加密"></a>链路加密</h5><p>在链路层进行加密，传输信息由报头和报文两部分组成，报头报问均加密</p><h5 id="端到端加密"><a href="#端到端加密" class="headerlink" title="端到端加密"></a>端到端加密</h5><p>发送端加密，接收端解密</p><h2 id="4-6其他安全性保护"><a href="#4-6其他安全性保护" class="headerlink" title="4.6其他安全性保护"></a>4.6其他安全性保护</h2><h3 id="推理控制"><a href="#推理控制" class="headerlink" title="推理控制"></a>推理控制</h3><p>处理强制存取控制未解决的问题，避免用户通过多次合法查询数据库从中推导出一些保密数据（非法使用数据库3）</p><p>常用方法：基于函数依赖的推理控制；基于敏感关联的推理控制</p><h3 id="隐蔽信道"><a href="#隐蔽信道" class="headerlink" title="隐蔽信道"></a>隐蔽信道</h3><h3 id="数据隐私保护"><a href="#数据隐私保护" class="headerlink" title="数据隐私保护"></a>数据隐私保护</h3><p>个人控制隐私信息的能力，范围设计数据收集、存储、处理、发布等</p><h2 id="4-7sql-server的安全管理"><a href="#4-7sql-server的安全管理" class="headerlink" title="4.7sql server的安全管理"></a>4.7sql server的安全管理</h2><p>另一篇</p><h1 id="Chapter7-数据库设计"><a href="#Chapter7-数据库设计" class="headerlink" title="Chapter7.数据库设计"></a>Chapter7.数据库设计</h1><p>数据库设计的基本步骤：7.2-7.6标题</p><p>不想敲了</p><p>数据库设计的特点：三分技术，七分管理，十二分基础数据</p><p>数据库设计基本步骤：</p><ol><li>需求分析</li><li>概念结构设计</li><li>逻辑结构设计</li><li>物理结构设计</li><li>数据库实施</li><li>数据库运行和维护</li></ol><h2 id="7-1数据库设计概述"><a href="#7-1数据库设计概述" class="headerlink" title="7.1数据库设计概述"></a>7.1数据库设计概述</h2><h2 id="7-2需求分析"><a href="#7-2需求分析" class="headerlink" title="7.2需求分析"></a>7.2需求分析</h2><p>分析用户活动，产生业务流程图</p><p>确定系统范围，产生业务范围图</p><p>分析用户活动及所设计的数据，产生<strong>数据流图</strong></p><p>分析系统数据，产生<strong>数据字典</strong></p><p>分析方法：自顶向下的结构化分析方法</p><h3 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h3><p>是各类数据描述的集合，不是数据本身</p><p>是进行详细的数据收集和数据分析所获得的主要结果</p><p>数据字典在需求分析阶段建立，在数据库设计过程中不断修改、充实、完善</p><p>看一下课本P207</p><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><p>数据项</p><p>数据结构</p><p>数据流</p><p>数据存储</p><p>处理过程</p><h2 id="7-3概念结构设计"><a href="#7-3概念结构设计" class="headerlink" title="7.3概念结构设计"></a>7.3概念结构设计</h2><p>是整个数据库设计的关键</p><p>概念模型：E-R模型（第一章扒出来讲过）</p><p>设计方法：自顶向下，自底向上，逐步扩张，混合策略</p><p>常用策略：自顶向下进行需求分析，自底向上设计概念结构</p><p>实体和属性的划分准则：</p><ol><li>属性不再有需要描述的性质，属性是不可分的数据项</li><li>属性不与其他实体有联系，联系仅发生在实体之间</li></ol><h2 id="7-4逻辑结构设计"><a href="#7-4逻辑结构设计" class="headerlink" title="7.4逻辑结构设计"></a>7.4逻辑结构设计</h2><p>将概念模型转化为一般的关系、网状、层次模型</p><p>将关系模型向特定DBMS数据模型转换</p><p>设计用户子模式，采用视图机制</p><h2 id="7-5物理结构设计"><a href="#7-5物理结构设计" class="headerlink" title="7.5物理结构设计"></a>7.5物理结构设计</h2><p>物理结构主要指：存取方法（B+树索引方法，聚簇方法，HASH方法等）和存储结构</p><p>对物理结构评价：时间和空间效率、维护代价</p><p>选择索引的规则：经常在查询条件中出现、经常用作聚集函数的参数、经常在连接操作的连接条件中出现</p><p>聚簇方法：为提高某个属性（或属性组）的查询速度，把这个（或这些）属性（属性称为聚簇码）上具有相同值的元组集中存放在连续的物理块称为聚簇，提高按聚簇属性进行查询的效率，节省存储空间</p><h2 id="7-6数据库的实施和维护"><a href="#7-6数据库的实施和维护" class="headerlink" title="7.6数据库的实施和维护"></a>7.6数据库的实施和维护</h2><h1 id="Chapter10-数据库恢复技术"><a href="#Chapter10-数据库恢复技术" class="headerlink" title="Chapter10.数据库恢复技术"></a>Chapter10.数据库恢复技术</h1><h2 id="10-1事务的基本概念"><a href="#10-1事务的基本概念" class="headerlink" title="10.1事务的基本概念"></a>10.1事务的基本概念</h2><p>定义：一个数据库操作序列，不可分割的工作单位，恢复和并发控制的基本单位</p><p>一个程序通常包含多个事务</p><h3 id="事务的特性-ACID"><a href="#事务的特性-ACID" class="headerlink" title="事务的特性 ACID"></a>事务的特性 ACID</h3><h4 id="原子性-Atomicity"><a href="#原子性-Atomicity" class="headerlink" title="原子性 Atomicity"></a>原子性 Atomicity</h4><p>事务是数据库的逻辑工作单位</p><h4 id="一致性-Consistency"><a href="#一致性-Consistency" class="headerlink" title="一致性 Consistency"></a>一致性 Consistency</h4><p>事务执行结果必须是使数据库从一个一致性状态变到另一个一致性状态</p><p>一致性：只包含成功事务提交的结果</p><p>不一致：包含失败事务的结果</p><h4 id="隔离性-Isolation"><a href="#隔离性-Isolation" class="headerlink" title="隔离性 Isolation"></a>隔离性 Isolation</h4><p>对于并发事务而言，一个事务的执行不能被其他事务干扰；并发执行的事务之间不能互相干扰</p><h4 id="持续性-Durability"><a href="#持续性-Durability" class="headerlink" title="持续性 Durability"></a>持续性 Durability</h4><p>事务一旦提交，他对数据库中数据的改变就应该是永久性的</p><h2 id="10-2数据库恢复概述"><a href="#10-2数据库恢复概述" class="headerlink" title="10.2数据库恢复概述"></a>10.2数据库恢复概述</h2><p>把数据库从错误状态恢复到某一已知的正确状态（也叫一致状态\完整状态）</p><h2 id="10-3故障的种类-amp-10-5恢复策略"><a href="#10-3故障的种类-amp-10-5恢复策略" class="headerlink" title="10.3故障的种类&amp;10.5恢复策略"></a>10.3故障的种类&amp;10.5恢复策略</h2><h3 id="1-事务内部的故障"><a href="#1-事务内部的故障" class="headerlink" title="1.事务内部的故障"></a>1.事务内部的故障</h3><p>可以预期的故障（程序问题）不考虑</p><p>仅指非预期的故障：运算溢出、并发事务发生死锁而被撤销的事务、违反完整性限制</p><p>事务在运行至正常终止前被终止</p><h3 id="事务故障恢复：撤销事务（UNDO）"><a href="#事务故障恢复：撤销事务（UNDO）" class="headerlink" title="事务故障恢复：撤销事务（UNDO）"></a>事务故障恢复：撤销事务（UNDO）</h3><p>由恢复子系统利用日志文件撤销此事务已对数据库进行的修改</p><p>由系统自动完成，不需用户干预</p><p>步骤：</p><ol><li><p>反向扫描日志文件（从最后向前扫描），查找该事务的更新操作</p></li><li><p>对该事务的更新操作执行逆操作，即将日志记录中更新前的值写入数据库</p><p>insert，更新前值为空，做delete</p><p>delete，同理，做insert</p><p>update，用修改前的值代替修改后的值</p></li><li><p>继续反向扫描日志文件，查找该事务的其他更新操作，并做同样处理</p></li><li><p>直到读到此事务的开始标记停止，事务故障恢复完成</p></li></ol><h3 id="系统故障"><a href="#系统故障" class="headerlink" title="系统故障"></a>系统故障</h3><p>软故障，系统停止运行，所有正在运行的事务非正常终止，不破坏数据库，内存中数据库缓冲区信息全部丢失</p><p>原因：硬件错误（CPU故障）、操作系统故障、DBMS代码错误、断电</p><h3 id="系统故障恢复（UNDO-REDO）"><a href="#系统故障恢复（UNDO-REDO）" class="headerlink" title="系统故障恢复（UNDO+REDO）"></a>系统故障恢复（UNDO+REDO）</h3><p>（在系统重新启动时自动完成，不需用户干预）</p><ol><li><p>发生故障时，事务未提交，但对数据库的更新可能已写入数据库</p><p>撤销（UNDO）所有<strong>未完成</strong>的事务</p></li><li><p>发生故障时，事务已提交，但缓冲区中信息尚未完全写入数据库</p><p>重做（REDO）所有<strong>已提交</strong>的事务</p></li></ol><p>恢复步骤：</p><ol><li><p>正向扫描日志文件（从头扫描），未完成事务记入撤销队列，已提交事务记入重做队列</p><p>撤销（UNDO）队列：未完成的事务队列（只有BEGIN TRANSACTION）</p><p>重做（REDO）队列：已提交的事务队列（既有BEGIN TRANSACTION也有COMMIT）</p></li><li><p>对撤销队列事务进行撤销处理</p><p>反向扫描日志文件，对每个UNDO事务的更新操作执行逆操作（见事务故障）</p></li><li><p>对重做队列事务进行重做处理</p><p>正向扫描日志文件，对每个REDO 事务重新执行登记的操作，将日志记录中更新后的值写入数据库</p></li></ol><h3 id="介质故障"><a href="#介质故障" class="headerlink" title="介质故障"></a>介质故障</h3><p>硬故障，外存故障：磁盘损坏、磁头碰撞、瞬间强磁干扰</p><h3 id="介质故障恢复（重装备份并恢复到一致性状态-REDO）"><a href="#介质故障恢复（重装备份并恢复到一致性状态-REDO）" class="headerlink" title="介质故障恢复（重装备份并恢复到一致性状态+REDO）"></a>介质故障恢复（重装备份并恢复到一致性状态+REDO）</h3><p>恢复：装入数据库发生故障前某个时刻的数据副本，重做自此之后的所有<strong>成功</strong>事务，将事务已提交的结果重新写入数据库</p><ol><li><p>重装数据库</p><p>装入最新的后备副本，恢复到最近一次转储时的一致性状态</p><ul><li>静态转储，装入即可</li><li>动态转储，同时装入转储时克的日志副本，利用恢复系统故障的方法UNDO+REDO，才能将数据库恢复到一致性状态</li></ul></li><li><p>重做已完成的事务</p><p>装入转储结束时刻的日志文件副本，重做已完成的事务</p><p>正向扫描，已提交的事务记入重做队列；对重做队列中所有事务进行重做处理</p></li></ol><p>需要DBA介入，重装副本，执行恢复命令</p><p>什么？你说你分不清UNDO 和REDO？</p><p>怎么可能呢</p><p><img src="sqlReview/image-20220107104518176.png" alt="image-20220107104518176"  />大大的一个UR写在这里是吧</p><h3 id="计算机病毒"><a href="#计算机病毒" class="headerlink" title="计算机病毒"></a>计算机病毒</h3><p>破坏、盗窃系统数据、破坏系统文件</p><h3 id="故障小结"><a href="#故障小结" class="headerlink" title="故障小结"></a>故障小结</h3><p>两种情况：</p><ol><li>数据库本身被破坏</li><li>数据库没有被破坏，但数据可能不正确，这是由于事务的运行被非正常终止导致的</li></ol><h2 id="10-4恢复的实现技术"><a href="#10-4恢复的实现技术" class="headerlink" title="10.4恢复的实现技术"></a>10.4恢复的实现技术</h2><p>基本原理：冗余，利用存储在其他地方的冗余数据重建</p><p>冗余数据的建立：</p><h3 id="10-4-1数据转储"><a href="#10-4-1数据转储" class="headerlink" title="10.4.1数据转储"></a>10.4.1数据转储</h3><p>DBA将整个数据库复制到其他位置保存的过程，备用数据称为后备副本/后援副本</p><p>只能将数据库恢复到转储时的状态</p><h3 id="转储方法"><a href="#转储方法" class="headerlink" title="转储方法"></a>转储方法</h3><p>1.</p><p>静态转储：系统中无事务运行时转储，期间不允许任何活动；优缺：实现简单，降低数据库可用性</p><p>动态转储：转储与用户事务并发进行，允许转储时存取和修改；缺点：不能保证副本中数据正确有效（啊这；将动态转储期间活动建立日志文件，后备副本+日志文件才能将数据库恢复到某一时刻的正确状态</p><p>2.</p><p>海量转储：每次转储全部数据库</p><p>增量转储：只转储上次转储后更新过的数据</p><p>优缺：海量比增量在进行恢复时更方便；但数据库很大或事务处理十分频繁，增量转储更实用有效</p><p>总的方法分类：1和2笛卡尔积</p><h3 id="10-4-2登记日志文件"><a href="#10-4-2登记日志文件" class="headerlink" title="10.4.2登记日志文件"></a>10.4.2登记日志文件</h3><p>用来记录事务对数据库的更新操作的文件</p><p>作用：进行事务故障恢复，系统故障的恢复，协助后备副本进行介质故障恢复</p><p>必须先写日志文件，再更新数据库</p><h2 id="10-6具有检查点的恢复技术"><a href="#10-6具有检查点的恢复技术" class="headerlink" title="10.6具有检查点的恢复技术"></a>10.6具有检查点的恢复技术</h2><p>提高系统故障的恢复效率</p><ul><li><p>在日志文件中增加检查点（checkpoint）记录</p><p>内容：建立检查点时刻所有正在执行的事务清单、这些事务最近一个日志记录的地址</p></li><li><p>增加重新开始文件</p><p>内容：检查点记录在日志文件中的地址</p></li><li><p>恢复子系统在登录日志文件期间动态维护日志</p><p>建立检查点，保存数据库状态</p></li></ul><p>可以定期（按照预定时间间隔）或不定期（按照某种规则，如日志文件写满一半）建立检查点，保存数据库状态</p><p>好处：改善恢复效率</p><p>当事务T在一个检查点P之前提交，T对数据库的修改已经写入数据库，在恢复时不需对T进行REDO操作</p><h3 id="恢复步骤"><a href="#恢复步骤" class="headerlink" title="恢复步骤"></a>恢复步骤</h3><ol><li><p>从重新开始文件中找到最后一个检查点记录在日志文件中的地址，由该地址在日志文件中找到最后一个检查点的记录</p></li><li><p>由该检查点记录得到检查点建立时刻所有正在执行的事务清单ACTIVE-LIST，同时建立UNDO-LIST和REDO-LIST，将ACTIVE-LIST暂时放入UNDO-LIST，REDO-LIST暂为空</p></li><li><p>从检查点开始正向扫描日志文件（向后扫），直到日志文件结束</p><p>若有新开始的事务Ti，将Ti暂时放入UNDO-LIST</p><p>若由提交的事务Tj，将Tj从UNDO-LIST队列移到REDO-LIST队列</p></li><li><p>对UNDO-LIST中的每个事务执行撤销UNDO</p><p>对REDO-LIST中的每个事务执行重做REDO</p></li></ol><h2 id="10-7数据库镜像"><a href="#10-7数据库镜像" class="headerlink" title="10.7数据库镜像"></a>10.7数据库镜像</h2><p>提高介质故障的恢复效率</p><p>介质故障是最严重的一种故障，严重影响数据库的可用性，恢复费时、必须周期性转储数据库</p><p>提高数据库可用性：数据库镜像（mirror）</p><p>DBMS自动把整个数据库或其中的关键数据复制到另一个磁盘上，自动保证镜像与主数据库的一致性，每次主数据库更新时，DBMS自动把更新后的数据复制过去</p><p>出现故障时由镜像磁盘继续提供使用，同时DBMS利用镜像数据进行数据库恢复，不需关闭系统和重装数据库副本</p><p>没有故障时可用于并发操作</p><h1 id="Chapter11-并发控制"><a href="#Chapter11-并发控制" class="headerlink" title="Chapter11.并发控制"></a>Chapter11.并发控制</h1><p>多事务执行方式：</p><ol><li><p>事务串行执行：每个时刻只有一个事务运行，其他事务必须等待它完成才能执行</p></li><li><p>交叉并发方式</p><p>带来的问题：多个事务同时存取同一数据，破坏事务一致性和数据库一致性</p></li></ol><h2 id="11-1并发控制概述"><a href="#11-1并发控制概述" class="headerlink" title="11.1并发控制概述"></a>11.1并发控制概述</h2><p>并发操作破坏了事务的<strong>隔离性</strong>，并发控制就是用正确的方式调度并发操作，避免造成数据的不一致</p><h3 id="1-丢失修改"><a href="#1-丢失修改" class="headerlink" title="1.丢失修改"></a>1.丢失修改</h3><p>我的神秘理解：改上加改（X+X）</p><p>两个事务同时读一数据并修改，T2的提交破坏T1的提交结果，导致T1的修改丢失（飞机订票）</p><h3 id="2-不可重复读"><a href="#2-不可重复读" class="headerlink" title="2.不可重复读"></a>2.不可重复读</h3><p>读上加改（S+X）</p><p>T1读取数据后，T2执行更新操作，使T1无法再现前一次读取结果</p><p>三种情况：</p><ol><li>T1读取后T2修改，T1再次读取得到与前一次不同的值</li><li>T1读取后T2插入，T1再次读取发现多了一些记录</li><li>T1读取后T2删除，T1再次读取发现少了一些记录</li></ol><p>后两种又叫幻影现象</p><h3 id="3-读脏数据"><a href="#3-读脏数据" class="headerlink" title="3.读脏数据"></a>3.读脏数据</h3><p>改上加读（X+S）</p><p>T1修改某一数据并写入数据库，T2读取同一数据后T1被撤销，此时T2读的数据就与数据库中不一致，称为读脏数据</p><h3 id="并发控制主要技术"><a href="#并发控制主要技术" class="headerlink" title="并发控制主要技术"></a>并发控制主要技术</h3><p>有封锁</p><p>时间戳：事务盖开始时间的戳，发生冲突就回滚具有较早时间戳的调度，再重新进入系统盖戳；可能有事务一直回滚</p><p>乐观控制法（乐）：就是开摆</p><h2 id="11-2封锁"><a href="#11-2封锁" class="headerlink" title="11.2封锁"></a>11.2封锁</h2><h3 id="X锁"><a href="#X锁" class="headerlink" title="X锁"></a>X锁</h3><p>排它锁/写锁，若事务T对数据对象A加X锁，则只允许T读取和修改，其他任何事物都不能再对A加任何类型的锁，直到T释放A上的锁</p><h3 id="S锁"><a href="#S锁" class="headerlink" title="S锁"></a>S锁</h3><p>共享锁/读锁，若事务T对数据对象A加S锁，则其他事务只能再对A加S锁，不能加X锁，直到T释放A上的S锁。保证其他事务可以读A，但不能对A进行任何修改</p><h3 id="一级封锁协议"><a href="#一级封锁协议" class="headerlink" title="一级封锁协议"></a>一级封锁协议</h3><p>事务T在修改数据A前必须加X锁，直到事务结束释放。（不使用S锁，读数据可以发生在任何时刻）</p><p>可以解决丢失修改，不能解决不可重复读、读脏数据</p><h3 id="二级封锁协议"><a href="#二级封锁协议" class="headerlink" title="二级封锁协议"></a>二级封锁协议</h3><p>在一级的基础上，事务T在读取A前必须先加S锁，读完后立即释放S</p><p>可以解决丢失修改和读脏数据，不能解决不可重复读（S+X，S读完释放，X能加）</p><h3 id="三级封锁协议"><a href="#三级封锁协议" class="headerlink" title="三级封锁协议"></a>三级封锁协议</h3><p>在二级的基础上，S直到事务结束才释放</p><p>都可以解决</p><h2 id="11-3活锁和死锁"><a href="#11-3活锁和死锁" class="headerlink" title="11.3活锁和死锁"></a>11.3活锁和死锁</h2><h3 id="活锁"><a href="#活锁" class="headerlink" title="活锁"></a>活锁</h3><p>活锁：T1封锁数据R，T2请求封锁R于是等待，T3也请求封锁R于是T1释放R上封锁后首先批准T3的请求，T2继续等待；然后又来了T4T5Tn…（明明是我先来的.jpg）</p><p>避免：先进先出</p><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>T1封锁R1，T2封锁R2后请求封锁R1于是等待，而T1又请求封锁R2于是等待</p><h4 id="1-预防死锁"><a href="#1-预防死锁" class="headerlink" title="1.预防死锁"></a>1.预防死锁</h4><p>破坏产生死锁的条件</p><h5 id="一次封锁法"><a href="#一次封锁法" class="headerlink" title="一次封锁法"></a>一次封锁法</h5><p>必须一次将所有要使用的数据加锁，否则不能继续执行</p><p>问题：降低并发度，难于事先确定封锁对象</p><h5 id="顺序封锁法"><a href="#顺序封锁法" class="headerlink" title="顺序封锁法"></a>顺序封锁法</h5><p>预先对数据对象规定封锁顺序，所有事务按照这个顺序实行封锁</p><p>问题：维护成本高（事务非常多并且不断变化），难以实现</p><h4 id="2-死锁的诊断与解除（普遍）"><a href="#2-死锁的诊断与解除（普遍）" class="headerlink" title="2.死锁的诊断与解除（普遍）"></a>2.死锁的诊断与解除（普遍）</h4><h5 id="超时法"><a href="#超时法" class="headerlink" title="超时法"></a>超时法</h5><p>如果一个事务的等待时间超过规定时限，认为发生死锁</p><p>优点：实现简单</p><p>缺点：若时限太短，容易误判；时限太长，死锁发生不能及时发现</p><h5 id="事务等待图法"><a href="#事务等待图法" class="headerlink" title="事务等待图法"></a>事务等待图法</h5><p>有向图G={T,U}</p><p>T：节点集，表示正在运行的事务</p><p>U：边集，表示等待情况，若1等2，则1-&gt;2</p><p>出现回路说明产生了死锁</p><p>并发控制子系统周期性生成事务等待图，若出现回路，说明系统中出现了死锁</p><h5 id="死锁的解除"><a href="#死锁的解除" class="headerlink" title="死锁的解除"></a>死锁的解除</h5><p>选择一个代价最小的事务将其撤销，释放它持有的所有锁，使其他事务能继续运行</p><p>撤销后-10章事务故障的处理</p><h2 id="11-4并发调度的可串行性"><a href="#11-4并发调度的可串行性" class="headerlink" title="11.4并发调度的可串行性"></a>11.4并发调度的可串行性</h2><p>可串行化调度：多个事务的并发执行是正确的，当且仅当其结果与按某一次序串行执行这些事务的结果相同</p><p>可串行性：是并发事务正确调度的准则，一个给定的并发调度，当且仅当它是可串行化的，才认为是正确调度</p><p>冲突可串行化调度：保证冲突操作次序不变情况下，交换两个事务中不冲突操作的次序，若能得到一个串行的调度，该调度称为冲突可串行化调度</p><p>冲突可串行化调度=&gt;可串行化调度（<strong>充分条件</strong>）</p><p>冲突操作：不同事务对同一数据的读写操作和写写操作</p><p><strong>不同事务的冲突操作和同一事务的两个操作不能交换</strong></p><h2 id="11-5两段锁协议"><a href="#11-5两段锁协议" class="headerlink" title="11.5两段锁协议"></a>11.5两段锁协议</h2><p>使用两段锁协议产生的是可串行化调度</p><p>所有事务必须分两个阶段对数据项加锁和解锁：扩展阶段只申请锁不释放锁，收缩阶段只释放锁不申请锁</p><p>遵循两段锁协议的调度=&gt;可串行化调度（充分条件）</p><h3 id="两段锁协议-amp-防止死锁的一次封锁法"><a href="#两段锁协议-amp-防止死锁的一次封锁法" class="headerlink" title="两段锁协议&amp;防止死锁的一次封锁法"></a>两段锁协议&amp;防止死锁的一次封锁法</h3><p>一次封锁法遵守两段锁协议</p><p>两段锁协议不要求事务一次性将数据全部加锁，因此可能发生死锁</p><h2 id="11-6封锁的粒度"><a href="#11-6封锁的粒度" class="headerlink" title="11.6封锁的粒度"></a>11.6封锁的粒度</h2><p>封锁对象的大小称为封锁粒度</p><p>粒度越大（封锁数据库），数据库封锁数据单元越少，并发度越小，系统开销越小</p><p>粒度越小（封锁某元组），数据库封锁数据单元越多，并发度越高，系统开销越大</p><p>多粒度封锁-多粒度树：以树形姐欧股表示多级封锁粒度</p><p>三级粒度树</p><img src="/2021/12/18/sqlReview/883442E5FF633936573008FD3C6B1BCB.png" class="" title="img"><ol><li>每个节点可独立加锁</li><li>对一个节点加锁意味着这个节点所有子树节点也加同样类型的锁</li><li>一个数据对象可能被两种形式封锁：显式&amp;隐式封锁</li></ol><p>对R1加锁：搜索R1上级节点数据库，搜索R1，R1下级节点（每个元组），若其中有不相容锁，则必须等待</p><h3 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h3><p>提高对某个数据对象加锁时系统的检查效率</p><p>对一个节点加意向锁，说明该节点的下层节点正在被加锁；对任意节点加基本锁，必须先对它的上层节点加意向锁</p><h3 id="IS"><a href="#IS" class="headerlink" title="IS"></a>IS</h3><p>对A加IS，表示对A的子树节点B意向加S锁；若成功对A加IS，则对B加S锁</p><h3 id="IX"><a href="#IX" class="headerlink" title="IX"></a>IX</h3><p>对A加IX，表示对A的子树B节点意向加X锁；若成功对A加IS，则对B加X锁</p><h3 id="SIX"><a href="#SIX" class="headerlink" title="SIX"></a>SIX</h3><p>对A加SIX锁，表示对A加S锁和IX锁，表示要读取A中所有数据（表中所有数据）和更新子树节点级别的个别数据（更新个别元组）</p><p>这两个操作在SIX锁的定义中不冲突</p><p><img src="sqlReview/9D149E27BD51D77FE7B8091BE8E4686E.png" alt="img" style="zoom: 50%;" />神秘理解之一图掌握锁的强度关系和相容关系</p><p>IS与S、IX、SIX相容</p><p>S与IX不相容</p><p>S、IX与SIX不相容</p><p>都与X不相容</p><p>锁的强度是如图所示的偏序关系</p><img src="/2021/12/18/sqlReview/2E41006F05EF79212F75208A7509771B.png" class="" title="img"><p>优点：提高并发度，减少加锁解锁的开销</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;往往，最不详细的地方，可能更要考。  &lt;/p&gt;
&lt;h1 id=&quot;Chapter1-绪论&quot;&gt;&lt;a href=&quot;#Chapter1-绪论&quot; class=&quot;headerlink&quot; title=&quot;Chapter1.绪论&quot;&gt;&lt;/a&gt;Chapter1.绪论&lt;/h1&gt;&lt;h2 id=&quot;1-</summary>
      
    
    
    
    
    <category term="review" scheme="https://github.com/sterne012/sterne012.github.io/tags/review/"/>
    
    <category term="sql" scheme="https://github.com/sterne012/sterne012.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>数据结构复习&amp;算法整理</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2021/12/14/DataStructuresReview/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2021/12/14/DataStructuresReview/</id>
    <published>2021-12-14T02:21:09.000Z</published>
    <updated>2022-01-11T12:39:20.522Z</updated>
    
    <content type="html"><![CDATA[<p>-1：出分了。。说明确实应该多看课本上代码。。。所以这篇笔记很不错！来看看吧</p><p>认真复习，求求</p><p>*注：大量代码未经实际验证，出现bug为正常现象（）但是思想不会有问题</p><h1 id="Chapter1-绪论"><a href="#Chapter1-绪论" class="headerlink" title="Chapter1.绪论"></a>Chapter1.绪论</h1><p>数据结构概念包括数据之间的<strong>逻辑结构</strong>、数据在计算机中的<strong>存储方式</strong>和数据的<strong>运算</strong>三个方面。（某个判断题）</p><p><strong>数据：</strong>对客观事物的符号表示，在cs中指所有能输入到计算机中并被计算机程序处理的符号的总称。</p><p><strong>数据元素：</strong>数据的基本单位，在计算机程序中通常作为一个整体进行考虑和处理。一个数据元素可由若干个<strong>数据项</strong>组成。</p><p><strong>数据（逻辑）结构：</strong>相互之间存在一种或多种特定关系的数据元素的集合。(D,S) D 是数据元素的有限集，S是D上关系的有限集；主要有集合结构，线性结构，树形结构，图状结构</p><p><strong>数据（存储）结构：</strong>顺序结构、链式结构</p><p><strong>数据类型：</strong>一个值的集合和定义在该集合上的一组操作的统称。</p><p><strong>抽象数据类型：</strong>一个表示应用问题的数学模型以及定义在该模型之上的一组操作的统称。（？）</p><p>​    抽象数据类型定义 ADT(D,S,P): D-数据对象 S-D上的关系集 P-D上的操作集</p><p><strong>算法：</strong>对特定问题求解步骤的一种描述，是指令的有限序列；</p><p>算法满足特性：有穷性，确定性，可行性，输入，输出</p><p>算法评价：正确性，可读性，健壮性，效率和低存储量需求</p><p>算法分析：基本运算，问题规模，时间代价，空间代价。</p><h1 id="Chapter2-线性表"><a href="#Chapter2-线性表" class="headerlink" title="Chapter2.线性表"></a>Chapter2.线性表</h1><h2 id="1-顺序表"><a href="#1-顺序表" class="headerlink" title="1.顺序表"></a>1.顺序表</h2><p>插入和删除都是O(n) 访问是O(1)</p><p>插入和删除都平均需要移动一半的元素，具体公式p25</p><h3 id="0-结构体定义"><a href="#0-结构体定义" class="headerlink" title="0.结构体定义"></a>0.结构体定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LIST_INIT_SIZE 100</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LISTINCREMENT 10</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Elemtype;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    Elemtype *elem;<br>    <span class="hljs-keyword">int</span> length;<br>    <span class="hljs-keyword">int</span> listsize;<br>&#125;SqList;<br></code></pre></td></tr></table></figure><h3 id="1-建表"><a href="#1-建表" class="headerlink" title="1.建表"></a>1.建表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initSqList</span><span class="hljs-params">(SqList &amp;L)</span></span>&#123;<br>    L.elem=(Elemtype*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Elemtype)*LIST_INIT_SIZE);<br>    <span class="hljs-keyword">if</span>(!L.elem) <span class="hljs-built_in">exit</span>(OVERFLOW);<br>    L.length=<span class="hljs-number">0</span>;<br>    L.listsize=LIST_INIT_SIZE;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-插入"><a href="#2-插入" class="headerlink" title="2.插入"></a>2.插入</h3><p>淦。。课本上代码把我看傻了</p><p>下标从0开始</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InsertSqList</span><span class="hljs-params">(SqList &amp;L,<span class="hljs-keyword">int</span> i,Elemtype e)</span></span>&#123;<span class="hljs-comment">//e插入到第i个位置之前</span><br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>||i&gt;L.length+<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(L.length&gt;=L.listsize)&#123;<span class="hljs-comment">//再分配空间</span><br>        Elemtype *newbase=(Elemtype*) <span class="hljs-built_in">realloc</span>(L.elem,(L.listsize+LISTINCREMENT)*<span class="hljs-keyword">sizeof</span>(Elemtype));<br>        <span class="hljs-keyword">if</span>(!newbase) <span class="hljs-built_in">exit</span>(OVERFLOW);<br>        L.elem=newbase;<br>        L.listsize+=LISTINCREMENT;<br>    &#125;<br>    Elemtype *q=&amp;L.elem[i<span class="hljs-number">-1</span>];<span class="hljs-comment">//取i-1元素的地址，q作为第</span><br>    Elemtype *p;<br>    <span class="hljs-keyword">for</span>(p=&amp;L.elem[L.length<span class="hljs-number">-1</span>];p&gt;=q;p--) *(p+<span class="hljs-number">1</span>)=*p;<span class="hljs-comment">//p&gt;=q我直接好家伙</span><br>    <span class="hljs-comment">//没有下标越界问题，插入之后表长会增1</span><br><span class="hljs-comment">//    for(int j=L.length-1;j&gt;=i;j--) L.elem[j+1]=L.elem[j]; mytype</span><br>    *q=e;<br>    L.length++;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DeleteSqList</span><span class="hljs-params">(SqList &amp;L,<span class="hljs-keyword">int</span> i,Elemtype &amp;e)</span></span>&#123;<span class="hljs-comment">//删除第i个元素，并用e返回其值</span><br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>||i&gt;L.length) <span class="hljs-keyword">return</span>;<br>    e=L.elem[i<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i<span class="hljs-number">-1</span>;j&lt;L.length<span class="hljs-number">-1</span>;j++) L.elem[j]=L.elem[j+<span class="hljs-number">1</span>];<br>    L.length--;<br>&#125;<br></code></pre></td></tr></table></figure><p>另外还有一些操作没有写..</p><h2 id="2-单链表"><a href="#2-单链表" class="headerlink" title="2.单链表"></a>2.单链表</h2><p>相比顺序表，插入和删除都是O(1)的，但是查询是O(n)</p><h3 id="0-结构体定义-1"><a href="#0-结构体定义-1" class="headerlink" title="0.结构体定义"></a>0.结构体定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span>&#123;</span><br>    Elemtype data;<br>    LNode *next;<br>&#125;LNode,*LinkList;<br></code></pre></td></tr></table></figure><p><strong>头结点：</strong>在链表的第一个节点之前附设一个节点，头节点的指针域指向第一个节点（若为空表则NULL）</p><p><strong>头指针：</strong>头节点中的指针域即头指针；指示链表中第一个结点的存储地址，通过头指针能够索引整个链表，整个链表的存取从头指针开始进行</p><p><strong>首元节点：</strong>存储第一个元素的节点，可能在头节点中存储，也可能是头结点指向的下一个节点</p><h3 id="1-建表-1"><a href="#1-建表-1" class="headerlink" title="1.建表"></a>1.建表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateLinkList</span><span class="hljs-params">(LinkList &amp;L,<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-comment">//头插n个元素</span><br>    L=(LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    L-&gt;next=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">while</span>(n--)&#123;<br>        LinkList p=(LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>        <span class="hljs-built_in">cin</span>&gt;&gt;p-&gt;data;<br>        p-&gt;next=L-&gt;next;<br>        L-&gt;next=p;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-插入-1"><a href="#2-插入-1" class="headerlink" title="2.插入"></a>2.插入</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InsertLinkList</span><span class="hljs-params">(LinkList &amp;L,<span class="hljs-keyword">int</span> i,Elemtype e)</span></span>&#123;<br>    <span class="hljs-comment">//在第i个位置之前插入元素e</span><br>    LinkList p=L;<br>    <span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(p&amp;&amp;j&lt;i<span class="hljs-number">-1</span>) &#123;<br>        p=p-&gt;next;<br>        j++;<br>    &#125;<span class="hljs-comment">//p是现在的第i-1个节点</span><br>    <span class="hljs-keyword">if</span>(!p) <span class="hljs-keyword">return</span>;<br>    LinkList newNode=(LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>    newNode-&gt;data=e;<br>    newNode-&gt;next=p-&gt;next;<br>    p-&gt;next=newNode;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-删除-1"><a href="#3-删除-1" class="headerlink" title="3.删除"></a>3.删除</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DeleteLinkList</span><span class="hljs-params">(LinkList &amp;L,<span class="hljs-keyword">int</span> i,Elemtype &amp;e)</span></span>&#123;<br>    <span class="hljs-comment">//删除第i个元素，存入e</span><br>    LinkList p=L;<br>    <span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(p&amp;&amp;j&lt;i<span class="hljs-number">-1</span>)&#123;<br>        p=p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!p||!p-&gt;next||j&gt;i<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span>;<br>    LinkList q=p-&gt;next;<br>    e=q-&gt;data;<br>    p-&gt;next=q-&gt;next;<br>    <span class="hljs-built_in">free</span>(q);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-获取元素"><a href="#4-获取元素" class="headerlink" title="4.获取元素"></a>4.获取元素</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GetElemLinkList</span><span class="hljs-params">(LinkList L,<span class="hljs-keyword">int</span> i,Elemtype &amp;e)</span></span>&#123;<br>    <span class="hljs-comment">//获取第i个元素</span><br>    LinkList p=L;<br>    <span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(p&amp;&amp;j&lt;i)&#123;<br>        p=p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!p||j&gt;i) <span class="hljs-keyword">return</span>;<span class="hljs-comment">//j&gt;i应该不可能发生吧？啊假设i非常不合法（比如-1）还是有可能的。。</span><br>    e=p-&gt;data;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-合并"><a href="#5-合并" class="headerlink" title="5.合并"></a>5.合并</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MergeLinkList</span><span class="hljs-params">(LinkList &amp;L1,LinkList &amp;L2,LinkList &amp;L3)</span></span>&#123;<br>    <span class="hljs-comment">//有序表（升序）L1 L2合并为有序表L3</span><br>    LinkList p1=L1-&gt;next;<br>    LinkList p2=L2-&gt;next;<br>    LinkList p3;<br>    L3=p3=L1;<span class="hljs-comment">//用L1作L3的头节点</span><br>    <span class="hljs-keyword">while</span>(p1&amp;&amp;p2)&#123;<br>        <span class="hljs-keyword">if</span>(p1-&gt;data&lt;=p2-&gt;data)&#123;<br>            p3-&gt;next=p1;<br>            p1=p1-&gt;next;<br>            p3=p1;<span class="hljs-comment">//p1和p3都向后移动</span><br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            p3-&gt;next=p2;<br>            p2=p2-&gt;next;<br>            p3=p2;<br>        &#125;<br>    &#125;<br>    p3-&gt;next=p1?p1:p2;<span class="hljs-comment">//剩下的部分直接怼上去</span><br>    <span class="hljs-built_in">free</span>(L2);<span class="hljs-comment">//L1的头节点用作L3的表头，那么L2没用了</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-静态链表"><a href="#3-静态链表" class="headerlink" title="3.静态链表"></a>3.静态链表</h2><p>在不设指针的语言中使用链表结构</p><p>结构体定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    Elemtype data;<br>    <span class="hljs-keyword">int</span> cur;<br>&#125;component,SLinkList[<span class="hljs-number">10010</span>];<br></code></pre></td></tr></table></figure><p>即数组下标指示位置，非常常用并且好用，不多说</p><h2 id="4-循环链表"><a href="#4-循环链表" class="headerlink" title="4.循环链表"></a>4.循环链表</h2><p>最后一个节点的指针域指向头结点，从表中任意一节点触发即可到达其他节点。</p><h2 id="5-双向链表"><a href="#5-双向链表" class="headerlink" title="5.双向链表"></a>5.双向链表</h2><p>增加一个前指的指针域prior</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DuLinkList</span><span class="hljs-params">(DuLinkList &amp;L,<span class="hljs-keyword">int</span> i,Elemtype &amp;e)</span></span>&#123;<br>    DuLinkList p=L;<br>    <span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(p&amp;&amp;j&lt;i)&#123;<br>        p=p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-comment">//插入：</span><br>    <span class="hljs-comment">//j=i,插入到第i个，新节点在p前面</span><br>    DuLinkList newNode=()<span class="hljs-built_in">malloc</span>(...);<br>    newNode-&gt;data=e;<br>    newNode-&gt;prior=p-&gt;prior;<br>    p-&gt;prior-&gt;next=newNode;<br>    newNode-&gt;next=p;<br>    p-&gt;prior=newNode;<br>    <br>    <span class="hljs-comment">//删除：</span><br>    <span class="hljs-comment">//删除第i个，即删除p这个节点</span><br>    p-&gt;prior-&gt;next=p-&gt;next;<br>    p-&gt;next-&gt;prior=p-&gt;prior;<br>    <span class="hljs-built_in">free</span>(p);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-一元多项式"><a href="#6-一元多项式" class="headerlink" title="6.一元多项式"></a>6.一元多项式</h2><p>用若使用顺序结构，由于指数可能不连续并且很大可能需要非常冗余的空间</p><p>使用链式结构，并且可以进行多项式加法&amp;乘法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><span class="hljs-comment">//作为Linklist的数据元素Elemtype</span><br>    <span class="hljs-keyword">float</span> coef;<span class="hljs-comment">//系数</span><br>    <span class="hljs-keyword">int</span> expn;<span class="hljs-comment">//指数</span><br>&#125;term,Elemtype;<br></code></pre></td></tr></table></figure><h1 id="Chapter3-栈和队列"><a href="#Chapter3-栈和队列" class="headerlink" title="Chapter3.栈和队列"></a>Chapter3.栈和队列</h1><p>以线性表作为基础的两种各具特点的结构</p><h2 id="1-栈-顺序栈"><a href="#1-栈-顺序栈" class="headerlink" title="1.栈-顺序栈"></a>1.栈-顺序栈</h2><h3 id="0-结构体定义-2"><a href="#0-结构体定义-2" class="headerlink" title="0.结构体定义"></a>0.结构体定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STACK_INIT_SIZE 100</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> STACKINCREMENT 10</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Elemtype;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    Elemtype *base;<br>    Elemtype *top;<br>    <span class="hljs-keyword">int</span> stacksize;<br>&#125;SqStack;<br><br></code></pre></td></tr></table></figure><h3 id="1-建栈"><a href="#1-建栈" class="headerlink" title="1.建栈"></a>1.建栈</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(SqStack &amp;S)</span></span>&#123;<br>    S.base=(Elemtype*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Elemtype)*STACK_INIT_SIZE);<br>    <span class="hljs-keyword">if</span>(!S.base) <span class="hljs-keyword">return</span>;<br>    S.top=S.base;<br>    S.stacksize=STACK_INIT_SIZE;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-push"><a href="#2-push" class="headerlink" title="2.push"></a>2.push</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Push</span><span class="hljs-params">(SqStack &amp;S,Elemtype e)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(S.top-S.base&gt;=S.stacksize)&#123;<br>        <span class="hljs-comment">//跟链表一样，realloc再分配</span><br>    &#125;<br>    *(S.top++)=e;<br>    <span class="hljs-comment">//只有一句话！</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-pop"><a href="#3-pop" class="headerlink" title="3.pop"></a>3.pop</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Pop</span><span class="hljs-params">(SqStack &amp;S,Elemtype &amp;e)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(S.top==S.base) <span class="hljs-keyword">return</span>;<span class="hljs-comment">//栈空</span><br>    e=*(--S.top);<span class="hljs-comment">//只有一句话！</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-top"><a href="#4-top" class="headerlink" title="4.top"></a>4.top</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GetTop</span><span class="hljs-params">(SqStack &amp;S,Elemtype &amp;e)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(S.base==S.top) <span class="hljs-keyword">return</span>;<br>    e=*(S.top<span class="hljs-number">-1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>？没说过链栈</p><h3 id="5-应用"><a href="#5-应用" class="headerlink" title="5.应用"></a>5.应用</h3><h4 id="1-数制转换"><a href="#1-数制转换" class="headerlink" title="1.数制转换"></a>1.数制转换</h4><p>栈的作用是把从个位到十位的拆分倒过来输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Tranverse</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> mod)</span></span>&#123;<br>    SqStack S;<br>    InitStack(S);<br>    <span class="hljs-keyword">while</span>(n) &#123;<br>        Push(S, n % mod);<br>        n /= mod;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(!StackEmpty(S))&#123;<br>        Elemtype e;<br>        Pop(S,e);<br>        <span class="hljs-built_in">cout</span>&lt;&lt;e&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-括号匹配检验"><a href="#2-括号匹配检验" class="headerlink" title="2.括号匹配检验"></a>2.括号匹配检验</h4><p>（（（（（（（（（（（（（（（（（（</p><p>左括号直接进栈，右括号取栈顶看是不是与之匹配的左括号</p><p>以前写的将就看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Stack st;<br>    <span class="hljs-keyword">bool</span> fl=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">int</span> n;<span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">char</span> c;<span class="hljs-built_in">cin</span>&gt;&gt;c;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;(&#x27;</span>||c==<span class="hljs-string">&#x27;[&#x27;</span>||c==<span class="hljs-string">&#x27;&#123;&#x27;</span>) &#123;<br>            push(st, c);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">char</span> t=top(st);<br>            <span class="hljs-keyword">if</span>(t==<span class="hljs-string">&#x27;(&#x27;</span>&amp;&amp;c==<span class="hljs-string">&#x27;)&#x27;</span>)&#123;<br>                pop(st);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t==<span class="hljs-string">&#x27;[&#x27;</span>&amp;&amp;c==<span class="hljs-string">&#x27;]&#x27;</span>)&#123;<br>                pop(st);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t==<span class="hljs-string">&#x27;&#123;&#x27;</span>&amp;&amp;c==<span class="hljs-string">&#x27;&#125;&#x27;</span>)&#123;<br>                pop(st);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Wrong!&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>                fl=<span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!empty(st)&amp;&amp;fl)&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Wrong!&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        fl=<span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(fl) <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Right!&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-行编辑程序"><a href="#3-行编辑程序" class="headerlink" title="3.行编辑程序"></a>3.行编辑程序</h4><p>#表示退格，@表示退行</p><h4 id="4-迷宫"><a href="#4-迷宫" class="headerlink" title="4.迷宫"></a>4.迷宫</h4><p>见<a href="https://sterne012.github.io/2021/10/28/StackLabyrinth/">https://sterne012.github.io/2021/10/28/StackLabyrinth/</a></p><h4 id="5-表达式求值"><a href="#5-表达式求值" class="headerlink" title="5.表达式求值"></a>5.表达式求值</h4><p>感觉可能有选择题</p><p>当前运算符a，栈顶b</p><ol><li><p>优先级a&gt;b：当前运算符a进栈</p></li><li><p>优先级a&lt;b：栈顶运算符b出栈，进行运算，直到栈顶运算符不满足条件a&lt;b，重复1</p></li></ol><p>通常，同级运算a和b，使a&lt;b，进行运算</p><h4 id="6-递归算法"><a href="#6-递归算法" class="headerlink" title="6.递归算法"></a>6.递归算法</h4><h5 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h5><p>小心爆栈爆int</p><h5 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a>汉诺塔</h5><p>我对它的理解就是巨神奇</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-keyword">char</span> x,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">char</span> z)</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d Move disk %d from %c to %c\n&quot;</span>,++cnt,i,x,z);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Hanoi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">char</span> x,<span class="hljs-keyword">char</span> y,<span class="hljs-keyword">char</span> z)</span></span>&#123;<br>    <span class="hljs-comment">//将x上从小到大，自上而下编号1-n的n个盘子搬到z</span><br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>) move(x,<span class="hljs-number">1</span>,z);<span class="hljs-comment">//将编号1的圆盘从x移到z//传参的x和z不一定就是实际的x柱和z柱</span><br>    <span class="hljs-keyword">else</span>&#123;<br>        Hanoi(n<span class="hljs-number">-1</span>,x,z,y);<br>        move(x,n,z);<br>        Hanoi(n<span class="hljs-number">-1</span>,y,x,z);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-队列-链队"><a href="#2-队列-链队" class="headerlink" title="2.队列-链队"></a>2.队列-链队</h2><h3 id="0-结构体定义-3"><a href="#0-结构体定义-3" class="headerlink" title="0.结构体定义"></a>0.结构体定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">QNode</span>&#123;</span><br>    Elemtype data;<br>    QNode *next;<br>&#125;QNode,*QueuePtr;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    QueuePtr front;<br>    QueuePtr rear;<br>&#125;LinkQueue;<br></code></pre></td></tr></table></figure><h3 id="1-建队列"><a href="#1-建队列" class="headerlink" title="1.建队列"></a>1.建队列</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(LinkQueue &amp;Q)</span></span>&#123;<br>    Q.front=(QueuePtr)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(QNode));<br>    Q.rear=Q.front;<br>    Q.front-&gt;next=<span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-入队"><a href="#2-入队" class="headerlink" title="2.入队"></a>2.入队</h3><p>front是头指针，不放东西</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(LinkQueue &amp;Q,Elemtype e)</span></span>&#123;<br>    QueuePtr p=(QueuePtr)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(QNode));<br>    p-&gt;data=e;<br>    p-&gt;next=<span class="hljs-literal">NULL</span>;<br>    Q.rear-&gt;next=p;<br>    Q.rear=p;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-出队"><a href="#3-出队" class="headerlink" title="3.出队"></a>3.出队</h3><p>当rear就是front-&gt;next时，说明队列为空，置成初始状态</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DeQueue</span><span class="hljs-params">(LinkQueue &amp;Q,Elemtype &amp;e)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(Q.front==Q.rear) <span class="hljs-keyword">return</span>;<br>    QueuePtr p=Q.front-&gt;next;<br>    e=p-&gt;data;<br>    Q.front-&gt;next=Q.front-&gt;next-&gt;next;<span class="hljs-comment">//删除p</span><br>    <span class="hljs-keyword">if</span>(Q.rear==p) Q.rear=Q.front;<span class="hljs-comment">//尾指针回指</span><br>    <span class="hljs-comment">//如果删除的p是不是队尾的节点，那么rear不会受到影响</span><br>    <span class="hljs-built_in">free</span>(p);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-队列-循环队列"><a href="#2-队列-循环队列" class="headerlink" title="2.队列-循环队列"></a>2.队列-循环队列</h2><h3 id="0-结构体定义-4"><a href="#0-结构体定义-4" class="headerlink" title="0.结构体定义"></a>0.结构体定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> QUESIZE 10</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    Elemtype *base;<br>    <span class="hljs-keyword">int</span> front;<br>    <span class="hljs-keyword">int</span> rear;<br>&#125;SqQueue;<br></code></pre></td></tr></table></figure><h3 id="1-建队"><a href="#1-建队" class="headerlink" title="1.建队"></a>1.建队</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitSqQueue</span><span class="hljs-params">(SqQueue &amp;Q)</span></span>&#123;<br>    Q.base=(Elemtype*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Elemtype)*);<br>    <span class="hljs-keyword">if</span>(!Q.base) <span class="hljs-keyword">return</span>;<br>    Q.front=Q.rear=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">QueueLength</span><span class="hljs-params">(SqQueue &amp;Q)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> (Q.rear-Q.front+QUESIZE)%QUESIZE;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-入队-1"><a href="#2-入队-1" class="headerlink" title="2.入队"></a>2.入队</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(SqQueue &amp;Q,Elemtype e)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>((Q.rear+<span class="hljs-number">1</span>)%QUESIZE==Q.front) <span class="hljs-keyword">return</span>;<span class="hljs-comment">//队列满，不过此时rear中没有元素（rear总指向一个空的位置）</span><br>    Q.base[Q.rear]=e;<br>    Q.rear=(Q.rear+<span class="hljs-number">1</span>)%QUESIZE;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-出队-1"><a href="#3-出队-1" class="headerlink" title="3.出队"></a>3.出队</h3><p>先进先出啊出队操作front 傻了啊</p><p>入队出队操作方式相当像</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DeQueue</span><span class="hljs-params">(SqQueue &amp;Q,Elemtype &amp;e)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(Q.rear==Q.front) <span class="hljs-keyword">return</span>;<span class="hljs-comment">//队列空</span><br>    e=Q.base[Q.front];<br>    Q.front=(Q.front+<span class="hljs-number">1</span>)%QUESIZE;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Chapter4-串"><a href="#Chapter4-串" class="headerlink" title="Chapter4.串"></a>Chapter4.串</h1><p><del>书跟新的一样</del> 不，就是新的</p><p>据说只有选择判断</p><p>比如说BF和KMP的比较次数？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1e4</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> kmp[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">kmp_pre</span><span class="hljs-params">(<span class="hljs-keyword">char</span> x[],<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i,j;<br>    j=kmp[<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;<br>    i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;m)&#123;<br>        <span class="hljs-keyword">while</span>(j!=<span class="hljs-number">-1</span>&amp;&amp;x[i]!=x[j]) j=kmp[j];<br>        kmp[++i]=++j;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">kmp_count</span><span class="hljs-params">(<span class="hljs-keyword">char</span> x[],<span class="hljs-keyword">int</span> m,<span class="hljs-keyword">char</span> y[],<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i,j;<br>    <span class="hljs-built_in">kmp_pre</span>(x,m);<br>    i=j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;n)&#123;<br>        <span class="hljs-keyword">while</span>(j!=<span class="hljs-number">-1</span>&amp;&amp;y[i]!=x[j]) j=kmp[j];<br>        i++;j++;<br>        <span class="hljs-keyword">if</span>(j&gt;=m)&#123;<br>            <span class="hljs-keyword">return</span> i-j+<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><img src="/2021/12/14/DataStructuresReview/image-20211218134740399.png" class="" title="image-20211218134740399"><h1 id="Chapter5-数组和广义表"><a href="#Chapter5-数组和广义表" class="headerlink" title="Chapter5.数组和广义表"></a>Chapter5.数组和广义表</h1><h2 id="1-数组-矩阵压缩存储"><a href="#1-数组-矩阵压缩存储" class="headerlink" title="1.数组-矩阵压缩存储"></a>1.数组-矩阵压缩存储</h2><p>多个数据的值相同，则只分配一个元素值的存储空间，零元素不占存储空间</p><h3 id="1-对称矩阵"><a href="#1-对称矩阵" class="headerlink" title="1.对称矩阵"></a>1.对称矩阵</h3><p>压缩在下三角矩阵中</p><p>n阶：</p><p>共需存储(n^2-n)/2+n=n(n+1)/2个元素（全部元素-对角线）/2再加对角线，我是这样理解</p><p>a[k]与原矩阵$a_{ij}$之间对应关系</p><p>一个等差数列求和加上另一个下标-1<br>$$<br>k=\begin{cases}<br>\frac {i(i-1)}{2}+j-1, &amp;i&gt;=j \ \<br>\frac {j(j-1)}{2}+i-1, &amp;i&lt;j<br>\end{cases}<br>$$</p><h3 id="2-稀疏矩阵"><a href="#2-稀疏矩阵" class="headerlink" title="2.稀疏矩阵"></a>2.稀疏矩阵</h3><p>用三元组顺序表存储</p><p>原矩阵遍历一遍存进去就行吧</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 10000</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Elemtype;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-keyword">int</span> i,j;<br>    Elemtype e;<br>&#125;Triple;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    Triple data[MAXN+<span class="hljs-number">1</span>];<span class="hljs-comment">//使用1...MAXN</span><br>    <span class="hljs-keyword">int</span> mu,nu,tu;<span class="hljs-comment">//行、列、非零元个数（相当于表长），离谱难记</span><br>&#125;TSMatrix;<br></code></pre></td></tr></table></figure><h4 id="快速转置"><a href="#快速转置" class="headerlink" title="快速转置"></a>快速转置</h4><p>空间换时间</p><p>num[col]：矩阵M中第col<strong>列</strong>中非零元的个数</p><p>cpot[col]：M中第col列第一个非零元在转置后三元组中的位置</p><p>cpot[1]=1;</p><p>cpot[col]=cpot[col-1]+num[col-1];</p><p>可以递推求出</p><p>最坏情况是t=mu*nu  即矩阵中全都是非零元（说好的稀疏矩阵呢）  $O(mu*nu)$</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> num[MAXN+<span class="hljs-number">1</span>],cpot[MAXN+<span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FastTransposeSMatrix</span><span class="hljs-params">(TSMatrix &amp;M,TSMatrix &amp;T)</span></span>&#123;<br>    T.mu=M.mu;T.nu=M.nu;T.tu=M.tu;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;M.tu;i++)<br>        num[M.data[i].j]++;<br>    cpot[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=M.nu;i++)&#123;<br>        cpot[i]=cpot[i<span class="hljs-number">-1</span>]+num[i<span class="hljs-number">-1</span>];<br>    &#125;<br>    <span class="hljs-comment">//init</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;M.tu;i++)&#123;<br>        <span class="hljs-keyword">int</span> col=M.data[i].j;<br>        <span class="hljs-keyword">int</span> p=cpot[col]++;<span class="hljs-comment">//!!!加了之后往后存</span><br>        T.data[p].i=M.data[i].j;<br>        T.data[p].j=M.data[i].i;<br>        T.data[p].e=M.data[i].e;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="十字链表"><a href="#十字链表" class="headerlink" title="十字链表"></a>十字链表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">OLNode</span>&#123;</span><br>    <span class="hljs-keyword">int</span> i,j;<br>    Elemtype v;<br>    OLNode *right;<br>    OLNode *down;<br>&#125;OLNode,*OLink;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    OLink *rhead;<span class="hljs-comment">//行链头指针 rhead[1...n]</span><br>    OLink *chead;<br>    <span class="hljs-keyword">int</span> mu,nu,tu;<br>&#125;CrossList;<br></code></pre></td></tr></table></figure><p>有一个建表的算法，后面补上，其实和链表的操作差不多，不过要行列分别都插入一下</p><h2 id="2-广义表"><a href="#2-广义表" class="headerlink" title="2.广义表"></a>2.广义表</h2><p>看会别的再写（这一看就是三天）</p><p>是线性表的推广（lists）</p><p>LS=(a1,a2,…,an)</p><p>表头：LS非空时，称第一个元素a1为表头</p><p>表尾：其余元素组成的<strong>表</strong>称为表尾</p><p>因此表头可能是原子或列表；但表尾一定是列表</p><p>GetHead() &amp; GetTail() 操作取表头和表尾，可以套娃</p><h3 id="0-结构体定义-5"><a href="#0-结构体定义-5" class="headerlink" title="0.结构体定义"></a>0.结构体定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span>&#123;</span>ATOM,LIST&#125;Elemtag;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GLNode</span>&#123;</span><br>    Elemtag tag;<br>    <span class="hljs-class"><span class="hljs-keyword">union</span>&#123;</span><br>        Elemtype atom;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>            GLNode *hp,*tp;<br>        &#125;ptr;<span class="hljs-comment">//headptr tailptr</span><br>    &#125;;<br>&#125;*GList;<br></code></pre></td></tr></table></figure><h3 id="1-建广义表"><a href="#1-建广义表" class="headerlink" title="1.建广义表"></a>1.建广义表</h3><p>没讲过！那便自学！</p><p>看了看。。这个算法不太明确，没有给出很多函数的功能。。算了</p><h3 id="2-广义表深度"><a href="#2-广义表深度" class="headerlink" title="2.广义表深度"></a>2.广义表深度</h3><p>定义为：广义表中括弧的重数</p><p>即，atom深度为0，list深度为1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">GListDepth</span><span class="hljs-params">(GList L)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!L) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//空表深度为1，递归最后在这里结束</span><br>    <span class="hljs-keyword">if</span>(L-&gt;tag==ATOM) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//atom深度为0</span><br>    <br>    GList p=L;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(p)&#123;<br>        ans=max(ans, GListDepth(p-&gt;ptr.hp));<span class="hljs-comment">//找子表的最大深度</span><br>        p=p-&gt;ptr.tp;<span class="hljs-comment">//到下一个表</span><br>    &#125;<span class="hljs-comment">//再次改写了书上的版本</span><br>    <span class="hljs-keyword">return</span> ans+<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-m元多项式"><a href="#3-m元多项式" class="headerlink" title="3.m元多项式"></a>3.m元多项式</h2><p>$$<br>P(x,y,z)=((x^{10}+2x^6)y^3+3x^5y^2)z^2+((x^4+6x^3)y^4+2y)z+15 \ \<br>广义表表达：\<br>P=z((A,2),(B,1),(15,0))\<br>A=y((C,3),(D,2))\<br>C=x((1,10),(2,6))\<br>D=x((3,5))\<br>B=y((E,4),(2,1))\<br>E=x((1,4),(6,3))<br>$$</p><h1 id="Chapter6-树"><a href="#Chapter6-树" class="headerlink" title="Chapter6.树"></a>Chapter6.树</h1><h2 id="概念及性质"><a href="#概念及性质" class="headerlink" title="概念及性质"></a>概念及性质</h2><p>子树、孩子、父节点、层次、深度（max层次）</p><p>节点的度：节点拥有的子树数</p><p>叶子/终端节点：度为0的点</p><p>分支节点/非终端节点/内部节点：度不为0的点</p><p>树的度：max节点的度</p><p>祖先：从根到该节点所经分支上的所有节点</p><p>子孙：子树中的任意节点</p><p>堂兄弟：同一层的节点</p><p>有序树：树中节点的各子树从左至右是有序的</p><p>无序树：各子树节点无序，可以互换（似乎有个比较典型的题 3个节点可以组成几种有序树、几种无序树什么的）</p><p>森林：m棵互不相交的树的集合</p><p>二叉树：每个节点至多有两棵子树的有序树</p><p>满二叉树：深度为k且有$2^k-1$个节点的二叉树</p><p>完全二叉树：每个节点都与深度为k的满二叉树1-n个节点一一对应时，该树为完全二叉树（最后一层不满的满二叉树）</p><p>性质：</p><ol><li><p>第i层至多有$2^{i-1}$节点（归纳法可证）</p></li><li><p>深度为k的二叉树至多有$2^k-1$个节点（1求和）</p></li><li><p>对于任意二叉树T，若叶子节点数为$n_0$，度为2的节点数为$n_2$，则$n_0=n_2+1$</p><p>节点总数$v=n_0+n_1+n_2$</p><p>又$e=v-1$，并且在此定义中，$e=n_1+2n_2$（边由n1和n2的节点产生）</p><p>联立得$n_0=n_2+1$</p></li><li><p>有n个节点的完全二叉树深度为$\lfloor log_2n\rfloor +1$</p></li></ol><h2 id="0-结构体定义（二叉树）"><a href="#0-结构体定义（二叉树）" class="headerlink" title="0.结构体定义（二叉树）"></a>0.结构体定义（二叉树）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span>&#123;</span><br>    Elemtype data;<br>    BiTNode *left,*right;<br>&#125;BiTNode,*BiTree;<br></code></pre></td></tr></table></figure><h2 id="1-建树"><a href="#1-建树" class="headerlink" title="1.建树"></a>1.建树</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateBiTree</span><span class="hljs-params">(BiTree &amp;T)</span></span>&#123;<span class="hljs-comment">//递归版这么简单的吗</span><br>    <span class="hljs-comment">//先序序列建树，孩子节点为空的地方用_</span><br>    <span class="hljs-keyword">char</span> s;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;s;<br>    <span class="hljs-keyword">if</span>(s==<span class="hljs-string">&#x27;_&#x27;</span>) T=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(!(T=(BiTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiTNode)))) <span class="hljs-keyword">return</span>;<br>        T-&gt;data=s;<br>        CreateBiTree(T-&gt;left);<br>        CreateBiTree(T-&gt;right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-遍历（递归）"><a href="#2-遍历（递归）" class="headerlink" title="2.遍历（递归）"></a>2.遍历（递归）</h2><p>On</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreOrderTraverse</span><span class="hljs-params">(BiTree T)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(T)&#123;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;T-&gt;data&lt;&lt;<span class="hljs-built_in">endl</span>;<span class="hljs-comment">//总之访问即可</span><br>        PreOrderTraverse(T-&gt;left);<br>        PreOrderTraverse(T-&gt;right);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InOrderTraverse</span><span class="hljs-params">(BiTree T)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(T)&#123;<br>        InOrderTraverse(T-&gt;left);<br>        <span class="hljs-built_in">cout</span>&lt;&lt;T-&gt;data&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        InOrderTraverse(T-&gt;right);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PostOrderTraverse</span><span class="hljs-params">(BiTree T)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(T)&#123;<br>        PostOrderTraverse(T-&gt;left);<br>        PostOrderTraverse(T-&gt;right);<br>        <span class="hljs-built_in">cout</span>&lt;&lt;T-&gt;data&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-遍历（非递归）"><a href="#2-遍历（非递归）" class="headerlink" title="2.遍历（非递归）"></a>2.遍历（非递归）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InOrderTraverse_stack</span><span class="hljs-params">(BiTree T)</span> </span>&#123;<br>    <span class="hljs-built_in">stack</span>&lt;BiTree&gt; S;<span class="hljs-comment">//建议搓个ctype的栈</span><br>    S.push(T);<br>    <span class="hljs-keyword">while</span>(!S.empty())&#123;<br>        BiTree p=T;<br>        <span class="hljs-keyword">while</span>((p=S.top())!=<span class="hljs-literal">NULL</span>) S.push(p-&gt;left);<br>        S.pop();<span class="hljs-comment">//栈顶空指针弹出</span><br>        <span class="hljs-keyword">if</span>(!S.empty())&#123;<br>            p=S.top();S.pop();<br>            <span class="hljs-built_in">cout</span>&lt;&lt;p-&gt;data&lt;&lt;<span class="hljs-built_in">endl</span>;<br>            S.push(p-&gt;right);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-求深度"><a href="#3-求深度" class="headerlink" title="3.求深度"></a>3.求深度</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">GetDepth</span><span class="hljs-params">(BiTree T)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!T) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> max(GetDepth(T-&gt;left), GetDepth(T-&gt;right))+<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-线索化"><a href="#4-线索化" class="headerlink" title="4.线索化"></a>4.线索化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span>Link,Thread&#125;PointerTag;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiThrNode</span>&#123;</span><br>    Elemtype data;<br>    BiThrNode *left,*right;<br>    PointerTag LTag,RTag;<br>&#125;BiThrNode,*BiThrTree;<br>BiThrTree pre;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InThreading</span><span class="hljs-params">(BiThrTree &amp;p)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(p)&#123;<br>        InThreading(p-&gt;left);<br>        <span class="hljs-keyword">if</span>(!p-&gt;left) &#123;<br>            p-&gt;LTag=Thread;p-&gt;left=pre;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!pre-&gt;right)&#123;<br>            pre-&gt;RTag=Thread;<br>            pre-&gt;right=p;<br>        &#125;<br>        InThreading(p-&gt;right);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InOrderThreading</span><span class="hljs-params">(BiThrTree &amp;Thrt,BiThrTree T)</span></span>&#123;<br>    <span class="hljs-comment">//Thrt指向头节点T，类似链表的头指针</span><br>    <span class="hljs-keyword">if</span>(!(Thrt=(BiThrTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiThrNode)))) <span class="hljs-built_in">exit</span>(OVERFLOW);<br>    Thrt-&gt;LTag=Link;<span class="hljs-comment">//左边连T</span><br>    Thrt-&gt;RTag=Thread;<span class="hljs-comment">//最终是中序遍历的最后一个节点right指向Thrt</span><br><br>    <span class="hljs-comment">//下面两行迷惑</span><br>    Thrt-&gt;right=Thrt;<span class="hljs-comment">//右指针回指 why?</span><br>    <span class="hljs-keyword">if</span>(!T) Thrt-&gt;left=Thrt;<span class="hljs-comment">//T为空，左指针回指</span><br>    <br>    <span class="hljs-keyword">else</span>&#123;<br>        Thrt-&gt;left=T;<br>        pre=Thrt;<span class="hljs-comment">//指向前一个节点</span><br>        InThreading(T);<br>        <br>        <span class="hljs-comment">//最后一个节点线索化（由于pre到不了最后）</span><br>        pre-&gt;RTag=Thread;<br>        pre-&gt;right=Thrt;<br>        Thrt-&gt;right=pre;<br>        <span class="hljs-comment">//最终Thrt的后继是pre？</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-森林"><a href="#5-森林" class="headerlink" title="5.森林"></a>5.森林</h2><h3 id="1-双亲表示法"><a href="#1-双亲表示法" class="headerlink" title="1.双亲表示法"></a>1.双亲表示法</h3><p>连续空间存储树的节点，并附设一个区域存储双亲节点的下标</p><p>缺点：求节点的孩子需要遍历整个结构</p><h3 id="2-孩子表示法"><a href="#2-孩子表示法" class="headerlink" title="2.孩子表示法"></a>2.孩子表示法</h3><p>采用多重链表，每个节点指向多个孩子节点</p><p>缺点：求节点的双亲需要遍历整个结构</p><h3 id="3-孩子兄弟表示法"><a href="#3-孩子兄弟表示法" class="headerlink" title="3.孩子兄弟表示法"></a>3.孩子兄弟表示法</h3><p>两个指针域*firstchild指向第一个孩子节点，*nextsibling指向孩子节点的堂兄弟</p><h3 id="4-森林与二叉树的转换"><a href="#4-森林与二叉树的转换" class="headerlink" title="4.森林与二叉树的转换"></a>4.森林与二叉树的转换</h3><p>你会做</p><p>根节点一定没有右孩子</p><h3 id="5-森林遍历"><a href="#5-森林遍历" class="headerlink" title="5.森林遍历"></a>5.森林遍历</h3><p>先序：</p><ol><li>访问森林中第一棵树的根节点</li><li>先序遍历第一棵树中根节点的子树森林</li><li>先序遍历除第一棵树之后剩余的树构成的森林</li></ol><h2 id="6-Huffman树"><a href="#6-Huffman树" class="headerlink" title="6.Huffman树"></a>6.Huffman树</h2><p>路径长度：从一个节点到另一个节点的分支数目</p><p>树的路径长度：从树根到每一个节点的路径长度之和</p><p>*完全二叉树是这种路径长度最短的二叉树</p><p>树的带权路径长度：树中所有叶子节点的带权路径长度之和（节点带权，分支无权值）<br>$$<br>WPL=\sum_{k=1}^{n} w_kl_k<br>$$<br>最优二叉树/哈夫曼树：WPL最小的树</p><p>huffman前缀码：任何一个字符的编码都不能是其他字符编码的前缀</p><p>正则二叉树：树中只有度为0和2的节点，没有度为1的节点，一棵有n个叶子节点的二叉树共有2n-1个节点</p><p>总之就是非常恐怖</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-keyword">int</span> weight;<br>    <span class="hljs-keyword">int</span> parent,left,right;<br>&#125;HTNode,*HuffmanTree;<span class="hljs-comment">//动态分配数组存储哈夫曼树</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> **HuffmanCode;<span class="hljs-comment">//这是啥？</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HuffmanCoding</span><span class="hljs-params">(HuffmanTree &amp;HT,HuffmanCode &amp;HC,<span class="hljs-keyword">int</span> *w,<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-comment">//w为n个字符权值的数组，由w构建哈夫曼树HT并将编码结果存入HC</span><br>    <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>;<span class="hljs-comment">//一个点没法编</span><br>    <span class="hljs-keyword">int</span> m=<span class="hljs-number">2</span>*n<span class="hljs-number">-1</span>;<span class="hljs-comment">//正则二叉树的节点总数</span><br>    HT=(HuffmanTree)<span class="hljs-built_in">malloc</span>((m+<span class="hljs-number">1</span>)*<span class="hljs-keyword">sizeof</span>(HTNode));<span class="hljs-comment">//不使用0号单元，节点序号均为正数</span><br>    HuffmanTree p=HT;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++,p++,w++) *p=&#123;*w,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=n+<span class="hljs-number">1</span>;i&lt;=m;i++,p++) *p=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=n+<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-keyword">int</span> s1,s2;<br>        select(HT,i<span class="hljs-number">-1</span>,s1,s2);<span class="hljs-comment">//在HT[1...i-1]选择parent为0且weight最小的两个节点，其序号为s1和s2</span><br>        HT[s1].parent=i;HT[s2].parent=i;<br>        HT[i].left=s1;HT[i].right=s2;<br>        HT[i].weight=HT[s1].weight+HT[s2].weight;<br>    &#125;<br>    <span class="hljs-comment">//输出编码</span><br>    <span class="hljs-comment">//紧张刺激的拼字符串环节。。。。</span><br>    HC=(HuffmanCode)<span class="hljs-built_in">malloc</span>((n+<span class="hljs-number">1</span>)*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>*));<span class="hljs-comment">//n个字符编码的头指针向量</span><br>    <span class="hljs-keyword">char</span>* cd=(<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(n*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>));<br>    cd[n<span class="hljs-number">-1</span>]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">int</span> start=n<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> c=i,f=HT[i].parent;f!=<span class="hljs-number">0</span>;c=f,f=HT[f].parent)&#123;<br>            <span class="hljs-keyword">if</span>(HT[f].left==c) cd[--start]=<span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-comment">//从后面往前拼，从叶子到根</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(HT[f].right==c) cd[--start]=<span class="hljs-string">&#x27;1&#x27;</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span>;<br>            HC[i]=(<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>((n-start)*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>));<span class="hljs-comment">//申请n-start的空间即这个字符串的长度</span><br>            <span class="hljs-built_in">strcpy</span>(HC[i],&amp;cd[start]);<span class="hljs-comment">//strcpy传参为char*</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(cd);<br>&#125;<br></code></pre></td></tr></table></figure><p>啊书上后面两节在讲什么？</p><p>不知道</p><h1 id="Chapter7-图"><a href="#Chapter7-图" class="headerlink" title="Chapter7.图"></a>Chapter7.图</h1><p>&lt;u,v&gt; 有向图，u到v是一条<strong>弧</strong>，弧尾/起始点：u，弧头/终端点：v</p><p>(u,v) 无向图，u到v是一条<strong>边</strong></p><p>在简单图中：（没有重边和自环）</p><p>无向完全图：有$C_n^2$即$\frac{n(n-1)}{2}$条边的图称为无向完全图</p><p>有向完全图：有$2C_n^2$即$n(n-1)$条边的图</p><p>稀疏图：边或弧数量少($e&lt;nlogn$)的图</p><p>稠密图：边或弧数量多</p><p>权：图的边或弧具有与它相关的数</p><p>网：带权图通常又称为网</p><p>子图：类似子集的概念</p><p>邻接：u和v之间有一条边，则u和v邻接</p><p>关联：这条边关联u和v</p><p>入度、出度</p><p>路径：从u到v的一个顶点序列</p><p>回路：从u到u的一个顶点序列</p><p>简单路径：序列中顶点不重复的路径</p><p>连通：从u到v有路径，则称u和v是连通的</p><p>连通图：无向图，任意两顶点之间都连通</p><p>连通分量：无向图中极大连通子图</p><p>强连通图：有向图，从u到v和从v到u都存在路径</p><p>强连通分量：有向图中极大强连通子图</p><p>生成树：连通图的生成树是一个极小连通子图，含图中全部顶点和n-1条边，e=v-1</p><p>​    若边大于v-1，则一定有环；若边小于v-1，则非连通</p><p>​    有v-1条边也不一定是生成树</p><p>有向树：有向图恰有一个顶点入度为0（根），其余顶点入度均为1</p><p>生成森林：有向图，由若干棵有向树组成，每个顶点属于且仅属于一棵树</p><h2 id="0-结构体定义-6"><a href="#0-结构体定义-6" class="headerlink" title="0.结构体定义"></a>0.结构体定义</h2><h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF INT_MAX</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_VERTEX_NUM 20</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Elemtype;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Infotype;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ArcCell</span>&#123;</span><br>    Elemtype adj;<span class="hljs-comment">//书上是VRType，顶点关系类型；无向图用1或0表示是否相邻，带权图则表示权值（有边为权值，无边为INF）</span><br>    Infotype *info;<span class="hljs-comment">//其他相关信息</span><br>&#125;ArcCell,AdjMatrix[MAX_VERTEX_NUM][MAX_VERTEX_NUM];<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    Elemtype vexs[MAX_VERTEX_NUM];<span class="hljs-comment">//顶点向量？什么东西？</span><br>    AdjMatrix arcs;<span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-keyword">int</span> vexnum,arcnum;<span class="hljs-comment">//vex顶点数量，arc弧数量</span><br>&#125;MGraph;<br></code></pre></td></tr></table></figure><h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><p>有点熟悉？啊写dijkstra用过</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ArcNode</span>&#123;</span><br>    <span class="hljs-keyword">int</span> adjvex;<br>    ArcNode *nextarc;<br>    Infotype *info;<br>&#125;ArcNode;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VNode</span>&#123;</span><br>    Elemtype data;<span class="hljs-comment">//顶点信息</span><br>    ArcNode *firstarc;<br>&#125;VNode,AdjList[MAX_VERTEX_NUM];<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    AdjList vertices;<br>    <span class="hljs-keyword">int</span> vexnum,arcnum;<br>&#125;ALGraph;<br></code></pre></td></tr></table></figure><h3 id="十字链表-1"><a href="#十字链表-1" class="headerlink" title="十字链表"></a>十字链表</h3><h3 id="邻接多重表"><a href="#邻接多重表" class="headerlink" title="邻接多重表"></a>邻接多重表</h3><h2 id="1-DFS"><a href="#1-DFS" class="headerlink" title="1.DFS"></a>1.DFS</h2><p>应该没错吧？</p><p>初始点是i（为什么不用Elemtype）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">bool</span> vis[MAX_VERTEX_NUM];<span class="hljs-comment">//记得初始化为false</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(MGraph &amp;G,<span class="hljs-keyword">int</span> i)</span></span>&#123;<span class="hljs-comment">//邻接矩阵，On2</span><br>    vis[i]=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;G.vexnum;j++)&#123;<br>        <span class="hljs-keyword">if</span>(!vis[j]&amp;&amp;G.arcs[i][j].adj!=<span class="hljs-number">0</span>) DFS(G,j);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(ALGraph &amp;G,<span class="hljs-keyword">int</span> i)</span></span>&#123;<span class="hljs-comment">//邻接表，On</span><br>    vis[i]=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(ArcNode *p=G.vertices[i].firstarc;p;p=p-&gt;nextarc)&#123;<br>        <span class="hljs-keyword">if</span>(!vis[p-&gt;adjvex]) DFS(G,p-&gt;adjvex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-BFS"><a href="#2-BFS" class="headerlink" title="2.BFS"></a>2.BFS</h2><p>应该也没错吧</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFS</span><span class="hljs-params">(MGraph &amp;G,<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>    <span class="hljs-comment">//加vis数组初始化</span><br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; que;<br>    vis[i]=<span class="hljs-literal">true</span>;<br>    que.push(i);<br>    <span class="hljs-keyword">while</span>(!que.empty())&#123;<br>        <span class="hljs-keyword">int</span> temp=que.front();<br>        que.pop();<br>        <span class="hljs-built_in">cout</span>&lt;&lt;temp&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;G.vexnum;j++)&#123;<br>            <span class="hljs-keyword">if</span>(G.arcs[temp][j].adj!=<span class="hljs-number">0</span>&amp;&amp;!vis[j]) &#123;<br>                que.push(j);        <br>                vis[j]=<span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFS</span><span class="hljs-params">(ALGraph &amp;G,<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>    <span class="hljs-comment">//加vis数组初始化</span><br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; que;<br>    vis[i]=<span class="hljs-literal">true</span>;<br>    que.push(i);<br>    <span class="hljs-keyword">while</span>(!que.empty())&#123;<br>        <span class="hljs-keyword">int</span> temp=que.front();<br>        que.pop();<br>        <span class="hljs-built_in">cout</span>&lt;&lt;temp&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">for</span>(ArcNode *p=G.vertices[temp].firstarc;p;p=p-&gt;nextarc)&#123;<br>            <span class="hljs-keyword">if</span>(!vis[p-&gt;adjvex]) &#123;<br>                que.push(p-&gt;adjvex);<br>                vis[p-&gt;adjvex]=<span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对非连通图的遍历，多次调用遍历函数，可以得到图的连通分量</p><p>通过DFS和BFS能够得到图的生成树，分别就叫深度优先生成树/广度优先生成树</p><p>非连通图：深度/广度优先生成森林</p><h2 id="3-最小生成树"><a href="#3-最小生成树" class="headerlink" title="3.最小生成树"></a>3.最小生成树</h2><h3 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h3><p>On2，与边数无关，适合稠密图</p><p>蛮怪的。。书上这个closedge中adjvex邻接的顶点v根本没用到，那定义个这个结构到底是想干啥。。。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> closedge[MAX_VERTEX_NUM];<span class="hljs-comment">//备选点集合 closedge[u]</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Prim</span><span class="hljs-params">(MGraph &amp;G,Elemtype u)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;G.vexnum;i++)&#123;<span class="hljs-comment">//closedge初始化为u的关联边</span><br>        <span class="hljs-keyword">if</span>(i!=u) <span class="hljs-comment">//莫得自环</span><br>            closedge[i]=G.arcs[u][i].adj;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;u&lt;&lt;<span class="hljs-built_in">endl</span>;<br>    closedge[u]=<span class="hljs-number">0</span>;<span class="hljs-comment">//等于零表示u已经被选中，这样啊</span><br>    <span class="hljs-keyword">int</span> temp;<span class="hljs-keyword">int</span> cost=INF;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;G.vexnum<span class="hljs-number">-1</span>;i++)&#123;<span class="hljs-comment">//选剩下的vexnum-1个点 On2</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;G.vexnum;k++) &#123;<span class="hljs-comment">//从closedge中选最短边</span><br>            <span class="hljs-keyword">if</span> (closedge[k] != <span class="hljs-number">0</span> &amp;&amp; closedge[k] &lt; cost) &#123;<br>                temp = k;<br>                cost = closedge[k];<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//temp即选出的下一个点</span><br>        <span class="hljs-built_in">cout</span>&lt;&lt;temp&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        ans+=cost;<br>        closedge[temp]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;G.vexnum;j++)&#123;<br>            <span class="hljs-keyword">if</span>(closedge[j]&gt;G.arcs[temp][j].adj)<br>                closedge[j]=G.arcs[temp][j].adj;<br>        &#125;<br>        cost=INF;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;weight:&quot;</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h3><p>老Kruskal大师了Onlogn</p><p>这，书上没代码</p><p>用书上结构的话得加一个能对边进行排序同时存节点信息的结构体，然后用并查集</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Kedge</span>&#123;</span><br>    <span class="hljs-keyword">int</span> u,v,w;<br>&#125;;<br>Kedge kE[maxn];<span class="hljs-comment">//Kruskal edge</span><br><span class="hljs-comment">//kruskal+并查集</span><br><span class="hljs-keyword">int</span> f[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;maxn;i++) f[i]=i;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(f[x]==x) <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> f[x]=<span class="hljs-built_in">find</span>(f[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> temp=<span class="hljs-built_in">find</span>(a);<br>    f[temp]=<span class="hljs-built_in">find</span>(b);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(a)==<span class="hljs-built_in">find</span>(b)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">comp</span><span class="hljs-params">(Kedge &amp;a,Kedge &amp;b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a.w&lt;b.w;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Kruskal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> v)</span></span>&#123;<br>    <span class="hljs-built_in">init</span>();<span class="hljs-comment">//并查集初始化</span><br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">sort</span>(kE,kE+v,comp);<span class="hljs-comment">//边权从小到大排序</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;v;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">check</span>(kE[i].u,kE[i].v))&#123;<span class="hljs-comment">//查询uv是否已经加入并查集</span><br>            <span class="hljs-built_in">merge</span>(kE[i].u,kE[i].v);<span class="hljs-comment">//若未加入,则合并uv的集合</span><br>            cout&lt;&lt;kE[i].u&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;kE[i].v&lt;&lt;endl;<br>            ans+=kE[i].w;<span class="hljs-comment">//ans+边权w</span><br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;endl;<span class="hljs-comment">//最后输出图最小生成树的树权</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-拓扑排序"><a href="#4-拓扑排序" class="headerlink" title="4.拓扑排序"></a>4.拓扑排序</h2><p>有向无环图：字面意思，这个环指不存在回路，图形是环并不一定有环。简称DAG图</p><p>AOV(Activity On Vertex Network)网，称为顶点表示活动的网</p><p>在AOV网中不应出现有向环，对于程序的数据流图来说，这代表一个死循环</p><p>拓扑排序：由一个集合上的偏序得到全序</p><p>偏序：关系R满足自反、反对称、传递</p><p>全序：偏序关系R对每个x，y属于R，必有xRy或yRx，则R是全序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> indegree[MAX_VERTEX_NUM];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">TopologySort</span><span class="hljs-params">(ALGraph &amp;G)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;MAX_VERTEX_NUM;i++) indegree[i]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;G.vexnum;i++)&#123;<br>        <span class="hljs-keyword">for</span>(ArcNode *p=G.vertices[i].firstarc;p;p=p-&gt;nextarc)&#123;<br>            indegree[p-&gt;adjvex]++;<br>        &#125;<br>    &#125;<span class="hljs-comment">//初始化indegree入度数组</span><br>    <span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; st;<span class="hljs-comment">//存零入度的顶点</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;G.vexnum;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!indegree[i]) st.push(i);<br>    &#125;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(!st.empty())&#123;<br>        <span class="hljs-keyword">int</span> temp=st.top();<br>        st.pop();<br>        cnt++;<br>        <span class="hljs-built_in">cout</span>&lt;&lt;temp&lt;&lt;<span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">for</span>(ArcNode *p=G.vertices[temp].firstarc;p;p=p-&gt;nextarc)&#123;<br>            indegree[p-&gt;adjvex]--;<br>            <span class="hljs-keyword">if</span>(!indegree[p-&gt;adjvex]) st.push(p-&gt;adjvex);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(cnt&lt;G.vexnum) <span class="hljs-keyword">return</span>;<span class="hljs-comment">//不够，不是有向无环图</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-关键路径"><a href="#5-关键路径" class="headerlink" title="5.关键路径"></a>5.关键路径</h2><p>AOE(Activity On Edge)网，即用边表示活动的网，顶点表示事件，弧表示活动，弧的权表示活动的持续时间</p><p>入度为0的点（开始点）称为源点，出度为0的点称为汇点</p><p>路径长度（权值之和）最长的路径称为关键路径</p><p>e(i)–活动ai（是某一条弧）最早开始时间</p><p>l(i)–活动ai最迟必须开始的时间（不推迟整个工程完成的前提下）</p><p>l(i)-e(i)–完成活动ai的时间余量</p><p>l(i)=e(i)–这样的活动称为<strong>关键活动</strong>， 即找一条全部由关键活动构成的路径</p><p>首先应求得事件的<strong>最早发生时间ve(j)<strong>和</strong>最迟发生时间vl(j)</strong></p><p>ve(j)：j前所有活动都已完成，事件j才能发生，因此是最大值</p><p>vl(j)：从后面倒着往前求，取最小值，否则会使工程完成时间延后</p><p>。。。我受到了欺骗，书上没有算法，焯</p><h2 id="6-Dijkstra"><a href="#6-Dijkstra" class="headerlink" title="6.Dijkstra"></a>6.Dijkstra</h2><p>画一个图理解循环：从a开始找到c的最短路</p><p>a—2—b—3—c</p><p>a—8—c</p><p>dis[a]=0,dis[b]=2,dis[c]=8（存a到a，a到b…）</p><p>选中b后</p><p>if(dis[c]&gt;dis[b]+weight(b-&gt;c))</p><p>用链表做了个能On遍历选最小边的，可以用后边小根堆优化亿下</p><h3 id="1-邻接表版"><a href="#1-邻接表版" class="headerlink" title="1.邻接表版"></a>1.邻接表版</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> vis[maxn];<br><span class="hljs-keyword">int</span> dis[maxn];<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">List</span>&#123;</span><br>    <span class="hljs-keyword">int</span> v;<br>    InfoType w;<br>    List *next;<br>&#125;*LinkList;<br><span class="hljs-function">LinkList <span class="hljs-title">newNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> w)</span></span>&#123;<br>    LinkList p=(LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(List));<br>    p-&gt;v=v;<br>    p-&gt;w=w;<br>    p-&gt;next= <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ALGraph &amp;G)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=G.vexnum;i++) &#123;<br>        vis[i]=<span class="hljs-number">0</span>;<br>        dis[i]=inf;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Dijkstra</span><span class="hljs-params">(ALGraph &amp;G,<span class="hljs-keyword">int</span> s)</span></span>&#123;<br>    init(G);<br>    dis[s]=<span class="hljs-number">0</span>;<br>    LinkList L=(LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(List));<br>    LinkList newp= newNode(s,<span class="hljs-number">0</span>);<br>    L-&gt;next=newp;<br>    <span class="hljs-keyword">while</span>(L-&gt;next)&#123;<br>        LinkList m;<br>        m=L-&gt;next;<br>        <span class="hljs-keyword">for</span>(LinkList p=L-&gt;next;p;p=p-&gt;next)&#123;<br>            m=p-&gt;w&lt;m-&gt;w?p:m;<br>        &#125;<br>        LinkList pre=L;<br>        <span class="hljs-keyword">for</span>(;pre-&gt;next!=m;pre=pre-&gt;next);<br>        pre-&gt;next=pre-&gt;next-&gt;next;<br><br>        <span class="hljs-keyword">if</span>(vis[m-&gt;v]) <span class="hljs-keyword">continue</span>;<br>        vis[m-&gt;v]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(ArcNode *p=G.vertics[m-&gt;v].firstarc;p;p=p-&gt;nextarc)&#123;<br>            <span class="hljs-keyword">int</span> cost=p-&gt;info[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">if</span>(!vis[p-&gt;adjvex]&amp;&amp;dis[p-&gt;adjvex]&gt;dis[m-&gt;v]+cost) &#123;<br>                dis[p-&gt;adjvex] = dis[m-&gt;v] + cost;<br>                LinkList newq= newNode(p-&gt;adjvex,dis[p-&gt;adjvex]);<br>                newq-&gt;next=L-&gt;next;<br>                L-&gt;next=newq;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-邻接矩阵版"><a href="#2-邻接矩阵版" class="headerlink" title="2.邻接矩阵版"></a>2.邻接矩阵版</h3>来写写算法嘛！<h2 id="7-Floyd"><a href="#7-Floyd" class="headerlink" title="7.Floyd"></a>7.Floyd</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Floyd</span><span class="hljs-params">(MGraph &amp;G,AdjMatrix &amp;D)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;G.vexnum;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;G.vexnum;j++)&#123;<br>            D[i][j]=G.arcs[i][j];<span class="hljs-comment">//赋一下值</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//G为带权图，D为求得的最短路</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;G.vexnum;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;G.vexnum;j++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;G.vexnum;k++)&#123;<br>                <span class="hljs-keyword">if</span>(D[j][k].adj&lt;D[j][i].adj+D[i][k].adj)<br>                    D[j][k].adj=D[j][i].adj+D[i][k].adj;<br><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Chapter9-查找"><a href="#Chapter9-查找" class="headerlink" title="Chapter9.查找"></a>Chapter9.查找</h1><p>静态查找表：查询某个元素是否在表中、查找这个元素的各种属性</p><p>动态查找表：查找过程中同时插入查找表中不存在的数据元素、或删除某个已存在的元素</p><h2 id="平均查找长度ASL"><a href="#平均查找长度ASL" class="headerlink" title="平均查找长度ASL"></a>平均查找长度ASL</h2><p>Average Search Length<br>$$<br>ASL=\sum_{i=1}^{n}P_iC_i<br>$$<br>Pi：查找表中第i条记录的概率（一般都是等概率查找）$\sum_{i=1}^{n}P_i=1$</p><p>Ci：找到符合条件的元素所需比较次数</p><p>又分为查找成功时的ASL和不成功的ASL</p><h2 id="0-结构体定义-7"><a href="#0-结构体定义-7" class="headerlink" title="0.结构体定义"></a>0.结构体定义</h2><p>和排序一样（为什么不是排序和查找一样呢）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Keytype;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Infotype;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Redtype</span>&#123;</span><br>    Keytype key;<br>    Infotype info;<br>&#125;Redtype;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SqList</span>&#123;</span><br>    Redtype r[maxn];<br>    <span class="hljs-keyword">int</span> length;<br>&#125;SqList;<br></code></pre></td></tr></table></figure><h2 id="1-顺序查找"><a href="#1-顺序查找" class="headerlink" title="1.顺序查找"></a>1.顺序查找</h2><p>注意哨兵的使用</p><p>找到第i个记录的比较次数为$n-i+1$</p><p>（比如找第1个，要比较n个；找第二个，比较n-1个，即n-i+1）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">SeqSearch</span><span class="hljs-params">(SqList &amp;L,Keytype key)</span></span>&#123;<br>    L.r[<span class="hljs-number">0</span>].key=key;<span class="hljs-comment">//0号单元中不存元素，作为哨兵</span><br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=L.length;i&gt;=<span class="hljs-number">0</span>&amp;&amp;L.r[i].key!=key;i--);<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br></code></pre></td></tr></table></figure><p>$$<br>ASL=\frac{1}{n} \cdot \frac{(1+n)n}{2}<br>=\frac{n+1}{2}<br>$$</p><h2 id="2-二分查找-折半查找"><a href="#2-二分查找-折半查找" class="headerlink" title="2.二分查找/折半查找"></a>2.二分查找/折半查找</h2><p>在已经排序的表中使用（配合第十章的排序算法）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">BinSearch</span><span class="hljs-params">(SqList &amp;L,Keytype key)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> l=<span class="hljs-number">1</span>,r=L.length;<br>    <span class="hljs-keyword">while</span>(l&lt;=r)&#123;<br>        <span class="hljs-keyword">int</span> mid=(l+r)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(L.r[mid].key==key) <span class="hljs-keyword">return</span> mid;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(L.r[mid].key&gt;key) r=mid<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(L.r[mid].key&lt;key) l=mid+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//不存在要查找的key</span><br>&#125;<br></code></pre></td></tr></table></figure><p>看作二叉树（并且类似完全二叉树，但不一定是）</p><p>有n个元素则深度为$\lfloor log_2n\rfloor +1$</p><p>课本的描述感觉也不是很好啊。。我只知道是log阶</p><p>$h=log_2(n+1)$的满二叉树中：<br>$$<br>ASL=\frac{1}{n} \sum_{j=1}^{h}j \cdot 2^{j-1}<br>=\frac{n+1}{n}log_2(n+1)-1\<br>n较大时(n&gt;50)，ASL=log_2(n+1)-1<br>$$</p><h2 id="3-二叉排序树"><a href="#3-二叉排序树" class="headerlink" title="3.二叉排序树"></a>3.二叉排序树</h2><p>动态查找表</p><p>递归定义：</p><ol><li>若左子树不空，则左子树所有节点的值均小于它的根节点的值；</li><li>若右子树不空，则右子树所有节点的值均大于它的根节点的值；</li><li>它的左右子树也分别为二叉排序树</li></ol><p>中序遍历二叉排序树，可以得到一个关键字的有序序列。也就是说，一个无序序列可以通过构造一棵二叉排序树而变成一个有序序列，构造过程即一个排序过程</p><p>看到ppt上比课本优秀一百倍的代码然后改了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Elemtype;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span>&#123;</span><br>    Elemtype data;<br>    BiTNode *left,*right;<br>&#125;BiTNode,*BiTree;<br><span class="hljs-function">BiTree <span class="hljs-title">BST</span><span class="hljs-params">(BiTree &amp;T,Elemtype key)</span></span>&#123;<br>    BiTree pre,p=T;<br>    <span class="hljs-keyword">while</span>(p&amp;&amp;p-&gt;data!=key)&#123;<br>        pre=p;<br>        p-&gt;data&gt;key?p=p-&gt;left:p=p-&gt;right;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p) <span class="hljs-keyword">return</span> p;<br>    <span class="hljs-keyword">else</span>&#123;<br>        BiTree s=(BiTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BiTNode));<br>        s-&gt;data=key;<br>        s-&gt;left=<span class="hljs-literal">NULL</span>;<br>        s-&gt;right=<span class="hljs-literal">NULL</span>;<br>        pre-&gt;data&gt;key?pre-&gt;left=s:pre-&gt;right=s;<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>$$<br>ASL_{min}=\lfloor log_2n\rfloor +1(完全二叉树深度)\<br>ASL_{max}=(n+1)/2(顺序表，树只有左/右子树)<br>$$</p><p>但一般来说计算具体二叉树深度，根据具体情况分析，$\sum$节点所在层/总节点数</p><p>没说删除，好耶</p><h2 id="4-平衡二叉树"><a href="#4-平衡二叉树" class="headerlink" title="4.平衡二叉树"></a>4.平衡二叉树</h2><p>AVL树</p><p>性质：（AVL是空树或满足如下性质）</p><ol><li>左右子树深度之差（一般是用左深度-右深度）的绝对值≤1</li><li>左右子树是平衡二叉树</li></ol>来写写算法嘛！<p>好的，圣女大人！<del>下次一定</del></p><p>不过后面这几个都没要求算法实现？</p><h2 id="5-B-树B-树"><a href="#5-B-树B-树" class="headerlink" title="5.B-树B+树"></a>5.B-树B+树</h2><p>m叉B-树性质：（B-树是空树或满足如下性质）</p><ol><li><p>树中每个节点至多有m棵子树（废话，要不然为啥叫m叉）</p></li><li><p>若根节点不是叶子节点，则至少有两棵子树</p></li><li><p>除根之外的分支点至少有$\lceil m/2\rceil$棵子树</p></li><li><p>所有非终端节点中包含一个数据序列(n,A0,K1,A1,K2,A2,…,Kn,An)</p><p>n为关键字K的个数</p><p>K为关键字，满足升序排列</p><p>A为指向子树根节点的指针，且Ai-1指向子树中所有节点的关键字均小于Ki，An指向子树中所有节点关键字均大于Kn（看那个序列的顺序可知）</p></li><li><p>所有叶子节点均在同一层次</p></li></ol><p>ppt上多做几遍</p><p>m叉B+树性质：（仅与B-树有差异的部分）</p><ol><li>有n棵子树的节点中含n个关键字</li><li>所有叶子节点包含全部关键字信息，以及指向该关键字的指针；且叶子节点本身按关键字大小升序连接</li><li>所有非终端节点看成是索引，节点中仅含子树中最大/最小的关键字（如果最大则统一最大）</li></ol><h2 id="6-hash表"><a href="#6-hash表" class="headerlink" title="6.hash表"></a>6.hash表</h2><p>建立关键字与存储位置的对应关系，由关键字决定数据的存储地址</p><p>散列函数H(key)</p><p>经典例题：给hash函数和数列和表长，计算成功和不成功的ASL</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><h4 id="1-直接定址法"><a href="#1-直接定址法" class="headerlink" title="1.直接定址法"></a>1.直接定址法</h4><p>$$<br>H(key)=key或akey+b<br>$$</p><h4 id="2-数字分析法"><a href="#2-数字分析法" class="headerlink" title="2.数字分析法"></a>2.数字分析法</h4><p>听着很高端啊，举个例子 202000130088把后面三位掰下来做地址</p><h4 id="3-平方取中法"><a href="#3-平方取中法" class="headerlink" title="3.平方取中法"></a>3.平方取中法</h4><p>$$<br>H(key)=key^2<br>$$</p><p>取其中几位做地址</p><h4 id="4-折叠法"><a href="#4-折叠法" class="headerlink" title="4.折叠法"></a>4.折叠法</h4><p>把key按位拆成数字加起来求一个地址</p><h4 id="5-除留余数法"><a href="#5-除留余数法" class="headerlink" title="5.除留余数法"></a>5.除留余数法</h4><p>$$<br>H(key)=key \space mod \space p<br>$$</p><p>p选质数或不包含小于20的质因数的合数</p><h4 id="6-随机数法"><a href="#6-随机数法" class="headerlink" title="6.随机数法"></a>6.随机数法</h4>又要抽卡了吗？<h3 id="冲突处理"><a href="#冲突处理" class="headerlink" title="冲突处理"></a>冲突处理</h3><h4 id="1-开放定址法"><a href="#1-开放定址法" class="headerlink" title="1.开放定址法"></a>1.开放定址法</h4><p>寻找下一个空的哈希地址，并将数据存入</p><h5 id="1-线性探测法"><a href="#1-线性探测法" class="headerlink" title="1.线性探测法"></a>1.线性探测法</h5><p>while(hash地址不为空){</p><p>​    hash+=d;}</p><p>d为增量</p><p>优点：只要hash表不满，一定能找到空地址单元存储有冲突的元素</p><p>缺点：容易产生二次聚集（一大堆堆在那，关键字频繁重复的地方一大堆，别的地方空）</p><h5 id="2-二次探测法"><a href="#2-二次探测法" class="headerlink" title="2.二次探测法"></a>2.二次探测法</h5><p>while(hash地址不为空){</p><p>​    hash+=d或hash-=d}</p><h5 id="3-伪随机探测法"><a href="#3-伪随机探测法" class="headerlink" title="3.伪随机探测法"></a>3.伪随机探测法</h5><p><del>继续抽卡，上头</del></p><p>d为随机数</p><h4 id="2-链地址法"><a href="#2-链地址法" class="headerlink" title="2.链地址法"></a>2.链地址法</h4><p>将具有相同地址的记录用单链表连接，m个hash地址则设m个单链表，形成动态的结构</p><h4 id="3-再哈希法"><a href="#3-再哈希法" class="headerlink" title="3.再哈希法"></a>3.再哈希法</h4><p>再使用不同的hash函数RH(key)</p><p>优点：不易产生聚集</p><p>缺点：增加计算时间</p><h4 id="4-公共溢出区"><a href="#4-公共溢出区" class="headerlink" title="4.公共溢出区"></a>4.公共溢出区</h4><p>另设一个溢出表，发生冲突时把元素存入溢出表中</p><h1 id="Chapter10-排序-Sort"><a href="#Chapter10-排序-Sort" class="headerlink" title="Chapter10. 排序 Sort"></a>Chapter10. 排序 Sort</h1><h2 id="0-结构体定义-8"><a href="#0-结构体定义-8" class="headerlink" title="0.结构体定义"></a>0.结构体定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Keytype;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Infotype;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Redtype</span>&#123;</span><br>    Keytype key;<br>    Infotype info;<br>&#125;Redtype;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SqList</span>&#123;</span><br>    Redtype r[maxn];<br>    <span class="hljs-keyword">int</span> length;<br>&#125;SqList;<br></code></pre></td></tr></table></figure><h2 id="1-直接插入排序"><a href="#1-直接插入排序" class="headerlink" title="1.直接插入排序"></a>1.直接插入排序</h2><p>$time:O(n^2)\space space:O(1)$ 稳定的(指key值相同元素保持初始相对顺序不变)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InsertSort</span><span class="hljs-params">(SqList &amp;L)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=L.length;i++)&#123;<br>        L.r[<span class="hljs-number">0</span>]=L.r[i];<span class="hljs-comment">//哨兵，将i中元素暂时存储的单元，必须使用，否则在下一层for循环中i中元素被前一个覆盖</span><br>        <span class="hljs-keyword">if</span>(L.r[i].key &lt; L.r[i - <span class="hljs-number">1</span>].key)&#123;<span class="hljs-comment">//其实不写也完全等价</span><br>            <span class="hljs-keyword">int</span> j;<br>            <span class="hljs-keyword">for</span>(j=i<span class="hljs-number">-1</span>; L.r[j].key &gt; L.r[<span class="hljs-number">0</span>].key; L.r[j + <span class="hljs-number">1</span>]=L.r[j],j--);<br>            L.r[j + <span class="hljs-number">1</span>]=L.r[<span class="hljs-number">0</span>];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-1-折半查找直接插入排序"><a href="#1-1-折半查找直接插入排序" class="headerlink" title="1.1 折半查找直接插入排序"></a>1.1 折半查找直接插入排序</h3><p>仅优化查找比j小的元素的位置，但是时间复杂度依旧On2 挺憨的，故不算做一个算法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BInsertSort</span><span class="hljs-params">(SqList &amp;L)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= L.length; i++) &#123;<br>        L.r[<span class="hljs-number">0</span>] = L.r[i];<br>        <span class="hljs-keyword">if</span> (L.r[i].key &lt; L.r[i - <span class="hljs-number">1</span>].key) &#123;<br>            <span class="hljs-keyword">int</span> low = <span class="hljs-number">1</span>, high = i - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (low &lt;= high) &#123;<br>                <span class="hljs-keyword">int</span> mid = (low + high) / <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">if</span> (L.r[mid].key == L.r[<span class="hljs-number">0</span>].key) <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">if</span> (L.r[mid].key &gt; L.r[<span class="hljs-number">0</span>].key) high = mid - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (L.r[mid].key &lt; L.r[<span class="hljs-number">0</span>].key) low = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i - <span class="hljs-number">1</span>; j &gt; (low + high) / <span class="hljs-number">2</span>; j--) L.r[j + <span class="hljs-number">1</span>] = L.r[j];<br>            L.r[<span class="hljs-number">1</span> + (low + high) / <span class="hljs-number">2</span>] = L.r[<span class="hljs-number">0</span>];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-2-路插入排序"><a href="#1-2-2-路插入排序" class="headerlink" title="1.2 2-路插入排序"></a>1.2 2-路插入排序</h3><p>将第一个元素作为mid，比mid小的插在mid前面的表中，比它大的放到后面，同样On2 憨憨 不写了</p><h3 id="1-3-表插入排序"><a href="#1-3-表插入排序" class="headerlink" title="1.3 表插入排序"></a>1.3 表插入排序</h3><p>这是个什么东西？没仔细研究…</p><h2 id="2-希尔排序（Shell’s-Sort）"><a href="#2-希尔排序（Shell’s-Sort）" class="headerlink" title="2.希尔排序（Shell’s Sort）"></a>2.希尔排序（Shell’s Sort）</h2><p><del>不要见啥都喊女儿啊拜托</del></p><p>又称缩小增量排序，由于直接插入排序在元素基本有序时速度接近On；在length较小时排序效率高而进行改进</p><p>约$time:O(n^{1.5})\space space:O(1)$ 不稳定</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ShellInsert</span><span class="hljs-params">(SqList &amp;L,<span class="hljs-keyword">int</span> dk)</span></span>&#123;<span class="hljs-comment">//dk为增量</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>+dk;i&lt;=L.length;i++)&#123;<br>        <span class="hljs-keyword">if</span>(L.r[i].key&lt;L.r[i-dk].key)&#123;<br>            L.r[<span class="hljs-number">0</span>]=L.r[i];<br>            <span class="hljs-keyword">int</span> j;<br>            <span class="hljs-keyword">for</span>(j=i-dk;j&gt;<span class="hljs-number">0</span>&amp;&amp;L.r[j].key&gt;L.r[<span class="hljs-number">0</span>].key;L.r[j+dk]=L.r[j],j-=dk);<br>            L.r[j+dk]=L.r[<span class="hljs-number">0</span>];<span class="hljs-comment">//注意这里是j+dk，循环到这里的j&lt;=0</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ShellSort</span><span class="hljs-params">(SqList &amp;L,<span class="hljs-keyword">int</span> dlta[],<span class="hljs-keyword">int</span> t)</span></span>&#123;<br>    <span class="hljs-comment">//dlta为给定增量序列，例如｛5,3,1&#125;（隔5个元素之间有序、隔3个、最终都有序）</span><br>    <span class="hljs-comment">//t为增量序列的长度</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;t;i++)&#123;<br>        ShellInsert(L,dlta[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-冒泡排序"><a href="#3-冒泡排序" class="headerlink" title="3.冒泡排序"></a>3.冒泡排序</h2><p>每次两个元素相比较，若前面的更大，则两者交换，执行一次，一个最大的元素冒出来</p><p>$time:O(n^2)\space space:O(1)$ 稳定</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BubbleSort</span><span class="hljs-params">(SqList &amp;L)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> h=<span class="hljs-number">1</span>;h&lt;=L.length;h++) &#123;<br>        <span class="hljs-keyword">bool</span> fl=<span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= L.length-h+<span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (L.r[i - <span class="hljs-number">1</span>].key &gt; L.r[i].key)&#123;<br>                swap(L, i - <span class="hljs-number">1</span>, i);<br>                fl=<span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(fl) <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-快速排序"><a href="#4-快速排序" class="headerlink" title="4.快速排序"></a>4.快速排序</h2><p>大一没学好的东西，现在看来还挺简单的</p><p>$time:O(nlogn)\space space:O(logn)$（主要是栈空间） 不稳定</p><p>在表基本有序时退化为On2的冒泡排序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Partition</span><span class="hljs-params">(SqList &amp;L,<span class="hljs-keyword">int</span> low,<span class="hljs-keyword">int</span> high)</span></span>&#123;<br>    L.r[<span class="hljs-number">0</span>]=L.r[low];<span class="hljs-comment">//枢轴</span><br>    Keytype pivot=L.r[<span class="hljs-number">0</span>].key;<br>    <span class="hljs-keyword">while</span>(low&lt;high)&#123;<br>        <span class="hljs-keyword">while</span>(low&lt;high&amp;&amp;L.r[high].key&gt;=pivot) high--;<br>        L.r[low]=L.r[high];<br>        <span class="hljs-keyword">while</span>(low&lt;high&amp;&amp;L.r[low].key&lt;=pivot) low++;<br>        L.r[high]=L.r[low];<br>    &#125;<br>    L.r[low]=L.r[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">return</span> low;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">QuickSort</span><span class="hljs-params">(SqList &amp;L,<span class="hljs-keyword">int</span> low,<span class="hljs-keyword">int</span> high)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(low&lt;high)&#123;<br>        <span class="hljs-keyword">int</span> pivoc= Partition(L,low,high);<br>        QuickSort(L,low,pivoc<span class="hljs-number">-1</span>);<br>        QuickSort(L,pivoc+<span class="hljs-number">1</span>,high);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-选择排序"><a href="#5-选择排序" class="headerlink" title="5.选择排序"></a>5.选择排序</h2><p>每次选取关键字最小的记录加入已经有序的序列最后</p><p>$time:O(n^2)\space space:O(1)$ 稳定</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SelectSort</span><span class="hljs-params">(SqList &amp;L)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= L.length; i++) &#123;<br>        L.r[<span class="hljs-number">0</span>] = L.r[i];<br>        <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录目前最小元素位置</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= L.length; j++) &#123;<br>            <span class="hljs-keyword">if</span> (L.r[<span class="hljs-number">0</span>].key &gt; L.r[j].key) &#123;<br>                temp = j;<br>                L.r[<span class="hljs-number">0</span>] = L.r[j];<br>            &#125;<br>        &#125;<br>        swap(L, temp, i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-堆排序"><a href="#6-堆排序" class="headerlink" title="6.堆排序"></a>6.堆排序</h2><p>父节点都比孩子节点小-小根堆，都比孩子节点大-大根堆</p><p>$time:O(nlogn) \space space:O(1)$ 不稳定</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HeapAdjust</span><span class="hljs-params">(SqList &amp;H,<span class="hljs-keyword">int</span> s,<span class="hljs-keyword">int</span> m)</span></span>&#123;<span class="hljs-comment">//大根堆</span><br>    <span class="hljs-comment">//已知H.r[s...m]中除s以外均满足大根堆定义，调整s使H.r[s...m]成为一个大根堆</span><br>    H.r[<span class="hljs-number">0</span>]=H.r[s];<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">2</span>*s&lt;=m)&#123;<br>        <span class="hljs-keyword">int</span> j=<span class="hljs-number">2</span>*s;<span class="hljs-comment">//筛选s的两个孩子节点</span><br>        <span class="hljs-keyword">if</span>(j&lt;m&amp;&amp;H.r[j].key&lt;H.r[j+<span class="hljs-number">1</span>].key) j=j+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(H.r[<span class="hljs-number">0</span>].key&gt;H.r[j].key) <span class="hljs-keyword">break</span>;<span class="hljs-comment">//s的key值比两个孩子都大，不需要筛选</span><br>        H.r[s]=H.r[j];s=j;<span class="hljs-comment">//再while时继续筛选原来j的两个孩子</span><br>    &#125;<br>    H.r[s]=H.r[<span class="hljs-number">0</span>];<span class="hljs-comment">//现在的s是某个被移动过的节点，并且应该将原来的节点填在这里，不太好理解</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HeapSort</span><span class="hljs-params">(SqList &amp;H)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=H.length/<span class="hljs-number">2</span>;i&gt;<span class="hljs-number">0</span>;i--)&#123;<span class="hljs-comment">//建成大根堆</span><br>        HeapAdjust(H,i,H.length);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=H.length;i&gt;<span class="hljs-number">0</span>;i--)&#123;<span class="hljs-comment">//按顺序输出的过程</span><br>        <span class="hljs-built_in">cout</span>&lt;&lt;H.r[<span class="hljs-number">1</span>].key&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<span class="hljs-comment">//输出根节点（必为最大元素）</span><br>        swap(H,<span class="hljs-number">1</span>,i);<span class="hljs-comment">//根节点放在最后一个位置并且不再参与排序；最后一个节点成为根节点</span><br>        HeapAdjust(H,<span class="hljs-number">1</span>,i<span class="hljs-number">-1</span>);<span class="hljs-comment">//此时除根节点以外其他节点仍为大根堆结构，对根节点进行筛选</span><br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-归并排序"><a href="#7-归并排序" class="headerlink" title="7.归并排序"></a>7.归并排序</h2><p><del>题外话，我输得很彻底</del></p><p> $time:O(nlogn) \space space:O(nlogn)$ 稳定</p><p>“值得提醒的是，归并排序的递归算法在形式上较简洁，但实用性很差”</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Merge</span><span class="hljs-params">(SqList &amp;SR,SqList &amp;TR,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> m,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-comment">//将有序的SR.r[l...m] SR.r[m+1...r]归并为TR.r[l...r]</span><br>    <span class="hljs-keyword">int</span> i=l,j=m+<span class="hljs-number">1</span>,k=l;<br>    <span class="hljs-keyword">while</span>(i&lt;=m&amp;&amp;j&lt;=r)&#123;<span class="hljs-comment">//啊啊啊这落等号</span><br>        <span class="hljs-keyword">if</span>(SR.r[i].key&lt;SR.r[j].key) TR.r[k++]=SR.r[i++];<br>        <span class="hljs-keyword">else</span> TR.r[k++]=SR.r[j++];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(i&lt;=m) TR.r[k++]=SR.r[i++];<br>    <span class="hljs-keyword">while</span>(j&lt;=r) TR.r[k++]=SR.r[j++];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MergeSort</span><span class="hljs-params">(SqList &amp;SR,SqList &amp;TR1,<span class="hljs-keyword">int</span> s,<span class="hljs-keyword">int</span> t)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(s==t) TR1.r[s]=SR.r[s];<span class="hljs-comment">//表中只有一个元素，直接赋值，不递归</span><br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">int</span> m=(s+t)/<span class="hljs-number">2</span>;<span class="hljs-comment">//二分，二路归并</span><br>        SqList TR2;<br>        MergeSort(SR,TR2,s,m);<span class="hljs-comment">//SR左边排成有序</span><br>        MergeSort(SR,TR2,m+<span class="hljs-number">1</span>,t);<span class="hljs-comment">//SR右边排成有序</span><br>        Merge(TR2,TR1,s,m,t);<span class="hljs-comment">//TR2两边归并到TR1</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-基数排序"><a href="#8-基数排序" class="headerlink" title="8.基数排序"></a>8.基数排序</h2><p>d元组，元组中每个分量有radix种取值</p><p>例如：114514是<code>6</code>元组，每个分量有<code>10</code>种取值（0-9）</p><p>最高位优先/最低位优先</p><p>第i(i=1~d)趟分配，让第i位关键字为k的元组进入下标为k的链队中，然后按照关键字的顺序对链队进行收集，进入下一趟分配</p><p>$time:O(d(n+radix))$ n是待排序元素数量</p><p> $space:O(n+2radix)$ 附加链队指针数占据额外的存储空间 </p><p>稳定</p><p>算法回头有时间写</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-1：出分了。。说明确实应该多看课本上代码。。。所以这篇笔记很不错！来看看吧&lt;/p&gt;
&lt;p&gt;认真复习，求求&lt;/p&gt;
&lt;p&gt;*注：大量代码未经实际验证，出现bug为正常现象（）但是思想不会有问题&lt;/p&gt;
&lt;h1 id=&quot;Chapter1-绪论&quot;&gt;&lt;a href=&quot;#Chapt</summary>
      
    
    
    
    
    <category term="c" scheme="https://github.com/sterne012/sterne012.github.io/tags/c/"/>
    
    <category term="review" scheme="https://github.com/sterne012/sterne012.github.io/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>数据库实验答案</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2021/12/07/DataBaseAns/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2021/12/07/DataBaseAns/</id>
    <published>2021-12-07T12:07:56.000Z</published>
    <updated>2022-01-06T14:18:11.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验2"><a href="#实验2" class="headerlink" title="实验2"></a>实验2</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--(一)以student数据库中数据为基础，请使用T-SQL 语句实现以下操作：</span><br>说明:该大题中特别需要注意的是<span class="hljs-number">2</span>、<span class="hljs-number">5</span>、<span class="hljs-number">15</span>、<span class="hljs-number">16</span>、<span class="hljs-number">19</span>、<span class="hljs-number">21</span>题<br><span class="hljs-comment">--1.列出不姓刘的所有学生；</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> Sname <span class="hljs-keyword">not</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;刘%&#x27;</span><br>或<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> Sname  <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;[^刘]%&#x27;</span><br><span class="hljs-comment">--2.列出年龄超过平均值的所有学生名单，按年龄降序显示</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sage<span class="hljs-operator">&gt;=</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(sage) <span class="hljs-keyword">from</span> student)<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sage <span class="hljs-keyword">desc</span><br><br><span class="hljs-comment">--3.显示在1985年以后出生的学生的基本信息；</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span>( <span class="hljs-keyword">year</span>(getdate())<span class="hljs-operator">-</span>Sage)<span class="hljs-operator">&gt;</span><span class="hljs-number">1985</span><br><span class="hljs-comment">--4.查询出课程名含有“数据”字串的所有课程基本信息；</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> course<br><span class="hljs-keyword">where</span> Cname <span class="hljs-keyword">like</span><span class="hljs-string">&#x27;%数据%&#x27;</span><br><span class="hljs-comment">--5.显示学号第八位或者第九位是1、2、3、4或者9的学生的学号、姓名、性别、年龄及院系；</span><br><span class="hljs-keyword">select</span> sno,sname,ssex,sage,sdept<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> <span class="hljs-built_in">SUBSTRING</span>(sno,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;[12349]&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">SUBSTRING</span>(sno,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>) <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;[12349]&#x27;</span><br>或<br><span class="hljs-keyword">select</span> Sno,Sname,Ssex,Sage,Sdept<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> Sno <span class="hljs-keyword">like</span><span class="hljs-string">&#x27;_______[12349]%&#x27;</span><span class="hljs-keyword">or</span> Sno <span class="hljs-keyword">like</span><span class="hljs-string">&#x27;________[12349]%&#x27;</span><br><span class="hljs-comment">--6.列出选修了‘1’课程的学生，按成绩的降序排列；</span><br><span class="hljs-keyword">select</span> Sno,Grade<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">where</span> Cno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> Grade <span class="hljs-keyword">desc</span><br><span class="hljs-comment">--7.查询选修课程超过3门的学生的学号和选课门数，以及平均成绩</span><br><span class="hljs-keyword">select</span> Sno,<span class="hljs-built_in">COUNT</span>(Cno)<span class="hljs-keyword">AS</span> 选课门数,<span class="hljs-built_in">AVG</span>(Grade)平均成绩<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> Sno<br><span class="hljs-keyword">having</span> <span class="hljs-built_in">COUNT</span>(Cno)<span class="hljs-operator">&gt;</span><span class="hljs-number">3</span><br><span class="hljs-comment">--8.列出课程表中全部信息，按先修课的升序排列；</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> course<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> Cpno<br><span class="hljs-comment">--9.查询平均成绩超过80分的课程的课程号和平均成绩；</span><br><span class="hljs-keyword">select</span> Cno,<span class="hljs-built_in">AVG</span>(Grade)平均成绩<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> Cno<br><span class="hljs-keyword">having</span> <span class="hljs-built_in">AVG</span>(Grade)<span class="hljs-operator">&gt;</span><span class="hljs-number">80</span><br><span class="hljs-comment">--10.按照出生年份升序显示所有学生的学号、姓名、性别、出生年份及院系，在结果集中列标题分别指定为“学号，姓名，性别，出生年份，院系”；</span><br><span class="hljs-keyword">select</span> Sno <span class="hljs-keyword">as</span> 学号,Sname <span class="hljs-keyword">as</span> 姓名,Ssex <span class="hljs-keyword">as</span> 性别,<span class="hljs-keyword">year</span>(getdate())<span class="hljs-operator">-</span>Sage <span class="hljs-keyword">as</span> 出生年份,Sdept <span class="hljs-keyword">as</span> 院系<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 出生年份<br><span class="hljs-comment">--11.按照课程号、成绩降序显示课程成绩在70-80之间的学生的学号、课程号及成绩；</span><br><span class="hljs-keyword">select</span> Sno,Cno,Grade<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">where</span> Grade <span class="hljs-keyword">between</span> <span class="hljs-number">70</span> <span class="hljs-keyword">and</span> <span class="hljs-number">80</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> Cno <span class="hljs-keyword">desc</span>,Grade <span class="hljs-keyword">desc</span> <br><span class="hljs-comment">--12.显示学生信息表中的学生总人数及平均年龄，在结果集中列标题分别指定为“学生总人数，平均年龄”；</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span> (<span class="hljs-operator">*</span>)学生总人数,<span class="hljs-built_in">avg</span>(Sage)平均年龄<br><span class="hljs-keyword">from</span> student<br><span class="hljs-comment">--13.查询每个专业所有姓张的人数；</span><br><span class="hljs-keyword">select</span> Sdept,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)人数<br><span class="hljs-keyword">from</span> Student<br><span class="hljs-keyword">where</span> Sname <span class="hljs-keyword">like</span><span class="hljs-string">&#x27;张%&#x27;</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> Sdept<br><span class="hljs-comment">--14.按课程号降序显示选修各个课程的总人数、最高成绩、最低成绩及平均成绩；</span><br><span class="hljs-keyword">select</span> Cno, <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)总人数,<span class="hljs-built_in">MAX</span>(Grade)最高成绩,<span class="hljs-built_in">min</span>(grade)最低成绩,<span class="hljs-built_in">Avg</span>(Grade)平均成绩<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> Cno<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> Cno <span class="hljs-keyword">desc</span><br><span class="hljs-comment">--15.显示选修课程数最多的学号；</span><br><span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> <span class="hljs-keyword">with</span> ties Sno,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)选修课程数 <br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> Sno<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 选修课程数 <span class="hljs-keyword">desc</span><br><span class="hljs-comment">--16.列出有二门以上课程（含两门）不及格的学生的学号及该学生的平均成绩；</span><br><span class="hljs-keyword">select</span> sno,<span class="hljs-built_in">avg</span>(grade) 平均成绩<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">where</span> sno  <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> sno <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> grade<span class="hljs-operator">&lt;</span><span class="hljs-number">60</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sno <span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&gt;=</span><span class="hljs-number">2</span>)<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sno<br>或<br><span class="hljs-keyword">select</span> sno,<span class="hljs-built_in">avg</span>(grade) 平均成绩<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sno<br><span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> grade <span class="hljs-operator">&lt;</span><span class="hljs-number">60</span> <span class="hljs-keyword">then</span> <span class="hljs-number">1</span> <span class="hljs-keyword">end</span>)<span class="hljs-operator">&gt;=</span><span class="hljs-number">2</span><br><span class="hljs-comment">--17. 查询选修‘1’号课程成绩排名前五的学生的学号和成绩</span><br><span class="hljs-keyword">select</span> top <span class="hljs-number">5</span> <span class="hljs-keyword">with</span> ties Sno,grade<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">where</span> Cno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> grade <span class="hljs-keyword">desc</span><br><span class="hljs-comment">--18.查询每个学生的最低分和选课门数</span><br><span class="hljs-keyword">select</span> Sno,<span class="hljs-built_in">MIN</span>(grade)最低分,<span class="hljs-built_in">count</span>(cno)选课门数<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> Sno<br><span class="hljs-comment">--19. 查询各个专业男生、女生的人数</span><br><span class="hljs-keyword">select</span> sdept,Ssex,<span class="hljs-built_in">count</span>(Ssex)<span class="hljs-keyword">as</span> 人数<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> Ssex,Sdept<br>或<br><span class="hljs-keyword">select</span> sdept ,<span class="hljs-built_in">count</span>(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> ssex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;男&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">1</span> <span class="hljs-keyword">end</span>) 男生人数, <span class="hljs-built_in">count</span>(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> ssex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;女&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-number">1</span> <span class="hljs-keyword">end</span> ) 女生人数<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sdept<br><span class="hljs-comment">--20. 查询各种姓氏的人数（假设没有复姓）；</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">left</span>(Sname,<span class="hljs-number">1</span>)姓氏,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)人数<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">left</span>(Sname,<span class="hljs-number">1</span>)<br>补充：<br><span class="hljs-comment">--21查询选修课程数最多的学号及选修课程数最少的学号</span><br><span class="hljs-keyword">select</span> sno, <span class="hljs-built_in">count</span> (<span class="hljs-operator">*</span>) 选课门数<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sno<br><span class="hljs-keyword">having</span>  <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&gt;=</span><span class="hljs-keyword">all</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sno) <span class="hljs-keyword">or</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&lt;=</span><span class="hljs-keyword">all</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sno)<br><span class="hljs-comment">--（二）以SPJ数据库中数据为基础，请使用T-SQL 语句实现以下操作： </span><br>说明:该大题中特别需要注意的是<span class="hljs-number">2</span>、<span class="hljs-number">5</span>、<span class="hljs-number">6</span>题<br><span class="hljs-comment">--1．求供应工程J1零件的供应商号码SNO</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> SNO<br><span class="hljs-keyword">from</span> SPJ<br><span class="hljs-keyword">where</span> JNO<span class="hljs-operator">=</span><span class="hljs-string">&#x27;j1&#x27;</span><br><span class="hljs-comment">--2．求每个工程使用不同供应商的零件的个数</span><br><span class="hljs-keyword">select</span> JNO,SNO,<span class="hljs-built_in">sum</span>(QTY)零件个数<br><span class="hljs-keyword">from</span> spj<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> JNO,sno<br><br><span class="hljs-comment">--3．求供应工程使用零件P3数量超过200的工程号JNO</span><br><span class="hljs-keyword">select</span> JNO<br><span class="hljs-keyword">from</span> SPJ<br><span class="hljs-keyword">where</span> PNO<span class="hljs-operator">=</span><span class="hljs-string">&#x27;P3&#x27;</span><span class="hljs-keyword">and</span> QTY<span class="hljs-operator">&gt;=</span><span class="hljs-number">200</span><br><span class="hljs-comment">--4．求颜色为红色和蓝色的零件的零件号和名称</span><br><span class="hljs-keyword">select</span>  PNO,PNAME <br><span class="hljs-keyword">from</span> P<br><span class="hljs-keyword">where</span> COLOR<span class="hljs-operator">=</span><span class="hljs-string">&#x27;红&#x27;</span><span class="hljs-keyword">or</span> COLOR<span class="hljs-operator">=</span><span class="hljs-string">&#x27;蓝&#x27;</span><br><span class="hljs-comment">--5．求使用零件数量在200-400之间的工程号</span><br><span class="hljs-keyword">select</span> JNO<br><span class="hljs-keyword">from</span> SPJ<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> JNO<br><span class="hljs-keyword">having</span> <span class="hljs-built_in">sum</span>(QTY)<span class="hljs-keyword">between</span> <span class="hljs-number">200</span> <span class="hljs-keyword">and</span> <span class="hljs-number">400</span><br><span class="hljs-comment">--6．查询每种零件的零件号，以及使用该零件的工程数。</span><br><span class="hljs-keyword">select</span>  p.PNO,<span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span> JNO) 工程数<br><span class="hljs-keyword">from</span> p <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> spj <span class="hljs-keyword">on</span> spj.PNO<span class="hljs-operator">=</span>p.PNO<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> p.PNO<br>或<br><span class="hljs-keyword">select</span>  PNO,<span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span> JNO) 工程数<br><span class="hljs-keyword">from</span> spj<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> PNO<br></code></pre></td></tr></table></figure><h2 id="实验3"><a href="#实验3" class="headerlink" title="实验3"></a>实验3</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--（一）以数据库系统实验1中student数据库为基础，请使用T-SQL 语句实现进行以下操作：</span><br><span class="hljs-comment">--1.查询以‘DB_’开头,且倒数第3个字符为‘s’的课程的详细情况；</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> course<br><span class="hljs-keyword">where</span> Cname <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;DB\_%s__&#x27;</span> <span class="hljs-keyword">escape</span> <span class="hljs-string">&#x27;\&#x27;&#x27; ;</span><br><span class="hljs-string"></span><br><span class="hljs-string">--2.查询名字中第2个字为‘阳’的学生姓名和学号及选修的课程号、课程名；</span><br><span class="hljs-string">select Sname 学生姓名,sc.Sno 学号,sc.Cno 课程号,Cname 课程名</span><br><span class="hljs-string">from student S,sc,course C</span><br><span class="hljs-string">where S.Sno=sc.Sno and sc.Cno=C.Cno and  Sname like &#x27;</span>_阳<span class="hljs-operator">%</span><span class="hljs-string">&#x27;;</span><br><span class="hljs-string">或</span><br><span class="hljs-string">select student.Sno,Sname,sc.Cno,Cname</span><br><span class="hljs-string">from student,sc,course</span><br><span class="hljs-string">where student.Sno=sc.Sno and sc.Cno=course.Cno and substring(student.Sname,2,2)=&#x27;</span>阳<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">--3.列出选修了‘数学’或者‘大学英语’的学生学号、姓名、所在院系、选修课程号及成绩；</span><br><span class="hljs-string">select S.Sno,Sname,Sdept,Cno,Grade</span><br><span class="hljs-string">from student S,sc</span><br><span class="hljs-string">where S.Sno=sc.Sno and </span><br><span class="hljs-string">Cno in( select Cno </span><br><span class="hljs-string">        from course</span><br><span class="hljs-string">        where Cname=&#x27;</span>数学<span class="hljs-string">&#x27; or Cname=&#x27;</span>大学英语<span class="hljs-string">&#x27;);</span><br><span class="hljs-string">或</span><br><span class="hljs-string">select S.Sno,Sname,Sdept,sc.Cno,Grade</span><br><span class="hljs-string">from student S,sc,course C</span><br><span class="hljs-string">where S.Sno=sc.Sno and C.cno=sc.cno and (Cname=&#x27;</span>数学<span class="hljs-string">&#x27; or Cname=&#x27;</span>大学英语<span class="hljs-string">&#x27;)/*此处括号不可少*/</span><br><span class="hljs-string">    </span><br><span class="hljs-string">--4.查询缺少成绩的所有学生的详细情况；</span><br><span class="hljs-string">select *</span><br><span class="hljs-string">from student</span><br><span class="hljs-string">where Sno in(</span><br><span class="hljs-string">    select distinct Sno </span><br><span class="hljs-string">    from sc</span><br><span class="hljs-string">    where Grade is null</span><br><span class="hljs-string">    );</span><br><span class="hljs-string">或</span><br><span class="hljs-string">select student.sno,sname,ssex,sage,sdept,cno,grade</span><br><span class="hljs-string">from student,sc</span><br><span class="hljs-string">where student.sno=sc.sno and Grade is null</span><br><span class="hljs-string">--5.查询与‘张毅’(假设姓名唯一)年龄不同的所有学生的信息；</span><br><span class="hljs-string">select *</span><br><span class="hljs-string">from student </span><br><span class="hljs-string">where Sage not in(</span><br><span class="hljs-string">    select Sage</span><br><span class="hljs-string">    from student </span><br><span class="hljs-string">    where Sname=&#x27;</span>张毅<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    );</span><br><span class="hljs-string"></span><br><span class="hljs-string">--6.查询所选课程的平均成绩大于张毅的平均成绩的学生学号、姓名及平均成绩；</span><br><span class="hljs-string">select student.Sno,Sname,avg(Grade) 平均成绩</span><br><span class="hljs-string">from student ,sc</span><br><span class="hljs-string">where student.sno=sc.sno</span><br><span class="hljs-string">group by student.Sno,Sname</span><br><span class="hljs-string">having avg(Grade)&gt;(</span><br><span class="hljs-string">    select avg(Grade)</span><br><span class="hljs-string">    from sc inner join student on sc.Sno=student.Sno</span><br><span class="hljs-string">    where Sname=&#x27;</span>张毅<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    );</span><br><span class="hljs-string"></span><br><span class="hljs-string">--7.按照“学号，姓名，所在院系，已修学分”的顺序列出学生学分的获得情况。其中已修学分为考试已经及格的课程学分之和；</span><br><span class="hljs-string">select student.Sno,Sname,Sdept,sum(credit) 已修学分</span><br><span class="hljs-string">from student  inner join sc  on student.sno=sc.sno inner join course   on sc.cno=course.cno</span><br><span class="hljs-string">where grade&gt;=60</span><br><span class="hljs-string">group by student.sno,sname,sdept;</span><br><span class="hljs-string">或</span><br><span class="hljs-string">select student.sno,sname,sdept,sum(credit)已修学分</span><br><span class="hljs-string">from student,sc,course</span><br><span class="hljs-string">where student.sno=sc.sno and sc.cno=course.cno and sc.grade&gt;60</span><br><span class="hljs-string">group by student.Sno,Sname,Sdept;</span><br><span class="hljs-string">--8.列出只选修一门课程的学生的学号、姓名、院系及成绩；</span><br><span class="hljs-string">select student.Sno,Sname,Sdept,Grade</span><br><span class="hljs-string">from student  inner join sc  on student.Sno=sc.Sno </span><br><span class="hljs-string">where exists(</span><br><span class="hljs-string">    select *</span><br><span class="hljs-string">    from sc x</span><br><span class="hljs-string">    where x.Sno=sc.Sno </span><br><span class="hljs-string">    group by Sno</span><br><span class="hljs-string">    having count(*)=1);</span><br><span class="hljs-string">或</span><br><span class="hljs-string">select student.Sno,Sname,Sdept,Grade</span><br><span class="hljs-string">from student,sc</span><br><span class="hljs-string">where student.Sno=sc.Sno and student.Sno in(select Sno from sc group by Sno having count(Cno)=1)</span><br><span class="hljs-string">--9.查找选修了至少一门和张毅选修课程一样的学生的学号、姓名及课程号；</span><br><span class="hljs-string">select SC.Sno,Sname,Cno</span><br><span class="hljs-string">from student as S inner join sc as SC on S.Sno=SC.Sno</span><br><span class="hljs-string">where Cno in (</span><br><span class="hljs-string">    select Cno</span><br><span class="hljs-string">    from sc</span><br><span class="hljs-string">    where Sno=(</span><br><span class="hljs-string">        select Sno</span><br><span class="hljs-string">        from student </span><br><span class="hljs-string">        where sname=&#x27;</span>张毅<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    )</span><br><span class="hljs-string">);</span><br><span class="hljs-string">或</span><br><span class="hljs-string">select student.Sno,student.Sname,c1.Cno</span><br><span class="hljs-string">from student,sc c1,sc c2</span><br><span class="hljs-string">where student.Sno=c1.Sno and c1.Sno=c2.Sno and c2.Cno in (</span><br><span class="hljs-string">select  sc.Cno</span><br><span class="hljs-string">from sc,student </span><br><span class="hljs-string">where sc.Sno=student.Sno and student.Sname=&#x27;</span>张毅<span class="hljs-string">&#x27;) and student.Sname != &#x27;</span>张毅<span class="hljs-string">&#x27;</span><br><span class="hljs-string">--10.查询至少选修“数据库”和“数据结构”课程的学生的基本信息；</span><br><span class="hljs-string">select *</span><br><span class="hljs-string">from student</span><br><span class="hljs-string">where not exists (select *</span><br><span class="hljs-string">              from course </span><br><span class="hljs-string">      where cname in (&#x27;</span>数据库<span class="hljs-string">&#x27;,&#x27;</span>数据结构<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">   and not exists(select *</span><br><span class="hljs-string">   from sc</span><br><span class="hljs-string">   where student.sno = sc.sno and sc.cno =course.cno))</span><br><span class="hljs-string"></span><br><span class="hljs-string">--11.查询没有选修张毅所选修的全部课程的学生的姓名；</span><br><span class="hljs-string">--（就是查找一个学生，存在张毅选修的一个课程，他没有选修）</span><br><span class="hljs-string">select Sname</span><br><span class="hljs-string">from student S1</span><br><span class="hljs-string">where exists(</span><br><span class="hljs-string">    select * </span><br><span class="hljs-string">    from sc SC1</span><br><span class="hljs-string">    where Sno=(</span><br><span class="hljs-string">        select Sno</span><br><span class="hljs-string">        from student</span><br><span class="hljs-string">        where Sname=&#x27;</span>张毅<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    ) and not exists (</span><br><span class="hljs-string">        select *</span><br><span class="hljs-string">        from sc SC2</span><br><span class="hljs-string">        where S1.Sno=SC2.Sno and SC1.Cno=SC2.Cno</span><br><span class="hljs-string">    )</span><br><span class="hljs-string">);</span><br><span class="hljs-string"></span><br><span class="hljs-string">--12.查询每个专业年龄超过该专业平均年龄的学生的姓名和专业；</span><br><span class="hljs-string">select Sname,Sdept</span><br><span class="hljs-string">from student S1</span><br><span class="hljs-string">where Sage&gt;(</span><br><span class="hljs-string">    select avg(Sage)</span><br><span class="hljs-string">    from student S2</span><br><span class="hljs-string">    where S1.Sdept=S2.Sdept</span><br><span class="hljs-string">);</span><br><span class="hljs-string"></span><br><span class="hljs-string">--13.查询选修了张毅同学所选修的全部课程的学生的姓名；</span><br><span class="hljs-string">--(就是查找一个学生，不存在张毅选修的一个课程，他没有选修)</span><br><span class="hljs-string">select Sname</span><br><span class="hljs-string">from student as S</span><br><span class="hljs-string">where not exists(</span><br><span class="hljs-string">    select *</span><br><span class="hljs-string">    from sc as SC1</span><br><span class="hljs-string">    where Sno=(</span><br><span class="hljs-string">        select Sno</span><br><span class="hljs-string">        from student </span><br><span class="hljs-string">        where Sname=&#x27;</span>张毅<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    ) and not exists(</span><br><span class="hljs-string">        select *</span><br><span class="hljs-string">        from sc as SC2</span><br><span class="hljs-string">        where SC2.Cno=SC1.Cno and SC2.Sno=S.Sno</span><br><span class="hljs-string">    )</span><br><span class="hljs-string">);</span><br><span class="hljs-string"></span><br><span class="hljs-string">--14.检索选修了全部课程的学生姓名；</span><br><span class="hljs-string">--(就是查找一个学生，不存在一个课程，他没有选修)</span><br><span class="hljs-string">select Sname</span><br><span class="hljs-string">from student S</span><br><span class="hljs-string">where not exists(</span><br><span class="hljs-string">    select *</span><br><span class="hljs-string">    from course C</span><br><span class="hljs-string">    where not exists(</span><br><span class="hljs-string">        select *</span><br><span class="hljs-string">        from sc SC</span><br><span class="hljs-string">        where SC.Sno=S.Sno and SC.Cno=C.Cno</span><br><span class="hljs-string">    )</span><br><span class="hljs-string">);</span><br><span class="hljs-string"></span><br><span class="hljs-string">--15.列出同时选修“1”号课程和“2”号课程的所有学生的姓名；（使用三种方法实现）</span><br><span class="hljs-string">--(1)exists</span><br><span class="hljs-string">select Sname</span><br><span class="hljs-string">from student S</span><br><span class="hljs-string">where exists(</span><br><span class="hljs-string">    select *</span><br><span class="hljs-string">    from sc</span><br><span class="hljs-string">    where S.Sno=sc.Sno and Cno=&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">) and exists(</span><br><span class="hljs-string">    select *</span><br><span class="hljs-string">    from sc</span><br><span class="hljs-string">    where S.Sno=sc.Sno and Cno=&#x27;</span><span class="hljs-number">2</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">);</span><br><span class="hljs-string">--(2)求交集</span><br><span class="hljs-string">select Sname</span><br><span class="hljs-string">from student</span><br><span class="hljs-string">where Sno in</span><br><span class="hljs-string">    ((select Sno</span><br><span class="hljs-string">    from sc</span><br><span class="hljs-string">    where Cno=&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;)</span><br><span class="hljs-string">    intersect </span><br><span class="hljs-string">    (select Sno</span><br><span class="hljs-string">    from sc</span><br><span class="hljs-string">    where Cno=&#x27;</span><span class="hljs-number">2</span><span class="hljs-string">&#x27;));</span><br><span class="hljs-string">--(3)</span><br><span class="hljs-string">select Sname</span><br><span class="hljs-string">from student</span><br><span class="hljs-string">where Sno in</span><br><span class="hljs-string">    (select Sno</span><br><span class="hljs-string">    from sc</span><br><span class="hljs-string">    where Cno=&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;and </span><br><span class="hljs-string">sno in(select Sno</span><br><span class="hljs-string">    from sc</span><br><span class="hljs-string">    where Cno=&#x27;</span><span class="hljs-number">2</span><span class="hljs-string">&#x27;))</span><br><span class="hljs-string">--16.使用嵌套查询列出选修了“数据结构”课程的学生学号和姓名；</span><br><span class="hljs-string">select Sno,Sname</span><br><span class="hljs-string">from student</span><br><span class="hljs-string">where Sno in(</span><br><span class="hljs-string">    select Sno</span><br><span class="hljs-string">    from sc</span><br><span class="hljs-string">    where Cno in(</span><br><span class="hljs-string">        select Cno</span><br><span class="hljs-string">        from course</span><br><span class="hljs-string">        where Cname=&#x27;</span>数据结构<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    )</span><br><span class="hljs-string">);</span><br><span class="hljs-string"></span><br><span class="hljs-string">--17.使用嵌套查询查询其它系中年龄小于CS系的某个学生的学生姓名、年龄和院系；</span><br><span class="hljs-string">select Sname,Sage,Sdept</span><br><span class="hljs-string">from student</span><br><span class="hljs-string">where Sdept&lt;&gt;&#x27;</span>CS<span class="hljs-string">&#x27; and Sage&lt;any(</span><br><span class="hljs-string">    select Sage</span><br><span class="hljs-string">    from student</span><br><span class="hljs-string">    where Sdept=&#x27;</span>CS<span class="hljs-string">&#x27;</span><br><span class="hljs-string">);</span><br><span class="hljs-string"></span><br><span class="hljs-string">--18.查询选课人数最多的课程号和课程名（包含并列）；</span><br><span class="hljs-string">--方法1:</span><br><span class="hljs-string">select Cno,Cname</span><br><span class="hljs-string">from course</span><br><span class="hljs-string">where Cno in(</span><br><span class="hljs-string">    select top 1 with ties Cno</span><br><span class="hljs-string">    from sc</span><br><span class="hljs-string">    group by Cno</span><br><span class="hljs-string">    order by count(Sno) desc</span><br><span class="hljs-string">);</span><br><span class="hljs-string">--方法2:</span><br><span class="hljs-string">select sc.Cno,course.Cname</span><br><span class="hljs-string">from sc,course </span><br><span class="hljs-string">where sc.Cno=course.Cno</span><br><span class="hljs-string">group by sc.Cno,course.Cname</span><br><span class="hljs-string">having count(sc.sno)&gt;=all(select count(c1.sno) </span><br><span class="hljs-string">from sc c1</span><br><span class="hljs-string">group by c1.sno)</span><br><span class="hljs-string">--方法3:</span><br><span class="hljs-string">select cno,cname</span><br><span class="hljs-string">from course</span><br><span class="hljs-string">where cno in (select cno </span><br><span class="hljs-string">              from sc </span><br><span class="hljs-string">              group by cno having count(sno)&gt;=all(select count(c1.sno) </span><br><span class="hljs-string">                                                  from sc c1</span><br><span class="hljs-string">                                                  group by c1.sno)</span><br><span class="hljs-string">  )</span><br><span class="hljs-string">--19.使用集合查询列出CS系的学生以及性别为女的学生名单；</span><br><span class="hljs-string">(select Sname</span><br><span class="hljs-string">from student</span><br><span class="hljs-string">where Sdept=&#x27;</span>CS<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">union</span><br><span class="hljs-string">(select Sname</span><br><span class="hljs-string">from student</span><br><span class="hljs-string">where Ssex=&#x27;</span>女<span class="hljs-string">&#x27;);</span><br><span class="hljs-string"></span><br><span class="hljs-string">--20.使用集合查询列出CS系的学生与年龄不大于19岁的学生的交集、差集；</span><br><span class="hljs-string">--交集</span><br><span class="hljs-string">(select *</span><br><span class="hljs-string">from student</span><br><span class="hljs-string">where Sdept=&#x27;</span>CS<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">intersect</span><br><span class="hljs-string">(select *</span><br><span class="hljs-string">from student</span><br><span class="hljs-string">where Sage&lt;=19);</span><br><span class="hljs-string">--差集</span><br><span class="hljs-string">(select *</span><br><span class="hljs-string">from student</span><br><span class="hljs-string">where Sdept=&#x27;</span>CS<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">except</span><br><span class="hljs-string">(select *</span><br><span class="hljs-string">from student</span><br><span class="hljs-string">where Sage&lt;=19);</span><br><span class="hljs-string"></span><br><span class="hljs-string">--（二）以数据库原理实验1中SPJ数据库为基础，请使用T-SQL 语句实现教材P130第5题（1）—（7）</span><br><span class="hljs-string">--(1)找出所有供应商的姓名和所在城市</span><br><span class="hljs-string">select Sname,City</span><br><span class="hljs-string">from S;</span><br><span class="hljs-string"></span><br><span class="hljs-string">--(2)找出所有零件的名称，颜色，重量</span><br><span class="hljs-string">select Pname,Color,weights</span><br><span class="hljs-string">from P;</span><br><span class="hljs-string"></span><br><span class="hljs-string">--(3)找出使用供应商S1所供应零件的工程号码</span><br><span class="hljs-string">select Jno</span><br><span class="hljs-string">from SPJ</span><br><span class="hljs-string">where Sno=&#x27;</span>s1<span class="hljs-string">&#x27;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">--(4)找出工程项目J2使用的各种零件的名称以及数量</span><br><span class="hljs-string">select pname,qty</span><br><span class="hljs-string">from p,spj</span><br><span class="hljs-string">where p.pno=spj.pno and jno=&#x27;</span>j2<span class="hljs-string">&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">--(5)找出上海厂商供应的所有零件号码</span><br><span class="hljs-string">select distinct Pno</span><br><span class="hljs-string">from SPJ</span><br><span class="hljs-string">where Sno in(</span><br><span class="hljs-string">    select Sno</span><br><span class="hljs-string">    from S</span><br><span class="hljs-string">    where City=&#x27;</span>上海<span class="hljs-string">&#x27;</span><br><span class="hljs-string">);</span><br><span class="hljs-string"></span><br><span class="hljs-string">--(6)找出使用上海产的零件的工程名称</span><br><span class="hljs-string">--方法1:</span><br><span class="hljs-string">select  distinct jname</span><br><span class="hljs-string">from s,j,spj</span><br><span class="hljs-string">where s.sno=spj.sno and j.jno=spj.jno and s.City=&#x27;</span>上海<span class="hljs-string">&#x27;</span><br><span class="hljs-string">--方法2</span><br><span class="hljs-string">select jname</span><br><span class="hljs-string">from j</span><br><span class="hljs-string">where jno in(select jno from spj where sno in (select sno from s where city=&#x27;</span>上海<span class="hljs-string">&#x27;))</span><br><span class="hljs-string">--(7)找出没有使用天津产的零件的工程号码</span><br><span class="hljs-string">--方法1</span><br><span class="hljs-string">select jno </span><br><span class="hljs-string">from j</span><br><span class="hljs-string">where not exists </span><br><span class="hljs-string">  (select * </span><br><span class="hljs-string">  from spj </span><br><span class="hljs-string">   where spj.jno=j.jno and sno in (select sno from s where city=&#x27;</span>天津<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">   )</span><br><span class="hljs-string">--方法2:</span><br><span class="hljs-string">select jno </span><br><span class="hljs-string">from j</span><br><span class="hljs-string">where not exists</span><br><span class="hljs-string">    (select * </span><br><span class="hljs-string">  from spj,s</span><br><span class="hljs-string">  where spj.sno=s.sno and spj.jno=j.jno and s.city=&#x27;</span>天津<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">--本题不可以这样写:</span><br><span class="hljs-string">select distinct Jno</span><br><span class="hljs-string">from SPJ</span><br><span class="hljs-string">where Pno not in(</span><br><span class="hljs-string">    select Pno</span><br><span class="hljs-string">    from SPJ</span><br><span class="hljs-string">    where Sno in(</span><br><span class="hljs-string">        select Sno</span><br><span class="hljs-string">        from S</span><br><span class="hljs-string">        where City=&#x27;</span>天津<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    )</span><br><span class="hljs-string">);</span><br><span class="hljs-string">--（三）对罗斯文（Northwind）数据库完成一下查询</span><br><span class="hljs-string">--1.查询每个订单购买产品的数量和总金额，显示订单号，数量，总金额</span><br><span class="hljs-string">select OrderID 订单号,sum(Quantity) 数量,sum(Quantity*UnitPrice*(1-Discount)) 总金额</span><br><span class="hljs-string">from [Order Details]</span><br><span class="hljs-string">group by OrderID</span><br><span class="hljs-string">--2. 查询每个员工在7月份处理订单的数量</span><br><span class="hljs-string">--方法1</span><br><span class="hljs-string">select EmployeeID,count(*) 订单数</span><br><span class="hljs-string">from Orders</span><br><span class="hljs-string">where datepart(month,OrderDate)=7</span><br><span class="hljs-string">group by EmployeeID;</span><br><span class="hljs-string">--方法2(若员工没有处理订单亦可显示出来)</span><br><span class="hljs-string">select Employees.EmployeeID,count(Orders.OrderID) 订单数量</span><br><span class="hljs-string">from Orders right join Employees on Employees.EmployeeID=Orders.EmployeeID</span><br><span class="hljs-string">where MONTH(Orders.OrderDate)=&#x27;</span><span class="hljs-number">07</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">group by Employees.EmployeeID</span><br><span class="hljs-string">--3. 查询每个顾客的订单总数，显示顾客ID，订单总数</span><br><span class="hljs-string">--方法1</span><br><span class="hljs-string">select CustomerID,count(*) 订单总数</span><br><span class="hljs-string">from Orders</span><br><span class="hljs-string">group by CustomerID;</span><br><span class="hljs-string">--方法2(顾客没有订单也可以显示出来)</span><br><span class="hljs-string">select Customers.CustomerID,count(Orders.OrderID) 订单总数</span><br><span class="hljs-string">from Orders right join Customers on Orders.CustomerID=Customers.CustomerID</span><br><span class="hljs-string">group by Customers.CustomerID</span><br><span class="hljs-string">--4. 查询每个顾客的订单总数和订单总金额</span><br><span class="hljs-string">--方法1</span><br><span class="hljs-string">select CustomerID,count(distinct OD.OrderID) 订单总数,sum(Quantity*UnitPrice*(1-Discount)) 订单总金额</span><br><span class="hljs-string">from Orders as O inner join [Order Details] as OD on O.OrderID=OD.OrderID</span><br><span class="hljs-string">group by CustomerID;</span><br><span class="hljs-string">--方法2(顾客没有订单也可以显示出来)</span><br><span class="hljs-string">select Customers.CustomerID,count(distinct Orders.OrderID) 订单总数,sum([Order Details].Quantity*[Order Details].UnitPrice*(1-[Order Details].Discount)) 订单总金额</span><br><span class="hljs-string">from Orders  right join Customers on Orders.CustomerID=Customers.CustomerID </span><br><span class="hljs-string">  left join [Order Details]</span><br><span class="hljs-string">on Orders.OrderID=[Order Details].OrderID</span><br><span class="hljs-string">group by Customers.CustomerID</span><br><span class="hljs-string">--5. 查询每种产品的卖出总数和总金额</span><br><span class="hljs-string">--方法1</span><br><span class="hljs-string">select P.ProductID,sum(Quantity)卖出总数,sum(Quantity*OD.UnitPrice*(1-Discount)) 订单总金额</span><br><span class="hljs-string">from Products as P left outer join [Order Details] as OD on P.ProductID=OD.ProductID</span><br><span class="hljs-string">group by P.ProductID;</span><br><span class="hljs-string">--方法2</span><br><span class="hljs-string">select sum([Order Details].Quantity) 卖出总数,sum([Order Details].Quantity*[Order Details].UnitPrice*(1-[Order Details].Discount)) 总金额</span><br><span class="hljs-string">from Products left join [Order Details] on Products.ProductID=[Order Details].ProductID</span><br><span class="hljs-string">group by Products.ProductID</span><br><span class="hljs-string">--6. 查询购买过全部商品的顾客的ID和姓名</span><br><span class="hljs-string">--(查询一个顾客，不存在某个商品他没有购买过)</span><br><span class="hljs-string">--方法1</span><br><span class="hljs-string">select c1.CustomerID,c1.ContactName</span><br><span class="hljs-string">from Customers c1</span><br><span class="hljs-string">where not exists(</span><br><span class="hljs-string">select *</span><br><span class="hljs-string">from Products p1</span><br><span class="hljs-string">where not exists (</span><br><span class="hljs-string">select *</span><br><span class="hljs-string">from Orders,[Order Details]</span><br><span class="hljs-string">where Orders.OrderID=[Order Details].OrderID and Orders.CustomerID=c1.CustomerID and [Order Details].ProductID=p1.ProductID))</span><br><span class="hljs-string">--方法2</span><br><span class="hljs-string">select c1.CustomerID,c1.ContactName</span><br><span class="hljs-string">from Customers c1,Orders,[Order Details]</span><br><span class="hljs-string">where c1.CustomerID=Orders.CustomerID and Orders.OrderID=[Order Details].OrderID</span><br><span class="hljs-string">group by c1.CustomerID,c1.ContactName</span><br><span class="hljs-string">having count([Order Details].OrderID)=(</span><br><span class="hljs-string">select count(Products.ProductID)</span><br><span class="hljs-string">from Products)</span><br><span class="hljs-string">--（四）对books数据库完成以下操作</span><br><span class="hljs-string">--1.查询各种类别的图书的类别和数量（包含目前没有图书的类别）</span><br><span class="hljs-string">select TypeName,count(BookNo)数量</span><br><span class="hljs-string">from BookType as B1 left outer join BookInfo as B2 on B1.TypeID=B2.TypeID</span><br><span class="hljs-string">group by TypeName;  </span><br><span class="hljs-string"></span><br><span class="hljs-string">--2.查询借阅了‘数据库基础’的读者的卡编号和姓名</span><br><span class="hljs-string"></span><br><span class="hljs-string">select B.CardNo,Reader</span><br><span class="hljs-string">from BorrowInfo as B inner join CardInfo as C on B.CardNo=C.CardNo</span><br><span class="hljs-string">where B.BookNo=(</span><br><span class="hljs-string">    select BookNo</span><br><span class="hljs-string">    from BookInfo</span><br><span class="hljs-string">    where BookName=&#x27;</span>数据库基础<span class="hljs-string">&#x27;</span><br><span class="hljs-string">);</span><br><span class="hljs-string">--或</span><br><span class="hljs-string">select CardNo,Reader</span><br><span class="hljs-string">from CardInfo</span><br><span class="hljs-string">where CardNo in (</span><br><span class="hljs-string">select CardNo</span><br><span class="hljs-string">from BorrowInfo,BookInfo</span><br><span class="hljs-string">where BorrowInfo.BookNo=BookInfo.BookNo and BookName=&#x27;</span>数据库基础<span class="hljs-string">&#x27;</span><br><span class="hljs-string">)</span><br><span class="hljs-string">--3.查询各个出版社的图书价格超过这个出版社图书的平均价格的图书的编号和名称。</span><br><span class="hljs-string">select BookNo,BookName</span><br><span class="hljs-string">from BookInfo as B1</span><br><span class="hljs-string">where Price&gt;(</span><br><span class="hljs-string">    select avg(Price)</span><br><span class="hljs-string">    from BookInfo as B2</span><br><span class="hljs-string">    where B1.Publisher=B2.Publisher</span><br><span class="hljs-string">);</span><br><span class="hljs-string"></span><br><span class="hljs-string">--4.查询借阅过了全部图书的读者的编号和姓名</span><br><span class="hljs-string">--(就是查找一个读者，不存在一本书，这个读者没有借阅过)</span><br><span class="hljs-string">select CardNo,Reader</span><br><span class="hljs-string">from CardInfo</span><br><span class="hljs-string">where not exists(</span><br><span class="hljs-string">select *</span><br><span class="hljs-string">from BookInfo</span><br><span class="hljs-string">where not exists</span><br><span class="hljs-string">(</span><br><span class="hljs-string">select *</span><br><span class="hljs-string">from BorrowInfo</span><br><span class="hljs-string">where BorrowInfo.CardNo=CardInfo.CardNo and BorrowInfo.BookNo=BookInfo.BookNo))</span><br><span class="hljs-string"></span><br><span class="hljs-string">--5.查询借阅图书包含李明所借的全部图书的读者的编号和姓名</span><br><span class="hljs-string">--(就是查找某读者，不存在李明借过的图书，这个读者没有借过)</span><br><span class="hljs-string">select CardNo,Reader</span><br><span class="hljs-string">from CardInfo as CI </span><br><span class="hljs-string">where not exists(</span><br><span class="hljs-string">    select *</span><br><span class="hljs-string">    from BorrowInfo as BI2</span><br><span class="hljs-string">    where BI2.CardNo=(</span><br><span class="hljs-string">        select CardNo</span><br><span class="hljs-string">        from CardInfo</span><br><span class="hljs-string">        where Reader=&#x27;</span>李明<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    ) and not exists(</span><br><span class="hljs-string">        select *</span><br><span class="hljs-string">        from BorrowInfo as BI3</span><br><span class="hljs-string">        where BI3.BookNo=BI2.BookNo and BI3.CardNo=CI.CardNo</span><br><span class="hljs-string">    )</span><br><span class="hljs-string">)and CI.Reader!=&#x27;</span>李明<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">--或</span><br><span class="hljs-string">select c1.CardNo,c1.Reader</span><br><span class="hljs-string">from CardInfo c1</span><br><span class="hljs-string">where not exists (</span><br><span class="hljs-string">select *</span><br><span class="hljs-string">from CardInfo c2,BorrowInfo b1</span><br><span class="hljs-string">where c2.CardNo=b1.CardNo and c2.Reader=&#x27;</span>李明<span class="hljs-string">&#x27;</span><br><span class="hljs-string">and not exists(</span><br><span class="hljs-string">select *</span><br><span class="hljs-string">from BorrowInfo b2</span><br><span class="hljs-string">where b2.CardNo=c1.CardNo and b2.BookNo=b1.BookNo</span><br><span class="hljs-string">) </span><br><span class="hljs-string">)and c1.Reader!=&#x27;</span>李明<span class="hljs-string">&#x27;</span><br><span class="hljs-string">--6.查询借阅次数超过2次的读者的编号和姓名</span><br><span class="hljs-string">select BI.CardNo,Reader</span><br><span class="hljs-string">from BorrowInfo as BI inner join CardInfo as CI on BI.CardNo=CI.CardNo</span><br><span class="hljs-string">group by BI.CardNo,Reader</span><br><span class="hljs-string">having count(BorrowDate)&gt;2;</span><br><span class="hljs-string">或</span><br><span class="hljs-string">select CardInfo.CardNo,CardInfo.Reader</span><br><span class="hljs-string">from CardInfo,BorrowInfo</span><br><span class="hljs-string">where CardInfo.CardNo=BorrowInfo.CardNo</span><br><span class="hljs-string">group by CardInfo.CardNo,CardInfo.Reader</span><br><span class="hljs-string">having count(*)&gt;2</span><br><span class="hljs-string">--7.查询借阅卡的类型为老师和研究生的读者人数</span><br><span class="hljs-string">select count(*) 人数</span><br><span class="hljs-string">from CardInfo as CI inner join CardType as CT on CI.CTypeID=CT.CTypeID</span><br><span class="hljs-string">where TypeName in(&#x27;</span>教师<span class="hljs-string">&#x27;,&#x27;</span>研究生<span class="hljs-string">&#x27;);</span><br><span class="hljs-string"></span><br><span class="hljs-string">--8.查询没有被借过的图书的编号和名称</span><br><span class="hljs-string">--(查找一本书，不存在它被借过)</span><br><span class="hljs-string">select BookNo,BookName</span><br><span class="hljs-string">from BookInfo as BI</span><br><span class="hljs-string">where not exists(</span><br><span class="hljs-string">    select *</span><br><span class="hljs-string">    from BorrowInfo as BI2</span><br><span class="hljs-string">    where BI2.BookNo=BI.BookNo</span><br><span class="hljs-string">);</span><br><span class="hljs-string">--或</span><br><span class="hljs-string">select BookInfo.BookNo,BookInfo.BookName</span><br><span class="hljs-string">from BookInfo</span><br><span class="hljs-string">where BookInfo.BookNo not in(</span><br><span class="hljs-string">select BorrowInfo.BookNo</span><br><span class="hljs-string">from BorrowInfo)</span><br><span class="hljs-string">--9.查询没有借阅过英语类型的图书的学生的编号和姓名</span><br><span class="hljs-string">--(不存在有一本英语类型的图书，他借过)</span><br><span class="hljs-string">select CardInfo.CardNo,CardInfo.Reader</span><br><span class="hljs-string">from CardInfo</span><br><span class="hljs-string">where not exists</span><br><span class="hljs-string">(select *</span><br><span class="hljs-string">from BookType,BorrowInfo,BookInfo</span><br><span class="hljs-string">where BookType.TypeName=&#x27;</span>英语<span class="hljs-string">&#x27; and BookType.TypeID=BookInfo.TypeID</span><br><span class="hljs-string"> and  BookInfo.BookNo=BorrowInfo.BookNo and BorrowInfo.CardNo=CardInfo.CardNo)</span><br><span class="hljs-string"> and CTypeID in(</span><br><span class="hljs-string">    select CTypeID</span><br><span class="hljs-string">    from CardType</span><br><span class="hljs-string">    where TypeName in(&#x27;</span>学生<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">);</span><br><span class="hljs-string">--或</span><br><span class="hljs-string">select CI.CardNo,Reader</span><br><span class="hljs-string">from CardInfo as CI left outer join BorrowInfo as BI on BI.CardNo=CI.CardNo</span><br><span class="hljs-string">where not exists(</span><br><span class="hljs-string">    select *</span><br><span class="hljs-string">    from BorrowInfo BI2</span><br><span class="hljs-string">    where BI2.BookNo in(</span><br><span class="hljs-string">        select BookNo</span><br><span class="hljs-string">        from BookInfo as BI3 inner join BookType as BT on BI3.TypeID=BT.TypeID</span><br><span class="hljs-string">        where BT.TypeName=&#x27;</span>英语<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    ) and BI2.CardNo=BI.CardNo </span><br><span class="hljs-string">)and CI.CTypeID in(</span><br><span class="hljs-string">    select CTypeID</span><br><span class="hljs-string">    from CardType</span><br><span class="hljs-string">    where TypeName in(&#x27;</span>学生<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">);</span><br><span class="hljs-string"></span><br><span class="hljs-string">--10.查询借阅了‘计算机应用’类别的‘数据库基础’课程的读者编号以及该读者的借阅卡的类型。</span><br><span class="hljs-string"></span><br><span class="hljs-string">select CardInfo.CardNo, CardType.TypeName</span><br><span class="hljs-string">from CardInfo,CardType</span><br><span class="hljs-string">where CardInfo.CTypeID = CardType.CTypeID</span><br><span class="hljs-string">      and CardInfo.CardNo in (</span><br><span class="hljs-string">      select BorrowInfo.CardNo from BorrowInfo, BookInfo,BookType</span><br><span class="hljs-string">  where BorrowInfo.BookNo = BookInfo.BookNo and BookType.TypeID = BookInfo.TypeID and BookType.TypeName = &#x27;</span>计算机应用<span class="hljs-string">&#x27;</span><br><span class="hljs-string">  and BookName = &#x27;</span>数据库基础<span class="hljs-string">&#x27;</span><br><span class="hljs-string">  )</span><br><span class="hljs-string"></span><br><span class="hljs-string">--（五）对商场数据库完成以下操作</span><br><span class="hljs-string">/*</span><br><span class="hljs-string">Market (mno, mname, city)</span><br><span class="hljs-string">Item (ino, iname, type, color)</span><br><span class="hljs-string">Sales (mno, ino, price)</span><br><span class="hljs-string">其中，market表示商场，它的属性依次为商场号、商场名和所在城市；</span><br><span class="hljs-string">item表示商品，它的属性依次为商品号、商品名、商品类别和颜色；</span><br><span class="hljs-string">sales表示销售，它的属性依次为商场号、商品号和售价。</span><br><span class="hljs-string">用SQL语句实现下面的查询要求：</span><br><span class="hljs-string">*/</span><br><span class="hljs-string"></span><br><span class="hljs-string">--1.列出北京各个商场都销售，且售价均超过10000 元的商品的商品号和商品名</span><br><span class="hljs-string">--(不存在北京的一个商场不销售它) </span><br><span class="hljs-string">select ino,iname</span><br><span class="hljs-string">from item</span><br><span class="hljs-string">where not exists</span><br><span class="hljs-string">(</span><br><span class="hljs-string">select *</span><br><span class="hljs-string">from sales,market</span><br><span class="hljs-string">where sales.mno=market.mno and market.city=&#x27;</span>北京<span class="hljs-string">&#x27;</span><br><span class="hljs-string">and not exists</span><br><span class="hljs-string">(select *</span><br><span class="hljs-string">from sales s1</span><br><span class="hljs-string">where s1.ino=item.ino and s1.mno=sales.mno and s1.price&gt;10000</span><br><span class="hljs-string">))</span><br><span class="hljs-string">--2.列出在不同商场中最高售价和最低售价之差超过100 元的商品的商品号、最高售价和最低售价</span><br><span class="hljs-string"></span><br><span class="hljs-string">select sales.ino,max(sales.price),min(sales.price)</span><br><span class="hljs-string">from sales</span><br><span class="hljs-string">group by sales.ino</span><br><span class="hljs-string">having max(sales.price)-min(sales.price)&gt;100</span><br><span class="hljs-string"></span><br><span class="hljs-string">--3.列出售价超过该商品的平均售价的各个商品的商品号和售价</span><br><span class="hljs-string">select s1.ino,s1.price</span><br><span class="hljs-string">from sales s1</span><br><span class="hljs-string">where  s1.price&gt;</span><br><span class="hljs-string">(select avg(s2.price)</span><br><span class="hljs-string">from sales s2</span><br><span class="hljs-string">where s1.ino=s2.ino)</span><br><span class="hljs-string">--4.查询销售了全部商品的商场号，商场名和城市</span><br><span class="hljs-string">--(不存在一个商品，这个商场没有销售过)</span><br><span class="hljs-string">select m1.mno,m1.mname,m1.city</span><br><span class="hljs-string">from market m1</span><br><span class="hljs-string">where not exists(</span><br><span class="hljs-string">select*</span><br><span class="hljs-string">from item i1</span><br><span class="hljs-string">where not exists(</span><br><span class="hljs-string">select *</span><br><span class="hljs-string">from sales</span><br><span class="hljs-string">where sales.mno=m1.mno and sales.ino=i1.ino))</span><br><span class="hljs-string">--5.查询所有商场都销售了的商品的商品号和商品名。（用两种方法实现）</span><br><span class="hljs-string">--(1)(不存在一个商场没有销售过这个商品)</span><br><span class="hljs-string">select i1.ino,i1.iname</span><br><span class="hljs-string">from item i1</span><br><span class="hljs-string">where not exists </span><br><span class="hljs-string">(select *</span><br><span class="hljs-string">from market m1</span><br><span class="hljs-string">where not exists (select *</span><br><span class="hljs-string">from sales</span><br><span class="hljs-string">where sales.ino=i1.ino and sales.mno=m1.mno))</span><br><span class="hljs-string"></span><br><span class="hljs-string">--(2)销售它的商场数等于商场总数 </span><br><span class="hljs-string">select item.ino,item.iname</span><br><span class="hljs-string">from item,sales</span><br><span class="hljs-string">where item.ino=sales.ino</span><br><span class="hljs-string">group by sales.ino,item.ino,item.iname</span><br><span class="hljs-string">having count(sales.mno)=(</span><br><span class="hljs-string">select count(market.mno)</span><br><span class="hljs-string">from market)</span><br><span class="hljs-string"></span><br><span class="hljs-string">--6.查询每个商场里价格最高的商品的名称（用两种方法做）</span><br><span class="hljs-string">--(1)等于最高价</span><br><span class="hljs-string">select mno,iname</span><br><span class="hljs-string">from sales as S1 inner join item as I on S1.ino=I.ino</span><br><span class="hljs-string">where price=(</span><br><span class="hljs-string">    select max(price)</span><br><span class="hljs-string">    from sales as S2</span><br><span class="hljs-string">    where S2.mno=S1.mno</span><br><span class="hljs-string">);</span><br><span class="hljs-string"></span><br><span class="hljs-string">--(2)&gt;=all</span><br><span class="hljs-string">select mno,iname</span><br><span class="hljs-string">from sales as S inner join item as I on S.ino=I.ino</span><br><span class="hljs-string">where price&gt;=all(</span><br><span class="hljs-string">    select price</span><br><span class="hljs-string">    from sales as S2</span><br><span class="hljs-string">    where S2.mno=S.mno</span><br><span class="hljs-string">);</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h2 id="实验4"><a href="#实验4" class="headerlink" title="实验4"></a>实验4</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--一、对xsgl数据库完成下列操作要求：</span><br><span class="hljs-comment">--1.将被全部学生都选修了的课程的总学分改为4学分。</span><br>方法一：<br>update kc<br><span class="hljs-keyword">set</span> kc.学分<span class="hljs-operator">=</span><span class="hljs-number">4</span><br><span class="hljs-keyword">where</span> kc.课程号 <span class="hljs-keyword">in</span> <br>(<span class="hljs-keyword">select</span> kc.课程号 <br><span class="hljs-keyword">from</span> kc <span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> (<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><span class="hljs-keyword">from</span> xs <span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> <br>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> cj c1 <span class="hljs-keyword">where</span> c1.课程号<span class="hljs-operator">=</span>kc.课程号 <span class="hljs-keyword">and</span> c1.学号<span class="hljs-operator">=</span>xs.学号))) <br>或<br>update kc<br><span class="hljs-keyword">set</span> kc.学分<span class="hljs-operator">=</span><span class="hljs-number">4</span><br><span class="hljs-keyword">where</span> kc.课程号 <span class="hljs-keyword">in</span> <br>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> cj.课程号<br><span class="hljs-keyword">from</span> cj <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> cj.课程号<br><span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(cj.课程号)<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(xs.学号)<span class="hljs-keyword">from</span> xs))<br><br><span class="hljs-comment">--2.从学生表删除没有选课的学生。</span><br><span class="hljs-keyword">delete</span> <br><span class="hljs-keyword">from</span> xs<br><span class="hljs-keyword">where</span> xs.学号 <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span><br>    (<span class="hljs-keyword">select</span> cj.学号 <br> <span class="hljs-keyword">from</span> cj)<br><br><span class="hljs-comment">--3.将每个学生的平均分，总分和选课门数插入到数据库中（学号，姓名，平均分，总分，选课门数）</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> New_data(学号 <span class="hljs-type">char</span>(<span class="hljs-number">10</span>),<br>姓名 <span class="hljs-type">nchar</span>(<span class="hljs-number">10</span>),平均分 <span class="hljs-type">numeric</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>),总分 <span class="hljs-type">numeric</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>),选课门数 <span class="hljs-type">smallint</span>) <br><span class="hljs-keyword">insert</span> <br><span class="hljs-keyword">into</span> New_data<br><span class="hljs-keyword">select</span> xs.学号,xs.姓名,<span class="hljs-built_in">avg</span>(cj.成绩),<span class="hljs-built_in">sum</span>(cj.成绩),<span class="hljs-built_in">count</span>(cj.课程号)<br><span class="hljs-keyword">from</span> xs <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> cj <span class="hljs-keyword">on</span> xs.学号<span class="hljs-operator">=</span>cj.学号<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> xs.学号,xs.姓名<br><br><span class="hljs-keyword">select</span> xs.学号,xs.姓名,<span class="hljs-built_in">avg</span>(cj.成绩)平均分,<span class="hljs-built_in">sum</span>(cj.成绩) 总分,<span class="hljs-built_in">count</span>(cj.课程号) 选课门数<br><span class="hljs-keyword">into</span> xs1<br><span class="hljs-keyword">from</span> xs <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> cj <span class="hljs-keyword">on</span> xs.学号<span class="hljs-operator">=</span>cj.学号<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> xs.学号,xs.姓名<br><span class="hljs-comment">--4.创建每门课程的平均分和选课人数的视图（课程号，课程名，平均分，人数）</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> C(课程号,课程名,平均分,人数)<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> kc.课程号,kc.课程名,<span class="hljs-built_in">avg</span>(cj.成绩) 平均分,<span class="hljs-built_in">count</span>(cj.学号) 人数<br><span class="hljs-keyword">from</span> kc <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> cj <span class="hljs-keyword">on</span> kc.课程号<span class="hljs-operator">=</span>cj.课程号<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> kc.课程号,kc.课程名<br><br><span class="hljs-comment">--5.将李强同学从学生表删除（提示应该先删除李强同学的选课记录）</span><br><span class="hljs-keyword">delete</span> <br><span class="hljs-keyword">from</span> cj<br><span class="hljs-keyword">where</span> cj.学号 <span class="hljs-operator">=</span>(<br><span class="hljs-keyword">select</span> xs.学号 <span class="hljs-keyword">from</span> xs <span class="hljs-keyword">where</span> xs.姓名<span class="hljs-operator">=</span><span class="hljs-string">&#x27;李强&#x27;</span>)<br><span class="hljs-keyword">delete</span> <br><span class="hljs-keyword">from</span> xs<br><span class="hljs-keyword">where</span> xs.姓名<span class="hljs-operator">=</span><span class="hljs-string">&#x27;李强&#x27;</span><br><br><span class="hljs-comment">--6.插入一条选课记录（具体内容自己选）。</span><br><span class="hljs-keyword">insert</span> <br><span class="hljs-keyword">into</span> xs<br><span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;201700800&#x27;</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>)<br><span class="hljs-keyword">insert</span> <br><span class="hljs-keyword">into</span> cj<br><span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;201700800&#x27;</span>,<span class="hljs-string">&#x27;A001&#x27;</span>,<span class="hljs-keyword">NULL</span>)<br><br><span class="hljs-comment">--7.创建网络工程专业的学生的选课信息的视图，要求视图包含，学号，姓名，专业，课程号，课程名，成绩</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> Ima(学号,姓名,专业,课程号,课程名,成绩)<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> xs.学号,xs.姓名,kc.课程号,kc.课程名,cj.成绩<br><span class="hljs-keyword">from</span> xs <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> cj <span class="hljs-keyword">on</span> xs.学号<span class="hljs-operator">=</span>cj.学号 <br> <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span>  kc <span class="hljs-keyword">on</span> cj.课程号<span class="hljs-operator">=</span>kc.课程号<br><span class="hljs-keyword">where</span> xs.专业<span class="hljs-operator">=</span><span class="hljs-string">&#x27;网络工程&#x27;</span><br><br><span class="hljs-comment">--8.查询网络工程专业的各科的平均成绩，要求使用第7题创建的视图进行查询</span><br><span class="hljs-keyword">select</span> Ima.课程号,<span class="hljs-built_in">avg</span>(Ima.成绩) 平均成绩<br><span class="hljs-keyword">from</span> Ima<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> Ima.课程号<br><br><span class="hljs-comment">--9.查询被信息管理专业的学生都选修了的课程的课程号，课程名</span><br><span class="hljs-keyword">select</span> kc.课程号,kc.课程名<br><span class="hljs-keyword">from</span> kc<br><span class="hljs-keyword">where</span>  <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span><br>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><span class="hljs-keyword">from</span> xs<br><span class="hljs-keyword">where</span> xs.专业<span class="hljs-operator">=</span><span class="hljs-string">&#x27;信息管理&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span><br>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><span class="hljs-keyword">from</span> cj c1<br> <span class="hljs-keyword">where</span> c1.学号<span class="hljs-operator">=</span>xs.学号 <span class="hljs-keyword">and</span> c1.课程号<span class="hljs-operator">=</span>kc.课程号))<br><br><br><span class="hljs-comment">--10.显示选修课程数最多的学号及选修课程数最少的学号，姓名（使用派生表实现）</span><br><span class="hljs-keyword">select</span> xs.学号,姓名,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) 门数<br><span class="hljs-keyword">from</span>  xs,cj,(<span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<br><span class="hljs-keyword">from</span> cj<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> cj.学号<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-keyword">desc</span><br>)a(门数),<br>(<span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<br><span class="hljs-keyword">from</span> cj<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> cj.学号<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<br>)b(门数)<br><span class="hljs-keyword">where</span> cj.学号<span class="hljs-operator">=</span>xs.学号<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> xs.学号,xs.姓名,a.门数,b.门数<br><span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">=</span>a.门数 <span class="hljs-keyword">or</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">=</span>b.门数<br>或<br><span class="hljs-keyword">select</span> xs.学号 ,c1.门数 <br><span class="hljs-keyword">from</span> xs ,(<span class="hljs-keyword">select</span> cj.学号,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> cj <br>          <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> cj.学号) <span class="hljs-keyword">as</span> c1(学号,门数)<br><span class="hljs-keyword">where</span> xs.学号 <span class="hljs-operator">=</span>c1.学号 <span class="hljs-keyword">and</span>( c1.门数<span class="hljs-operator">=</span><br>                              (<span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <br> <span class="hljs-keyword">from</span> cj<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> cj.学号 <br> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">desc</span>)<br><span class="hljs-keyword">or</span> c1.门数<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <br>   <span class="hljs-keyword">from</span> cj<br>                   <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> cj.学号 <br>  <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)) )<br><br><span class="hljs-comment">--11.查询每个学生成绩高于自己的平均成绩的学号，姓名，课程号和成绩（使用派生表实现）</span><br><span class="hljs-keyword">select</span> xs.学号,xs.姓名,cj.课程号,cj.成绩<br><span class="hljs-keyword">from</span> xs,cj,(<span class="hljs-keyword">select</span> c1.学号,<span class="hljs-built_in">avg</span>(c1.成绩) 平均成绩 <span class="hljs-keyword">from</span> cj c1 <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> c1.学号) <span class="hljs-keyword">as</span> avg_score <br><span class="hljs-keyword">where</span> xs.学号<span class="hljs-operator">=</span>cj.学号 <span class="hljs-keyword">and</span> cj.学号<span class="hljs-operator">=</span>avg_score.学号 <span class="hljs-keyword">and</span> cj.成绩<span class="hljs-operator">&gt;</span>avg_score.平均成绩<br><span class="hljs-comment">--12.自己验证with check option的作用。</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> IS_Student<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> xs.学号,xs.姓名,xs.性别,xs.专业<br><span class="hljs-keyword">from</span> xs<br><span class="hljs-keyword">where</span> xs.专业<span class="hljs-operator">=</span><span class="hljs-string">&#x27;网络工程&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-keyword">check</span> option<br><br> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> IS_Student(学号,姓名)<br> <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;2001001&#x27;</span>,<span class="hljs-string">&#x27;张三&#x27;</span>) <br><span class="hljs-comment">--13.创建一个网络工程系的学生基本信息的视图MA_STUDENT，在此视图的基础上，</span><br><span class="hljs-comment">--再定义一个该专业女生信息的视图，然后再删除MA_STUDENT，观察执行情况。</span><br><span class="hljs-comment">--打不开女生信息的视图</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> MA_STUDENT<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> xs<br><span class="hljs-keyword">where</span> xs.专业<span class="hljs-operator">=</span><span class="hljs-string">&#x27;网络工程&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-keyword">check</span> option<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> Woman<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> MA_STUDENT<br><span class="hljs-keyword">where</span> MA_STUDENT.性别<span class="hljs-operator">=</span><span class="hljs-string">&#x27;女&#x27;</span><br><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> MA_STUDENT<br><br><span class="hljs-comment">--14.查询和程明同龄的学生的学号和姓名以及年龄</span><br><br><span class="hljs-keyword">select</span> xs.学号, xs.姓名, DATEDIFF(yy, xs.出生时间, GETDATE())<br><span class="hljs-keyword">from</span> xs<br><span class="hljs-keyword">where</span> DATEDIFF(yy, xs.出生时间, GETDATE()) <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> DATEDIFF(yy, x1.出生时间, GETDATE()) <span class="hljs-keyword">from</span> xs x1 <span class="hljs-keyword">where</span> x1.姓名 <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;程明&#x27;</span>)<br><br><span class="hljs-comment">--15.查询没有被网络工程全部的学生都选修的课程的课程号和课程名（可以被网络工程专业的部分学生选修）</span><br><br><span class="hljs-keyword">select</span> 课程号,kc.课程名 <span class="hljs-keyword">from</span> kc <br><span class="hljs-keyword">where</span>  <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> xs <span class="hljs-keyword">where</span> xs.专业 <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;网络工程&#x27;</span> <br>         <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> cj <span class="hljs-keyword">where</span> cj.学号 <span class="hljs-operator">=</span> xs.学号 <span class="hljs-keyword">and</span> cj.课程号 <span class="hljs-operator">=</span> kc.课程号))<br><span class="hljs-comment">--16.查询选课包含了选英语的全部学生的课程的课程号和课程名。</span><br><span class="hljs-keyword">select</span> 课程号,课程名<br><span class="hljs-keyword">from</span> kc<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span><br>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> xs<br><span class="hljs-keyword">where</span> 学号 <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> 学号 <span class="hljs-keyword">from</span> cj <span class="hljs-keyword">where</span> 课程号<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> 课程号 <span class="hljs-keyword">from</span> kc <span class="hljs-keyword">where</span> 课程名<span class="hljs-operator">=</span><span class="hljs-string">&#x27;英语&#x27;</span>))<span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> <br>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> cj<br><span class="hljs-keyword">where</span>  学号<span class="hljs-operator">=</span>xs.学号 <span class="hljs-keyword">and</span> 课程号<span class="hljs-operator">=</span>kc.课程号))<br><span class="hljs-comment">--17.查询没有选修数据结构，操作系统和英语三门课的学生的学号，姓名，课程号，课程名和成绩</span><br><br><span class="hljs-keyword">select</span> xs.学号, xs.姓名, kc.课程号, kc.课程名, cj.成绩<br><span class="hljs-keyword">from</span> xs <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> cj <span class="hljs-keyword">on</span> cj.学号 <span class="hljs-operator">=</span> xs.学号 <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> kc <span class="hljs-keyword">on</span> kc.课程号 <span class="hljs-operator">=</span> cj.课程号<br><span class="hljs-keyword">where</span> xs.学号 <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> c1.学号 <span class="hljs-keyword">from</span> cj c1 <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> kc k1 <span class="hljs-keyword">on</span> k1.课程号 <span class="hljs-operator">=</span> c1.课程号 <span class="hljs-keyword">where</span> k1.课程名 <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;数据结构&#x27;</span>, <span class="hljs-string">&#x27;操作系统&#x27;</span>, <span class="hljs-string">&#x27;英语&#x27;</span>))<br><br><span class="hljs-comment">--18.将没有选课的学生的总学分设置为0</span><br><br>update xs<br><span class="hljs-keyword">set</span> xs.总学分 <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">where</span> xs.学号 <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span>(<span class="hljs-keyword">select</span> cj.学号 <span class="hljs-keyword">from</span> cj)<br><span class="hljs-comment">--二、使用Northwind数据库完成下列操作</span><br><span class="hljs-comment">--1. 将员工lastname是: Peacock处理的订单中购买数量超过50的商品折扣改为七折</span><br>update [<span class="hljs-keyword">Order</span> Details]<br><span class="hljs-keyword">set</span> Discount<span class="hljs-operator">=</span><span class="hljs-number">0.3</span><br><span class="hljs-keyword">where</span> [<span class="hljs-keyword">Order</span> Details].OrderID <span class="hljs-keyword">in</span><br>(<span class="hljs-keyword">select</span> o1.OrderID<br><span class="hljs-keyword">from</span> Employees,Orders,[<span class="hljs-keyword">Order</span> Details] o1<br><span class="hljs-keyword">where</span> Employees.EmployeeID<span class="hljs-operator">=</span>Orders.EmployeeID <span class="hljs-keyword">and</span> Orders.OrderID<span class="hljs-operator">=</span>o1.OrderID<br>  <span class="hljs-keyword">and</span> Employees.LastName<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Peacock&#x27;</span> <span class="hljs-keyword">and</span> o1.Quantity<span class="hljs-operator">&gt;</span><span class="hljs-number">50</span>) <span class="hljs-keyword">and</span> [<span class="hljs-keyword">Order</span> Details].Quantity<span class="hljs-operator">&gt;</span><span class="hljs-number">50</span><br><span class="hljs-comment">--2. 删除lastname是: Peacock处理的所有订单</span><br><span class="hljs-keyword">delete</span> <br><span class="hljs-keyword">from</span> [<span class="hljs-keyword">Order</span> Details]<br><span class="hljs-keyword">where</span> [<span class="hljs-keyword">Order</span> Details].OrderID <span class="hljs-keyword">in</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> o1.OrderID<br><span class="hljs-keyword">from</span> Employees,Orders,[<span class="hljs-keyword">Order</span> Details] o1<br><span class="hljs-keyword">where</span> Employees.EmployeeID<span class="hljs-operator">=</span>Orders.EmployeeID <span class="hljs-keyword">and</span> Orders.OrderID<span class="hljs-operator">=</span>o1.OrderID<br>  <span class="hljs-keyword">and</span> Employees.LastName<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Peacock&#x27;</span>)<br>或<br><span class="hljs-keyword">delete</span><br><span class="hljs-keyword">from</span> Orders<br><span class="hljs-keyword">where</span> Orders.EmployeeID<span class="hljs-operator">=</span>(<br><span class="hljs-keyword">select</span> Employees.EmployeeID<br><span class="hljs-keyword">from</span> Employees<br><span class="hljs-keyword">where</span> Employees.LastName<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Peacock&#x27;</span>)<br><br><span class="hljs-comment">--3. 将每个订单的订单编号，顾客编号，产品总数量，总金额插入到数据库中</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> Order_Information<br>(OrdersID <span class="hljs-type">int</span>, CustomerID <span class="hljs-type">nchar</span>(<span class="hljs-number">5</span>),Number <span class="hljs-type">smallint</span> ,Totalmoney money)<br><span class="hljs-keyword">insert</span><br><span class="hljs-keyword">into</span> Order_Information<br><span class="hljs-keyword">select</span> Orders.OrderID,Orders.CustomerID,<span class="hljs-built_in">sum</span>([<span class="hljs-keyword">Order</span> Details].Quantity) 数量,<br><span class="hljs-built_in">sum</span>([<span class="hljs-keyword">Order</span> Details].Quantity<span class="hljs-operator">*</span>[<span class="hljs-keyword">Order</span> Details].UnitPrice<span class="hljs-operator">*</span>(<span class="hljs-number">1</span><span class="hljs-operator">-</span>[<span class="hljs-keyword">Order</span> Details].Discount)) 金额<br><span class="hljs-keyword">from</span> Orders,[<span class="hljs-keyword">Order</span> Details]<br><span class="hljs-keyword">where</span> Orders.OrderID<span class="hljs-operator">=</span>[<span class="hljs-keyword">Order</span> Details].OrderID<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> Orders.OrderID,Orders.CustomerID <br><br><span class="hljs-comment">--4. 插入一个新的订单，要求该订单购买了商品编号为5,7,9的商品。</span><br><span class="hljs-comment">--（5号商品买了10个，7号买了20个，9号买了15个，都没有折扣）</span><br><span class="hljs-comment">--报错：仅当使用了列列表并且 IDENTITY_INSERT 为 ON 时，才能为表&#x27;Orders&#x27;中的标识列指定显式值</span><br><span class="hljs-keyword">insert</span><br><span class="hljs-keyword">into</span> Orders(CustomerID,EmployeeID)<br><span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;VINET&#x27;</span>,<span class="hljs-number">6</span>)<br><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@id</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">set</span> <span class="hljs-variable">@id</span><span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(Orders.OrderID) <span class="hljs-keyword">from</span> Orders)<br><br><span class="hljs-keyword">insert</span> <br><span class="hljs-keyword">into</span> [<span class="hljs-keyword">Order</span> Details]<br><span class="hljs-keyword">values</span>(<span class="hljs-variable">@id</span>, <span class="hljs-number">5</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> [<span class="hljs-keyword">Order</span> Details]<br><span class="hljs-keyword">values</span>(<span class="hljs-variable">@id</span>, <span class="hljs-number">7</span>, <span class="hljs-number">130</span>, <span class="hljs-number">20</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> [<span class="hljs-keyword">Order</span> Details]<br><span class="hljs-keyword">values</span>(<span class="hljs-variable">@id</span>, <span class="hljs-number">9</span>, <span class="hljs-number">160</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0</span>);<br>      <br><span class="hljs-comment">--5.将每年每个员工处理订单的数量和订单的总金额创建为视图</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> Employ<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> Employees.EmployeeID,datename(yy,Orders.OrderDate) 年份,<br>   <span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span> Orders.OrderID) 订单数量,<span class="hljs-built_in">sum</span>([<span class="hljs-keyword">Order</span> Details].Quantity) 数量,<br>       <span class="hljs-built_in">sum</span>([<span class="hljs-keyword">Order</span> Details].Quantity<span class="hljs-operator">*</span>[<span class="hljs-keyword">Order</span> Details].UnitPrice<span class="hljs-operator">*</span>(<span class="hljs-number">1</span><span class="hljs-operator">-</span>[<span class="hljs-keyword">Order</span> Details].Discount)) 订单总金额<br><span class="hljs-keyword">from</span> Employees <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> Orders <span class="hljs-keyword">on</span> Employees.EmployeeID<span class="hljs-operator">=</span>Orders.EmployeeID<br>   <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> [<span class="hljs-keyword">Order</span> Details] <span class="hljs-keyword">on</span> Orders.OrderID<span class="hljs-operator">=</span>[<span class="hljs-keyword">Order</span> Details].OrderID<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> Employees.EmployeeID,datename(yy,Orders.OrderDate)<br><br><span class="hljs-comment">--6. 购买了CustomerID是‘VINET’用户所购买的全部商品的用户的CustomerID和CompanyName。</span><br><br><span class="hljs-keyword">select</span> c1.CustomerID, c1.CompanyName<br><span class="hljs-keyword">from</span> Customers c1<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> Customers c2 <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> Orders o1 <span class="hljs-keyword">on</span> o1.CustomerID <span class="hljs-operator">=</span> c2.CustomerID <br>  <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> [<span class="hljs-keyword">Order</span> Details] od1 <span class="hljs-keyword">on</span> od1.OrderID <span class="hljs-operator">=</span> o1.OrderID <span class="hljs-keyword">where</span> c2.CustomerID <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;VINET&#x27;</span> <br>  <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> Orders o2 <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> [<span class="hljs-keyword">Order</span> Details] od2 <span class="hljs-keyword">on</span> od2.OrderID <span class="hljs-operator">=</span> o2.OrderID<br>  <span class="hljs-keyword">where</span> o2.CustomerID <span class="hljs-operator">=</span> c1.CustomerID <span class="hljs-keyword">and</span> od2.ProductID <span class="hljs-operator">=</span> od1.ProductID))<br><br><span class="hljs-comment">--7. 将被全部顾客都购买过的商品的商品编号和商品名和单价创建为一个视图proa</span><br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> proa<br><span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> Products.ProductID, Products.ProductName<br><span class="hljs-keyword">from</span> Products <br><span class="hljs-keyword">where</span> Products.ProductID <span class="hljs-keyword">in</span> <br>(<span class="hljs-keyword">select</span> p1.ProductID <span class="hljs-keyword">from</span> Products p1 <br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> Customers c1 <br>         <span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> [<span class="hljs-keyword">Order</span> Details] od1 <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> Orders o1 <span class="hljs-keyword">on</span> o1.OrderID <span class="hljs-operator">=</span> od1.OrderID <br>             <span class="hljs-keyword">where</span> o1.CustomerID <span class="hljs-operator">=</span> c1.CustomerID <span class="hljs-keyword">and</span> od1.ProductID <span class="hljs-operator">=</span> p1.ProductID)))<br><br><span class="hljs-comment">--8. 将被全部顾客都购买过的商品的单价加上5元</span><br><br>update Products<br><span class="hljs-keyword">set</span> Products.UnitPrice <span class="hljs-operator">=</span> Products.UnitPrice <span class="hljs-operator">+</span> <span class="hljs-number">5</span><br><span class="hljs-keyword">where</span> Products.ProductID <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> p1.ProductID <span class="hljs-keyword">from</span> Products p1 <span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> Customers c1 <span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> Order_Details od1 <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> Orders o1 <span class="hljs-keyword">on</span> o1.OrderID <span class="hljs-operator">=</span> od1.OrderID <span class="hljs-keyword">where</span> o1.CustomerID <span class="hljs-operator">=</span> c1.CustomerID <span class="hljs-keyword">and</span> od1.ProductID <span class="hljs-operator">=</span> p1.ProductID)))<br><br><span class="hljs-comment">--9. 删除订单总金额少于50元的订单明细</span><br><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> [<span class="hljs-keyword">Order</span> Details]<br><span class="hljs-keyword">where</span> [<span class="hljs-keyword">Order</span> Details].OrderID <span class="hljs-keyword">in</span><br>   (<span class="hljs-keyword">select</span> od1.OrderID <span class="hljs-keyword">from</span> [<span class="hljs-keyword">Order</span> Details] od1 <br>   <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> od1.OrderID <br>   <span class="hljs-keyword">having</span> <span class="hljs-built_in">sum</span>(od1.Quantity <span class="hljs-operator">*</span> (<span class="hljs-number">1</span> <span class="hljs-operator">-</span> od1.Discount) <span class="hljs-operator">*</span> od1.UnitPrice) <span class="hljs-operator">&lt;</span> <span class="hljs-number">50</span>)<br><br><br></code></pre></td></tr></table></figure><h2 id="实验5"><a href="#实验5" class="headerlink" title="实验5"></a>实验5</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--1．创建一windows用户（名字自定），用sql语句建立windows验证模式的登录名。默认数据库为student</span><br><span class="hljs-keyword">CREATE</span> LOGIN [DESKTOP<span class="hljs-number">-8</span>QRH2EV\liu] <span class="hljs-keyword">FROM</span> WINDOWS<span class="hljs-comment">--注意：DESKTOP-8QRH2EV是计算机名，liu是Windows用户名</span><br><span class="hljs-keyword">WITH</span> DEFAULT_DATABASE <span class="hljs-operator">=</span> Student;<br><span class="hljs-comment">--2．用sql语句和系统存储过程建立登录名sqluser,密码为1234</span><br><span class="hljs-keyword">CREATE</span> LOGIN sqluser <span class="hljs-keyword">WITH</span> PASSWORD <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1234&#x27;</span><br><span class="hljs-keyword">exec</span> sp_addlogin sqluser, <span class="hljs-string">&#x27;1234&#x27;</span><br><span class="hljs-comment">--3．为student数据库新建用户u1，其登录名为sqluser。</span><br>USE student<br>GO<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> u1 <span class="hljs-keyword">FOR</span> LOGIN sqluser<br><span class="hljs-keyword">exec</span> sp_adduser sqluser,u1<br><span class="hljs-comment">--4．新建登录usersf，并将其加入到sysadmin固定服务器角色中。</span><br><span class="hljs-keyword">exec</span> sp_addlogin usersf, <span class="hljs-string">&#x27;1234&#x27;</span><br><span class="hljs-keyword">exec</span> sp_addsrvrolemember <span class="hljs-string">&#x27;usersf&#x27;</span>,<span class="hljs-string">&#x27;sysadmin&#x27;</span><span class="hljs-comment">--由于sysadmin是系统管理员角色，拥有所有权限。</span><br><span class="hljs-comment">--5．将student用户u1（登录名为sqluser）加入到db_owner角色中，使其全权负责该数据库,并验证其权限。</span><br>USE student<br>GO <br><span class="hljs-keyword">exec</span> sp_addrolemember <span class="hljs-string">&#x27;db_owner&#x27;</span>,u1<br> <span class="hljs-comment">-- 验证:以sqluser登录,在新建查询界面输入以下内容验证</span><br>    USE student<br>    GO<br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> SC<span class="hljs-comment">-- 成功，db_owner拥有查询权限</span><br>    UPDATE SC<br>    <span class="hljs-keyword">SET</span> Grade <span class="hljs-operator">=</span> <span class="hljs-number">75</span><br>    <span class="hljs-keyword">WHERE</span> Sno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;200515001&#x27;</span> <span class="hljs-keyword">AND</span> cno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;4&#x27;</span> <span class="hljs-comment">-- 成功，db_owner拥有修改表项的权限</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> course <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;12&#x27;</span>,<span class="hljs-string">&#x27;大数据&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-number">3</span>)<span class="hljs-comment">--成功，db_owner拥有插入的权限</span><br>    <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> SC<br>        <span class="hljs-keyword">ADD</span> temp tinyint <span class="hljs-comment">-- 成功，db_owner拥有更改表结构的权限</span><br><br><span class="hljs-comment">--6．为SPJ数据库新建用户u2，u3，其登录名分别为u2，u3。</span><br><span class="hljs-keyword">CREATE</span> LOGIN u2 <span class="hljs-keyword">WITH</span> PASSWORD <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1234&#x27;</span>, DEFAULT_DATABASE <span class="hljs-operator">=</span> SPJ<br><span class="hljs-keyword">CREATE</span> LOGIN u3 <span class="hljs-keyword">WITH</span> PASSWORD <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1234&#x27;</span>, DEFAULT_DATABASE <span class="hljs-operator">=</span> SPJ<br>USE SPJ<br>GO<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> u2 <span class="hljs-keyword">FOR</span> LOGIN u2<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> u3 <span class="hljs-keyword">FOR</span> LOGIN u3<br><br><span class="hljs-comment">--（1）授予用户u2对S表有SELECT 权，对P表颜色（COLOR）具有更新权限；</span><br>    <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> S <span class="hljs-keyword">TO</span> u2 <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> OPTION;<br>    <span class="hljs-keyword">GRANT</span> UPDATE(COLOR) <span class="hljs-keyword">ON</span> P <span class="hljs-keyword">TO</span> u2<br>    <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> OPTION;<br><span class="hljs-comment">--（2）u2将其拥有的权限授予u3；</span><br>    <span class="hljs-comment">-- 本小题在u2登录下执行.验证u2获得权限，并给u3授权</span><br>USE SPJ<br>GO<br> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> S; <span class="hljs-comment">-- 成功</span><br> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> P; <span class="hljs-comment">-- 拒绝</span><br> UPDATE P <span class="hljs-keyword">SET</span> COLOR<span class="hljs-operator">=</span><span class="hljs-string">&#x27;红&#x27;</span><span class="hljs-comment">--成功</span><br> update P <span class="hljs-keyword">set</span> color<span class="hljs-operator">=</span><span class="hljs-string">&#x27;绿&#x27;</span> <span class="hljs-keyword">where</span> pno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;p1&#x27;</span><span class="hljs-comment">--拒绝，因为u2没有对P的查询权限</span><br> <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> S <span class="hljs-keyword">TO</span> u3;<br> <span class="hljs-keyword">GRANT</span> UPDATE(COLOR) <span class="hljs-keyword">ON</span> P <span class="hljs-keyword">TO</span> u3<br><span class="hljs-comment">--（3）用sql语句逐一验证u3所获得的权限。</span><br>    <span class="hljs-comment">-- 以u3身份登录:</span><br> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> S; <span class="hljs-comment">-- 成功</span><br> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> P; <span class="hljs-comment">-- 拒绝</span><br> UPDATE P <span class="hljs-keyword">SET</span> COLOR<span class="hljs-operator">=</span><span class="hljs-string">&#x27;红&#x27;</span><span class="hljs-comment">--成功</span><br> update P <span class="hljs-keyword">set</span> color<span class="hljs-operator">=</span><span class="hljs-string">&#x27;绿&#x27;</span> <span class="hljs-keyword">where</span> pno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;p1&#x27;</span><span class="hljs-comment">--拒绝，因为u2没有对P的查询权限</span><br>  <span class="hljs-comment">--（4）撤销用户u3所获得的权限，并验证。</span><br>    <span class="hljs-comment">-- 以u2身份登录并操作:</span><br>    <span class="hljs-keyword">REVOKE</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> S <span class="hljs-keyword">FROM</span> u3;<br>    <span class="hljs-keyword">REVOKE</span> UPDATE(COLOR) <span class="hljs-keyword">ON</span> P <span class="hljs-keyword">FROM</span> u3;<br>    <span class="hljs-comment">-- 以u3身份登录并操作:</span><br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> S <span class="hljs-comment">-- 拒绝</span><br>    UPDATE P <span class="hljs-keyword">SET</span> COLOR<span class="hljs-operator">=</span><span class="hljs-string">&#x27;红&#x27;</span> <span class="hljs-comment">--拒绝</span><br><span class="hljs-comment">--7.在student数据库中建立角色operate,该角色具有对student和course表的查询权限；具有对表sc的插入和修改权限。</span><br>USE student<br>GO<br><span class="hljs-keyword">CREATE</span> ROLE operate<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> student <span class="hljs-keyword">TO</span> operate<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> course <span class="hljs-keyword">TO</span> operate<br><span class="hljs-keyword">GRANT</span> update,<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">ON</span> SC <span class="hljs-keyword">TO</span> operate<br><span class="hljs-comment">--8.拒绝用户u1对sc表的修改权限。</span><br>DENY update <span class="hljs-keyword">ON</span> SC <span class="hljs-keyword">TO</span> u1<br><span class="hljs-comment">--9.使用存储过程将角色operate赋给用户u1,并用sql语句验证其权限。（特别验证u1对sc表的修改权限）</span><br><span class="hljs-keyword">exec</span> sp_addrolemember operate,u1<br><span class="hljs-comment">-- 验证:这里用登录名sqluser登录</span><br>USE student<br>GO<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Student<span class="hljs-comment">-- 成功</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> course<span class="hljs-comment">-- 成功</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> sc <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;200515003&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-number">88</span>,<span class="hljs-keyword">NULL</span>)<span class="hljs-comment">--成功</span><br>update sc <span class="hljs-keyword">set</span> temp<span class="hljs-operator">=</span><span class="hljs-number">0</span><br><span class="hljs-comment">--消息 229，级别 14，状态 5，第 6 行</span><br><span class="hljs-comment">--拒绝了对对象 &#x27;sc&#x27; (数据库 &#x27;student&#x27;，架构 &#x27;dbo&#x27;)的 UPDATE 权限。</span><br><span class="hljs-comment">--这是因为用户u1通过operate角色获得的对SC的update权限，由于被DENY了，因此该语句的执行被拒绝了.</span><br><span class="hljs-comment">--10.创建数据库架构jg_test,其所有者为student用户u1。</span><br>use student<br>go<br><span class="hljs-keyword">create</span> schema jg_test<br><span class="hljs-keyword">authorization</span> u1<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">alter</span><br><span class="hljs-keyword">on</span> schema::dbo<br><span class="hljs-keyword">to</span> u1<br><span class="hljs-comment">--（1）授予用户u1建表权限；</span><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span><br><span class="hljs-keyword">to</span> u1<br><span class="hljs-comment">--（2）授予用户（自己建立wei）对架构jg_test进行查询、插入的权限</span><br><span class="hljs-keyword">exec</span> sp_addlogin wei<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> wei<br><span class="hljs-keyword">for</span> login wei<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span>,<span class="hljs-keyword">insert</span><br><span class="hljs-keyword">on</span> schema::jg_test<br><span class="hljs-keyword">to</span> wei<br><span class="hljs-comment">--（3）以u1身份登录sql srver,新建一个表，观察表的架构名称。验证用户wei对该表的查询和插入权限，并验证其是否可对该表进行删除。</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> jg_test.s<br>(s1 <span class="hljs-type">char</span>(<span class="hljs-number">10</span>),s2 <span class="hljs-type">int</span>)<br><span class="hljs-comment">--命令成功完成</span><br><span class="hljs-comment">--以wei身份登录sql srver</span><br>use student<br>go<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> jg_test.s<span class="hljs-comment">--命令成功完成</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> jg_test.s <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;t1234&#x27;</span>,<span class="hljs-number">10</span>)<span class="hljs-comment">--命令成功完成</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> jg_test.s<br><span class="hljs-comment">--消息 229，级别 14，状态 5，第 5 行</span><br><span class="hljs-comment">--拒绝了对对象 &#x27;s&#x27; (数据库 &#x27;student&#x27;，架构 &#x27;jg_test&#x27;)的 DELETE 权限。</span><br>补充：<br><span class="hljs-comment">--11. 在student数据库中创建架构（schema）teacher指定给用户teacher（也就是要先创建一个teacher用户）</span><br>use student<br>go<br><span class="hljs-keyword">CREATE</span> LOGIN tt <span class="hljs-keyword">WITH</span> PASSWORD <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1234&#x27;</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> teacher <span class="hljs-keyword">for</span> login tt<br><span class="hljs-keyword">create</span> schema teacher <span class="hljs-keyword">AUTHORIZATION</span> teacher<br><span class="hljs-comment">--12.在已创建的teacher架构中创建“tea”表，表结构为（tno(编号), tname(姓名), tsd（专业）,tphone, te_mail）(数据类型和长度自己定义)，通过teacher架构为teacher1用户设置查询权限，验证teacher1用户对表tea是否具有select权限和delete权限，为什么？</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> teacher.tea<br>(tno <span class="hljs-type">char</span>(<span class="hljs-number">10</span>),<br> tname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br> tsd <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<br> tphone <span class="hljs-type">char</span>(<span class="hljs-number">11</span>),<br> te_mail <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>)<br> )<br> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teacher.tea <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;1234567890&#x27;</span>,<span class="hljs-string">&#x27;王伟&#x27;</span>,<span class="hljs-string">&#x27;计算机&#x27;</span>,<span class="hljs-string">&#x27;13963112345&#x27;</span>,<span class="hljs-string">&#x27;123.com&#x27;</span>)<br> <span class="hljs-comment">--验证过程</span><br> <span class="hljs-comment">/*在“对象资源管理器”中展开数据库“student”→“安全性”→“架构”，选择新创建的架构teacher，</span><br><span class="hljs-comment"> 右键单击鼠标，在弹出的快捷菜单中选择“属性”菜单项，打开“架构属性”窗口，</span><br><span class="hljs-comment"> 在该架构属性的“权限”选项页中，单击“搜索”按钮，选择用户u1（假设已经创建），为用户授予“选择”权限。单击“确定”*/</span><br> <span class="hljs-comment">--以sqluser登录</span><br> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teacher.tea<span class="hljs-comment">--成功</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> teacher.tea<span class="hljs-comment">--拒绝了对对象 &#x27;tea&#x27; (数据库 &#x27;student&#x27;，架构 &#x27;teacher&#x27;)的 DELETE 权限</span><br></code></pre></td></tr></table></figure><h2 id="实验6"><a href="#实验6" class="headerlink" title="实验6"></a>实验6</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br></pre></td><td class="code"><pre><code class="hljs sql">USE STU<br>go<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> COURSE(<br>CNO <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>),<br>CNAME <span class="hljs-type">CHAR</span>(<span class="hljs-number">40</span>),<br>CPNO <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>),<br>CCREDIT <span class="hljs-type">SMALLINT</span><br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> SC(<br>SNO <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>),<br>CNO <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>),<br>GRADE <span class="hljs-type">SMALLINT</span><br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> STUDENT(<br>SNO <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>),<br>SNAME <span class="hljs-type">CHAR</span>(<span class="hljs-number">20</span>),<br>SSEX <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>),<br>SAGE <span class="hljs-type">SMALLINT</span>,<br>SDEPT <span class="hljs-type">CHAR</span>(<span class="hljs-number">10</span>)<br>)<br><br><span class="hljs-comment">--1.将stu数据库中student表的sno定义为主键；</span><br>USE STU<br>go<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> STUDENT <br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">COLUMN</span> SNO <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><span class="hljs-comment">/*将某属性设置为主键之前，必须先将该属性设置为NOT NULL*/</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> STUDENT<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> P1 <span class="hljs-keyword">PRIMARY</span> KEY(SNO)<br><span class="hljs-comment">--2.将数据库stu的表course的cno字段定义为主键，约束名称为cno_pk;</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> COURSE<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">COLUMN</span> CNO <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> COURSE <br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> CNO_PK <span class="hljs-keyword">PRIMARY</span> KEY(CNO)<br><span class="hljs-comment">--3.为表course中的字段cname添加唯一值约束；</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> COURSE<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> U1 <span class="hljs-keyword">UNIQUE</span>(CNAME)<br><span class="hljs-comment">--4.将数据库stu的表sc的sno及cno字段组合定义为主键，约束名称为sc_pk;</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> SC<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">COLUMN</span> SNO <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> SC<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">COLUMN</span> CNO <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> SC<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> SC_PK <span class="hljs-keyword">PRIMARY</span> KEY(SNO,CNO)<br><span class="hljs-comment">--5.对于数据表sc的sno、cno字段定义为外码，使之与表student的主码sno及表course的主码cno对应，实现如下参照完整性：</span><br><span class="hljs-comment">--1)删除student表中记录的同时删除sc表中与该记录sno字段值相同的记录；</span><br><span class="hljs-comment">--2)修改student表某记录的sno时，若sc表中与该字段值对应的有若干条记录，则拒绝修改；</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> SC<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> F1 <span class="hljs-keyword">FOREIGN</span> KEY(SNO) <span class="hljs-keyword">REFERENCES</span> STUDENT(SNO)<br><span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> CASCADE<br><span class="hljs-keyword">ON</span> UPDATE <span class="hljs-keyword">NO</span> ACTION <br><span class="hljs-comment">--3)修改course表cno字段值时，该字段在sc表中的对应值也应修改；</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> SC<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> F2 <span class="hljs-keyword">FOREIGN</span> KEY(CNO) <span class="hljs-keyword">REFERENCES</span> COURSE(CNO)<br><span class="hljs-keyword">ON</span> UPDATE CASCADE<br><br><span class="hljs-comment">--4)删除course表一条记录时，若该字段在在sc表中存在，则删除该字段对应的记录；</span><br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> SC<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> F3 <span class="hljs-keyword">FOREIGN</span> KEY(CNO) <span class="hljs-keyword">REFERENCES</span> COURSE(CNO)<br><span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> CASCADE <br><br><span class="hljs-comment">--5)向sc表添加记录时，如果该记录的sno字段的值在student中不存在，则拒绝插入；</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> SC<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> F4 <span class="hljs-keyword">FOREIGN</span> KEY(SNO)  <span class="hljs-keyword">REFERENCES</span> STUDENT(SNO)<br><br><br><span class="hljs-comment">--6.定义check约束，要求学生学号sno必须为9位数字字符，且不能以0开头，第二三位皆为0；</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> STUDENT <br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> C1 <span class="hljs-keyword">CHECK</span>(SNO <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;[1-9]00[0-9][0-9][0-9][0-9][0-9][0-9]&#x27;</span>)<br><span class="hljs-comment">--7.定义stu数据库中student表中学生年龄值在16-25范围内；</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> STUDENT <br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> C2 <span class="hljs-keyword">CHECK</span>(SAGE <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">16</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">25</span>)<br><span class="hljs-comment">--8.定义stu数据库中student表中学生姓名长度在2-8之间；</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> STUDENT <br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> C3 <span class="hljs-keyword">CHECK</span>(LEN(SNAME) <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">2</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">8</span>)<br><span class="hljs-comment">--9.定义stu数据库中student表中学生性别列中只能输入“男”或“女”；</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> STUDENT <br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> C4 <span class="hljs-keyword">CHECK</span>(SSEX <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>))<br><span class="hljs-comment">--10.定义stu数据库student表中学生年龄值默认值为20；</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> STUDENT <br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> D_SAGE <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">20</span> <span class="hljs-keyword">FOR</span> SAGE<br><span class="hljs-comment">--11.修改student表学生的年龄值约束可以为15-30范围内；</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> STUDENT <br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> C2;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> STUDENT <br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> C2 <span class="hljs-keyword">CHECK</span>(SAGE <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">15</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">30</span>)<br><span class="hljs-comment">--12.删除上述唯一值约束、外键约束及check约束；</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> COURSE<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> U1 <br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> STUDENT <br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> C2<br><span class="hljs-comment">--13.设计触发器实现如果一个学生转专业了，那么输出一条信息显示该学生各门课程的平均分。</span><br>USE STUDENT<br>GO<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> A1<br><span class="hljs-keyword">ON</span> STUDENT<br><span class="hljs-keyword">FOR</span><br>UPDATE<br><span class="hljs-keyword">AS</span> <br>IF UPDATE(SDEPT)<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@AVG</span> <span class="hljs-type">NUMERIC</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>),<span class="hljs-variable">@SNO</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>)<br><span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@SNO</span><span class="hljs-operator">=</span>(<span class="hljs-keyword">SELECT</span> SNO <span class="hljs-keyword">FROM</span> DELETED)<br><span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@AVG</span><span class="hljs-operator">=</span>(<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(GRADE) <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> SNO<span class="hljs-operator">=</span><span class="hljs-variable">@SNO</span>) <br>PRINT <span class="hljs-variable">@SNO</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;各门课的平均成绩&#x27;</span><span class="hljs-operator">+</span><span class="hljs-built_in">cast</span>(<span class="hljs-variable">@AVG</span> <span class="hljs-keyword">as</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">5</span>))<br><span class="hljs-keyword">END</span><br><span class="hljs-comment">--测试</span><br>UPDATE STUDENT <span class="hljs-keyword">SET</span> SDEPT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CS&#x27;</span> <span class="hljs-keyword">WHERE</span> SNO<span class="hljs-operator">=</span><span class="hljs-string">&#x27;200515008&#x27;</span><span class="hljs-comment">/*只有修改sdept时，触发器才触发执行*/</span><br>UPDATE STUDENT <span class="hljs-keyword">SET</span> SAGE<span class="hljs-operator">=</span><span class="hljs-number">26</span> <span class="hljs-keyword">WHERE</span> SNO<span class="hljs-operator">=</span><span class="hljs-string">&#x27;200515008&#x27;</span><span class="hljs-comment">/*该语句只修改了学生的年龄，A1触发器并没有执行*/</span><br><br><span class="hljs-comment">--14.设计触发器实现如果成绩被修改了20分以上，则输出提示信息“修改成绩超过20分，请慎重”。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> A2<br><span class="hljs-keyword">ON</span> SC<br><span class="hljs-keyword">FOR</span> UPDATE<br><span class="hljs-keyword">AS</span><br>IF UPDATE(GRADE)<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@OLD</span> <span class="hljs-type">INT</span><br><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@NEW</span> <span class="hljs-type">INT</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@OLD</span> <span class="hljs-operator">=</span> GRADE <span class="hljs-keyword">FROM</span> DELETED<br><span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@NEW</span> <span class="hljs-operator">=</span> GRADE <span class="hljs-keyword">FROM</span> INSERTED<br>IF <span class="hljs-built_in">abs</span>(<span class="hljs-variable">@NEW</span><span class="hljs-operator">-</span><span class="hljs-variable">@OLD</span>)<span class="hljs-operator">&gt;=</span><span class="hljs-number">20</span><br>PRINT<span class="hljs-string">&#x27;修改成绩超过20分，请慎重&#x27;</span><br><span class="hljs-keyword">END</span><br><span class="hljs-comment">--测试</span><br>update sc<br><span class="hljs-keyword">set</span> grade<span class="hljs-operator">=</span>grade<span class="hljs-operator">+</span><span class="hljs-number">15</span><br><span class="hljs-keyword">where</span> sno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;200515002&#x27;</span> <span class="hljs-keyword">and</span> cno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;5&#x27;</span><span class="hljs-comment">/*触发器没执行*/</span><br>update sc<br><span class="hljs-keyword">set</span> grade<span class="hljs-operator">=</span>grade<span class="hljs-operator">+</span><span class="hljs-number">25</span><br><span class="hljs-keyword">where</span> sno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;200515001&#x27;</span> <span class="hljs-keyword">and</span> cno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;4&#x27;</span><br><span class="hljs-number">15.</span>在课程表里添加一列：选课人数，设置触发器每门课如果有人选修了那么课程表里的选课人数相应修改，考虑批量插入选课记录的情况。<br><br>use student<br>go<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> course <span class="hljs-keyword">add</span> cnt <span class="hljs-type">int</span><span class="hljs-comment">--cnt为选课人数</span><br>update course <span class="hljs-keyword">set</span> cnt <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> sc.cno <span class="hljs-operator">=</span> course.cno)<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> course<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> cnt_add<br><span class="hljs-keyword">on</span> sc <br><span class="hljs-keyword">for</span> <span class="hljs-keyword">insert</span><br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">begin</span><br>if @<span class="hljs-variable">@ROWCOUNT</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br>update course <span class="hljs-keyword">set</span> cnt<span class="hljs-operator">=</span>cnt<span class="hljs-operator">+</span><span class="hljs-number">1</span><br><span class="hljs-keyword">where</span> course .cno <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> cno  <span class="hljs-keyword">from</span> inserted)<br><span class="hljs-keyword">else</span> <br>update course <span class="hljs-keyword">set</span> cnt<span class="hljs-operator">=</span>cnt<span class="hljs-operator">+</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(sno) <span class="hljs-keyword">from</span> inserted <span class="hljs-keyword">where</span> course .cno <span class="hljs-operator">=</span>inserted.cno ) <br><span class="hljs-keyword">where</span> course.cno <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> cno <span class="hljs-keyword">from</span> inserted)<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--测试</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> SC(Sno,Cno) <span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-string">&#x27;200515001&#x27;</span>,<span class="hljs-number">9</span>),<br>    (<span class="hljs-string">&#x27;200515002&#x27;</span>,<span class="hljs-number">9</span>),<br>    (<span class="hljs-string">&#x27;200515002&#x27;</span>,<span class="hljs-number">6</span>)<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> course<br><br><span class="hljs-comment">--16.设计一触发器，约束每门课程的课容量为120。</span><br>use student<br>go<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> ex16<br><span class="hljs-keyword">on</span> sc<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">insert</span><br><span class="hljs-keyword">as</span> <br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@count</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@kecheng</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@count</span><span class="hljs-operator">=</span><span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> cno <span class="hljs-keyword">from</span> inserted)<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@kecheng</span><span class="hljs-operator">=</span>cname <span class="hljs-keyword">from</span> course <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> cno <span class="hljs-keyword">from</span> inserted)<br>if(<span class="hljs-variable">@count</span><span class="hljs-operator">&gt;</span><span class="hljs-number">120</span>)<br><span class="hljs-keyword">begin</span><br>print <span class="hljs-string">&#x27;课程&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@kecheng</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;人数已经达到课容量&#x27;</span><br><span class="hljs-keyword">rollback</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">begin</span><br>print <span class="hljs-string">&#x27;选课&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@kecheng</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;成功&#x27;</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--测试</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> sc(sno,cno)<br><span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;200515009&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br><span class="hljs-comment">--方法二</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> ex162<br><span class="hljs-keyword">on</span> sc<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">insert</span><br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@cno</span> <span class="hljs-type">char</span>(<span class="hljs-number">4</span>)<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@cno</span> <span class="hljs-operator">=</span> cno <span class="hljs-keyword">from</span> inserted<br>if (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> sc.cno <span class="hljs-operator">=</span> <span class="hljs-variable">@cno</span> ) <span class="hljs-operator">&gt;=</span> <span class="hljs-number">60</span><br><span class="hljs-keyword">rollback</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--17.如果一门课的学分发生了修改， 则所有选修该课程并且及格的学生的总学分要做相应的修改，并输出学号，姓名，原总学分，新总学分</span><br>update student<span class="hljs-comment">--求出学生原来的总学分total</span><br><span class="hljs-keyword">set</span> total<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(credit) <span class="hljs-keyword">from</span> course,sc<br>           <span class="hljs-keyword">where</span> course.cno<span class="hljs-operator">=</span>sc.cno <span class="hljs-keyword">and</span> sc.sno<span class="hljs-operator">=</span>student.sno <span class="hljs-keyword">and</span> grade <span class="hljs-operator">&gt;=</span><span class="hljs-number">60</span>)<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> credit_change<br><span class="hljs-keyword">on</span> course<br><span class="hljs-keyword">for</span> update<br><span class="hljs-keyword">as</span><br>if update(credit)<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@cno</span> <span class="hljs-type">char</span>(<span class="hljs-number">4</span>)<br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@oldc</span> <span class="hljs-type">numeric</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@newc</span> <span class="hljs-type">numeric</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@cno</span> <span class="hljs-operator">=</span> cno, <span class="hljs-variable">@oldc</span> <span class="hljs-operator">=</span> credit <span class="hljs-keyword">from</span> deleted<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@newc</span> <span class="hljs-operator">=</span> credit <span class="hljs-keyword">from</span> inserted<br>update student  <br><span class="hljs-keyword">set</span> total <span class="hljs-operator">=</span> <span class="hljs-variable">@newc</span> <span class="hljs-operator">-</span> <span class="hljs-variable">@oldc</span> <span class="hljs-operator">+</span>total <br><span class="hljs-keyword">where</span> sno <span class="hljs-keyword">in</span> <br>(<span class="hljs-keyword">select</span> sno <span class="hljs-keyword">from</span> sc<br> <span class="hljs-keyword">where</span> cno <span class="hljs-operator">=</span> <span class="hljs-variable">@cno</span> <span class="hljs-keyword">and</span> grade <span class="hljs-operator">&gt;=</span> <span class="hljs-number">60</span>)<br><br><span class="hljs-keyword">select</span> sno, sname, total 新总学分, total <span class="hljs-operator">+</span> <span class="hljs-variable">@oldc</span> <span class="hljs-operator">-</span> <span class="hljs-variable">@newc</span> 原总学分<br><span class="hljs-keyword">from</span> student <br><span class="hljs-keyword">where</span> sno <span class="hljs-keyword">in</span> <br>(<span class="hljs-keyword">select</span> sno <br><span class="hljs-keyword">from</span> sc <br><span class="hljs-keyword">where</span> cno <span class="hljs-operator">=</span> <span class="hljs-variable">@cno</span> <span class="hljs-keyword">and</span> grade <span class="hljs-operator">&gt;=</span> <span class="hljs-number">60</span>)<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--测试</span><br>update course <span class="hljs-keyword">set</span> credit<span class="hljs-operator">=</span>credit<span class="hljs-operator">+</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-comment">--18．设有两个表：商品库存表（商品编号，商品名称，库存数量，库存单价，库存金额）；商品销售表（商品编号，商品名称，购货商号，销售数量，销售单价，销售金额）；设计一触发器实现如下业务规则：</span><br><span class="hljs-comment">--（1）保证在商品库存表中插入的数据，库存金额 = 库存数量 * 库存单价。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 商品销售表 <br>( <br>商品编号 <span class="hljs-type">char</span>(<span class="hljs-number">6</span>)<span class="hljs-keyword">PRIMARY</span> KEY,<br>商品名称 <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>)  <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,  <br>购货商 <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">NULL</span>,  <br>销售数量 <span class="hljs-type">INT</span> <span class="hljs-keyword">NULL</span>,<br>销售单价 MONEY <span class="hljs-keyword">NULL</span>,  <br>销售金额 MONEY <span class="hljs-keyword">NULL</span>  )  <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 商品库存表<br>  (  商品编号 <span class="hljs-type">char</span>(<span class="hljs-number">6</span>)<span class="hljs-keyword">PRIMARY</span> KEY,<br>商品名称 <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>)  <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>, <br>库存数量 <span class="hljs-type">INT</span> <span class="hljs-keyword">NULL</span>,  <br>库存单价 MONEY <span class="hljs-keyword">NULL</span>,  <br>库存金额 MONEY <span class="hljs-keyword">NULL</span>  ) <br>go<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> INSERT_商品库存表  <br><span class="hljs-keyword">ON</span> 商品库存表  <br><span class="hljs-keyword">FOR</span> <span class="hljs-keyword">INSERT</span> <br> <span class="hljs-keyword">AS</span>  <br> UPDATE 商品库存表  <br><span class="hljs-keyword">SET</span> 库存金额 <span class="hljs-operator">=</span> 库存数量 <span class="hljs-operator">*</span> 库存单价  <br><span class="hljs-keyword">WHERE</span> 商品编号 <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> 商品编号 <span class="hljs-keyword">from</span> INSERTED)  <br>go<br><span class="hljs-comment">--测试</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 商品库存表(商品编号,商品名称,库存数量,库存单价,库存金额) <br><span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;100000&#x27;</span>, <span class="hljs-string">&#x27;红塔山&#x27;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">12</span>,<span class="hljs-number">1200</span>), <br> (<span class="hljs-string">&#x27;100001&#x27;</span>,<span class="hljs-string">&#x27;将军&#x27;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">22</span>,<span class="hljs-keyword">NULL</span> ), <br>(<span class="hljs-string">&#x27;100002&#x27;</span> ,<span class="hljs-string">&#x27;中华&#x27;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">60</span>,<span class="hljs-number">500</span> ), <br>(<span class="hljs-string">&#x27;100003&#x27;</span>,<span class="hljs-string">&#x27;玉溪&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">30</span>,<span class="hljs-number">0</span> )<br>go<br><br><span class="hljs-comment">--（2）如果销售的商品不存在库存或者库存为零，则返回提示信息。否则自动减少商品库存表中对应商品的库存数量和库存金额。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> INSERT_商品销售表 <br><span class="hljs-keyword">ON</span> 商品销售表 <br><span class="hljs-keyword">FOR</span> <span class="hljs-keyword">INSERT</span> <br><span class="hljs-keyword">AS</span> <br><span class="hljs-keyword">BEGIN</span> TRANSACTION <br><span class="hljs-comment">--检查数据的合法性：销售的商品是否有库存，或者库存是否大于零 </span><br>IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> ( <br><span class="hljs-keyword">SELECT</span> 库存数量 <br><span class="hljs-keyword">FROM</span> 商品库存表 <br><span class="hljs-keyword">WHERE</span> 商品编号 <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> 商品编号 <span class="hljs-keyword">FROM</span> INSERTED) <br>) <br><span class="hljs-keyword">BEGIN</span> <br><span class="hljs-comment">--返回错误提示 </span><br>RAISERROR(<span class="hljs-string">&#x27;错误！该商品不存在库存，不能销售！&#x27;</span>,<span class="hljs-number">16</span>,<span class="hljs-number">1</span>) <br><span class="hljs-comment">--回滚事务 </span><br><span class="hljs-keyword">ROLLBACK</span> <br><span class="hljs-keyword">RETURN</span> <br><span class="hljs-keyword">END</span> <br><br>IF <span class="hljs-keyword">EXISTS</span> ( <br><span class="hljs-keyword">SELECT</span> 库存数量 <br><span class="hljs-keyword">FROM</span> 商品库存表 <br><span class="hljs-keyword">WHERE</span> 商品编号 <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> 商品编号 <span class="hljs-keyword">FROM</span> INSERTED) <span class="hljs-keyword">AND</span> <br>库存数量 <span class="hljs-operator">&lt;=</span> <span class="hljs-number">0</span> <br>) <br><span class="hljs-keyword">BEGIN</span> <br><span class="hljs-comment">--返回错误提示 </span><br>RAISERROR(<span class="hljs-string">&#x27;错误！该商品库存小于等于0，不能销售!&#x27;</span>,<span class="hljs-number">16</span>,<span class="hljs-number">1</span>) <span class="hljs-comment">--返回用户定义的错误信息</span><br><span class="hljs-comment">--回滚事务 </span><br><span class="hljs-keyword">ROLLBACK</span> <br><span class="hljs-keyword">RETURN</span> <br><span class="hljs-keyword">END</span> <br><br><span class="hljs-comment">--对合法的数据进行处理 </span><br><br><span class="hljs-comment">--强制执行下列语句，保证业务规则 </span><br>UPDATE 商品销售表 <br><span class="hljs-keyword">SET</span> 销售金额 <span class="hljs-operator">=</span> 销售数量 <span class="hljs-operator">*</span> 销售单价 <br><span class="hljs-keyword">WHERE</span> 商品编号 <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> 商品编号 <span class="hljs-keyword">FROM</span> INSERTED) <br><br><span class="hljs-keyword">DECLARE</span> @商品编号 <span class="hljs-type">CHAR</span>(<span class="hljs-number">6</span>) <br><span class="hljs-keyword">SET</span> @商品编号 <span class="hljs-operator">=</span> (<span class="hljs-keyword">SELECT</span> 商品编号 <span class="hljs-keyword">FROM</span> INSERTED) <br><br><span class="hljs-keyword">DECLARE</span> @销售数量 MONEY <br><span class="hljs-keyword">SET</span> @销售数量 <span class="hljs-operator">=</span> (<span class="hljs-keyword">SELECT</span> 销售数量 <span class="hljs-keyword">FROM</span> INSERTED) <br><br>UPDATE 商品库存表 <br><span class="hljs-keyword">SET</span> 库存数量 <span class="hljs-operator">=</span> 库存数量 <span class="hljs-operator">-</span> @销售数量, <br>库存金额 <span class="hljs-operator">=</span> (库存数量 <span class="hljs-operator">-</span> @销售数量)<span class="hljs-operator">*</span>库存单价 <br><span class="hljs-keyword">WHERE</span> 商品编号 <span class="hljs-operator">=</span> @商品编号 <br><span class="hljs-keyword">COMMIT</span> TRANSACTION <br>GO <br><span class="hljs-comment">--测试</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 商品销售表(商品编号,商品名称,购货商,销售数量,销售单价,销售金额) <br><span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;100000&#x27;</span> ,<span class="hljs-string">&#x27;红塔山&#x27;</span>,<span class="hljs-string">&#x27;利群&#x27;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">12</span>,<span class="hljs-number">120</span>)<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 商品销售表(商品编号,商品名称,购货商,销售数量,销售单价,销售金额) <br><span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;100001&#x27;</span>,<span class="hljs-string">&#x27;将军&#x27;</span>,<span class="hljs-string">&#x27;家家悦&#x27;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">22</span>,<span class="hljs-number">1200</span>)<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 商品销售表(商品编号,商品名称,购货商,销售数量,销售单价,销售金额) <br><span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;100004&#x27;</span>,<span class="hljs-string">&#x27;红河&#x27;</span>,<span class="hljs-string">&#x27;家家悦&#x27;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">22</span>,<span class="hljs-number">220</span>)<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 商品销售表(商品编号,商品名称,购货商,销售数量,销售单价,销售金额) <br><span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;100003&#x27;</span>,<span class="hljs-string">&#x27;玉溪&#x27;</span>,<span class="hljs-string">&#x27;家家悦&#x27;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">22</span>,<span class="hljs-number">220</span>)<br><span class="hljs-comment">--以下18题是为下一个实验做准备的</span><br><span class="hljs-comment">--18.创建借书表：lendt(bno（索书号）,sno（学号）,ldate（借阅日期）,rdate（应还日期），relend（是否续借）)</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> LENDT(<br>BNO <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>SNO <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>LDATE DATETIME ,<br>RDATE DATETIME,<br>RELEND <span class="hljs-type">CHAR</span> (<span class="hljs-number">2</span>))<br><br><span class="hljs-comment">--请为该表增加四个约束条件：</span><br><span class="hljs-comment">--（1）增加主码约束（bno,sno）</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> LENDT<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> PK <span class="hljs-keyword">PRIMARY</span> KEY(BNO,SNO)<br><span class="hljs-comment">--（2）为借阅日期增加默认值约束，默认值为当前日期</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> LENDT<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> C_GETDAY <span class="hljs-keyword">DEFAULT</span> GETDATE() <span class="hljs-keyword">FOR</span> LDATE<br><span class="hljs-comment">--（3）为应还日期增加默认值约束，默认值为当前日期+30天</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> LENDT<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> C_ADDDAY <span class="hljs-keyword">DEFAULT</span> DATEADD(<span class="hljs-keyword">DAY</span>,<span class="hljs-number">30</span>,GETDATE())<span class="hljs-keyword">for</span> RDATE<br><span class="hljs-comment">--（4）为是否续借增加默认值约束，默认值为否</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> LENDT<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> C_RELEND <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;否&#x27;</span> <span class="hljs-keyword">FOR</span> RELEND <br><span class="hljs-comment">--19．建立教师表（教工编号，姓名，专业，职称，工资）和工资变化表（教工编号，原工资，新工资），</span><br><span class="hljs-comment">--设计触发器实现教授的工资不得低于4000元，如果低于4000元则自动改为4000元。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> TEACHER(<br>TNO <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">PRIMARY</span> KEY,<br>TNAME <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>ZY <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>ZC <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>SALARY <span class="hljs-type">INT</span>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> SALARY_CHANGE(<br>TNO <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>),<br>OLD_SALARY <span class="hljs-type">INT</span> ,<br>NEW_SALARY <span class="hljs-type">INT</span>)<br><br>GO <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> T1<br><span class="hljs-keyword">ON</span> TEACHER <br><span class="hljs-keyword">FOR</span> <span class="hljs-keyword">INSERT</span>,UPDATE<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@SA</span> <span class="hljs-type">INT</span> ,<span class="hljs-variable">@JOB</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">20</span>),<span class="hljs-variable">@TNO</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>)<br><span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@JOB</span><span class="hljs-operator">=</span>ZC,<span class="hljs-variable">@SA</span><span class="hljs-operator">=</span>SALARY,<span class="hljs-variable">@TNO</span><span class="hljs-operator">=</span>TNO <span class="hljs-keyword">FROM</span> INSERTED<br>IF(<span class="hljs-variable">@JOB</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;教授&#x27;</span><span class="hljs-keyword">AND</span> <span class="hljs-variable">@SA</span><span class="hljs-operator">&lt;</span><span class="hljs-number">4000</span>)<br>UPDATE TEACHER <br><span class="hljs-keyword">SET</span> SALARY<span class="hljs-operator">=</span><span class="hljs-number">4000</span><br><span class="hljs-keyword">WHERE</span> TNO<span class="hljs-operator">=</span><span class="hljs-variable">@TNO</span><br><span class="hljs-keyword">END</span><br><span class="hljs-comment">--测试</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teacher <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;200199801&#x27;</span>,<span class="hljs-string">&#x27;丁源&#x27;</span>,<span class="hljs-string">&#x27;计算机&#x27;</span>,<span class="hljs-string">&#x27;教授&#x27;</span>,<span class="hljs-number">8500</span>)<span class="hljs-comment">/*正常执行,触发器不执行*/</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teacher <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;200199802&#x27;</span>,<span class="hljs-string">&#x27;王伟源&#x27;</span>,<span class="hljs-string">&#x27;计算机&#x27;</span>,<span class="hljs-string">&#x27;教授&#x27;</span>,<span class="hljs-number">3500</span>)<br><span class="hljs-comment">--20.使用第19题的两个表设计触发器实现如果员工的工资发生变化则向工资变化表插入一条记录，包含教工编号，原工资，新工资。</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> tri20 <span class="hljs-keyword">on</span> teacher<br>after update<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@a</span> <span class="hljs-type">char</span>(<span class="hljs-number">9</span>), <span class="hljs-variable">@b</span> <span class="hljs-type">int</span>, <span class="hljs-variable">@c</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@a</span> <span class="hljs-operator">=</span> tno, <span class="hljs-variable">@b</span> <span class="hljs-operator">=</span> salary <span class="hljs-keyword">from</span> deleted<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@c</span> <span class="hljs-operator">=</span> salary <span class="hljs-keyword">from</span> inserted<br>if (<span class="hljs-variable">@b</span><span class="hljs-operator">&lt;&gt;</span><span class="hljs-variable">@c</span>) <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> salary_change<br><span class="hljs-keyword">values</span>(<span class="hljs-variable">@a</span>, <span class="hljs-variable">@b</span>, <span class="hljs-variable">@c</span>)<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--测试</span><br>update teacher<br><span class="hljs-keyword">set</span> salary<span class="hljs-operator">=</span>salary<span class="hljs-operator">+</span><span class="hljs-number">200</span> <span class="hljs-keyword">where</span> tno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;200199802&#x27;</span><br><span class="hljs-comment">--21. 针对northwind数据库实现触发器：每个员工每天处理订单的数量不能超过100，如果超出100个则拒绝处理，并提示“处理订单数量超出限额”</span><br>use Northwind;<br>go<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> order_limit<br><span class="hljs-keyword">on</span> Orders<br>after <span class="hljs-keyword">insert</span><br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@EID</span> <span class="hljs-type">int</span><br><br><span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">select</span> <span class="hljs-variable">@EID</span> <span class="hljs-operator">=</span> EmployeeID <span class="hljs-keyword">from</span> inserted<br>if (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> Orders <span class="hljs-keyword">where</span> Orders.RequiredDate <span class="hljs-operator">=</span> getdate() <span class="hljs-keyword">and</span> Orders.EmployeeID <span class="hljs-operator">=</span> <span class="hljs-variable">@EID</span> ) <span class="hljs-operator">&gt;=</span> <span class="hljs-number">100</span><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">rollback</span><br>print<span class="hljs-string">&#x27;处理订单数量超出限额&#x27;</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--22.针对northwind数据库实现触发器：给orders表添加zje（订单总金额）属性列，要求保留两位小数，设置触发器实现当产生了新的订单明细之后将总金额更新到到订单表里</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> orders<br><span class="hljs-keyword">add</span> zje <span class="hljs-type">numeric</span>(<span class="hljs-number">18</span>, <span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> cal_sum<br><span class="hljs-keyword">on</span> [<span class="hljs-keyword">Order</span> Details]<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">insert</span><br><span class="hljs-keyword">as</span> <br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@OID</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@sum</span> <span class="hljs-type">numeric</span>(<span class="hljs-number">18</span>, <span class="hljs-number">2</span>)<br><span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">select</span> <span class="hljs-variable">@OID</span> <span class="hljs-operator">=</span> OrderID <span class="hljs-keyword">from</span> inserted<br><span class="hljs-keyword">set</span> <span class="hljs-variable">@sum</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(UnitPrice <span class="hljs-operator">*</span> Quantity <span class="hljs-operator">*</span> (<span class="hljs-number">1</span> <span class="hljs-operator">-</span> Discount)) <span class="hljs-keyword">from</span> Order_Details <span class="hljs-keyword">where</span> Order_Details.OrderID <span class="hljs-operator">=</span> <span class="hljs-variable">@OID</span>)<br>update orders <span class="hljs-keyword">set</span> zje <span class="hljs-operator">=</span> <span class="hljs-variable">@sum</span> <span class="hljs-keyword">where</span> OrderID <span class="hljs-operator">=</span> <span class="hljs-variable">@OID</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h2 id="实验7"><a href="#实验7" class="headerlink" title="实验7"></a>实验7</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--使用数据库student，完成以下操作，并写出相应的代码</span><br><span class="hljs-comment">--1.用函数实现：求某个专业选修了某门课程的学生人数，并调用函数求出计算机系“数据库”课程的选课人数。</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> tongji(<span class="hljs-variable">@dept</span> <span class="hljs-keyword">as</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<span class="hljs-variable">@cname</span>  <span class="hljs-keyword">as</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>))<br><span class="hljs-keyword">returns</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@sum</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@sum</span><span class="hljs-operator">=</span><span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<br><span class="hljs-keyword">from</span> sc,course,student<br><span class="hljs-keyword">where</span> sc.cno<span class="hljs-operator">=</span>course.cno <span class="hljs-keyword">and</span> sc.sno<span class="hljs-operator">=</span>student.sno <span class="hljs-keyword">and</span> course.cname<span class="hljs-operator">=</span><span class="hljs-variable">@cname</span> <span class="hljs-keyword">and</span> student.sdept<span class="hljs-operator">=</span><span class="hljs-variable">@dept</span><br><span class="hljs-keyword">return</span> <span class="hljs-variable">@sum</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--测试</span><br><span class="hljs-keyword">select</span> dbo.tongji(<span class="hljs-string">&#x27;CS&#x27;</span>,<span class="hljs-string">&#x27;数据库&#x27;</span>)<span class="hljs-keyword">as</span> 人数 <br><span class="hljs-comment">--2.用内嵌表值函数实现：查询某个专业所有学生所选的每门课的平均成绩；调用该函数求出计算机系的所有课程的平均成绩。</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> cavg2(<span class="hljs-variable">@dept</span> <span class="hljs-keyword">as</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>))<br><span class="hljs-keyword">returns</span> <span class="hljs-keyword">table</span> <br><span class="hljs-keyword">as</span> <span class="hljs-keyword">return</span>(<br><span class="hljs-keyword">select</span> course.cno,<span class="hljs-built_in">avg</span>(grade) 平均成绩<br><span class="hljs-keyword">from</span> sc,course,student<br><span class="hljs-keyword">where</span> sc.cno<span class="hljs-operator">=</span>course.cno <span class="hljs-keyword">and</span> sc.sno<span class="hljs-operator">=</span>student.sno <span class="hljs-keyword">and</span> student.sdept<span class="hljs-operator">=</span><span class="hljs-variable">@dept</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> course.cno)<br><span class="hljs-comment">--测试</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>  dbo.cavg2(<span class="hljs-string">&#x27;CS&#x27;</span>)<br><span class="hljs-comment">--3.创建多语句表值函数，通过学号作为实参调用该函数，可显示该学生的姓名以及各门课的成绩和学分，</span><br><span class="hljs-comment">--调用该函数求出“200515002”的各门课成绩和学分。</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> gstu (<span class="hljs-variable">@no</span> <span class="hljs-type">char</span>(<span class="hljs-number">9</span>)) <span class="hljs-keyword">returns</span> <span class="hljs-variable">@score</span> <span class="hljs-keyword">table</span> <br>( xs_no <span class="hljs-type">char</span>(<span class="hljs-number">9</span>) ,<br>xs_name <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>) ,<br>kc_name  <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) ,<br>cj <span class="hljs-type">int</span> ,<br>xf <span class="hljs-type">numeric</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>) ) <br><span class="hljs-keyword">as</span> <br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">insert</span> <span class="hljs-variable">@score</span>  <span class="hljs-keyword">select</span> s.sno,s.sname,c.cname,sc.grade,c.credit  <br><span class="hljs-keyword">from</span> student s,course  c, sc<br><span class="hljs-keyword">where</span> s.sno<span class="hljs-operator">=</span>sc.sno <span class="hljs-keyword">AND</span> c.cno<span class="hljs-operator">=</span>sc.cno<br><span class="hljs-keyword">and</span>  s.sno<span class="hljs-operator">=</span><span class="hljs-variable">@no</span> <br><span class="hljs-keyword">return</span> <br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--测试</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> gstu (<span class="hljs-string">&#x27;200515002&#x27;</span>)<br><br><br><span class="hljs-comment">--4.编写一个存储过程，统计某门课程的优秀（90-100）人数、良好（80-89）人数、中等（70-79）人数、及格（60-69）人数和及格率，</span><br><span class="hljs-comment">--其输入参数是课程号，输出的是各级别人数及及格率，及格率的形式是90.25%，执行存储过程，在消息区显示1号课程的统计信息。</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> p1<br><span class="hljs-variable">@cno</span> <span class="hljs-type">char</span>(<span class="hljs-number">4</span>),<br><span class="hljs-variable">@great</span> <span class="hljs-type">int</span> output,<br><span class="hljs-variable">@good</span> <span class="hljs-type">int</span> output,<br><span class="hljs-variable">@medium</span> <span class="hljs-type">int</span> output,<br><span class="hljs-variable">@pass</span> <span class="hljs-type">int</span> output,<br><span class="hljs-variable">@passper</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) output<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@sum</span> <span class="hljs-type">float</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@great</span><span class="hljs-operator">=</span><span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span> <span class="hljs-keyword">and</span> grade <span class="hljs-keyword">between</span> <span class="hljs-number">90</span> <span class="hljs-keyword">and</span> <span class="hljs-number">100</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@good</span><span class="hljs-operator">=</span><span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span> <span class="hljs-keyword">and</span> grade <span class="hljs-keyword">between</span> <span class="hljs-number">80</span> <span class="hljs-keyword">and</span> <span class="hljs-number">89</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@medium</span><span class="hljs-operator">=</span><span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span> <span class="hljs-keyword">and</span> grade <span class="hljs-keyword">between</span> <span class="hljs-number">70</span> <span class="hljs-keyword">and</span> <span class="hljs-number">79</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@pass</span><span class="hljs-operator">=</span><span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span> <span class="hljs-keyword">and</span> grade <span class="hljs-keyword">between</span> <span class="hljs-number">60</span> <span class="hljs-keyword">and</span> <span class="hljs-number">69</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@sum</span><span class="hljs-operator">=</span><span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@passper</span> <span class="hljs-operator">=</span> str(<span class="hljs-built_in">cast</span>((<span class="hljs-variable">@great</span><span class="hljs-operator">+</span><span class="hljs-variable">@good</span><span class="hljs-operator">+</span><span class="hljs-variable">@medium</span><span class="hljs-operator">+</span><span class="hljs-variable">@pass</span>)<span class="hljs-operator">*</span><span class="hljs-number">100</span><span class="hljs-operator">/</span><span class="hljs-variable">@sum</span> <span class="hljs-keyword">as</span> <span class="hljs-type">numeric</span>(<span class="hljs-number">5</span>,<span class="hljs-number">2</span>)))<br><span class="hljs-comment">--select @passper=(str(cast((@great)*100.0/@sum*1.0 as ) ) +&#x27;%&#x27;)</span><br><span class="hljs-keyword">declare</span><span class="hljs-variable">@gr</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@go</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@me</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@pa</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@pap</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>)<br><span class="hljs-keyword">exec</span> p1 <span class="hljs-string">&#x27;1&#x27;</span> ,<br><span class="hljs-variable">@gr</span> output,<br><span class="hljs-variable">@go</span>  output,<br><span class="hljs-variable">@me</span>  output,<br><span class="hljs-variable">@pa</span> output,<br><span class="hljs-variable">@pap</span> output<br>print <span class="hljs-string">&#x27;优秀人数&#x27;</span><span class="hljs-operator">+</span>str(<span class="hljs-variable">@gr</span>) <br>print <span class="hljs-string">&#x27;良好人数&#x27;</span><span class="hljs-operator">+</span>str(<span class="hljs-variable">@go</span>)  <br>print <span class="hljs-string">&#x27;中等人数&#x27;</span><span class="hljs-operator">+</span>str(<span class="hljs-variable">@me</span>) <br>print <span class="hljs-string">&#x27;及格人数&#x27;</span><span class="hljs-operator">+</span>str(<span class="hljs-variable">@pa</span>) <br>print <span class="hljs-string">&#x27;及格率&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@pap</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;%&#x27;</span><br><br><br><span class="hljs-comment">--5.创建一个带有输入参数的存储过程，该存储过程根据传入的学生名字，查询其选修的课程名和成绩，</span><br><span class="hljs-comment">--执行存储过程，在消息区显示赵箐箐的相关信息。</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> p5 <span class="hljs-variable">@sname</span> <span class="hljs-type">nchar</span>(<span class="hljs-number">6</span>)<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@cname</span> <span class="hljs-type">char</span>(<span class="hljs-number">20</span>) , <span class="hljs-variable">@grade</span> <span class="hljs-type">int</span> <br><span class="hljs-keyword">declare</span> c <span class="hljs-keyword">scroll</span> <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span><br><span class="hljs-keyword">select</span>course.cname,sc.grade<br><span class="hljs-keyword">from</span> sc,student,course<br><span class="hljs-keyword">where</span> sc.cno<span class="hljs-operator">=</span>course.cno <span class="hljs-keyword">and</span> sc.sno<span class="hljs-operator">=</span>student.sno <span class="hljs-keyword">and</span> student.sname<span class="hljs-operator">=</span><span class="hljs-variable">@sname</span><br><span class="hljs-keyword">open</span> c<br>print <span class="hljs-string">&#x27;课程名&#x27;</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;                    &#x27;</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;成绩&#x27;</span><br><span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> c <span class="hljs-keyword">into</span> <span class="hljs-variable">@cname</span>,<span class="hljs-variable">@grade</span><br>while @<span class="hljs-variable">@FETCH</span>_STATUS<span class="hljs-operator">=</span><span class="hljs-number">0</span><br><span class="hljs-keyword">begin</span><br>print <span class="hljs-variable">@cname</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;      &#x27;</span><span class="hljs-operator">+</span><span class="hljs-built_in">cast</span>(<span class="hljs-variable">@grade</span> <span class="hljs-keyword">as</span> <span class="hljs-type">char</span>(<span class="hljs-number">4</span>))<br><span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> c <span class="hljs-keyword">into</span> <span class="hljs-variable">@cname</span>,<span class="hljs-variable">@grade</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">close</span> c<br><span class="hljs-keyword">deallocate</span> c<br><span class="hljs-comment">--测试</span><br><span class="hljs-keyword">exec</span> p5 <span class="hljs-string">&#x27;赵菁菁&#x27;</span><br><br><span class="hljs-comment">--6.以基本表 course为基础，完成如下操作</span><br><span class="hljs-comment">--生成显示如下报表形式的游标：报表首先列出学生的学号和姓名，然后在此学生下，</span><br><span class="hljs-comment">--列出其所选的全部课程的课程号、课程名和学分；依此类推，直到列出全部学生。</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@sno</span> <span class="hljs-type">char</span>(<span class="hljs-number">9</span>), <span class="hljs-variable">@sname</span> <span class="hljs-type">nchar</span>(<span class="hljs-number">6</span>)<br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@cno</span> <span class="hljs-type">char</span>(<span class="hljs-number">4</span>),<span class="hljs-variable">@cname</span> <span class="hljs-type">char</span>(<span class="hljs-number">20</span>),<span class="hljs-variable">@credit</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">declare</span> c1 <span class="hljs-keyword">scroll</span> <span class="hljs-keyword">cursor</span><span class="hljs-keyword">for</span><br><span class="hljs-keyword">select</span> student.sno,student.sname<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">open</span> c1<br><span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> c1 <span class="hljs-keyword">into</span> <span class="hljs-variable">@sno</span>,<span class="hljs-variable">@sname</span><br>while @<span class="hljs-variable">@FETCH</span>_STATUS<span class="hljs-operator">=</span><span class="hljs-number">0</span><br><span class="hljs-keyword">begin</span><br>print <span class="hljs-variable">@sno</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;    &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@sname</span><br>print<span class="hljs-string">&#x27;_______________________________________&#x27;</span><br>print <span class="hljs-string">&#x27;课程号&#x27;</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;    &#x27;</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;课程名&#x27;</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;            &#x27;</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;学分&#x27;</span><br><span class="hljs-keyword">declare</span> c2 <span class="hljs-keyword">scroll</span> <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span><br><span class="hljs-keyword">select</span> course.cno,course.cname,course.credit<br><span class="hljs-keyword">from</span> course,sc<br><span class="hljs-keyword">where</span> course.cno<span class="hljs-operator">=</span>sc.cno <span class="hljs-keyword">and</span> sc.sno<span class="hljs-operator">=</span><span class="hljs-variable">@sno</span><br><span class="hljs-keyword">open</span> c2<br><span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> c2 <span class="hljs-keyword">into</span> <span class="hljs-variable">@cno</span>,<span class="hljs-variable">@cname</span>,<span class="hljs-variable">@credit</span><br>while @<span class="hljs-variable">@FETCH</span>_STATUS<span class="hljs-operator">=</span><span class="hljs-number">0</span><br><span class="hljs-keyword">begin</span> <br>print <span class="hljs-variable">@cno</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;      &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@cname</span><span class="hljs-operator">+</span><span class="hljs-built_in">cast</span>(<span class="hljs-variable">@credit</span> <span class="hljs-keyword">as</span> <span class="hljs-type">char</span>(<span class="hljs-number">4</span>))<br><span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> c2 <span class="hljs-keyword">into</span> <span class="hljs-variable">@cno</span>,<span class="hljs-variable">@cname</span>,<span class="hljs-variable">@credit</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">close</span> c2<br><span class="hljs-keyword">deallocate</span> c2<br>print<span class="hljs-string">&#x27;=======================================&#x27;</span><br><span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> c1 <span class="hljs-keyword">into</span> <span class="hljs-variable">@sno</span>,<span class="hljs-variable">@sname</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">close</span> c1<br><span class="hljs-keyword">deallocate</span> c1<br><br><span class="hljs-comment">--7. 请设计一个存储过程实现下列功能：</span><br><span class="hljs-comment">--判断某个专业某门课程成绩排名为n的学生的成绩是否低于该门课程的平均分，如果低于平均分</span><br><span class="hljs-comment">--，则将其成绩改为平均分，否则输出学号、姓名、课程号、课程名、成绩。（提示：可以在存储过程内部使用游标）。</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> ex7 <span class="hljs-variable">@dept</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<span class="hljs-variable">@cno</span> <span class="hljs-type">char</span>(<span class="hljs-number">4</span>),<span class="hljs-variable">@n</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@avggrade</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@avggrade</span><span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(grade)<span class="hljs-keyword">from</span> sc<span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span>)<br><span class="hljs-keyword">declare</span> c <span class="hljs-keyword">scroll</span> <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span><br><span class="hljs-keyword">select</span> student.sno,sname,sc.cno,cname,grade <span class="hljs-keyword">from</span> student,sc,course<br><span class="hljs-keyword">where</span> student.sno<span class="hljs-operator">=</span>sc.sno <span class="hljs-keyword">and</span> course.cno<span class="hljs-operator">=</span>sc.cno <span class="hljs-keyword">and</span> course.cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span> <span class="hljs-keyword">and</span> student.sdept<span class="hljs-operator">=</span><span class="hljs-variable">@dept</span> <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> grade <span class="hljs-keyword">desc</span><br><span class="hljs-keyword">open</span> c<br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@sno</span> <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),<span class="hljs-variable">@sname</span> <span class="hljs-type">nchar</span>(<span class="hljs-number">6</span>),<span class="hljs-variable">@cno1</span>  <span class="hljs-type">char</span>(<span class="hljs-number">4</span>),<span class="hljs-variable">@cname</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<span class="hljs-variable">@grade</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">fetch</span> absolute <span class="hljs-variable">@n</span> <span class="hljs-keyword">from</span> c <span class="hljs-keyword">into</span> <span class="hljs-variable">@sno</span>,<span class="hljs-variable">@sname</span>,<span class="hljs-variable">@cno1</span>,<span class="hljs-variable">@cname</span>,<span class="hljs-variable">@grade</span><br>if <span class="hljs-variable">@grade</span><span class="hljs-operator">&gt;</span><span class="hljs-variable">@avggrade</span><br>print <span class="hljs-variable">@sno</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;   &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@sname</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;    &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@cno1</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;    &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@cname</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;    &#x27;</span><span class="hljs-operator">+</span><span class="hljs-built_in">cast</span>(<span class="hljs-variable">@grade</span> <span class="hljs-keyword">as</span> <span class="hljs-type">char</span>(<span class="hljs-number">4</span>))<br><span class="hljs-keyword">else</span><br>update sc<br><span class="hljs-keyword">set</span> grade<span class="hljs-operator">=</span><span class="hljs-variable">@avggrade</span><br><span class="hljs-keyword">where</span> <span class="hljs-keyword">current</span> <span class="hljs-keyword">of</span> c<br><span class="hljs-keyword">close</span> c<br><span class="hljs-keyword">deallocate</span> c<br><span class="hljs-comment">--测试</span><br><span class="hljs-keyword">exec</span>  ex7 <span class="hljs-string">&#x27;CS&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-number">3</span><br><span class="hljs-comment">--8.对student数据库设计存储过程，实现将某门课程成绩低于课程平均成绩的学生成绩都加上3分。（提示可以使用存储过程内部使用游标）</span><br><span class="hljs-comment">--方法一：</span><br><span class="hljs-keyword">create</span> proc addgrade  <span class="hljs-variable">@cno</span> <span class="hljs-type">char</span>(<span class="hljs-number">4</span>)<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@avergrade</span> <span class="hljs-type">decimal</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>)<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@avergrade</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">AVG</span>(grade)<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">where</span> cno <span class="hljs-operator">=</span> <span class="hljs-variable">@cno</span><br>update sc<br><span class="hljs-keyword">set</span> grade <span class="hljs-operator">=</span> grade<span class="hljs-operator">+</span><span class="hljs-number">3</span><br><span class="hljs-keyword">where</span> cno <span class="hljs-operator">=</span> <span class="hljs-variable">@cno</span> <span class="hljs-keyword">and</span> grade <span class="hljs-operator">&lt;=</span> <span class="hljs-variable">@avergrade</span><br>go<br><br><span class="hljs-comment">--测试：</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-keyword">exec</span> addgrade <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-comment">--方法二：</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> addgrade1 <span class="hljs-variable">@cno</span> <span class="hljs-type">char</span>(<span class="hljs-number">4</span>)<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@avg</span> <span class="hljs-type">decimal</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>),<span class="hljs-variable">@sno</span> <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),<span class="hljs-variable">@grade</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">set</span> <span class="hljs-variable">@avg</span><span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(grade) <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span>)<br><span class="hljs-keyword">declare</span> c <span class="hljs-keyword">scroll</span> <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span> <br><span class="hljs-keyword">select</span> sno,grade <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span>  cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span><br><span class="hljs-keyword">open</span> c<br><span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> c <span class="hljs-keyword">into</span> <span class="hljs-variable">@sno</span>,<span class="hljs-variable">@grade</span><br>while(@<span class="hljs-variable">@FETCH</span>_STATUS<span class="hljs-operator">=</span><span class="hljs-number">0</span>)<br><span class="hljs-keyword">begin</span><br>if(<span class="hljs-variable">@grade</span><span class="hljs-operator">&lt;</span><span class="hljs-variable">@avg</span>)<br>update sc <span class="hljs-keyword">set</span> grade<span class="hljs-operator">=</span><span class="hljs-variable">@grade</span><span class="hljs-operator">+</span><span class="hljs-number">3</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">current</span> <span class="hljs-keyword">of</span> c<br><span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> c <span class="hljs-keyword">into</span> <span class="hljs-variable">@sno</span>,<span class="hljs-variable">@grade</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">close</span> c<br><span class="hljs-keyword">deallocate</span> c<br><span class="hljs-comment">--测试</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-keyword">exec</span> addgrade1 <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-comment">--8.对student数据库设计存储过程，实现将某门课程成绩低于课程平均成绩的学生成绩都加上3分。（提示可以使用存储过程内部使用游标）</span><br><span class="hljs-comment">--方法一：</span><br><span class="hljs-keyword">create</span> proc addgrade  <span class="hljs-variable">@cno</span> <span class="hljs-type">char</span>(<span class="hljs-number">4</span>)<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@avergrade</span> <span class="hljs-type">decimal</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>)<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@avergrade</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">AVG</span>(grade)<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">where</span> cno <span class="hljs-operator">=</span> <span class="hljs-variable">@cno</span><br>update sc<br><span class="hljs-keyword">set</span> grade <span class="hljs-operator">=</span> grade<span class="hljs-operator">+</span><span class="hljs-number">3</span><br><span class="hljs-keyword">where</span> cno <span class="hljs-operator">=</span> <span class="hljs-variable">@cno</span> <span class="hljs-keyword">and</span> grade <span class="hljs-operator">&lt;=</span> <span class="hljs-variable">@avergrade</span><br>go<br><br><span class="hljs-comment">--测试：</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-keyword">exec</span> addgrade <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-comment">--方法二：</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> addgrade1 <span class="hljs-variable">@cno</span> <span class="hljs-type">char</span>(<span class="hljs-number">4</span>)<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@avg</span> <span class="hljs-type">decimal</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>),<span class="hljs-variable">@sno</span> <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),<span class="hljs-variable">@grade</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">set</span> <span class="hljs-variable">@avg</span><span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(grade) <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span>)<br><span class="hljs-keyword">declare</span> c <span class="hljs-keyword">scroll</span> <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span> <br><span class="hljs-keyword">select</span> sno,grade <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span>  cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span><br><span class="hljs-keyword">open</span> c<br><span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> c <span class="hljs-keyword">into</span> <span class="hljs-variable">@sno</span>,<span class="hljs-variable">@grade</span><br>while(@<span class="hljs-variable">@FETCH</span>_STATUS<span class="hljs-operator">=</span><span class="hljs-number">0</span>)<br><span class="hljs-keyword">begin</span><br>if(<span class="hljs-variable">@grade</span><span class="hljs-operator">&lt;</span><span class="hljs-variable">@avg</span>)<br>update sc <span class="hljs-keyword">set</span> grade<span class="hljs-operator">=</span><span class="hljs-variable">@grade</span><span class="hljs-operator">+</span><span class="hljs-number">3</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">current</span> <span class="hljs-keyword">of</span> c<br><span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> c <span class="hljs-keyword">into</span> <span class="hljs-variable">@sno</span>,<span class="hljs-variable">@grade</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">close</span> c<br><span class="hljs-keyword">deallocate</span> c<br><span class="hljs-comment">--测试</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-keyword">exec</span> addgrade1 <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-comment">--9.设计存储过程实现学生转专业功能：某个学生（学号）在转专业时，如果想转入的专业是计算机专业那么要求该学生的平均成绩必须超过95分，否则不允许转专业，并将转专业的信息插入到一个转专业的表里，changesd(学号，原专业，新专业，平均成绩)</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> changesd<br>(学号 <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),原专业 <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),新专业 <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),平均成绩 <span class="hljs-type">numeric</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>))<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> change <span class="hljs-variable">@sno</span> <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),<span class="hljs-variable">@n</span>_sdept <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>)<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@avg</span> <span class="hljs-type">numeric</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>),<span class="hljs-variable">@o</span>_sdept <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>)<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@avg</span><span class="hljs-operator">=</span><span class="hljs-built_in">avg</span>(Grade)<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">where</span>  Sno<span class="hljs-operator">=</span><span class="hljs-variable">@sno</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@o</span>_sdept<span class="hljs-operator">=</span>Sdept<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> Sno<span class="hljs-operator">=</span><span class="hljs-variable">@sno</span><br>if(<span class="hljs-variable">@n</span>_sdept<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CS&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-variable">@avg</span><span class="hljs-operator">&lt;=</span><span class="hljs-number">95</span>)<br>print <span class="hljs-string">&#x27;成绩没超过95分，无法转入计算机专业&#x27;</span><br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">begin</span><br>update student<br><span class="hljs-keyword">set</span> Sdept<span class="hljs-operator">=</span><span class="hljs-variable">@n</span>_sdept<br><span class="hljs-keyword">where</span> Sno<span class="hljs-operator">=</span><span class="hljs-variable">@sno</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> changesd<br><span class="hljs-keyword">values</span>(<span class="hljs-variable">@sno</span>,<span class="hljs-variable">@o</span>_sdept,<span class="hljs-variable">@n</span>_sdept,<span class="hljs-variable">@avg</span>)<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--测试</span><br><span class="hljs-keyword">exec</span> change <span class="hljs-string">&#x27;200515004&#x27;</span>,<span class="hljs-string">&#x27;CS&#x27;</span><br><span class="hljs-comment">--提示：成绩没超过95分，无法转入计算机专业</span><br><span class="hljs-keyword">exec</span> change <span class="hljs-string">&#x27;200515004&#x27;</span>,<span class="hljs-string">&#x27;MA&#x27;</span><br><span class="hljs-comment">--成功</span><br><span class="hljs-comment">--10.现有图书管理数据库， 其中包含如下几个表：</span><br><span class="hljs-comment">--读者表：reader(学号，姓名，性别，余额)</span><br><span class="hljs-comment">--借书表：lend（学号，书号，借书日期，应还日期，是否续借）</span><br><span class="hljs-comment">--欠款表：debt(学号，日期，欠款金额)</span><br><span class="hljs-comment">--还书表：return(学号，书号，还书日期) </span><br><span class="hljs-comment">--请设计一个存储过程实现续借或还书操作，具体要求如下：</span><br><span class="hljs-comment">--只有没有超期的书才可以续借（借书和续借时间都为30天），并修改应还日期，否则只能还书；还书时删除借书表内的借阅记录，并向还书表中插入一条还书记录，注意还书日期为当前日期，并且对超期图书，按照超期的天数计算出罚款金额（每天每本书罚款0.1元），并将罚款信息插入到欠款表中，同时将罚款从读者表的余额里扣除。</span><br>use 图书管理<span class="hljs-comment">--已建数据库</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> reader<br>(学号 <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),姓名 <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),性别 <span class="hljs-type">char</span>(<span class="hljs-number">2</span>),余额 money)<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> lend<br>(学号 <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),书号 <span class="hljs-type">char</span>(<span class="hljs-number">20</span>),借书日期 <span class="hljs-type">date</span>,应还日期 <span class="hljs-type">date</span>,是否续借 <span class="hljs-type">varchar</span>(<span class="hljs-number">6</span>))<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> debt<br>(学号 <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),日期 <span class="hljs-type">date</span>,欠款金额 money)<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> [<span class="hljs-keyword">return</span>]<br>(学号 <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),书号 <span class="hljs-type">char</span>(<span class="hljs-number">20</span>),还书日期 <span class="hljs-type">date</span>)<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> return_book <span class="hljs-variable">@sno</span> <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),<span class="hljs-variable">@bno</span> <span class="hljs-type">char</span>(<span class="hljs-number">20</span>)<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@rdate</span> <span class="hljs-type">date</span>,<span class="hljs-variable">@xujie</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">6</span>),<span class="hljs-variable">@day</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@rdate</span><span class="hljs-operator">=</span>应还日期,<span class="hljs-variable">@xujie</span><span class="hljs-operator">=</span>是否续借<br><span class="hljs-keyword">from</span> lend<br><span class="hljs-keyword">where</span> 学号<span class="hljs-operator">=</span><span class="hljs-variable">@sno</span> <span class="hljs-keyword">and</span> 书号<span class="hljs-operator">=</span><span class="hljs-variable">@bno</span><br> if (<span class="hljs-variable">@xujie</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;续借&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-variable">@rdate</span><span class="hljs-operator">&gt;=</span>getdate() ) <br> update lend <span class="hljs-keyword">set</span> 应还日期<span class="hljs-operator">=</span>dateadd(<span class="hljs-keyword">day</span>,<span class="hljs-number">30</span>,应还日期)<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>       <span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> lend<br>   <span class="hljs-keyword">where</span> 学号<span class="hljs-operator">=</span><span class="hljs-variable">@sno</span> <span class="hljs-keyword">and</span> 书号<span class="hljs-operator">=</span><span class="hljs-variable">@bno</span><br>   <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> [<span class="hljs-keyword">return</span>] <span class="hljs-keyword">values</span> (<span class="hljs-variable">@sno</span>,<span class="hljs-variable">@bno</span>,getdate())<br>   <span class="hljs-keyword">end</span><br>if(<span class="hljs-variable">@rdate</span><span class="hljs-operator">&lt;</span>getdate())<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">set</span> <span class="hljs-variable">@day</span><span class="hljs-operator">=</span>datediff(<span class="hljs-keyword">day</span>,<span class="hljs-variable">@rdate</span>,getdate())<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> debt <span class="hljs-keyword">values</span>(<span class="hljs-variable">@sno</span>,getdate(),<span class="hljs-variable">@day</span><span class="hljs-operator">*</span><span class="hljs-number">0.1</span>)<br>update reader <span class="hljs-keyword">set</span> 余额<span class="hljs-operator">=</span>余额<span class="hljs-operator">-</span><span class="hljs-variable">@day</span><span class="hljs-operator">*</span><span class="hljs-number">0.1</span><br><span class="hljs-keyword">where</span> 学号<span class="hljs-operator">=</span><span class="hljs-variable">@sno</span> <br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--测试</span><br><span class="hljs-keyword">exec</span> return_book <span class="hljs-string">&#x27;201900801&#x27;</span>,<span class="hljs-string">&#x27;12345678&#x27;</span><br><span class="hljs-keyword">exec</span> return_book <span class="hljs-string">&#x27;201900801&#x27;</span>,<span class="hljs-string">&#x27;112345678&#x27;</span><br><span class="hljs-keyword">exec</span> return_book <span class="hljs-string">&#x27;201900802&#x27;</span>,<span class="hljs-string">&#x27;12345678&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实验2&quot;&gt;&lt;a href=&quot;#实验2&quot; class=&quot;headerlink&quot; title=&quot;实验2&quot;&gt;&lt;/a&gt;实验2&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa</summary>
      
    
    
    
    
    <category term="sql" scheme="https://github.com/sterne012/sterne012.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>危机合约7#旧约27&amp;新约32</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2021/11/26/Arknights7-27/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2021/11/26/Arknights7-27/</id>
    <published>2021-11-26T06:21:07.000Z</published>
    <updated>2021-11-30T03:19:21.350Z</updated>
    
    <content type="html"><![CDATA[<p>再水一篇2333</p><p><del>没有什么原创性还耗费2h凹出来真的好屑啊</del></p><img src="/2021/11/26/Arknights7-27/Screenshot_20211126-125132.png" class="" title="Screenshot_20211126-125132"><p><a href="https://www.bilibili.com/video/BV1KP4y1L7Ua">https://www.bilibili.com/video/BV1KP4y1L7Ua</a></p><p>在原轴基础上优化掉了小火龙</p><p>打法不变的情况下应该还能把风笛优化掉，不知道费用够不够</p><p>这次比较简单，网上轴也一大把了</p><p>2021-11-29</p><p>它不是非常简单,它实在太过于没难度了(要不然我还能过?)</p><p>32甚至打的比当时27还快,轴点硬说其实就俩,也不用凹</p><img src="/2021/11/26/Arknights7-27/Screenshot_20211129-202235.png" class="" title="Screenshot_20211129-202235"><p>个人认为这些都没有提供任何有效的难度:</p><img src="/2021/11/26/Arknights7-27/image-20211130111344283.png" class="" title="image-20211130111344283"><p>甚至一个都不给也可以过</p><img src="/2021/11/26/Arknights7-27/image-20211130111357371.png" class="" title="image-20211130111357371"><p>禁了家门口的地板(我甚至不知道那边那个家门口要进去什么怪) 如果禁中间黑白格估计难度直线上升</p><img src="/2021/11/26/Arknights7-27/image-20211130111539755.png" class="" title="image-20211130111539755"><p>这个怎么说呢,以往都是直接禁用两个职业,算是新的尝试?但是整体上没造成很大的威胁(指我就是要把99大费的泥岩放下去.jpg)</p><img src="/2021/11/26/Arknights7-27/image-20211130111704355.png" class="" title="image-20211130111704355"><p>略微增加了打年糕需要的时间</p><img src="/2021/11/26/Arknights7-27/image-20211130111750523.png" class="" title="image-20211130111750523"><p>但是小火龙正好对轴了,不妨理解为官方认为这是合理的解法,但是它开盾时候不打人,本来头上顶着一个大大的危 也都给奶回来了</p><p>点隔壁纵横四方当我没说()</p><p>这是上一期的2333</p><img src="/2021/11/26/Arknights7-27/Screenshot_20210829-170923.png" class="" title="Screenshot_20210829-170923"><p>上次比较难说实话</p><p>至于细心的人能发现我id#后面编号变了那是因为改过名字（我想随机一个比较喜欢的数字嗯，估计下次有改名卡还改），原地tp即可改后面的数字</p><p>老咸鱼了，以前都是18直接跑路的，然后有一天突然发现自己等级啥的都很低是因为基建一直153搓卡，卡严重溢出（最多的时候紫卡4000+），自从换了243之后都不用住CE5了，非常舒适</p><img src="/2021/11/26/Arknights7-27/image-20211126225624038.png" class="" title="image-20211126225624038"><p>黄铁弃坑，一整套都没有，收藏向玩家落泪</p><p>但是我都没见过有人像我这样全摆镀层章的（全摆最大的那个的倒是很多），这个亮银色真的好看</p><img src="/2021/11/26/Arknights7-27/image-20211126230500269.png" class="" title="image-20211126230500269">日常迫害（)<p><code>C:\Users\86138\Documents\leidian64\Pictures\Screenshots</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;再水一篇2333&lt;/p&gt;
&lt;p&gt;&lt;del&gt;没有什么原创性还耗费2h凹出来真的好屑啊&lt;/del&gt;&lt;/p&gt;
&lt;img src=&quot;/2021/11/26/Arknights7-27/Screenshot_20211126-125132.png&quot; class=&quot;&quot; title=&quot;S</summary>
      
    
    
    
    
    <category term="games" scheme="https://github.com/sterne012/sterne012.github.io/tags/games/"/>
    
    <category term="Arknights" scheme="https://github.com/sterne012/sterne012.github.io/tags/Arknights/"/>
    
  </entry>
  
  <entry>
    <title>数据库实验7</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2021/11/25/DataBase7/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2021/11/25/DataBase7/</id>
    <published>2021-11-25T12:46:50.000Z</published>
    <updated>2021-12-25T01:53:32.781Z</updated>
    
    <content type="html"><![CDATA[<p>11-25</p><p>感觉最后一题不太合理，过段时间再补，好折磨啊</p><p><del>我去凹方舟27了</del></p><p>11-26</p><p>凹好了，最后一题也补完了，好耶</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">--使用数据库student，完成以下操作，并写出相应的代码</span><br><span class="hljs-comment">--1.   用函数实现：求某个专业选修了某门课程的学生人数，并调用函数求出计算机系“数据库”课程的选课人数。</span><br>USE Student<br>GO<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> dbo.Sdept_select_amount(<span class="hljs-variable">@sdept</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<span class="hljs-variable">@cname</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">40</span>))<br><span class="hljs-keyword">RETURNS</span> <span class="hljs-type">INT</span><br><span class="hljs-keyword">BEGIN</span><br>    <span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@tot</span> <span class="hljs-type">INT</span><br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@tot</span><span class="hljs-operator">=</span><span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<br>    <span class="hljs-keyword">FROM</span> Student <span class="hljs-keyword">JOIN</span> dbo.SC S <span class="hljs-keyword">on</span> Student.Sno <span class="hljs-operator">=</span> S.Sno <span class="hljs-keyword">JOIN</span> Course C <span class="hljs-keyword">on</span> C.Cno <span class="hljs-operator">=</span> S.Cno<br>    <span class="hljs-keyword">WHERE</span> Cname<span class="hljs-operator">=</span><span class="hljs-variable">@cname</span> <span class="hljs-keyword">AND</span> Sdept<span class="hljs-operator">=</span><span class="hljs-variable">@sdept</span><br>    <span class="hljs-keyword">RETURN</span> <span class="hljs-variable">@tot</span><br><span class="hljs-keyword">end</span><br>GO<br><br><span class="hljs-keyword">SELECT</span> dbo.Sdept_select_amount(<span class="hljs-string">&#x27;CS&#x27;</span>,<span class="hljs-string">&#x27;数据库&#x27;</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;计算机系选数据库课程的人数&#x27;</span><br><span class="hljs-comment">--2.   用内嵌表值函数实现：查询某个专业所有学生所选的每门课的平均成绩；调用该函数求出计算机系的所有课程的平均成绩。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> dbo.Sdept_average_grade(<span class="hljs-variable">@sdept</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>))<br><span class="hljs-keyword">RETURNS</span> <span class="hljs-keyword">TABLE</span><br><span class="hljs-keyword">AS</span><br>    <span class="hljs-keyword">RETURN</span><br>        (<br>            <span class="hljs-keyword">SELECT</span> C.Cno, C.Cname, <span class="hljs-built_in">AVG</span>(Grade) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;平均成绩&#x27;</span><br>            <span class="hljs-keyword">FROM</span> Student<br>                     <span class="hljs-keyword">JOIN</span> dbo.SC S <span class="hljs-keyword">on</span> Student.Sno <span class="hljs-operator">=</span> S.Sno<br>                     <span class="hljs-keyword">JOIN</span> Course C <span class="hljs-keyword">on</span> C.Cno <span class="hljs-operator">=</span> S.Cno<br>            <span class="hljs-keyword">WHERE</span> Sdept <span class="hljs-operator">=</span> <span class="hljs-variable">@sdept</span><br>            <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> C.Cno, C.Cname<br>        )<br>GO<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Sdept_average_grade(<span class="hljs-string">&#x27;CS&#x27;</span>)<br><br><span class="hljs-comment">--3.   创建多语句表值函数，通过学号作为实参调用该函数，可显示该学生的姓名以及各门课的成绩和学分，调用该函数求出“200515002”的各门课成绩和学分。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> dbo.Student_info(<span class="hljs-variable">@sno</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>))<br><span class="hljs-keyword">RETURNS</span> <span class="hljs-variable">@Student</span>_info <span class="hljs-keyword">TABLE</span>(Sname <span class="hljs-type">CHAR</span>(<span class="hljs-number">20</span>),Cname <span class="hljs-type">CHAR</span>(<span class="hljs-number">40</span>),Grade <span class="hljs-type">SMALLINT</span>,Ccredit <span class="hljs-type">SMALLINT</span>)<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">BEGIN</span><br>    <span class="hljs-keyword">INSERT</span> <span class="hljs-variable">@Student</span>_info<br>    <span class="hljs-keyword">SELECT</span> Sname,Cname,Grade,Ccredit<br>    <span class="hljs-keyword">FROM</span> Student <span class="hljs-keyword">JOIN</span> dbo.SC S <span class="hljs-keyword">on</span> Student.Sno <span class="hljs-operator">=</span> S.Sno <span class="hljs-keyword">JOIN</span> Course C <span class="hljs-keyword">on</span> C.Cno <span class="hljs-operator">=</span> S.Cno<br>    <span class="hljs-keyword">WHERE</span> Student.Sno<span class="hljs-operator">=</span><span class="hljs-variable">@sno</span><br><span class="hljs-keyword">RETURN</span><br><span class="hljs-keyword">end</span><br>GO<br><br><span class="hljs-keyword">SELECT</span><span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> dbo.Student_info (<span class="hljs-string">&#x27;200515002&#x27;</span>)<br><span class="hljs-comment">--4.   编写一个存储过程，统计某门课程的优秀（90-100）人数、良好（80-89）人数、中等（70-79）人数、及格（60-69）人数和及格率，</span><br><span class="hljs-comment">-- 其输入参数是课程号，输出的是各级别人数及及格率，及格率的形式是90.25%，执行存储过程，在消息区显示1号课程的统计信息。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> Course_percent <span class="hljs-variable">@cno</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">AS</span><br>    <span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@S</span> <span class="hljs-type">INT</span>,<span class="hljs-variable">@A</span> <span class="hljs-type">INT</span>,<span class="hljs-variable">@B</span> <span class="hljs-type">INT</span>,<span class="hljs-variable">@C</span> <span class="hljs-type">INT</span>,<span class="hljs-variable">@per</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>)<br>    <span class="hljs-keyword">SELECT</span>  <span class="hljs-variable">@S</span><span class="hljs-operator">=</span><span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> Grade <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">90</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">100</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">END</span>),<br>            <span class="hljs-variable">@A</span><span class="hljs-operator">=</span><span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> Grade <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">80</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">89</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">END</span>),<br>            <span class="hljs-variable">@B</span><span class="hljs-operator">=</span><span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> Grade <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">70</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">79</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">END</span>),<br>            <span class="hljs-variable">@C</span><span class="hljs-operator">=</span><span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> Grade <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">60</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">69</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">END</span>),<br>            <span class="hljs-variable">@per</span><span class="hljs-operator">=</span>CONCAT(<span class="hljs-built_in">CAST</span>(<span class="hljs-keyword">CONVERT</span>(<span class="hljs-type">FLOAT</span>,<span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> Grade <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">60</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">100</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">END</span>))<span class="hljs-operator">/</span><span class="hljs-keyword">CONVERT</span>(<span class="hljs-type">FLOAT</span>,<span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> Sno))<span class="hljs-operator">*</span><span class="hljs-number">100.0</span> <span class="hljs-keyword">AS</span> <span class="hljs-type">NUMERIC</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>)),<span class="hljs-string">&#x27;%&#x27;</span>)<br>    <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">JOIN</span> Course C2 <span class="hljs-keyword">on</span> C2.Cno <span class="hljs-operator">=</span> SC.Cno <span class="hljs-keyword">WHERE</span> <span class="hljs-variable">@cno</span><span class="hljs-operator">=</span>SC.Cno<br>    PRINT <span class="hljs-string">&#x27;优秀人数：&#x27;</span><span class="hljs-operator">+</span><span class="hljs-built_in">CAST</span>(<span class="hljs-variable">@S</span> <span class="hljs-keyword">AS</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>))<span class="hljs-operator">+</span><span class="hljs-string">&#x27; 良好人数：&#x27;</span><span class="hljs-operator">+</span><span class="hljs-built_in">CAST</span>(<span class="hljs-variable">@A</span> <span class="hljs-keyword">AS</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>))<span class="hljs-operator">+</span><span class="hljs-string">&#x27; 中等人数：&#x27;</span><span class="hljs-operator">+</span><span class="hljs-built_in">CAST</span>(<span class="hljs-variable">@B</span> <span class="hljs-keyword">AS</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>))<span class="hljs-operator">+</span><span class="hljs-string">&#x27; 及格人数：&#x27;</span><span class="hljs-operator">+</span><span class="hljs-built_in">CAST</span>(<span class="hljs-variable">@C</span> <span class="hljs-keyword">AS</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>))<span class="hljs-operator">+</span><span class="hljs-string">&#x27; 及格率：&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@per</span>;<br>GO<br><br><span class="hljs-keyword">EXEC</span> Course_percent <span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-comment">--5.   创建一个带有输入参数的存储过程，该存储过程根据传入的学生名字，查询其选修的课程名和成绩，执行存储过程，在消息区显示赵菁菁的相关信息。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> Student_name_info <span class="hljs-variable">@sname</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">AS</span><br>    <span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@cname</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>),<span class="hljs-variable">@grade</span> <span class="hljs-type">SMALLINT</span><br>    <span class="hljs-keyword">DECLARE</span> csr1 <span class="hljs-keyword">CURSOR</span> <span class="hljs-keyword">FOR</span><br>        <span class="hljs-keyword">SELECT</span> Cname,Grade<br>        <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">JOIN</span> Course C <span class="hljs-keyword">on</span> C.Cno <span class="hljs-operator">=</span> SC.Cno <span class="hljs-keyword">JOIN</span> Student S <span class="hljs-keyword">on</span> S.Sno <span class="hljs-operator">=</span> SC.Sno<br>        <span class="hljs-keyword">WHERE</span> <span class="hljs-variable">@sname</span><span class="hljs-operator">=</span>S.Sname<br>    <span class="hljs-keyword">OPEN</span> csr1<br>    <span class="hljs-keyword">FETCH</span> NEXT <span class="hljs-keyword">FROM</span> csr1 <span class="hljs-keyword">INTO</span> <span class="hljs-variable">@cname</span>,<span class="hljs-variable">@grade</span><br>    PRINT <span class="hljs-variable">@sname</span><br>    PRINT <span class="hljs-string">&#x27;-----------------------&#x27;</span><br>    PRINT <span class="hljs-string">&#x27;  课程名          成绩&#x27;</span><br>    WHILE @<span class="hljs-variable">@FETCH</span>_STATUS<span class="hljs-operator">=</span><span class="hljs-number">0</span><br>    <span class="hljs-keyword">BEGIN</span><br>        PRINT <span class="hljs-variable">@cname</span><span class="hljs-operator">+</span><span class="hljs-built_in">CAST</span>(<span class="hljs-variable">@grade</span> <span class="hljs-keyword">AS</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>))<br>        <span class="hljs-keyword">FETCH</span> NEXT <span class="hljs-keyword">FROM</span> csr1 <span class="hljs-keyword">INTO</span> <span class="hljs-variable">@cname</span>,<span class="hljs-variable">@grade</span><br>    <span class="hljs-keyword">end</span><br>    PRINT <span class="hljs-string">&#x27;=======================&#x27;</span><br>    <span class="hljs-keyword">CLOSE</span> csr1<br>    <span class="hljs-keyword">DEALLOCATE</span> csr1<br>GO<br><br><span class="hljs-keyword">EXEC</span> Student_name_info <span class="hljs-string">&#x27;赵菁菁&#x27;</span><br><span class="hljs-comment">--消息区那必得游标了啊</span><br><span class="hljs-comment">--6.   以基本表 course为基础，完成如下操作</span><br><span class="hljs-comment">--生成显示如下报表形式的游标：报表首先列出学生的学号和姓名，然后在此学生下，列出其所选的全部课程的课程号、课程名和学分；依此类推，直到列出全部学生。</span><br><span class="hljs-comment">-- CREATE PROCEDURE Student_table AS</span><br><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@sno</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>),<span class="hljs-variable">@sname</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<span class="hljs-variable">@cno</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>),<span class="hljs-variable">@cname</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>),<span class="hljs-variable">@ccredit</span> <span class="hljs-type">SMALLINT</span><br><span class="hljs-keyword">DECLARE</span> csr2_1 <span class="hljs-keyword">CURSOR</span> <span class="hljs-keyword">FOR</span><br>    <span class="hljs-keyword">SELECT</span> Sno,Sname <span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">OPEN</span> csr2_1<br><span class="hljs-keyword">FETCH</span> NEXT <span class="hljs-keyword">FROM</span> csr2_1 <span class="hljs-keyword">INTO</span> <span class="hljs-variable">@sno</span>,<span class="hljs-variable">@sname</span><br>WHILE @<span class="hljs-variable">@FETCH</span>_STATUS<span class="hljs-operator">=</span><span class="hljs-number">0</span><br><span class="hljs-keyword">BEGIN</span><br>    PRINT <span class="hljs-variable">@sno</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@sname</span><br>    PRINT <span class="hljs-string">&#x27;----------------------------------------------------------&#x27;</span><br>    PRINT <span class="hljs-string">&#x27;课程号           课程名                                  学分&#x27;</span><br>    <span class="hljs-keyword">DECLARE</span> csr2_2 <span class="hljs-keyword">CURSOR</span> <span class="hljs-keyword">FOR</span><br>        <span class="hljs-keyword">SELECT</span> C.Cno,Cname,Ccredit <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">JOIN</span> Course C <span class="hljs-keyword">on</span> C.Cno <span class="hljs-operator">=</span> SC.Cno <span class="hljs-keyword">WHERE</span> <span class="hljs-variable">@sno</span><span class="hljs-operator">=</span>Sno<br>    <span class="hljs-keyword">OPEN</span> csr2_2<br>    <span class="hljs-keyword">FETCH</span> NEXT <span class="hljs-keyword">FROM</span> csr2_2 <span class="hljs-keyword">INTO</span> <span class="hljs-variable">@cno</span>,<span class="hljs-variable">@cname</span>,<span class="hljs-variable">@ccredit</span><br>    WHILE @<span class="hljs-variable">@FETCH</span>_STATUS<span class="hljs-operator">=</span><span class="hljs-number">0</span><br>    <span class="hljs-keyword">BEGIN</span><br>        PRINT <span class="hljs-variable">@cno</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;            &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@cname</span><span class="hljs-operator">+</span><span class="hljs-keyword">CONVERT</span>(<span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>),<span class="hljs-variable">@ccredit</span>)<br>        <span class="hljs-keyword">FETCH</span> NEXT <span class="hljs-keyword">FROM</span> csr2_2 <span class="hljs-keyword">INTO</span> <span class="hljs-variable">@cno</span>,<span class="hljs-variable">@cname</span>,<span class="hljs-variable">@ccredit</span><br>    <span class="hljs-keyword">end</span><br>    PRINT <span class="hljs-string">&#x27;----------------------------------------------------------&#x27;</span><br>    <span class="hljs-keyword">CLOSE</span> csr2_2<br>    <span class="hljs-keyword">DEALLOCATE</span> csr2_2<br>    <span class="hljs-keyword">FETCH</span> NEXT <span class="hljs-keyword">FROM</span> csr2_1 <span class="hljs-keyword">INTO</span> <span class="hljs-variable">@sno</span>,<span class="hljs-variable">@sname</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">CLOSE</span> csr2_1<br><span class="hljs-keyword">DEALLOCATE</span> csr2_1<br>GO<br><br><span class="hljs-comment">-- EXEC Student_table</span><br><span class="hljs-comment">--7.   请设计一个存储过程实现下列功能：判断某个专业某门课程成绩排名为n的学生的成绩是否低于该门课程的平均分，如果低于平均分，则将其成绩改为平均分，否则输出学号、姓名、班号、课程号、课程名、成绩。（提示：可以在存储过程内部使用游标）。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span>  Student_grade_update <span class="hljs-variable">@cno</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>),<span class="hljs-variable">@rank</span> <span class="hljs-type">INT</span> <span class="hljs-keyword">AS</span><br>    <span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@avg</span> <span class="hljs-type">INT</span>,<span class="hljs-variable">@sno</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>),<span class="hljs-variable">@grade</span> <span class="hljs-type">SMALLINT</span><br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@avg</span><span class="hljs-operator">=</span><span class="hljs-built_in">AVG</span>(Grade) <span class="hljs-keyword">FROM</span> Student <span class="hljs-keyword">JOIN</span> SC S <span class="hljs-keyword">on</span> Student.Sno <span class="hljs-operator">=</span> S.Sno <span class="hljs-keyword">WHERE</span> <span class="hljs-variable">@cno</span><span class="hljs-operator">=</span>Cno<br>    <span class="hljs-keyword">DECLARE</span> csr3 <span class="hljs-keyword">SCROLL</span> <span class="hljs-keyword">CURSOR</span> <span class="hljs-keyword">FOR</span><br>        <span class="hljs-keyword">SELECT</span> Sno,Cno,Grade<br>        <span class="hljs-keyword">FROM</span> SC<br>        <span class="hljs-keyword">WHERE</span> <span class="hljs-variable">@cno</span><span class="hljs-operator">=</span>Cno<br>        <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> Grade <span class="hljs-keyword">DESC</span><br>    <span class="hljs-keyword">OPEN</span> csr3<br>    <span class="hljs-keyword">FETCH</span> ABSOLUTE <span class="hljs-variable">@rank</span> <span class="hljs-keyword">FROM</span> csr3 <span class="hljs-keyword">INTO</span> <span class="hljs-variable">@sno</span>,<span class="hljs-variable">@cno</span>,<span class="hljs-variable">@grade</span><br>    IF <span class="hljs-variable">@grade</span><span class="hljs-operator">&lt;</span><span class="hljs-variable">@avg</span><br>        <span class="hljs-keyword">BEGIN</span><br>            PRINT <span class="hljs-string">&#x27;成绩低于这门课程平均分&#x27;</span><br>            UPDATE SC <span class="hljs-keyword">SET</span> Grade<span class="hljs-operator">=</span><span class="hljs-variable">@avg</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-variable">@sno</span><span class="hljs-operator">=</span>Sno <span class="hljs-keyword">AND</span> <span class="hljs-variable">@cno</span><span class="hljs-operator">=</span>Cno<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">ELSE</span> <span class="hljs-keyword">BEGIN</span><br>            <span class="hljs-keyword">SELECT</span> S2.Sno,Sname,C.Cno,Cname,Grade<br>            <span class="hljs-keyword">FROM</span> Student <span class="hljs-keyword">JOIN</span> SC S2 <span class="hljs-keyword">on</span> Student.Sno <span class="hljs-operator">=</span> S2.Sno <span class="hljs-keyword">JOIN</span> Course C <span class="hljs-keyword">on</span> C.Cno <span class="hljs-operator">=</span> S2.Cno<br>            <span class="hljs-keyword">WHERE</span> <span class="hljs-variable">@cno</span><span class="hljs-operator">=</span>C.Cno <span class="hljs-keyword">AND</span> <span class="hljs-variable">@sno</span><span class="hljs-operator">=</span>S2.Sno<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">CLOSE</span> csr3<br>    <span class="hljs-keyword">DEALLOCATE</span> csr3<br>GO<br><br><span class="hljs-keyword">EXEC</span> Student_grade_update <span class="hljs-number">1</span> ,<span class="hljs-number">1</span><br><span class="hljs-keyword">EXEC</span> Student_grade_update <span class="hljs-number">1</span>,<span class="hljs-number">6</span><br><br><span class="hljs-comment">--8.   对student数据库设计存储过程，实现将某门课程成绩低于课程平均成绩的学生成绩都加上3分。（提示可以使用存储过程内部使用游标）</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> Student_grade_update_plus3 <span class="hljs-variable">@cno</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">AS</span><br>    <span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@avg</span> <span class="hljs-type">INT</span>,<span class="hljs-variable">@sno</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>),<span class="hljs-variable">@grade</span> <span class="hljs-type">SMALLINT</span><br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@avg</span><span class="hljs-operator">=</span><span class="hljs-built_in">AVG</span>(Grade) <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> Cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span><br>    <span class="hljs-keyword">DECLARE</span> csr4 <span class="hljs-keyword">CURSOR</span> <span class="hljs-keyword">FOR</span><br>    <span class="hljs-keyword">SELECT</span> Sno,Grade <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> Cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span><br>    <span class="hljs-keyword">OPEN</span> csr4<br>    <span class="hljs-keyword">FETCH</span> NEXT <span class="hljs-keyword">FROM</span> csr4 <span class="hljs-keyword">INTO</span> <span class="hljs-variable">@sno</span>,<span class="hljs-variable">@grade</span><br>    WHILE @<span class="hljs-variable">@FETCH</span>_STATUS<span class="hljs-operator">=</span><span class="hljs-number">0</span><br>    <span class="hljs-keyword">BEGIN</span><br>        IF <span class="hljs-variable">@grade</span><span class="hljs-operator">&lt;</span><span class="hljs-variable">@avg</span><br>        <span class="hljs-keyword">BEGIN</span><br>            UPDATE SC <span class="hljs-keyword">SET</span> Grade<span class="hljs-operator">=</span>Grade<span class="hljs-operator">+</span><span class="hljs-number">3</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-variable">@sno</span><span class="hljs-operator">=</span>Sno <span class="hljs-keyword">AND</span> <span class="hljs-variable">@cno</span><span class="hljs-operator">=</span>Cno<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">FETCH</span> NEXT <span class="hljs-keyword">FROM</span> csr4 <span class="hljs-keyword">INTO</span> <span class="hljs-variable">@sno</span>,<span class="hljs-variable">@grade</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">CLOSE</span> csr4<br>    <span class="hljs-keyword">DEALLOCATE</span> csr4<br>GO<br><span class="hljs-keyword">EXEC</span> Student_grade_update_plus3 <span class="hljs-number">10</span><br><span class="hljs-comment">--9.   设计存储过程实现学生转专业功能：某个学生（学号）在转专业时，如果想转入的专业是计算机专业那么要求该学生的平均成绩必须超过95分，</span><br><span class="hljs-comment">-- 否则不允许转专业，并将转专业的信息插入到一个转专业的表里，changesd(学号，原专业，新专业，平均成绩)</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Changed<br>(<br>    Sno <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">PRIMARY</span> KEY ,<br>    Odept <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>    Ndept <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>    Avggrade <span class="hljs-type">SMALLINT</span>,<br>    <span class="hljs-keyword">FOREIGN</span> KEY (SNO) <span class="hljs-keyword">REFERENCES</span> Student(Sno)<br>)<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> Student_sdept_trans <span class="hljs-variable">@sno</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>),<span class="hljs-variable">@sdept</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">AS</span><br>    <span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@avg</span> <span class="hljs-type">INT</span>,<span class="hljs-variable">@odept</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)<br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@avg</span><span class="hljs-operator">=</span><span class="hljs-built_in">AVG</span>(Grade) <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> Sno<span class="hljs-operator">=</span><span class="hljs-variable">@sno</span><br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@odept</span><span class="hljs-operator">=</span>Sdept <span class="hljs-keyword">FROM</span> Student <span class="hljs-keyword">WHERE</span> <span class="hljs-variable">@sno</span><span class="hljs-operator">=</span>Sno<br>    IF <span class="hljs-variable">@avg</span><span class="hljs-operator">&lt;=</span><span class="hljs-number">95</span> <span class="hljs-keyword">AND</span> <span class="hljs-variable">@sdept</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;CS&#x27;</span><br>        <span class="hljs-keyword">BEGIN</span><br>            PRINT <span class="hljs-string">&#x27;要求该学生的平均成绩必须超过95分&#x27;</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">ELSE</span> <span class="hljs-keyword">BEGIN</span><br>            UPDATE Student <span class="hljs-keyword">SET</span> Sdept<span class="hljs-operator">=</span><span class="hljs-variable">@sdept</span> <span class="hljs-keyword">WHERE</span> Sno<span class="hljs-operator">=</span><span class="hljs-variable">@sno</span><br>            <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Changed(SNO, ODEPT, NDEPT, AVGGRADE)<br>            <span class="hljs-keyword">VALUES</span> (<span class="hljs-variable">@sno</span>,<span class="hljs-variable">@odept</span>,<span class="hljs-variable">@sdept</span>,<span class="hljs-variable">@avg</span>)<br>    <span class="hljs-keyword">end</span><br>GO<br><span class="hljs-keyword">EXEC</span> Student_sdept_trans <span class="hljs-number">200515009</span> ,<span class="hljs-string">&#x27;CS&#x27;</span><br><span class="hljs-comment">--10.  现有图书管理数据库， 其中包含如下几个表：</span><br><span class="hljs-comment">--读者表：reader(学号，姓名，性别，余额)</span><br><span class="hljs-comment">--借书表：lend（学号，书号，借书日期，应还日期，是否续借）</span><br><span class="hljs-comment">--欠款表：debt(学号，日期，欠款金额)</span><br><span class="hljs-comment">--还书表：return(学号，书号，还书日期)</span><br><span class="hljs-comment">--请设计一个存储过程实现续借或还书操作，具体要求如下：</span><br><span class="hljs-comment">--只有没有超期的书才可以续借（借书和续借时间都为30天），修改应还日期，</span><br><span class="hljs-comment">-- 否则只能还书；还书时删除借书表内的借阅记录，并向还书表中插入一条还书记录，注意还书日期为当前日期，</span><br><span class="hljs-comment">-- 并且对超期图书，按照超期的天数计算出罚款金额（每天每本书罚款0.1元），将罚款信息插入到欠款表中，同时将罚款从读者表的余额里扣除。</span><br><span class="hljs-comment">-- CREATE PROCEDURE Library_renew_return @sno CHAR(9),@bno CHAR(9) AS</span><br><span class="hljs-comment">--     DECLARE @day DATETIME,@datediff INT</span><br><span class="hljs-comment">--     SELECT @day=GETDATE()</span><br><span class="hljs-comment">--     SELECT @datediff=DATEDIFF(dd,lend.应还日期,@day) FROM lend WHERE @sno=Sno AND @bno=Bno</span><br><span class="hljs-comment">--     IF @datediff&gt;=0 --可以续借</span><br><span class="hljs-comment">--         BEGIN</span><br><span class="hljs-comment">--             UPDATE lend SET 应还日期=DATEADD(yyyy-MM-dd,30,应还日期) WHERE @sno=Sno AND @bno=Bno</span><br><span class="hljs-comment">--         end</span><br><span class="hljs-comment">--     ELSE IF @datediff&lt;0</span><br><span class="hljs-comment">--         BEGIN</span><br><span class="hljs-comment">--             PRINT &#x27;已经超期，只能还书不能续借&#x27;</span><br><span class="hljs-comment">--             DELETE FROM lend WHERE @sno=Sno AND @bno=Bno</span><br><span class="hljs-comment">--             INSERT INTO return(学号,书号,还书日期) VALUES (@sno,@bno,GETDATE())</span><br><span class="hljs-comment">--             INSERT INTO debt(学号,日期,欠款金额) VALUES (@sno,GETDATE(),CONVERT(FLOAT,ABS(@datediff))*0.1)</span><br><span class="hljs-comment">--         end</span><br><span class="hljs-comment">-- GO</span><br><span class="hljs-comment">--有待改进</span><br><span class="hljs-comment">--至少我觉得应该是两个存储过程，一个负责续借，一个负责还书？</span><br><span class="hljs-comment">--虽然写的是设计一个存储过程这样子，但是上面这一个过程就，如果没超期就会自动给你续借，只有超了才可以还而且还必须要交钱，</span><br><span class="hljs-comment">--想想就不大合理</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> Library_renew <span class="hljs-variable">@sno</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>),<span class="hljs-variable">@bno</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">AS</span><br>    <span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@day</span> DATETIME,<span class="hljs-variable">@datediff</span> <span class="hljs-type">INT</span><br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@day</span><span class="hljs-operator">=</span>GETDATE()<br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@datediff</span><span class="hljs-operator">=</span>DATEDIFF(dd,lend.应还日期,<span class="hljs-variable">@day</span>) <span class="hljs-keyword">FROM</span> lend <span class="hljs-keyword">WHERE</span> <span class="hljs-variable">@sno</span><span class="hljs-operator">=</span>Sno <span class="hljs-keyword">AND</span> <span class="hljs-variable">@bno</span><span class="hljs-operator">=</span>Bno<br>    IF <span class="hljs-variable">@datediff</span><span class="hljs-operator">&gt;=</span><span class="hljs-number">0</span> <span class="hljs-comment">--可以续借</span><br>        <span class="hljs-keyword">BEGIN</span><br>            UPDATE lend <span class="hljs-keyword">SET</span> 应还日期<span class="hljs-operator">=</span>DATEADD(yyyy<span class="hljs-operator">-</span>MM<span class="hljs-operator">-</span>dd,<span class="hljs-number">30</span>,应还日期) <span class="hljs-keyword">WHERE</span> <span class="hljs-variable">@sno</span><span class="hljs-operator">=</span>Sno <span class="hljs-keyword">AND</span> <span class="hljs-variable">@bno</span><span class="hljs-operator">=</span>Bno<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">ELSE</span> IF <span class="hljs-variable">@datediff</span><span class="hljs-operator">&lt;</span><span class="hljs-number">0</span><br>        <span class="hljs-keyword">BEGIN</span><br>            PRINT <span class="hljs-string">&#x27;已经超期，只能还书不能续借&#x27;</span><br>        <span class="hljs-keyword">END</span><br>GO<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> Library_return <span class="hljs-variable">@sno</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>),<span class="hljs-variable">@bno</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">AS</span><br>    <span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@day</span> DATETIME,<span class="hljs-variable">@datediff</span> <span class="hljs-type">INT</span><br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@day</span><span class="hljs-operator">=</span>GETDATE()<br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@datediff</span><span class="hljs-operator">=</span>DATEDIFF(dd,lend.应还日期,<span class="hljs-variable">@day</span>) <span class="hljs-keyword">FROM</span> lend <span class="hljs-keyword">WHERE</span> <span class="hljs-variable">@sno</span><span class="hljs-operator">=</span>Sno <span class="hljs-keyword">AND</span> <span class="hljs-variable">@bno</span><span class="hljs-operator">=</span>Bno<br>    IF <span class="hljs-variable">@datediff</span><span class="hljs-operator">&lt;</span><span class="hljs-number">0</span><br>        <span class="hljs-keyword">BEGIN</span><br>            PRINT <span class="hljs-string">&#x27;已经超期，请缴纳罚金&#x27;</span><br>            <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> debt(学号,日期,欠款金额) <span class="hljs-keyword">VALUES</span> (<span class="hljs-variable">@sno</span>,GETDATE(),<span class="hljs-keyword">CONVERT</span>(<span class="hljs-type">FLOAT</span>,<span class="hljs-built_in">ABS</span>(<span class="hljs-variable">@datediff</span>))<span class="hljs-operator">*</span><span class="hljs-number">0.1</span>)<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">return</span>(学号,书号,还书日期) <span class="hljs-keyword">VALUES</span> (<span class="hljs-variable">@sno</span>,<span class="hljs-variable">@bno</span>,GETDATE())<br>    <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> lend <span class="hljs-keyword">WHERE</span> <span class="hljs-variable">@sno</span><span class="hljs-operator">=</span>Sno <span class="hljs-keyword">AND</span> <span class="hljs-variable">@bno</span><span class="hljs-operator">=</span>Bno<br>GO<br><span class="hljs-comment">--以上是拆分成续借和还书两个部分之后的代码</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;11-25&lt;/p&gt;
&lt;p&gt;感觉最后一题不太合理，过段时间再补，好折磨啊&lt;/p&gt;
&lt;p&gt;&lt;del&gt;我去凹方舟27了&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;11-26&lt;/p&gt;
&lt;p&gt;凹好了，最后一题也补完了，好耶&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;tab</summary>
      
    
    
    
    
    <category term="sql" scheme="https://github.com/sterne012/sterne012.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>2021CCPC-10-31</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2021/11/23/CCPC/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2021/11/23/CCPC/</id>
    <published>2021-11-23T02:51:34.000Z</published>
    <updated>2021-11-23T03:05:06.266Z</updated>
    
    <content type="html"><![CDATA[<p>队长tql，我直接起飞  </p><p><a href="https://codeforces.com/gym/103389">https://codeforces.com/gym/103389</a> 复现</p><p><del>由于这篇文档sterne性别泄露导致的后果本人概不负责</del></p><p>自己的贡献量微乎其微，模拟那道题没看所以后来也没补</p><p>太懒了，才来补blog</p><p>发一下自己打的签到题</p><h2 id="A-公交线路"><a href="#A-公交线路" class="headerlink" title="A.公交线路"></a><a href="https://codeforces.com/gym/103389/problem/A">A.公交线路</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> n,x,y,k[<span class="hljs-number">1007</span>],kk[<span class="hljs-number">1007</span>],m,p[<span class="hljs-number">1007</span>],tmp;<br><span class="hljs-keyword">bool</span> fl1,fl2;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(k,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(k));<br>    <span class="hljs-built_in">memset</span>(p,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(p));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">init</span>();<br>    cin&gt;&gt;n&gt;&gt;x&gt;&gt;y;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;k[i];<br>    &#125;<br>    cin&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        cin&gt;&gt;p[i];<br>    &#125;<br><br>    fl1=fl2=<span class="hljs-literal">true</span>;<br>    x&lt;y?tmp=<span class="hljs-number">1</span>:tmp=<span class="hljs-number">0</span>;<span class="hljs-comment">//1=向右，0=向左</span><br>    <span class="hljs-keyword">if</span>(x+m&gt;n) fl1=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(x-m&lt;=<span class="hljs-number">0</span>) fl2=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = x+<span class="hljs-number">1</span>, j = <span class="hljs-number">1</span>; i &lt;= n &amp;&amp; j &lt;= m; i++, j++) &#123;<br>        <span class="hljs-keyword">if</span> (k[i] != p[j]) &#123;<br>            fl1 = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<span class="hljs-comment">//向右</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = x<span class="hljs-number">-1</span>, j = <span class="hljs-number">1</span>; i &gt;<span class="hljs-number">0</span> &amp;&amp; j &lt;= m; i--, j++) &#123;<br>        <span class="hljs-keyword">if</span> (k[i] != p[j]) &#123;<br>            fl2 = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<span class="hljs-comment">//向左</span><br><br>    <span class="hljs-keyword">if</span>(fl1&amp;&amp;fl2)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Unsure&quot;</span>&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tmp&amp;&amp;fl1||!tmp&amp;&amp;fl2)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Right&quot;</span>&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Wrong&quot;</span>&lt;&lt;endl;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">2 1 2</span><br><span class="hljs-comment">1 1</span><br><span class="hljs-comment">1</span><br><span class="hljs-comment">1</span><br><span class="hljs-comment">right</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2 2 1</span><br><span class="hljs-comment">1 1</span><br><span class="hljs-comment">1</span><br><span class="hljs-comment">1</span><br><span class="hljs-comment">right</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="D-修建道路"><a href="#D-修建道路" class="headerlink" title="D.修建道路"></a><a href="https://codeforces.com/gym/103389/problem/D">D.修建道路</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">2e5</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br>ll x,y,n,ans,temp;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin&gt;&gt;n;<br>    ans=<span class="hljs-number">0</span>;<br>    cin&gt;&gt;temp;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;x;<br>        ans+=<span class="hljs-built_in">max</span>(temp,x);<br>        temp=x;<br>    &#125;<br>    cout&lt;&lt;ans;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="G-3G网络"><a href="#G-3G网络" class="headerlink" title="G.3G网络"></a><a href="https://codeforces.com/gym/103389/problem/G">G.3G网络</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> x[<span class="hljs-number">3007</span>],y[<span class="hljs-number">3007</span>];<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;x[i]&gt;&gt;y[i];<br>    &#125;<br>    cout&lt;&lt;fixed&lt;&lt;<span class="hljs-built_in">setprecision</span>(<span class="hljs-number">15</span>)&lt;&lt;(<span class="hljs-keyword">double</span>)<span class="hljs-number">1</span>/n&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="K-音乐游戏"><a href="#K-音乐游戏" class="headerlink" title="K.音乐游戏"></a><a href="https://codeforces.com/gym/103389/problem/K">K.音乐游戏</a></h2><p>音游人狂喜</p><p>osu？那没事了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n;cin&gt;&gt;n;<br>    <span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;c)&#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) ans++;<br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;队长tql，我直接起飞  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/gym/103389&quot;&gt;https://codeforces.com/gym/103389&lt;/a&gt; 复现&lt;/p&gt;
&lt;p&gt;&lt;del&gt;由于这篇文档sterne性别泄露导致的</summary>
      
    
    
    
    
    <category term="c++" scheme="https://github.com/sterne012/sterne012.github.io/tags/c/"/>
    
    <category term="CCPC" scheme="https://github.com/sterne012/sterne012.github.io/tags/CCPC/"/>
    
  </entry>
  
  <entry>
    <title>ACM-Math</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2021/11/23/ACM-Math/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2021/11/23/ACM-Math/</id>
    <published>2021-11-23T02:30:17.000Z</published>
    <updated>2021-11-23T02:33:55.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-快速幂"><a href="#1-快速幂" class="headerlink" title="1.快速幂"></a>1.快速幂</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ll <span class="hljs-title">binpow</span><span class="hljs-params">(ll a,ll b)</span></span>&#123;<br>    ll res=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) res=res*a%mod;<br>        a=a*a%mod;<br>        b&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-快速幂&quot;&gt;&lt;a href=&quot;#1-快速幂&quot; class=&quot;headerlink&quot; title=&quot;1.快速幂&quot;&gt;&lt;/a&gt;1.快速幂&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="c++" scheme="https://github.com/sterne012/sterne012.github.io/tags/c/"/>
    
    <category term="ACM" scheme="https://github.com/sterne012/sterne012.github.io/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>ACM-Others</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2021/11/23/ACM-Others/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2021/11/23/ACM-Others/</id>
    <published>2021-11-23T02:29:54.000Z</published>
    <updated>2021-11-23T02:38:07.293Z</updated>
    
    <content type="html"><![CDATA[<p>抚 子 睡 大 觉 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;抚 子 睡 大 觉 &lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="c++" scheme="https://github.com/sterne012/sterne012.github.io/tags/c/"/>
    
    <category term="ACM" scheme="https://github.com/sterne012/sterne012.github.io/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>ACM-dp</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2021/11/23/ACM-dp/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2021/11/23/ACM-dp/</id>
    <published>2021-11-23T02:29:07.000Z</published>
    <updated>2021-11-23T02:48:59.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-状态压缩dp"><a href="#1-状态压缩dp" class="headerlink" title="1.状态压缩dp"></a>1.状态压缩dp</h2><h2 id="2-背包"><a href="#2-背包" class="headerlink" title="2.背包"></a>2.背包</h2><h3 id="最简单的背包"><a href="#最简单的背包" class="headerlink" title="最简单的背包"></a>最简单的背包</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dp1</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=M;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;=T;j++)&#123;<br>            dp[i][j]=dp[i<span class="hljs-number">-1</span>][j];<br>            <span class="hljs-keyword">if</span>(j-c[i]&gt;=<span class="hljs-number">0</span>) &#123;<br>                dp[i][j] = <span class="hljs-built_in">max</span>(dp[i][j],dp[i - <span class="hljs-number">1</span>][j - c[i]] + w[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;dp[M][T]&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="优化空间复杂度的背包"><a href="#优化空间复杂度的背包" class="headerlink" title="优化空间复杂度的背包"></a>优化空间复杂度的背包</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dp2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= M; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= T; j++) &#123;<br>            dp[<span class="hljs-number">1</span>][j] = dp[<span class="hljs-number">0</span>][j];<br>            <span class="hljs-keyword">if</span> (j - c[i] &gt;= <span class="hljs-number">0</span>) &#123;<br>                dp[<span class="hljs-number">1</span>][j] = <span class="hljs-built_in">max</span>(dp[<span class="hljs-number">1</span>][j], dp[<span class="hljs-number">0</span>][j - c[i]] + w[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h3><p>应该对？凭印象写的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dp3</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=M;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=T;j&gt;=<span class="hljs-number">0</span>;j--)&#123;<br>            <span class="hljs-keyword">if</span>(j-c[i]&gt;=<span class="hljs-number">0</span>)&#123;<br>                dp[j]=dp[j-c[i]]+w[i];<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-状态压缩dp&quot;&gt;&lt;a href=&quot;#1-状态压缩dp&quot; class=&quot;headerlink&quot; title=&quot;1.状态压缩dp&quot;&gt;&lt;/a&gt;1.状态压缩dp&lt;/h2&gt;&lt;h2 id=&quot;2-背包&quot;&gt;&lt;a href=&quot;#2-背包&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="c++" scheme="https://github.com/sterne012/sterne012.github.io/tags/c/"/>
    
    <category term="ACM" scheme="https://github.com/sterne012/sterne012.github.io/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>ACM-String</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2021/11/23/ACM-String/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2021/11/23/ACM-String/</id>
    <published>2021-11-23T02:27:41.000Z</published>
    <updated>2021-11-23T02:48:46.859Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-KMP"><a href="#1-KMP" class="headerlink" title="1.KMP"></a>1.KMP</h2><p><del>看 猫 片</del></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1e4</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> kmp[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">kmp_pre</span><span class="hljs-params">(<span class="hljs-keyword">char</span> x[],<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i,j;<br>    j=kmp[<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;<br>    i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;m)&#123;<br>        <span class="hljs-keyword">while</span>(j!=<span class="hljs-number">-1</span>&amp;&amp;x[i]!=x[j]) j=kmp[j];<br>        kmp[++i]=++j;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">kmp_count</span><span class="hljs-params">(<span class="hljs-keyword">char</span> x[],<span class="hljs-keyword">int</span> m,<span class="hljs-keyword">char</span> y[],<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i,j;<br>    <span class="hljs-built_in">kmp_pre</span>(x,m);<br>    i=j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;n)&#123;<br>        <span class="hljs-keyword">while</span>(j!=<span class="hljs-number">-1</span>&amp;&amp;y[i]!=x[j]) j=kmp[j];<br>        i++;j++;<br>        <span class="hljs-keyword">if</span>(j&gt;=m)&#123;<br>            <span class="hljs-keyword">return</span> i-j+<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-KMP&quot;&gt;&lt;a href=&quot;#1-KMP&quot; class=&quot;headerlink&quot; title=&quot;1.KMP&quot;&gt;&lt;/a&gt;1.KMP&lt;/h2&gt;&lt;p&gt;&lt;del&gt;看 猫 片&lt;/del&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;</summary>
      
    
    
    
    
    <category term="c++" scheme="https://github.com/sterne012/sterne012.github.io/tags/c/"/>
    
    <category term="ACM" scheme="https://github.com/sterne012/sterne012.github.io/tags/ACM/"/>
    
  </entry>
  
</feed>
