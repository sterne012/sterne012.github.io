<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome -Sterne&#39;s Blog-</title>
  
  <subtitle>And in that light, I find deliverance——</subtitle>
  <link href="https://github.com/sterne012/sterne012.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/sterne012/sterne012.github.io/"/>
  <updated>2022-05-13T09:07:56.359Z</updated>
  <id>https://github.com/sterne012/sterne012.github.io/</id>
  
  <author>
    <name>sterne</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构题集整理</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/05/13/DataStructuresTest/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/05/13/DataStructuresTest/</id>
    <published>2022-05-13T06:57:54.000Z</published>
    <updated>2022-05-13T09:07:56.359Z</updated>
    
    <content type="html"><![CDATA[<p>因为考试看不到练习的在线题集，所以放一下原题和代码</p><p><del>但是有一说一，因为blog没做目录，这篇翻起来应该相当痛苦（）</del>可恶，为什么时至今日我才发现目录能调出来</p><h1 id="1-tree"><a href="#1-tree" class="headerlink" title="1.tree"></a>1.tree</h1><h2 id="1-1-funx-二叉树的遍历"><a href="#1-1-funx-二叉树的遍历" class="headerlink" title="1-1(funx) 二叉树的遍历"></a>1-1(funx) 二叉树的遍历</h2><p>本题要求给定二叉树的4种遍历。</p><p>函数接口定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PostorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LevelorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>;<br></code></pre></td></tr></table></figure><p>其中<code>BinTree</code>结构定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span> *<span class="hljs-title">Position</span>;</span><br><span class="hljs-keyword">typedef</span> Position BinTree;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span>&#123;</span><br>    ElementType Data;<br>    BinTree Left;<br>    BinTree Right;<br>&#125;;<br></code></pre></td></tr></table></figure><p>要求4个函数分别按照访问顺序打印出结点的内容，格式为一个空格跟着一个字符。</p><p>裁判测试程序样例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> ElementType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span> *<span class="hljs-title">Position</span>;</span><br><span class="hljs-keyword">typedef</span> Position BinTree;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span>&#123;</span><br>    ElementType Data;<br>    BinTree Left;<br>    BinTree Right;<br>&#125;;<br><br><span class="hljs-function">BinTree <span class="hljs-title">CreatBinTree</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">/* 实现细节忽略 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PostorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LevelorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    BinTree BT = <span class="hljs-built_in">CreatBinTree</span>();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Inorder:&quot;</span>);    <span class="hljs-built_in">InorderTraversal</span>(BT);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Preorder:&quot;</span>);   <span class="hljs-built_in">PreorderTraversal</span>(BT);   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Postorder:&quot;</span>);  <span class="hljs-built_in">PostorderTraversal</span>(BT);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Levelorder:&quot;</span>); <span class="hljs-built_in">LevelorderTraversal</span>(BT); <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/* 你的代码将被嵌在这里 */</span><br></code></pre></td></tr></table></figure><p>输出样例（对于图中给出的树）：</p><img src="/2022/05/13/DataStructuresTest/45.jpg" class="" title="img"><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Inorder</span><span class="hljs-operator">:</span> <span class="hljs-built_in">D</span> <span class="hljs-variable">B</span> <span class="hljs-built_in">E</span> <span class="hljs-variable">F</span> <span class="hljs-variable">A</span> <span class="hljs-variable">G</span> <span class="hljs-variable">H</span> <span class="hljs-built_in">C</span> <span class="hljs-built_in">I</span><br><span class="hljs-variable">Preorder</span><span class="hljs-operator">:</span> <span class="hljs-variable">A</span> <span class="hljs-variable">B</span> <span class="hljs-built_in">D</span> <span class="hljs-variable">F</span> <span class="hljs-built_in">E</span> <span class="hljs-built_in">C</span> <span class="hljs-variable">G</span> <span class="hljs-variable">H</span> <span class="hljs-built_in">I</span><br><span class="hljs-variable">Postorder</span><span class="hljs-operator">:</span> <span class="hljs-built_in">D</span> <span class="hljs-built_in">E</span> <span class="hljs-variable">F</span> <span class="hljs-variable">B</span> <span class="hljs-variable">H</span> <span class="hljs-variable">G</span> <span class="hljs-built_in">I</span> <span class="hljs-built_in">C</span> <span class="hljs-variable">A</span><br><span class="hljs-variable">Levelorder</span><span class="hljs-operator">:</span> <span class="hljs-variable">A</span> <span class="hljs-variable">B</span> <span class="hljs-built_in">C</span> <span class="hljs-built_in">D</span> <span class="hljs-variable">F</span> <span class="hljs-variable">G</span> <span class="hljs-built_in">I</span> <span class="hljs-built_in">E</span> <span class="hljs-variable">H</span><br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c">BinTree q[<span class="hljs-number">10007</span>];<br><span class="hljs-keyword">int</span> front=<span class="hljs-number">0</span>,rear=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(BinTree x)</span></span>&#123;<br>    q[rear++]=x;<br>&#125;<br><span class="hljs-function">BinTree <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> q[front++];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(BT)&#123;<br>        InorderTraversal(BT-&gt;Left);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c&quot;</span>,BT-&gt;Data);<br>        InorderTraversal(BT-&gt;Right);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(BT)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c&quot;</span>,BT-&gt;Data);<br>        PreorderTraversal(BT-&gt;Left);<br>        PreorderTraversal(BT-&gt;Right);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PostorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(BT)&#123;<br>        PostorderTraversal(BT-&gt;Left);<br>        PostorderTraversal(BT-&gt;Right);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c&quot;</span>,BT-&gt;Data);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LevelorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(BT) &#123;<br>        push(BT);<br>        <span class="hljs-keyword">while</span> (front != rear) &#123;<br>            BinTree t = pop();<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c&quot;</span>, t-&gt;Data);<br>            <span class="hljs-keyword">if</span> (t-&gt;Left) push(t-&gt;Left);<br>            <span class="hljs-keyword">if</span> (t-&gt;Right) push(t-&gt;Right);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-1-Tree-Traversals-Again"><a href="#1-1-Tree-Traversals-Again" class="headerlink" title="1-1 Tree Traversals Again"></a>1-1 Tree Traversals Again</h2><p>An inorder binary tree traversal can be implemented in a non-recursive way with a stack. For example, suppose that when a 6-node binary tree (with the keys numbered from 1 to 6) is traversed, the stack operations are: push(1); push(2); push(3); pop(); pop(); push(4); pop(); pop(); push(5); push(6); pop(); pop(). Then a unique binary tree (shown in Figure 1) can be generated from this sequence of operations. Your task is to give the postorder traversal sequence of this tree.</p><img src="/2022/05/13/DataStructuresTest/30-16524268907273.jpg" class="" title="img"><p>Figure 1</p><p>Input Specification:</p><p>Each input file contains one test case. For each case, the first line contains a positive integer <em>N</em> (≤30) which is the total number of nodes in a tree (and hence the nodes are numbered from 1 to <em>N</em>). Then 2<em>N</em> lines follow, each describes a stack operation in the format: “Push X” where X is the index of the node being pushed onto the stack; or “Pop” meaning to pop one node from the stack.</p><p>Output Specification:</p><p>For each test case, print the postorder traversal sequence of the corresponding tree in one line. A solution is guaranteed to exist. All the numbers must be separated by exactly one space, and there must be no extra space at the end of the line.</p><p>Sample Input:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs in">6<br>Push 1<br>Push 2<br>Push 3<br>Pop<br>Pop<br>Push 4<br>Pop<br>Pop<br>Push 5<br>Push 6<br>Pop<br>Pop<br></code></pre></td></tr></table></figure><p>Sample Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">3 4 2 6 5 1<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> data;<br>    node *left, *right;<br>    <span class="hljs-keyword">bool</span> lisnull,risnull;<br>    <span class="hljs-built_in">node</span>()&#123;<br>        left= <span class="hljs-literal">nullptr</span>;<br>        right= <span class="hljs-literal">nullptr</span>;<br>        lisnull=<span class="hljs-literal">false</span>;<br>        risnull=<span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;node,*Tree;<br>stack&lt;Tree&gt; st;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateTree</span><span class="hljs-params">(Tree &amp;T)</span></span>&#123;<br>    string s;<span class="hljs-keyword">int</span> x;<br>    cin&gt;&gt;s&gt;&gt;x;<br>    T-&gt;data=x;<br>    st.<span class="hljs-built_in">push</span>(T);<br>    <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>())&#123;<br>        cin&gt;&gt;s;<br>        <span class="hljs-keyword">if</span>(s==<span class="hljs-string">&quot;Push&quot;</span>)&#123;<br>            cin&gt;&gt;x;<br>            Tree temp=<span class="hljs-keyword">new</span> node;<br>            temp-&gt;data=x;<br>            Tree f=st.<span class="hljs-built_in">top</span>();<br>            <span class="hljs-keyword">if</span>(!f-&gt;lisnull) &#123;<br>                f-&gt;left=temp;<br>                f-&gt;lisnull=<span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!f-&gt;risnull) &#123;<br>                f-&gt;right=temp;<br>                f-&gt;risnull=<span class="hljs-literal">true</span>;<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            st.<span class="hljs-built_in">push</span>(temp);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s==<span class="hljs-string">&quot;Pop&quot;</span>)&#123;<br>            Tree p=st.<span class="hljs-built_in">top</span>();<br>            <span class="hljs-keyword">if</span>(!p-&gt;lisnull)&#123;<br>                p-&gt;left= <span class="hljs-literal">nullptr</span>;<br>                p-&gt;lisnull=<span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                p-&gt;right= <span class="hljs-literal">nullptr</span>;<br>                p-&gt;risnull=<span class="hljs-literal">true</span>;<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PostOrder</span><span class="hljs-params">(Tree T)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(T)&#123;<br>        <span class="hljs-built_in">PostOrder</span>(T-&gt;left);<br>        <span class="hljs-built_in">PostOrder</span>(T-&gt;right);<br>        cout&lt;&lt;T-&gt;data;<br>        <span class="hljs-keyword">if</span>(--n!=<span class="hljs-number">0</span>)&#123;cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;&#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    Tree T=<span class="hljs-keyword">new</span> node;<br>    <span class="hljs-built_in">CreateTree</span>(T);<br>    <span class="hljs-built_in">PostOrder</span>(T);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-2-还原二叉树"><a href="#1-2-还原二叉树" class="headerlink" title="1-2 还原二叉树"></a>1-2 还原二叉树</h2><p>给定一棵二叉树的先序遍历序列和中序遍历序列，要求计算该二叉树的高度。</p><p>输入格式:</p><p>输入首先给出正整数N（≤50），为树中结点总数。下面两行先后给出先序和中序遍历序列，均是长度为N的不包含重复英文字母（区别大小写）的字符串。</p><p>输出格式:</p><p>输出为一个整数，即该二叉树的高度。</p><p>输入样例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs in">9<br>ABDFGHIEC<br>FDHGIBEAC<br></code></pre></td></tr></table></figure><p>输出样例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">5<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> Elemtype;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTree</span>&#123;</span><br>    Elemtype data;<br>    BiTree *lchild,*rchild;<br>&#125;BiTree,*Tree;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">10007</span>;<br>Elemtype pre[maxn],in[maxn];<br><span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br><br><span class="hljs-function">Tree <span class="hljs-title">CreateTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pre_l,<span class="hljs-keyword">int</span> pre_r,<span class="hljs-keyword">int</span> in_l,<span class="hljs-keyword">int</span> in_r)</span></span>&#123;<span class="hljs-comment">//DLR LDR的范围</span><br>    <span class="hljs-keyword">auto</span> T=(Tree)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(BiTree));<br>    T-&gt;data=pre[pre_l];<br>    T-&gt;lchild= <span class="hljs-literal">nullptr</span>;<br>    T-&gt;rchild= <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">int</span> llen,rlen;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=in_l;i&lt;=in_r;i++)&#123;<br>        <span class="hljs-keyword">if</span>(in[i]==T-&gt;data)&#123;<br>            llen=i-in_l;<br>            rlen=in_r-i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(llen)&#123;<br>        T-&gt;lchild=<span class="hljs-built_in">CreateTree</span>(pre_l+<span class="hljs-number">1</span>,pre_l+llen,in_l,in_l+llen<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(rlen)&#123;<br>        T-&gt;rchild=<span class="hljs-built_in">CreateTree</span>(pre_r-rlen+<span class="hljs-number">1</span>,pre_r,in_r-rlen+<span class="hljs-number">1</span>,in_r);<br>    &#125;<br>    <span class="hljs-keyword">return</span> T;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getDepth</span><span class="hljs-params">(Tree T)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!T) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">getDepth</span>(T-&gt;lchild), <span class="hljs-built_in">getDepth</span>(T-&gt;rchild))+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n;cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;pre[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;in[i];<br>    &#125;<br><br>    Tree T= <span class="hljs-built_in">CreateTree</span>(<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,n);<br>    cout&lt;&lt;<span class="hljs-built_in">getDepth</span>(T)&lt;&lt;endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">7</span><br><span class="hljs-comment">ABCDEFG</span><br><span class="hljs-comment">CBEDAFG</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="前中后序遍历建树模板"><a href="#前中后序遍历建树模板" class="headerlink" title="*前中后序遍历建树模板"></a>*前中后序遍历建树模板</h2><p>啊，我想想放哪了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Tree <span class="hljs-title">CreateTree</span><span class="hljs-params">(<span class="hljs-keyword">char</span> in[],<span class="hljs-keyword">char</span> post[],<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    node *p=<span class="hljs-keyword">new</span> node;<br>    p-&gt;data=post[n<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(;i&lt;n&amp;&amp;(in[i]!=p-&gt;data);i++);<br>    p-&gt;l= <span class="hljs-built_in">CreateTree</span>(in,post,i);<br>    p-&gt;r= <span class="hljs-built_in">CreateTree</span>(in+<span class="hljs-number">1</span>+i,post+i,n-i<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><span class="hljs-function">Tree <span class="hljs-title">CreateTree2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pre1,<span class="hljs-keyword">int</span> pre2,<span class="hljs-keyword">int</span> in1,<span class="hljs-keyword">int</span> in2)</span></span>&#123;<br>    node *p=<span class="hljs-keyword">new</span> node;<br>    p-&gt;l= <span class="hljs-literal">nullptr</span>;p-&gt;r= <span class="hljs-literal">nullptr</span>;<br>    p-&gt;data=pre[pre1];<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(in[in1+i]!=p-&gt;data) i++;<br>    <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)<br>        p-&gt;l= <span class="hljs-built_in">CreateTree2</span>(pre1+<span class="hljs-number">1</span>,pre2+i,in1,in1+i<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">if</span>(in1+i&lt;in2)<br>        p-&gt;r= <span class="hljs-built_in">CreateTree2</span>(pre1+i+<span class="hljs-number">1</span>,pre2,in1+i+<span class="hljs-number">1</span>,in2);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-3-玩转二叉树"><a href="#1-3-玩转二叉树" class="headerlink" title="1-3 玩转二叉树"></a>1-3 玩转二叉树</h2><p>给定一棵二叉树的中序遍历和前序遍历，请你先将树做个镜面反转，再输出反转后的层序遍历的序列。所谓镜面反转，是指将所有非叶结点的左右孩子对换。这里假设键值都是互不相等的正整数。</p><p>输入格式：</p><p>输入第一行给出一个正整数<code>N</code>（≤30），是二叉树中结点的个数。第二行给出其中序遍历序列。第三行给出其前序遍历序列。数字间以空格分隔。</p><p>输出格式：</p><p>在一行中输出该树反转后的层序遍历的序列。数字间以1个空格分隔，行首尾不得有多余空格。</p><p>输入样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs in">7<br>1 2 3 4 5 6 7<br>4 1 3 2 6 5 7<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">4 6 1 7 5 3 2<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Elemtype;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTree</span>&#123;</span><br>    Elemtype data;<br>    BiTree *lchild,*rchild;<br>&#125;BiTree,*Tree;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">10007</span>;<br>Elemtype pre[maxn],in[maxn];<br><span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-function">Tree <span class="hljs-title">CreateTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pre_l,<span class="hljs-keyword">int</span> pre_r,<span class="hljs-keyword">int</span> in_l,<span class="hljs-keyword">int</span> in_r)</span></span>&#123;<span class="hljs-comment">//DLR LDR的范围</span><br>    <span class="hljs-keyword">auto</span> T=(Tree)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(BiTree));<br>    T-&gt;data=pre[pre_l];<br>    T-&gt;lchild= <span class="hljs-literal">nullptr</span>;<br>    T-&gt;rchild= <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">int</span> llen,rlen;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=in_l;i&lt;=in_r;i++)&#123;<br>        <span class="hljs-keyword">if</span>(in[i]==T-&gt;data)&#123;<br>            llen=i-in_l;<br>            rlen=in_r-i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(llen)&#123;<br>        T-&gt;lchild=<span class="hljs-built_in">CreateTree</span>(pre_l+<span class="hljs-number">1</span>,pre_l+llen,in_l,in_l+llen<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(rlen)&#123;<br>        T-&gt;rchild=<span class="hljs-built_in">CreateTree</span>(pre_r-rlen+<span class="hljs-number">1</span>,pre_r,in_r-rlen+<span class="hljs-number">1</span>,in_r);<br>    &#125;<br>    <span class="hljs-keyword">return</span> T;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">reverse</span><span class="hljs-params">(Tree T)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(T)&#123;<br>        <span class="hljs-keyword">auto</span> temp=T-&gt;lchild;<br>        T-&gt;lchild=T-&gt;rchild;<br>        T-&gt;rchild=temp;<br>        <span class="hljs-built_in">reverse</span>(T-&gt;lchild);<br>        <span class="hljs-built_in">reverse</span>(T-&gt;rchild);<br>    &#125;<br>&#125;<br>Tree q[<span class="hljs-number">10007</span>];<br><span class="hljs-keyword">int</span> front=<span class="hljs-number">0</span>,rear=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(Tree x)</span></span>&#123;<br>    q[rear++]=x;<br>&#125;<br><span class="hljs-function">Tree <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> q[front++];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LevelorderTraversal</span><span class="hljs-params">( Tree BT )</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(BT) &#123;<br>        <span class="hljs-built_in">push</span>(BT);<br>        <span class="hljs-keyword">while</span> (front != rear) &#123;<br>            Tree t = <span class="hljs-built_in">pop</span>();<br>            cout&lt;&lt;t-&gt;data;<br>            <span class="hljs-keyword">if</span>(--n!=<span class="hljs-number">0</span>) cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>            <span class="hljs-keyword">if</span> (t-&gt;lchild) <span class="hljs-built_in">push</span>(t-&gt;lchild);<br>            <span class="hljs-keyword">if</span> (t-&gt;rchild) <span class="hljs-built_in">push</span>(t-&gt;rchild);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;in[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;pre[i];<br>    &#125;<br><br><br>    Tree T= <span class="hljs-built_in">CreateTree</span>(<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-built_in">reverse</span>(T);<br>    <span class="hljs-built_in">LevelorderTraversal</span>(T);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">7</span><br><span class="hljs-comment">ABCDEFG</span><br><span class="hljs-comment">CBEDAFG</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="1-4-小字辈"><a href="#1-4-小字辈" class="headerlink" title="1-4 小字辈"></a>1-4 小字辈</h2><p>本题给定一个庞大家族的家谱，要请你给出最小一辈的名单。</p><p>输入格式：</p><p>输入在第一行给出家族人口总数 N（不超过 100 000 的正整数） —— 简单起见，我们把家族成员从 1 到 N 编号。随后第二行给出 N 个编号，其中第 i 个编号对应第 i 位成员的父/母。家谱中辈分最高的老祖宗对应的父/母编号为 -1。一行中的数字间以空格分隔。</p><p>输出格式：</p><p>首先输出最小的辈分（老祖宗的辈分为 1，以下逐级递增）。然后在第二行按递增顺序输出辈分最小的成员的编号。编号间以一个空格分隔，行首尾不得有多余空格。</p><p>输入样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs in">9<br>2 6 5 5 -1 5 6 4 7<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs out">4<br>1 9<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1e5</span>+<span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> n,f,maxdep;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; vec[maxn];<br><span class="hljs-keyword">int</span> depth[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(depth,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(depth));<br>    queue&lt;<span class="hljs-keyword">int</span>&gt;que;<br>    que.<span class="hljs-built_in">push</span>(f);<br>    depth[f]=<span class="hljs-number">1</span>;<br>    maxdep=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-keyword">int</span> temp=que.<span class="hljs-built_in">front</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;vec[temp].<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-keyword">int</span> node=vec[temp][i];<br>            depth[node]=depth[temp]+<span class="hljs-number">1</span>;<br>            maxdep=depth[node];<br>            que.<span class="hljs-built_in">push</span>(node);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">int</span> y;cin&gt;&gt;y;<br>        <span class="hljs-keyword">if</span>(y==<span class="hljs-number">-1</span>) f=i;<br>        vec[y].<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <span class="hljs-built_in">bfs</span>();<br>    cout&lt;&lt;maxdep&lt;&lt;endl;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(depth[i]==maxdep) &#123;<br>            <span class="hljs-keyword">if</span>(!cnt)&#123;<br>                cout&lt;&lt;i;<br>                cnt=<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;i;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-5-列出叶节点"><a href="#1-5-列出叶节点" class="headerlink" title="1-5 列出叶节点"></a>1-5 列出叶节点</h2><p>对于给定的二叉树，本题要求你按从上到下、从左到右的顺序输出其所有叶节点。</p><p>输入格式：</p><p>首先第一行给出一个正整数 <em>N</em>（≤10），为树中结点总数。树中的结点从 0 到 <em>N</em>−1 编号。随后 <em>N</em> 行，每行给出一个对应结点左右孩子的编号。如果某个孩子不存在，则在对应位置给出 “-“。编号间以 1 个空格分隔。</p><p>输出格式：</p><p>在一行中按规定顺序输出叶节点的编号。编号间以 1 个空格分隔，行首尾不得有多余空格。</p><p>输入样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs in">8<br>1 -<br>- -<br>0 -<br>2 7<br>- -<br>- -<br>5 -<br>4 6<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">4 1 5<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> left,right;<br>    <span class="hljs-keyword">int</span> f;<br>&#125;tree[<span class="hljs-number">107</span>];<br>vector&lt;<span class="hljs-keyword">int</span>&gt; ans;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">107</span>;i++)&#123;<br>        tree[i].left=<span class="hljs-number">-1</span>;<br>        tree[i].right=<span class="hljs-number">-1</span>;<br>        tree[i].f=<span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    queue&lt;<span class="hljs-keyword">int</span>&gt;que;<br>    que.<span class="hljs-built_in">push</span>(x);<br>    <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-keyword">int</span> temp=que.<span class="hljs-built_in">front</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">int</span> l=tree[temp].left,r=tree[temp].right;<br>        <span class="hljs-keyword">if</span>(l==<span class="hljs-number">-1</span>&amp;&amp;r==<span class="hljs-number">-1</span>)&#123;<br>            ans.<span class="hljs-built_in">push_back</span>(temp);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(l!=<span class="hljs-number">-1</span>)&#123;<br>            que.<span class="hljs-built_in">push</span>(l);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(r!=<span class="hljs-number">-1</span>)&#123;<br>            que.<span class="hljs-built_in">push</span>(r);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        string x,y;cin&gt;&gt;x&gt;&gt;y;<br>        <span class="hljs-keyword">if</span>(x!=<span class="hljs-string">&quot;-&quot;</span>)&#123;<br>            <span class="hljs-keyword">int</span> t=<span class="hljs-built_in">stoi</span>(x);<br>            tree[i].left=t;<br>            tree[t].f=i;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(y!=<span class="hljs-string">&quot;-&quot;</span>)&#123;<br>            <span class="hljs-keyword">int</span> t=<span class="hljs-built_in">stoi</span>(y);<br>            tree[i].right=t;<br>            tree[t].f=i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(tree[i].f==<span class="hljs-number">-1</span>)&#123;<br>            <span class="hljs-built_in">bfs</span>(i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;ans.<span class="hljs-built_in">size</span>();i++)&#123;<br>        <span class="hljs-keyword">if</span>(!i)cout&lt;&lt;ans[i];<br>        <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;ans[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-6-修理牧场"><a href="#1-6-修理牧场" class="headerlink" title="1-6 修理牧场"></a>1-6 修理牧场</h2><p>农夫要修理牧场的一段栅栏，他测量了栅栏，发现需要<em>N</em>块木头，每块木头长度为整数<em>L**i</em>个长度单位，于是他购买了一条很长的、能锯成<em>N</em>块的木头，即该木头的长度是<em>L**i</em>的总和。</p><p>但是农夫自己没有锯子，请人锯木的酬金跟这段木头的长度成正比。为简单起见，不妨就设酬金等于所锯木头的长度。例如，要将长度为20的木头锯成长度为8、7和5的三段，第一次锯木头花费20，将木头锯成12和8；第二次锯木头花费12，将长度为12的木头锯成7和5，总花费为32。如果第一次将木头锯成15和5，则第二次锯木头花费15，总花费为35（大于32）。</p><p>请编写程序帮助农夫计算将木头锯成<em>N</em>块的最少花费。</p><p>输入格式:</p><p>输入首先给出正整数<em>N</em>（≤104），表示要将木头锯成<em>N</em>块。第二行给出<em>N</em>个正整数（≤50），表示每段木块的长度。</p><p>输出格式:</p><p>输出一个整数，即将木头锯成<em>N</em>块的最少花费。</p><p>输入样例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs in">8<br>4 5 1 2 1 3 1 1<br></code></pre></td></tr></table></figure><p>输出样例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">49<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//huffman树所有非叶节点权值和</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">10007</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span> &#123;</span><br>    <span class="hljs-keyword">int</span> weight;<br>    <span class="hljs-keyword">int</span> pos;<br>    <span class="hljs-keyword">int</span> left,right;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> TreeNode &amp;a)<span class="hljs-keyword">const</span>&#123;<span class="hljs-comment">//使用优先队列，重载小于号，使优先队列变为按照weight值从小到大排序</span><br>        <span class="hljs-keyword">return</span> weight&gt;a.weight;<br>    &#125;<br>    <span class="hljs-built_in">TreeNode</span>() &#123;<span class="hljs-comment">//结构体构造函数</span><br>        weight = inf;<span class="hljs-comment">//将权的初始值置为</span><br>        pos=<span class="hljs-number">0</span>;<br>        left=right=<span class="hljs-number">-1</span>;<br>    &#125;;<br>&#125;;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> a[maxn];<br>TreeNode T[<span class="hljs-number">10</span>*maxn];<br><span class="hljs-function">ll <span class="hljs-title">Huffman</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[],<span class="hljs-keyword">int</span> n)</span></span>&#123;<span class="hljs-comment">//通过给定的权值建立哈夫曼树</span><br>    ll ans=<span class="hljs-number">0</span>;<br>    priority_queue&lt;TreeNode&gt; que;<span class="hljs-comment">//优先队列</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        TreeNode temp;<br>        temp.weight=a[i];<br>        temp.pos=i;<br>        T[i]=temp;<br>        que.<span class="hljs-built_in">push</span>(temp);<br>    &#125;<span class="hljs-comment">//构建结点,将结点存入数组中并存入队列</span><br>    <span class="hljs-keyword">int</span> cnt=n;<br>    <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-keyword">auto</span> n1=que.<span class="hljs-built_in">top</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">auto</span> n2=que.<span class="hljs-built_in">top</span>();<br>        que.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//取出最小的两个权值并将其从队列中删除</span><br>        TreeNode newNode;<span class="hljs-comment">//建n1和n2的父节点，下面是一些赋值操作</span><br>        newNode.weight=n1.weight+n2.weight;<span class="hljs-comment">//父节点权值等于n1和n2权值之和</span><br>        ans+=newNode.weight;<br>        newNode.pos=cnt;<span class="hljs-comment">//记录父节点的位置</span><br>        newNode.left=n1.pos;<span class="hljs-comment">//记录左孩子和右孩子在数组中的位置</span><br>        newNode.right=n2.pos;<br><span class="hljs-comment">//        T[n1.pos].parent=T[n2.pos].parent=newNode.pos;//记录左孩子和右孩子的父节点的位置</span><br>        T[cnt++]=newNode;<span class="hljs-comment">//将父节点存入数组T中</span><br>        <span class="hljs-keyword">if</span>(cnt==<span class="hljs-number">2</span>*n<span class="hljs-number">-1</span>) <span class="hljs-keyword">break</span>;<span class="hljs-comment">//已录入全部结点信息  N = 2*n0-1</span><br>        que.<span class="hljs-built_in">push</span>(newNode);<span class="hljs-comment">//将父节点存入队列，进行下一次循环，再取权值最小的两个节点进行连接</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;a[i];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>) cout&lt;&lt;<span class="hljs-number">0</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-built_in">Huffman</span>(a,n)&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-7-ZigZagging-on-a-Tree"><a href="#1-7-ZigZagging-on-a-Tree" class="headerlink" title="1-7 ZigZagging on a Tree"></a>1-7 ZigZagging on a Tree</h2><p>Suppose that all the keys in a binary tree are distinct positive integers. A unique binary tree can be determined by a given pair of postorder and inorder traversal sequences. And it is a simple standard routine to print the numbers in level-order. However, if you think the problem is too simple, then you are too naive. This time you are supposed to print the numbers in “zigzagging order” – that is, starting from the root, print the numbers level-by-level, alternating between left to right and right to left. For example, for the following tree you must output: 1 11 5 8 17 12 20 15.</p><img src="/2022/05/13/DataStructuresTest/337cbfb0-a7b2-4500-9664-318e9ffc870e.jpg" class="" title="zigzag.jpg"><p>Input Specification:</p><p>Each input file contains one test case. For each case, the first line gives a positive integer N (≤30), the total number of nodes in the binary tree. The second line gives the inorder sequence and the third line gives the postorder sequence. All the numbers in a line are separated by a space.</p><p>Output Specification:</p><p>For each test case, print the zigzagging sequence of the tree in a line. All the numbers in a line must be separated by exactly one space, and there must be no extra space at the end of the line.</p><p>Sample Input:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs in">8<br>12 11 20 17 1 15 8 5<br>12 20 17 11 15 8 5 1<br></code></pre></td></tr></table></figure><p>Sample Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">1 11 5 8 17 12 20 15<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">50</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    node *l,*r;<br>    <span class="hljs-keyword">int</span> data;<br>    <span class="hljs-keyword">int</span> depth;<br>    <span class="hljs-built_in">node</span>()&#123;<br>        l=r= <span class="hljs-literal">nullptr</span>;<br>        data=<span class="hljs-number">0</span>;<br>        depth=<span class="hljs-number">0</span>;<br>    &#125;<br>&#125;node,*Tree;<br><span class="hljs-keyword">int</span> in[maxn],post[maxn];<br><span class="hljs-function">Tree <span class="hljs-title">CreateTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> in[],<span class="hljs-keyword">int</span> post[],<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    node *p=<span class="hljs-keyword">new</span> node;<br>    p-&gt;data=post[n<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(;i&lt;n&amp;&amp;(in[i]!=p-&gt;data);i++);<br>    p-&gt;l= <span class="hljs-built_in">CreateTree</span>(in,post,i);<br>    p-&gt;r= <span class="hljs-built_in">CreateTree</span>(in+<span class="hljs-number">1</span>+i,post+i,n-i<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">point</span>&#123;</span><br>    <span class="hljs-keyword">int</span> data;<br>    <span class="hljs-keyword">int</span> depth;<br>    <span class="hljs-built_in">point</span>()&#123;&#125;<br>    <span class="hljs-built_in">point</span>(<span class="hljs-keyword">int</span> da,<span class="hljs-keyword">int</span> de)&#123;<br>        data=da;<br>        depth=de;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">int</span> depth[maxn];<br>vector&lt;point&gt; ans;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(depth,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(depth));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Zig</span><span class="hljs-params">(Tree T)</span></span>&#123;<span class="hljs-comment">//深度反转</span><br>    queue&lt;Tree&gt;que;<br>    T-&gt;depth=<span class="hljs-number">1</span>;<br>    que.<span class="hljs-built_in">push</span>(T);<br>    <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())&#123;<br>        Tree temp=que.<span class="hljs-built_in">front</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br>        ans.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">point</span>(temp-&gt;data,temp-&gt;depth));<br>        <span class="hljs-keyword">int</span> d=temp-&gt;depth;<br>        <span class="hljs-keyword">if</span>(temp-&gt;l) &#123;<br>            temp-&gt;l-&gt;depth=d+<span class="hljs-number">1</span>;<br>            que.<span class="hljs-built_in">push</span>(temp-&gt;l);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(temp-&gt;r)&#123;<br>            temp-&gt;r-&gt;depth=d+<span class="hljs-number">1</span>;<br>            que.<span class="hljs-built_in">push</span>(temp-&gt;r);<br>        &#125;<br>    &#125;<br>    stack&lt;<span class="hljs-keyword">int</span>&gt;st;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;ans.<span class="hljs-built_in">size</span>();i++)&#123;<br>        <span class="hljs-keyword">if</span>(ans[i].depth%<span class="hljs-number">2</span>)&#123;<br>            st.<span class="hljs-built_in">push</span>(ans[i].data);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>())&#123;<br>                <span class="hljs-keyword">if</span>(!cnt) &#123;<br>                    cout&lt;&lt;st.<span class="hljs-built_in">top</span>();<br>                    cnt++;<br>                &#125;<br>                <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;st.<span class="hljs-built_in">top</span>();<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;ans[i].data;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-keyword">if</span>(!cnt) &#123;<br>            cout&lt;&lt;st.<span class="hljs-built_in">top</span>();<br>            cnt++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;st.<span class="hljs-built_in">top</span>();<br>        &#125;<br>        st.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n;cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;in[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;post[i];<br>    &#125;<br><br>    Tree T= <span class="hljs-built_in">CreateTree</span>(in,post,n);<br>    <span class="hljs-built_in">Zig</span>(T);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="1-8-Path-of-Equal-Weight"><a href="#1-8-Path-of-Equal-Weight" class="headerlink" title="1-8 Path of Equal Weight"></a>1-8 Path of Equal Weight</h2><p>Given a non-empty tree with root <em>R</em>, and with weight <em>W**i</em> assigned to each tree node <em>T**i</em>. The <strong>weight of a path from *R* to *L*</strong> is defined to be the sum of the weights of all the nodes along the path from <em>R</em> to any leaf node <em>L</em>.</p><p>Now given any weighted tree, you are supposed to find all the paths with their weights equal to a given number. For example, let’s consider the tree showed in the following figure: for each node, the upper number is the node ID which is a two-digit number, and the lower number is the weight of that node. Suppose that the given number is 24, then there exists 4 different paths which have the same given weight: {10 5 2 7}, {10 4 10}, {10 3 3 6 2} and {10 3 3 6 2}, which correspond to the red edges in the figure.</p><img src="/2022/05/13/DataStructuresTest/212.jpg" class="" title="img"><p>Input Specification:</p><p>Each input file contains one test case. Each case starts with a line containing 0&lt;<em>N</em>≤100, the number of nodes in a tree, <em>M</em> (&lt;<em>N</em>), the number of non-leaf nodes, and 0&lt;<em>S</em>&lt;230, the given weight number. The next line contains <em>N</em> positive numbers where <em>W**i</em> (&lt;1000) corresponds to the tree node <em>T**i</em>. Then <em>M</em> lines follow, each in the format:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ID K ID<span class="hljs-selector-attr">[1]</span> ID<span class="hljs-selector-attr">[2]</span> ... ID<span class="hljs-selector-attr">[K]</span><br></code></pre></td></tr></table></figure><p>where <code>ID</code> is a two-digit number representing a given non-leaf node, <code>K</code> is the number of its children, followed by a sequence of two-digit <code>ID</code>‘s of its children. For the sake of simplicity, let us fix the root ID to be <code>00</code>.</p><p>Output Specification:</p><p>For each test case, print all the paths with weight S in <strong>non-increasing</strong> order. Each path occupies a line with printed weights from the root to the leaf in order. All the numbers must be separated by a space with no extra space at the end of the line.</p><p>Note: sequence {<em>A</em>1,<em>A</em>2,⋯,<em>A**n</em>} is said to be <strong>greater than</strong> sequence {<em>B</em>1,<em>B</em>2,⋯,<em>B**m</em>} if there exists 1≤<em>k</em>&lt;*min*{*n*,*m*} such that *A<em><em>i</em>=<em>B**i</em> for <em>i</em>=1,⋯,<em>k</em>, and <em>A**k</em>+1&gt;*B**k</em>+1.</p><p>Sample Input:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs in">20 9 24<br>10 2 4 3 5 10 2 18 9 7 2 2 1 3 12 1 8 6 2 2<br>00 4 01 02 03 04<br>02 1 05<br>04 2 06 07<br>03 3 11 12 13<br>06 1 09<br>07 2 08 10<br>16 1 15<br>13 3 14 16 17<br>17 2 18 19<br></code></pre></td></tr></table></figure><p>Sample Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs out">10 5 2 7<br>10 4 10<br>10 3 3 6 2<br>10 3 3 6 2<br></code></pre></td></tr></table></figure><p>Special thanks to Zhang Yuan and Yang Han for their contribution to the judge’s data.</p><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//注：未知原因2个测试点不过</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">300</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">int</span> n,m;<br>ll s;<br>ll weight[maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> num;<br>    ll w;<br>    <span class="hljs-built_in">node</span>(<span class="hljs-keyword">int</span> n)&#123;<br>        num=n;<br>        w=<span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">order</span>&#123;</span><br>    <span class="hljs-keyword">int</span> arr[maxn],l;<br>    <span class="hljs-built_in">order</span>(ll a[],<span class="hljs-keyword">int</span> len)&#123;<br>        l=len;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>            arr[i]=a[i];<br>        &#125;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(order &amp;a,order &amp;b)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;a.l&amp;&amp;i&lt;b.l;i++)&#123;<br>        <span class="hljs-keyword">if</span>(a.arr[i]&gt;b.arr[i]) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>vector&lt;node&gt; T[maxn];<br>vector&lt;ll&gt; route[maxn];<br>vector&lt;order&gt; output;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,ll w)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!T[x].<span class="hljs-built_in">size</span>())&#123;<br>        <span class="hljs-keyword">if</span>(w==s)&#123;<br>            route[x].<span class="hljs-built_in">push_back</span>(weight[x]);<br>            ll arr[maxn];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;route[x].<span class="hljs-built_in">size</span>();i++)&#123;<br>                arr[i]=route[x][i];<br>            &#125;<br>            output.<span class="hljs-built_in">emplace_back</span>(arr,route[x].<span class="hljs-built_in">size</span>());<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;T[x].<span class="hljs-built_in">size</span>();i++)&#123;<br>        <span class="hljs-keyword">int</span> temp=T[x][i].num;<br>        T[x][i].w=w+weight[temp];<br>        route[temp]=route[x];<br>        route[temp].<span class="hljs-built_in">push_back</span>(weight[x]);<br>        <span class="hljs-built_in">dfs</span>(temp,w+weight[temp]);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;weight[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-keyword">int</span> num,mm;cin&gt;&gt;num&gt;&gt;mm;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;mm;j++)&#123;<br>            <span class="hljs-keyword">int</span> x;cin&gt;&gt;x;<br>            T[num].<span class="hljs-built_in">emplace_back</span>(x);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,weight[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">sort</span>(output.<span class="hljs-built_in">begin</span>(),output.<span class="hljs-built_in">end</span>(),cmp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;output.<span class="hljs-built_in">size</span>();i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;output[i].l;j++)&#123;<br>            cout&lt;&lt;output[i].arr[j];<br>            <span class="hljs-keyword">if</span>(j!=output[i].l<span class="hljs-number">-1</span>) cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>        cout&lt;&lt;endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-9-哈夫曼编码"><a href="#1-9-哈夫曼编码" class="headerlink" title="1-9 哈夫曼编码"></a>1-9 哈夫曼编码</h2><p>给定一段文字，如果我们统计出字母出现的频率，是可以根据哈夫曼算法给出一套编码，使得用此编码压缩原文可以得到最短的编码总长。然而哈夫曼编码并不是唯一的。例如对字符串”aaaxuaxz”，容易得到字母 ‘a’、’x’、’u’、’z’ 的出现频率对应为 4、2、1、1。我们可以设计编码 {‘a’=0, ‘x’=10, ‘u’=110, ‘z’=111}，也可以用另一套 {‘a’=1, ‘x’=01, ‘u’=001, ‘z’=000}，还可以用 {‘a’=0, ‘x’=11, ‘u’=100, ‘z’=101}，三套编码都可以把原文压缩到 14 个字节。但是 {‘a’=0, ‘x’=01, ‘u’=011, ‘z’=001} 就不是哈夫曼编码，因为用这套编码压缩得到 00001011001001 后，解码的结果不唯一，”aaaxuaxz” 和 “aazuaxax” 都可以对应解码的结果。本题就请你判断任一套编码是否哈夫曼编码。</p><p>输入格式：</p><p>首先第一行给出一个正整数 <em>N</em>（2≤<em>N</em>≤63），随后第二行给出 <em>N</em> 个不重复的字符及其出现频率，格式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">c<span class="hljs-selector-attr">[1]</span> f<span class="hljs-selector-attr">[1]</span> c<span class="hljs-selector-attr">[2]</span> f<span class="hljs-selector-attr">[2]</span> ... c<span class="hljs-selector-attr">[N]</span> f<span class="hljs-selector-attr">[N]</span><br></code></pre></td></tr></table></figure><p>其中<code>c[i]</code>是集合{‘0’ - ‘9’, ‘a’ - ‘z’, ‘A’ - ‘Z’, ‘_’}中的字符；<code>f[i]</code>是<code>c[i]</code>的出现频率，为不超过 1000 的整数。再下一行给出一个正整数 <em>M</em>（≤1000），随后是 <em>M</em> 套待检的编码。每套编码占 <em>N</em> 行，格式为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">c<span class="hljs-selector-attr">[i]</span> <span class="hljs-selector-tag">code</span><span class="hljs-selector-attr">[i]</span><br></code></pre></td></tr></table></figure><p>其中<code>c[i]</code>是第<code>i</code>个字符；<code>code[i]</code>是不超过63个’0’和’1’的非空字符串。</p><p>输出格式：</p><p>对每套待检编码，如果是正确的哈夫曼编码，就在一行中输出”Yes”，否则输出”No”。</p><p>注意：最优编码并不一定通过哈夫曼算法得到。任何能压缩到最优长度的前缀编码都应被判为正确。</p><p>输入样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs in">7<br>A 1 B 1 C 1 D 3 E 3 F 6 G 6<br>4<br>A 00000<br>B 00001<br>C 0001<br>D 001<br>E 01<br>F 10<br>G 11<br>A 01010<br>B 01011<br>C 0100<br>D 011<br>E 10<br>F 11<br>G 00<br>A 000<br>B 001<br>C 010<br>D 011<br>E 100<br>F 101<br>G 110<br>A 00000<br>B 00001<br>C 0001<br>D 001<br>E 00<br>F 10<br>G 11<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs out">Yes<br>Yes<br>No<br>No<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//注：我tm上学期就见过你了，抄的代码，爬</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> R register</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> L long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LL long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> I inline</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> U unsigned</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">I LL <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    R LL   x;<br>    R <span class="hljs-keyword">bool</span> f;<br>    R <span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">for</span>(f=<span class="hljs-number">0</span>;(c=<span class="hljs-built_in">getchar</span>())&lt;<span class="hljs-string">&#x27;0&#x27;</span>||c&gt;<span class="hljs-string">&#x27;9&#x27;</span>;f=c==<span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span>(x=c-<span class="hljs-string">&#x27;0&#x27;</span>;(c=<span class="hljs-built_in">getchar</span>())&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="hljs-string">&#x27;9&#x27;</span>;x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c-<span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">return</span> f?-x:x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 1000</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>*<span class="hljs-title">l</span>,*<span class="hljs-title">r</span>;</span><br>    <span class="hljs-keyword">int</span>        value;<br>    <span class="hljs-keyword">char</span>       code;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">const</span> node *a,<span class="hljs-keyword">const</span> node *b)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> a-&gt;value&gt;b-&gt;value;<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DataT</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span>  value;<br>    <span class="hljs-keyword">char</span> code;<br>&#125;;<br><br>DataT Data[MAXN];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getValue</span><span class="hljs-params">(<span class="hljs-keyword">char</span> code,<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>        <span class="hljs-keyword">if</span>(Data[i].code==code)<br>            <span class="hljs-keyword">return</span> Data[i].value;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">node*<span class="hljs-title">newNode</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    node*tmp=(node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(node));<br>    tmp-&gt;l=tmp-&gt;r=<span class="hljs-literal">NULL</span>;<br>    tmp-&gt;value=<span class="hljs-number">0</span>;<br>    tmp-&gt;code =<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> tmp;<br>&#125;<br><br><span class="hljs-keyword">bool</span> ERR_FLAG=<span class="hljs-literal">false</span>;<br><br><span class="hljs-function">node*<span class="hljs-title">addTree</span><span class="hljs-params">(node*rt,<span class="hljs-keyword">char</span> c,<span class="hljs-keyword">char</span> s[],<span class="hljs-keyword">int</span> Datan,<span class="hljs-keyword">int</span> sn,<span class="hljs-keyword">int</span> si)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(sn==si)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(rt!=<span class="hljs-literal">NULL</span>)<br>        &#123;<br>            ERR_FLAG=<span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">return</span> rt;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            node*tmp=<span class="hljs-built_in">newNode</span>();<br>            tmp-&gt;value=<span class="hljs-built_in">getValue</span>(c,Datan)*sn;<br>            <span class="hljs-keyword">return</span> tmp;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!rt)rt=<span class="hljs-built_in">newNode</span>();<br>    <span class="hljs-keyword">if</span>(s[si]==<span class="hljs-string">&#x27;0&#x27;</span>)<br>        rt-&gt;l=<span class="hljs-built_in">addTree</span>(rt-&gt;l,c,s,Datan,sn,si+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">else</span><br>        rt-&gt;r=<span class="hljs-built_in">addTree</span>(rt-&gt;r,c,s,Datan,sn,si+<span class="hljs-number">1</span>);<br>    rt-&gt;value=((rt-&gt;l)?(rt-&gt;l-&gt;value):<span class="hljs-number">0</span>)+((rt-&gt;r)?(rt-&gt;r-&gt;value):<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> rt;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ddfs</span><span class="hljs-params">(node *rt,<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(!rt)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(rt-&gt;l||rt-&gt;r)<br>        rt-&gt;value=<span class="hljs-built_in">ddfs</span>(rt-&gt;l,n+<span class="hljs-number">1</span>)+<span class="hljs-built_in">ddfs</span>(rt-&gt;r,n+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        rt-&gt;value*=n;<br>    &#125;<br>    <span class="hljs-keyword">return</span> rt-&gt;value;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getAns</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    priority_queue &lt;node*,vector&lt;node*&gt;,node&gt; q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>    &#123;<br>        node * tmp=<span class="hljs-built_in">newNode</span>();<br>        *tmp=(node)&#123;<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>,Data[i].value,Data[i].code&#125;;<br>        q.<span class="hljs-built_in">push</span>(tmp);<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span>)<br>    &#123;<br>        node* t1=q.<span class="hljs-built_in">top</span>();q.<span class="hljs-built_in">pop</span>();<br>        node* t2=q.<span class="hljs-built_in">top</span>();q.<span class="hljs-built_in">pop</span>();<br>        node * tmp=<span class="hljs-built_in">newNode</span>();<br>        tmp-&gt;l=t1;<br>        tmp-&gt;r=t2;<br>        tmp-&gt;value=t1-&gt;value+t2-&gt;value;<br>        q.<span class="hljs-built_in">push</span>(tmp);<br>    &#125;<br>    <span class="hljs-keyword">return</span>  <span class="hljs-built_in">ddfs</span>(q.<span class="hljs-built_in">top</span>(),<span class="hljs-number">0</span>);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//     freopen(&quot;7-1.in&quot;,&quot;r&quot;,stdin);</span><br><span class="hljs-comment">//  freopen(&quot;7-1.out&quot;,&quot;w&quot;,stdout);</span><br>    <span class="hljs-keyword">int</span>     n=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>    &#123;<br>        <span class="hljs-keyword">char</span> s[<span class="hljs-number">10</span>];<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%d&quot;</span>,s,&amp;Data[i].value);<br>        Data[i].code=s[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-built_in">getAns</span>(n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t=<span class="hljs-built_in">read</span>();t--;)<br>    &#123;<br>        ERR_FLAG=<span class="hljs-literal">false</span>;<br>        node    *rt=<span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i  =<span class="hljs-number">0</span>;i&lt;n;++i)<br>        &#123;<br>            <span class="hljs-keyword">char</span> c[<span class="hljs-number">10</span>],s[MAXN];<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s&quot;</span>,c,s);<br>            <span class="hljs-keyword">if</span>(!ERR_FLAG)<br>                rt=<span class="hljs-built_in">addTree</span>(rt,c[<span class="hljs-number">0</span>],s,n,<span class="hljs-built_in">strlen</span>(s),<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,(!ERR_FLAG&amp;&amp;(!rt||rt-&gt;value==ans))?<span class="hljs-string">&quot;Yes&quot;</span>:<span class="hljs-string">&quot;No&quot;</span>);<br>    &#125;<br>    <br>    <br><span class="hljs-comment">//     fclose(stdin);</span><br><span class="hljs-comment">//     fclose(stdout);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-sort"><a href="#2-sort" class="headerlink" title="2.sort"></a>2.sort</h1><h2 id="2-1-funx-Iterative-Mergesort"><a href="#2-1-funx-Iterative-Mergesort" class="headerlink" title="2-1(funx) Iterative Mergesort"></a>2-1(funx) Iterative Mergesort</h2><p>How would you implement mergesort without using recursion?</p><p>The idea of iterative mergesort is to start from N sorted sublists of length 1, and each time to merge a pair of adjacent sublists until one sorted list is obtained. You are supposed to implement the key function of merging.</p><p>Format of functions:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_pass</span><span class="hljs-params">( ElementType list[], ElementType sorted[], <span class="hljs-keyword">int</span> N, <span class="hljs-keyword">int</span> length )</span></span>;<br></code></pre></td></tr></table></figure><p>The function <code>merge_pass</code> performs one pass of the merge sort that merges adjacent pairs of sublists from <code>list</code> into <code>sorted</code>. <code>N</code> is the number of elements in the <code>list</code> and <code>length</code> is the length of the sublists.</p><p>Sample program of judge:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ElementType int</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 100</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_pass</span><span class="hljs-params">( ElementType list[], ElementType sorted[], <span class="hljs-keyword">int</span> N, <span class="hljs-keyword">int</span> length )</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">( ElementType list[], <span class="hljs-keyword">int</span> N )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;N; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, list[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span>  <span class="hljs-title">merge_sort</span><span class="hljs-params">( ElementType list[],  <span class="hljs-keyword">int</span> N )</span></span><br><span class="hljs-function"></span>&#123;<br>    ElementType extra[MAXN];  <span class="hljs-comment">/* the extra space required */</span><br>    <span class="hljs-keyword">int</span>  length = <span class="hljs-number">1</span>;  <span class="hljs-comment">/* current length of sublist being merged */</span><br>    <span class="hljs-keyword">while</span>( length &lt; N ) &#123; <br>        <span class="hljs-built_in">merge_pass</span>( list, extra, N, length ); <span class="hljs-comment">/* merge list into extra */</span><br>        <span class="hljs-built_in">output</span>( extra, N );<br>        length *= <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">merge_pass</span>( extra, list, N, length ); <span class="hljs-comment">/* merge extra back to list */</span><br>        <span class="hljs-built_in">output</span>( list, N );<br>        length *= <span class="hljs-number">2</span>;<br>    &#125;<br>&#125; <br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> N, i;<br>    ElementType A[MAXN];<br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;N);<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;N; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;A[i]);<br>    <span class="hljs-built_in">merge_sort</span>(A, N);<br>    <span class="hljs-built_in">output</span>(A, N);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* Your function will be put here */</span><br></code></pre></td></tr></table></figure><p>Sample Input:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs in">10<br>8 7 9 2 3 5 1 6 4 0<br></code></pre></td></tr></table></figure><p>Sample Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs out">7 8 2 9 3 5 1 6 0 4 <br>2 7 8 9 1 3 5 6 0 4 <br>1 2 3 5 6 7 8 9 0 4 <br>0 1 2 3 4 5 6 7 8 9 <br>0 1 2 3 4 5 6 7 8 9 <br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_pass</span><span class="hljs-params">( ElementType <span class="hljs-built_in">list</span>[], ElementType sorted[], <span class="hljs-keyword">int</span> N, <span class="hljs-keyword">int</span> length )</span></span>&#123;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;N&amp;&amp;i+length&lt;N;i+=length*<span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">int</span> p=i,q=i+length;<br>        <span class="hljs-keyword">while</span>(p&lt;i+length&amp;&amp;q&lt;i+length*<span class="hljs-number">2</span>&amp;&amp;q&lt;N)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>[p]&lt;<span class="hljs-built_in">list</span>[q]) sorted[cnt++]=<span class="hljs-built_in">list</span>[p++];<br>            <span class="hljs-keyword">else</span> sorted[cnt++]=<span class="hljs-built_in">list</span>[q++];<br>        &#125;<br>        <span class="hljs-keyword">while</span>(p&lt;i+length) sorted[cnt++]=<span class="hljs-built_in">list</span>[p++];<br>        <span class="hljs-keyword">while</span>(q&lt;i+length*<span class="hljs-number">2</span>&amp;&amp;q&lt;N) sorted[cnt++]=<span class="hljs-built_in">list</span>[q++];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(i+length&gt;=N)&#123;<br>        <span class="hljs-keyword">while</span>(i&lt;N) sorted[cnt++]=<span class="hljs-built_in">list</span>[i++];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-funx-The-Kth-Largest-in-BST"><a href="#2-2-funx-The-Kth-Largest-in-BST" class="headerlink" title="2-2(funx)  The Kth Largest in BST"></a>2-2(funx)  The Kth Largest in BST</h2><p>Given a binary search tree, you are supposed to find the node that contains the <em>K</em>-th largest key.</p><p>Format of function:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">BinTree <span class="hljs-title">KthLargest</span> <span class="hljs-params">( BinTree T, <span class="hljs-keyword">int</span> K )</span></span>;<br></code></pre></td></tr></table></figure><p>where <code>BinTree</code> is defined as the following:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span> *<span class="hljs-title">BinTree</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span>&#123;</span><br>    <span class="hljs-keyword">int</span> Key;<br>    BinTree Left;<br>    BinTree Right;<br>&#125;;<br></code></pre></td></tr></table></figure><p>The function <code>KthLargest</code> is supposed to return the pointer that points to the node that contains the <code>K</code>-th largest key in the binary search tree <code>T</code>.</p><p>Here <code>T</code> is not empty and all its keys are distinct positive integers. <code>K</code> is positive and is never more than the total number of nodes in the tree.</p><p>Sample program of judge:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span> *<span class="hljs-title">BinTree</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span>&#123;</span><br>    <span class="hljs-keyword">int</span> Key;<br>    BinTree Left;<br>    BinTree Right;<br>&#125;;<br><br><span class="hljs-function">BinTree <span class="hljs-title">BuildTree</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">/* details omitted */</span><br><span class="hljs-function">BinTree <span class="hljs-title">KthLargest</span> <span class="hljs-params">( BinTree T, <span class="hljs-keyword">int</span> K )</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    BinTree T, P;<br>    <span class="hljs-keyword">int</span> K;<br><br>    T = <span class="hljs-built_in">BuildTree</span>();<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;K);<br>    P = <span class="hljs-built_in">KthLargest</span>(T, K);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, P-&gt;Key);<br>    <span class="hljs-keyword">if</span> (P-&gt;Left) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, P-&gt;Left-&gt;Key);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NULL\n&quot;</span>);<br>    <span class="hljs-keyword">if</span> (P-&gt;Right) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, P-&gt;Right-&gt;Key);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NULL\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/* Your function will be put here */</span><br></code></pre></td></tr></table></figure><p>Sample Input: (for the following tree)</p><img src="/2022/05/13/DataStructuresTest/40d5c4bb-3046-48f3-84ab-0ec0c651edd2.jpg" class="" title="yes.jpg"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><p>Sample Output:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">5</span><br><span class="hljs-literal">NULL</span><br><span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br><span class="hljs-function">BinTree <span class="hljs-title">KthLargest</span> <span class="hljs-params">( BinTree T, <span class="hljs-keyword">int</span> K )</span></span>&#123;<br>    BinTree P,Q;<br>    <span class="hljs-keyword">if</span>(T)&#123;<br>        P=KthLargest(T-&gt;Right,K);<br>        <span class="hljs-keyword">if</span>(P) <span class="hljs-keyword">return</span> P;<br>        cnt++;<br>        <span class="hljs-keyword">if</span>(cnt==K)&#123;<br>            <span class="hljs-keyword">return</span> T;<br>        &#125;<br>        Q=KthLargest(T-&gt;Left,K);<br>        <span class="hljs-keyword">if</span>(Q) <span class="hljs-keyword">return</span> Q;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-funx-Rank-a-Linked-List-II"><a href="#2-3-funx-Rank-a-Linked-List-II" class="headerlink" title="2-3(funx) Rank a Linked List (II)"></a>2-3(funx) Rank a Linked List (II)</h2><p>A linked list of <em>n</em> nodes is stored in an array of <em>n</em> elements. Each element contains an integer <code>data</code> and a <code>next</code> pointer which is the array index of the next element. It is guaranteed that the given list is linear – that is, every node, except the first one, has a unique previous node; and every node, except the last one, has a unique next node.</p><p>You are supposed to write a function to number these nodes in reverse order, starting from the last node, by numbers from 1 to <em>n</em>. These numbers are called the <code>rank</code>s of the nodes.</p><p>Format of function:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Ranking</span><span class="hljs-params">( List A[], <span class="hljs-keyword">int</span> n )</span></span>;<br></code></pre></td></tr></table></figure><p>where <code>List</code> is defined as the following:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> data;<br>    <span class="hljs-keyword">int</span> next;<br>    <span class="hljs-keyword">int</span> rank;<br>&#125; List;<br></code></pre></td></tr></table></figure><p>Sample program of judge:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NIL -1 <span class="hljs-comment">//represents the NULL pointer</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> data;<br>    <span class="hljs-keyword">int</span> next;<br>    <span class="hljs-keyword">int</span> rank;<br>&#125; List;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Ranking</span><span class="hljs-params">( List A[], <span class="hljs-keyword">int</span> n )</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n, i;<br>    List *A;<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    A = (List *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(List)*n);<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;A[i].next);<br>    <span class="hljs-built_in">Ranking</span>(A, n);<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;n; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, A[i].rank);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* Your function will be put here */</span><br></code></pre></td></tr></table></figure><p>Sample Input:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs in">5<br>3 -1 0 1 2<br></code></pre></td></tr></table></figure><p>Sample Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">3 1 4 2 5 <br></code></pre></td></tr></table></figure><p>Hint:</p><p>The given linked list is stored as 4-&gt;2-&gt;0-&gt;3-&gt;1-&gt;NULL. Hence the 0th element is ranked 3 since it is the 3rd node counted from the last one in the list; the 1st element is ranked 1 since it is the last node in the list; and so on so forth.</p><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>100 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> vis[<span class="hljs-number">100007</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Ranking</span><span class="hljs-params">( List A[], <span class="hljs-keyword">int</span> n )</span></span>&#123;<br>    <span class="hljs-keyword">int</span> head;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(A[i].rank!=<span class="hljs-number">-1</span>)<br>            vis[A[i].next]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!vis[i]) &#123;<br>            head=i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> cnt=n;<br>    A[head].rank=cnt--;<br>    <span class="hljs-keyword">int</span> temp=A[head].next;<br>    <span class="hljs-keyword">while</span>(temp!=<span class="hljs-number">-1</span>)&#123;<br>        A[temp].rank=cnt--;<br>        temp=A[temp].next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-1-两个有序序列的中位数"><a href="#2-1-两个有序序列的中位数" class="headerlink" title="2-1 两个有序序列的中位数"></a>2-1 两个有序序列的中位数</h2><p>已知有两个等长的非降序序列S1, S2, 设计函数求S1与S2并集的中位数。有序序列<em>A</em>0,<em>A</em>1,⋯,<em>A**N</em>−1的中位数指<em>A</em>(<em>N</em>−1)/2的值,即第⌊(<em>N</em>+1)/2⌋个数（<em>A</em>0为第1个数）。</p><p>输入格式:</p><p>输入分三行。第一行给出序列的公共长度N（0&lt;N≤100000），随后每行输入一个序列的信息，即N个非降序排列的整数。数字用空格间隔。</p><p>输出格式:</p><p>在一行中输出两个输入序列的并集序列的中位数。</p><p>输入样例1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs in">5<br>1 3 5 7 9<br>2 3 4 5 6<br></code></pre></td></tr></table></figure><p>输出样例1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">4<br></code></pre></td></tr></table></figure><p>输入样例2:</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">6<br>-100 -10<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1<br>-50<span class="hljs-number"> 0 </span>2<span class="hljs-number"> 3 </span>4 5<br></code></pre></td></tr></table></figure><p>输出样例2:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>200 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">2e5</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n*<span class="hljs-number">2</span>;i++)&#123;<br>        cin&gt;&gt;a[i];<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(a+<span class="hljs-number">1</span>,a+n*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>    cout&lt;&lt;a[(n*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>]&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-词频统计"><a href="#2-2-词频统计" class="headerlink" title="2-2 词频统计"></a>2-2 词频统计</h2><p>请编写程序，对一段英文文本，统计其中所有不同单词的个数，以及词频最大的前10%的单词。</p><p>所谓“单词”，是指由不超过80个单词字符组成的连续字符串，但长度超过15的单词将只截取保留前15个单词字符。而合法的“单词字符”为大小写字母、数字和下划线，其它字符均认为是单词分隔符。</p><p>输入格式:</p><p>输入给出一段非空文本，最后以符号<code>#</code>结尾。输入保证存在至少10个不同的单词。</p><p>输出格式:</p><p>在第一行中输出文本中所有不同单词的个数。注意“单词”不区分英文大小写，例如“PAT”和“pat”被认为是同一个单词。</p><p>随后按照词频递减的顺序，按照<code>词频:单词</code>的格式输出词频最大的前10%的单词。若有并列，则按递增字典序输出。</p><p>输入样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs in">This is a test.<br><br>The word &quot;this&quot; is the word with the highest frequency.<br><br>Longlonglonglongword should be cut off, so is considered as the same as longlonglonglonee.  But this_8 is different than this, and this, and this...#<br>this line should be ignored.<br></code></pre></td></tr></table></figure><p>输出样例：</p><p>（注意：虽然单词<code>the</code>也出现了4次，但因为我们只要输出前10%（即23个单词中的前2个）单词，而按照字母序，<code>the</code>排第3位，所以不输出。）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs out">23<br>5:this<br>4:is<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>2000 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">100007</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mp</span>&#123;</span><br>    string s;<br>    <span class="hljs-keyword">int</span> n;<br>&#125;m[maxn];<br><span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;<span class="hljs-comment">//不同单词数</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(mp &amp;a,mp &amp;b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a.n==b.n) <span class="hljs-keyword">return</span> a.s&lt;b.s;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> a.n&gt;b.n;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(string &amp;s)</span></span>&#123;<br>    <span class="hljs-built_in">transform</span>(s.<span class="hljs-built_in">begin</span>(),s.<span class="hljs-built_in">end</span>(),s.<span class="hljs-built_in">begin</span>(),::tolower);<br>    <span class="hljs-keyword">bool</span> fl=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;num;i++)&#123;<br>        <span class="hljs-keyword">if</span>(m[i].s==s)&#123;<br>            fl=<span class="hljs-literal">true</span>;<br>            m[i].n++;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!fl)&#123;<br>        m[num].s=s;<br>        m[num++].n=<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//    map&lt;string,int&gt;mp;</span><br>    <span class="hljs-keyword">char</span> c;<br>    string s=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<span class="hljs-comment">//单词长度</span><br>    <span class="hljs-keyword">bool</span> inword;<br>    inword=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">while</span>((c=<span class="hljs-built_in">getchar</span>())!=<span class="hljs-string">&#x27;#&#x27;</span>)&#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;#&#x27;</span>) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(!inword&amp;&amp;(<span class="hljs-built_in">isalpha</span>(c)|| <span class="hljs-built_in">isdigit</span>(c)||c==<span class="hljs-string">&#x27;_&#x27;</span>))&#123;<br>            inword=<span class="hljs-literal">true</span>;<br>            len++;<br>            <span class="hljs-keyword">if</span>(len&lt;=<span class="hljs-number">15</span>)&#123;<br>                s+=c;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(inword&amp;&amp;(<span class="hljs-built_in">isalpha</span>(c)|| <span class="hljs-built_in">isdigit</span>(c)||c==<span class="hljs-string">&#x27;_&#x27;</span>))&#123;<br>            len++;<br>            <span class="hljs-keyword">if</span>(len&lt;=<span class="hljs-number">15</span>) s+=c;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(inword&amp;&amp;!(<span class="hljs-built_in">isalpha</span>(c)|| <span class="hljs-built_in">isdigit</span>(c)||c==<span class="hljs-string">&#x27;_&#x27;</span>))&#123;<br>            <span class="hljs-built_in">find</span>(s);<br>            inword=<span class="hljs-literal">false</span>;<br>            len=<span class="hljs-number">0</span>;<br>            s=<span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;num&lt;&lt;endl;<br>    <span class="hljs-built_in">sort</span>(m,m+num,cmp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;(num/<span class="hljs-number">10</span>);i++)&#123;<br>        cout&lt;&lt;m[i].n&lt;&lt;<span class="hljs-string">&#x27;:&#x27;</span>&lt;&lt;m[i].s&lt;&lt;endl;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-符号配对"><a href="#2-3-符号配对" class="headerlink" title="2-3 符号配对"></a>2-3 符号配对</h2><p>请编写程序检查C语言源程序中下列符号是否配对：<code>/*</code>与<code>*/</code>、<code>(</code>与<code>)</code>、<code>[</code>与<code>]</code>、<code>&#123;</code>与<code>&#125;</code>。</p><p>输入格式:</p><p>输入为一个C语言源程序。当读到某一行中只有一个句点<code>.</code>和一个回车的时候，标志着输入结束。程序中需要检查配对的符号不超过100个。</p><p>输出格式:</p><p>首先，如果所有符号配对正确，则在第一行中输出<code>YES</code>，否则输出<code>NO</code>。然后在第二行中指出第一个不配对的符号：如果缺少左符号，则输出<code>?-右符号</code>；如果缺少右符号，则输出<code>左符号-?</code>。</p><p>输入样例1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs in">void test()<br>&#123;<br>    int i, A[10];<br>    for (i=0; i&lt;10; i++) &#123; /*/<br>        A[i] = i;<br>&#125;<br>.<br></code></pre></td></tr></table></figure><p>输出样例1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs out">NO<br>/*-?<br></code></pre></td></tr></table></figure><p>输入样例2：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, A[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++) <span class="hljs-comment">/**/</span><br>        A[i] = i;<br>&#125;]<br>.<br></code></pre></td></tr></table></figure><p>输出样例2：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby">NO<br><span class="hljs-string">?-</span>]<br></code></pre></td></tr></table></figure><p>输入样例3：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i<br>    <span class="hljs-keyword">double</span> A[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++) <span class="hljs-comment">/**/</span><br>        A[i] = <span class="hljs-number">0.1</span>*i;<br>&#125;<br>.<br></code></pre></td></tr></table></figure><p>输出样例3：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">YES</span><br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//抄的，自己写的在遇到/**/时候寄了</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>stack&lt;<span class="hljs-keyword">char</span>&gt; st;<br><span class="hljs-keyword">char</span> tmp[] = &#123;<span class="hljs-string">&#x27;)&#x27;</span>,<span class="hljs-string">&#x27;&#125;&#x27;</span>,<span class="hljs-string">&#x27;]&#x27;</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">(<span class="hljs-keyword">char</span> ch)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;&lt;&#x27;</span>)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;NO\n/*-?&quot;</span>&lt;&lt;endl;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;NO\n&quot;</span>&lt;&lt;ch&lt;&lt;<span class="hljs-string">&quot;-?&quot;</span>&lt;&lt;endl;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">match</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *c,<span class="hljs-keyword">int</span> len)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(++i&lt;len)&#123;<br>        <span class="hljs-keyword">if</span>(c[i]==<span class="hljs-string">&#x27;/&#x27;</span>)&#123;<br>            <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">if</span>(c[i + <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;*&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(c[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;*&#x27;</span>)&#123;<br>                st.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;&lt;&#x27;</span>);<br>                ++i;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">top</span>() == <span class="hljs-string">&#x27;&lt;&#x27;</span> &amp;&amp; c[i + <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;*&#x27;</span>)&#123;<br>                cout&lt;&lt;<span class="hljs-string">&quot;NO\n/*-?&quot;</span>&lt;&lt;endl;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c[i]==<span class="hljs-string">&#x27;*&#x27;</span>)&#123;<br>            <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>())&#123;<br>                <span class="hljs-keyword">if</span>(c[i+<span class="hljs-number">1</span>]!=<span class="hljs-string">&#x27;/&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    cout&lt;&lt;<span class="hljs-string">&quot;NO\n?-*/&quot;</span>&lt;&lt;endl;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">top</span>() == <span class="hljs-string">&#x27;&lt;&#x27;</span> &amp;&amp; c[i + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>                st.<span class="hljs-built_in">pop</span>();<br>                ++i;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">top</span>() != <span class="hljs-string">&#x27;&lt;&#x27;</span> &amp;&amp; c[i + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;/&#x27;</span>)&#123;<br>                <span class="hljs-built_in">output</span>(st.<span class="hljs-built_in">top</span>());<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c[i]==<span class="hljs-string">&#x27;(&#x27;</span>||c[i]==<span class="hljs-string">&#x27;&#123;&#x27;</span>||c[i]==<span class="hljs-string">&#x27;[&#x27;</span>)&#123;<br>            st.<span class="hljs-built_in">push</span>(c[i]);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c[i]==<span class="hljs-string">&#x27;)&#x27;</span>||c[i]==<span class="hljs-string">&#x27;&#125;&#x27;</span>||c[i]==<span class="hljs-string">&#x27;]&#x27;</span> )&#123;<br>            <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>())&#123;<br>                <span class="hljs-keyword">if</span>(c[i]==<span class="hljs-string">&#x27;&#125;&#x27;</span>) j=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c[i]==<span class="hljs-string">&#x27;]&#x27;</span>) j=<span class="hljs-number">2</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span>(c[i]==<span class="hljs-string">&#x27;)&#x27;</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">top</span>() == <span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br>                        st.<span class="hljs-built_in">pop</span>();<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-built_in">output</span>(st.<span class="hljs-built_in">top</span>());<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c[i]==<span class="hljs-string">&#x27;&#125;&#x27;</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">top</span>() == <span class="hljs-string">&#x27;&#123;&#x27;</span>)&#123;<br>                        st.<span class="hljs-built_in">pop</span>();<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-built_in">output</span>(st.<span class="hljs-built_in">top</span>());<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">top</span>() == <span class="hljs-string">&#x27;[&#x27;</span>)&#123;<br>                        st.<span class="hljs-built_in">pop</span>();<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-built_in">output</span>(st.<span class="hljs-built_in">top</span>());<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            cout&lt;&lt;<span class="hljs-string">&quot;NO\n?-&quot;</span>&lt;&lt;tmp[j]&lt;&lt;endl;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string str;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;str)&#123;<br>        <span class="hljs-keyword">char</span> *c = (<span class="hljs-keyword">char</span>*)str.<span class="hljs-built_in">data</span>();<br>        <span class="hljs-keyword">if</span>(c[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;.&#x27;</span>&amp;&amp;c[<span class="hljs-number">1</span>]==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">match</span>(c,str.<span class="hljs-built_in">length</span>()))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>())&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;endl;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">top</span>() == <span class="hljs-string">&#x27;&lt;&#x27;</span>) cout &lt;&lt; <span class="hljs-string">&quot;NO\n/*-?&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;NO\n&quot;</span> &lt;&lt; st.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">&quot;-?&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-4-列车调度"><a href="#2-4-列车调度" class="headerlink" title="2-4 列车调度"></a>2-4 列车调度</h2><p>火车站的列车调度铁轨的结构如下图所示。</p><img src="/2022/05/13/DataStructuresTest/188.jpg" class="" title="img"><p>两端分别是一条入口（Entrance）轨道和一条出口（Exit）轨道，它们之间有<code>N</code>条平行的轨道。每趟列车从入口可以选择任意一条轨道进入，最后从出口离开。在图中有9趟列车，在入口处按照{8，4，2，5，3，9，1，6，7}的顺序排队等待进入。如果要求它们必须按序号递减的顺序从出口离开，则至少需要多少条平行铁轨用于调度？</p><p>输入格式：</p><p>输入第一行给出一个整数<code>N</code> (2 ≤ <code>N</code> ≤105)，下一行给出从1到<code>N</code>的整数序号的一个重排列。数字间以空格分隔。</p><p>输出格式：</p><p>在一行中输出可以将输入的列车按序号递减的顺序调离所需要的最少的铁轨条数。</p><p>输入样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs in">9<br>8 4 2 5 3 9 1 6 7<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">4<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>300 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">2e5</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-keyword">int</span> vec[maxn];<br>set&lt;<span class="hljs-keyword">int</span>&gt;st;<br><span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;a[i];<br>    &#125;<br>    st.<span class="hljs-built_in">insert</span>(a[<span class="hljs-number">0</span>]);<br><span class="hljs-comment">//    vec[cnt++]=a[0];</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">int</span> temp=a[i];<br>        <span class="hljs-keyword">auto</span> iter= st.<span class="hljs-built_in">lower_bound</span>(temp);<br>        <span class="hljs-keyword">if</span>(iter==st.<span class="hljs-built_in">end</span>())&#123;<br>            st.<span class="hljs-built_in">insert</span>(temp);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            st.<span class="hljs-built_in">erase</span>(iter);<br>            st.<span class="hljs-built_in">insert</span>(temp);<br>        &#125;<br><span class="hljs-comment">//         int temp=a[i];</span><br><span class="hljs-comment">//         sort(vec,vec+cnt);</span><br><span class="hljs-comment">//         int x= lower_bound(vec,vec+cnt,temp)-vec;</span><br><span class="hljs-comment">//         if(x==cnt)&#123;</span><br><span class="hljs-comment">//             vec[cnt++]=temp;</span><br><span class="hljs-comment">//         &#125;</span><br><span class="hljs-comment">//         else&#123;</span><br><span class="hljs-comment">//             vec[x]=temp;</span><br><span class="hljs-comment">//         &#125;</span><br>    &#125;<br>    cout&lt;&lt;st.<span class="hljs-built_in">size</span>()&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-graph"><a href="#3-graph" class="headerlink" title="3.graph"></a>3.graph</h1><h2 id="3-1-funx-邻接表存储图的广度优先遍历"><a href="#3-1-funx-邻接表存储图的广度优先遍历" class="headerlink" title="3-1(funx) 邻接表存储图的广度优先遍历"></a>3-1(funx) 邻接表存储图的广度优先遍历</h2><p>试实现邻接表存储图的广度优先遍历。</p><p>函数接口定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFS</span> <span class="hljs-params">( LGraph Graph, Vertex S, <span class="hljs-keyword">void</span> (*Visit)(Vertex) )</span></span>;<br></code></pre></td></tr></table></figure><p>其中<code>LGraph</code>是邻接表存储的图，定义如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/* 邻接点的定义 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AdjVNode</span> *<span class="hljs-title">PtrToAdjVNode</span>;</span> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AdjVNode</span>&#123;</span><br>    Vertex AdjV;        <span class="hljs-comment">/* 邻接点下标 */</span><br>    PtrToAdjVNode Next; <span class="hljs-comment">/* 指向下一个邻接点的指针 */</span><br>&#125;;<br><br><span class="hljs-comment">/* 顶点表头结点的定义 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Vnode</span>&#123;</span><br>    PtrToAdjVNode FirstEdge; <span class="hljs-comment">/* 边表头指针 */</span><br>&#125; AdjList[MaxVertexNum];     <span class="hljs-comment">/* AdjList是邻接表类型 */</span><br><br><span class="hljs-comment">/* 图结点的定义 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span> *<span class="hljs-title">PtrToGNode</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span>&#123;</span>  <br>    <span class="hljs-keyword">int</span> Nv;     <span class="hljs-comment">/* 顶点数 */</span><br>    <span class="hljs-keyword">int</span> Ne;     <span class="hljs-comment">/* 边数   */</span><br>    AdjList G;  <span class="hljs-comment">/* 邻接表 */</span><br>&#125;;<br><span class="hljs-keyword">typedef</span> PtrToGNode LGraph; <span class="hljs-comment">/* 以邻接表方式存储的图类型 */</span><br></code></pre></td></tr></table></figure><p>函数<code>BFS</code>应从第<code>S</code>个顶点出发对邻接表存储的图<code>Graph</code>进行广度优先搜索，遍历时用裁判定义的函数<code>Visit</code>访问每个顶点。当访问邻接点时，要求按邻接表顺序访问。题目保证<code>S</code>是图中的合法顶点。</p><p>裁判测试程序样例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>&#125; <span class="hljs-keyword">bool</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxVertexNum 10   <span class="hljs-comment">/* 最大顶点数设为10 */</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Vertex;       <span class="hljs-comment">/* 用顶点下标表示顶点,为整型 */</span><br><br><span class="hljs-comment">/* 邻接点的定义 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AdjVNode</span> *<span class="hljs-title">PtrToAdjVNode</span>;</span> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AdjVNode</span>&#123;</span><br>    Vertex AdjV;        <span class="hljs-comment">/* 邻接点下标 */</span><br>    PtrToAdjVNode Next; <span class="hljs-comment">/* 指向下一个邻接点的指针 */</span><br>&#125;;<br><br><span class="hljs-comment">/* 顶点表头结点的定义 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Vnode</span>&#123;</span><br>    PtrToAdjVNode FirstEdge; <span class="hljs-comment">/* 边表头指针 */</span><br>&#125; AdjList[MaxVertexNum];     <span class="hljs-comment">/* AdjList是邻接表类型 */</span><br><br><span class="hljs-comment">/* 图结点的定义 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span> *<span class="hljs-title">PtrToGNode</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span>&#123;</span>  <br>    <span class="hljs-keyword">int</span> Nv;     <span class="hljs-comment">/* 顶点数 */</span><br>    <span class="hljs-keyword">int</span> Ne;     <span class="hljs-comment">/* 边数   */</span><br>    AdjList G;  <span class="hljs-comment">/* 邻接表 */</span><br>&#125;;<br><span class="hljs-keyword">typedef</span> PtrToGNode LGraph; <span class="hljs-comment">/* 以邻接表方式存储的图类型 */</span><br><br><span class="hljs-keyword">bool</span> Visited[MaxVertexNum]; <span class="hljs-comment">/* 顶点的访问标记 */</span><br><br><span class="hljs-function">LGraph <span class="hljs-title">CreateGraph</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">/* 创建图并且将Visited初始化为false；裁判实现，细节不表 */</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Visit</span><span class="hljs-params">( Vertex V )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>, V);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFS</span> <span class="hljs-params">( LGraph Graph, Vertex S, <span class="hljs-keyword">void</span> (*Visit)(Vertex) )</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    LGraph G;<br>    Vertex S;<br><br>    G = <span class="hljs-built_in">CreateGraph</span>();<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;S);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;BFS from %d:&quot;</span>, S);<br>    <span class="hljs-built_in">BFS</span>(G, S, Visit);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 你的代码将被嵌在这里 */</span><br></code></pre></td></tr></table></figure><p>输入样例：给定图如下</p><img src="/2022/05/13/DataStructuresTest/102.jpg" class="" title="img"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">BFS from 2: 2 0 3 5 4 1 6<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c">Vertex que[<span class="hljs-number">1007</span>];<br><span class="hljs-keyword">int</span> fro=<span class="hljs-number">0</span>,rear=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> vis[MaxVertexNum];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(Vertex a)</span></span>&#123;<br>    que[rear++]=a;<br>&#125;<br><span class="hljs-function">Vertex <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> que[fro++];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFS</span> <span class="hljs-params">( LGraph Graph, Vertex S, <span class="hljs-keyword">void</span> (*Visit)(Vertex) )</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;MaxVertexNum;i++)&#123;<br>        vis[i]=<span class="hljs-number">0</span>;<br>    &#125;<br>    push(S);<br>    vis[S]=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">while</span>(fro!=rear)&#123;<br>        Vertex e;<br>        e=pop();<br>        Visit(e);<br>        <span class="hljs-keyword">for</span>(PtrToAdjVNode j=Graph-&gt;G[e].FirstEdge;j;j=j-&gt;Next)&#123;<br>            <span class="hljs-keyword">if</span>(!vis[j-&gt;AdjV])&#123;<br>                push(j-&gt;AdjV);<br>                vis[j-&gt;AdjV]=<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-2-funx-邻接矩阵表示及其遍历"><a href="#3-2-funx-邻接矩阵表示及其遍历" class="headerlink" title="3-2(funx) 邻接矩阵表示及其遍历"></a>3-2(funx) 邻接矩阵表示及其遍历</h2><p>本题要求编写函数创建无向图 G 的邻接矩阵存储表示，并求连通分量个数。例如，下图所示一个无向图 G 及其对应的邻接矩阵：</p><img src="/2022/05/13/DataStructuresTest/acef5783-fec5-44a1-903e-f042acba3d58.png" class="" title="gragh_smaller.png"><p>函数接口定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateMGraph</span><span class="hljs-params">(MGraph &amp;G)</span></span>; <span class="hljs-comment">/* 读入顶点数、边数，以及各条边，创建图 G 的邻接矩阵存储表示 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">countCC</span> <span class="hljs-params">(MGraph G)</span></span>;   <span class="hljs-comment">/* 已知无向图 G 采用邻接矩阵表示，函数值返回其连通分量个数 */</span><br></code></pre></td></tr></table></figure><p>已知无向图 G 采用邻接矩阵存储，相关类型定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxVertexNum 100     <span class="hljs-comment">/* 定义最大顶点数 */</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> VertexType;      <span class="hljs-comment">/* 顶点类型，以整型值编号表示（从 1 开始编号） */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-keyword">int</span> arcs[MaxVertexNum+<span class="hljs-number">1</span>][MaxVertexNum+<span class="hljs-number">1</span>]; <span class="hljs-comment">/* 邻接矩阵, 若顶点 i 与 顶点 j 有边相连则 arcs[i][j] 及 arcs[j][i] 均为 1 表示，无边则均为 0 */</span><br>    <span class="hljs-keyword">int</span> vexnum;  <span class="hljs-comment">/* 顶点数 */</span><br>    <span class="hljs-keyword">int</span> arcnum;  <span class="hljs-comment">/* 边数 */</span><br>&#125;MGraph;<br></code></pre></td></tr></table></figure><p>裁判测试程序样例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxVertexNum 100     <span class="hljs-comment">/* 定义最大顶点数 */</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> VertexType;      <span class="hljs-comment">/* 顶点类型，以整型值编号表示（从 1 开始编号） */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-keyword">int</span> arcs[MaxVertexNum + <span class="hljs-number">1</span>][MaxVertexNum + <span class="hljs-number">1</span>]; <span class="hljs-comment">/* 无向图的邻接矩阵, 若顶点 i 与 顶点 j 有边相连则 arcs[i][j] 及 arcs[j][i] 均为 1 表示，无边则均为 0 */</span><br>    <span class="hljs-keyword">int</span> vexnum;  <span class="hljs-comment">/* 顶点数 */</span><br>    <span class="hljs-keyword">int</span> arcnum;  <span class="hljs-comment">/* 边数 */</span><br>&#125;MGraph;<br><br><span class="hljs-keyword">int</span> visited[MaxVertexNum + <span class="hljs-number">1</span>];  <span class="hljs-comment">// 顶点是否被访问标志数组</span><br><br> <span class="hljs-comment">/* 邻接矩阵编号为 i 的顶点所关联的边存放在行 i 及列 i 中 */</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateMGraph</span><span class="hljs-params">(MGraph &amp;G)</span></span>; <span class="hljs-comment">/* 读入顶点数、边数，以及各条边，创建图 G 的邻接矩阵存储表示 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">countCC</span><span class="hljs-params">(MGraph G)</span></span>; <span class="hljs-comment">/* 已知无向图 G 采用邻接矩阵表示，函数值返回其连通分量个数 */</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    MGraph G;<br><br>    <span class="hljs-built_in">CreateMGraph</span>( G );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">countCC</span>( G ));<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 请在这里填写答案 */</span><br></code></pre></td></tr></table></figure><p>输入的第一行为两个整数，分别为图 G 的顶点数 vexnum（0 &lt;= vexnum &lt;= MaxVertexNum） 和边数 arcnum（&gt;= 0），接下来的 arcnum 行是每一条边信息，以关联的两个顶点 i 和 j 给出。<br>输出为图 G 的连通分量个数。题目保证输入数据正确，无冗余。</p><p>输入样例1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs in">4 2<br>1 2<br>4 3<br></code></pre></td></tr></table></figure><p>输出样例1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">2<br></code></pre></td></tr></table></figure><p>输入样例2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs in">4 6<br>1 2<br>1 3<br>1 4<br>2 3<br>2 4<br>3 4<br></code></pre></td></tr></table></figure><p>输出样例2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">1<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> que[<span class="hljs-number">1007</span>];<br><span class="hljs-keyword">int</span> fro=<span class="hljs-number">0</span>,rear=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>&#123;<br>    que[rear++]=a;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> que[fro++];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(MGraph&amp;G,<span class="hljs-keyword">int</span> a)</span></span>&#123;<br>    <span class="hljs-built_in">push</span>(a);<br>    visited[a]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(fro!=rear)&#123;<br>        <span class="hljs-keyword">int</span> b=<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=G.vexnum;i++)&#123;<br>            <span class="hljs-keyword">int</span> x=G.arcs[b][i];<br>            <span class="hljs-keyword">if</span>(x==<span class="hljs-number">1</span>&amp;&amp;!visited[i])&#123;<br>                visited[i]=<span class="hljs-number">1</span>;<br>                <span class="hljs-built_in">push</span>(i);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateMGraph</span><span class="hljs-params">(MGraph &amp;G)</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;G.vexnum,&amp;G.arcnum);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;G.arcnum;i++)&#123;<br>        <span class="hljs-keyword">int</span> x,y;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);<br>        G.arcs[x][y]=<span class="hljs-number">1</span>;<br>        G.arcs[y][x]=<span class="hljs-number">1</span>;<br>    &#125;<br>&#125; <span class="hljs-comment">/* 读入顶点数、边数，以及各条边，创建图 G 的邻接矩阵存储表示 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">countCC</span><span class="hljs-params">(MGraph G)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;MaxVertexNum+<span class="hljs-number">1</span>;i++)&#123;<br>        visited[i]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=G.vexnum;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!visited[i])&#123;<br>            cnt++;<br>            <span class="hljs-built_in">bfs</span>(G,i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125; <span class="hljs-comment">/* 已知无向图 G 采用邻接矩阵表示，函数值返回其连通分量个数 */</span><br><br></code></pre></td></tr></table></figure><h2 id="3-3-funx-Is-Topological-Order"><a href="#3-3-funx-Is-Topological-Order" class="headerlink" title="3-3(funx) Is Topological Order"></a>3-3(funx) Is Topological Order</h2><p>Write a program to test if a give sequence <code>Seq</code> is a topological order of a given graph <code>Graph</code>.</p><p>Format of functions:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsTopSeq</span><span class="hljs-params">( LGraph Graph, Vertex Seq[] )</span></span>;<br></code></pre></td></tr></table></figure><p>where <code>LGraph</code> is defined as the following:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AdjVNode</span> *<span class="hljs-title">PtrToAdjVNode</span>;</span> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AdjVNode</span>&#123;</span><br>    Vertex AdjV;<br>    PtrToAdjVNode Next;<br>&#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Vnode</span>&#123;</span><br>    PtrToAdjVNode FirstEdge;<br>&#125; AdjList[MaxVertexNum];<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span> *<span class="hljs-title">PtrToGNode</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span>&#123;</span>  <br>    <span class="hljs-keyword">int</span> Nv;<br>    <span class="hljs-keyword">int</span> Ne;<br>    AdjList G;<br>&#125;;<br><span class="hljs-keyword">typedef</span> PtrToGNode LGraph;<br></code></pre></td></tr></table></figure><p>The function <code>IsTopSeq</code> must return <code>true</code> if <code>Seq</code> does correspond to a topological order; otherwise return <code>false</code>.</p><p><strong>Note:</strong> Although the vertices are numbered from 1 to MaxVertexNum, they are <strong>indexed from 0</strong> in the LGraph structure.</p><p>Sample program of judge:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>&#125; <span class="hljs-keyword">bool</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxVertexNum 10  <span class="hljs-comment">/* maximum number of vertices */</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Vertex;      <span class="hljs-comment">/* vertices are numbered from 1 to MaxVertexNum */</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AdjVNode</span> *<span class="hljs-title">PtrToAdjVNode</span>;</span> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AdjVNode</span>&#123;</span><br>    Vertex AdjV;<br>    PtrToAdjVNode Next;<br>&#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Vnode</span>&#123;</span><br>    PtrToAdjVNode FirstEdge;<br>&#125; AdjList[MaxVertexNum];<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span> *<span class="hljs-title">PtrToGNode</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span>&#123;</span>  <br>    <span class="hljs-keyword">int</span> Nv;<br>    <span class="hljs-keyword">int</span> Ne;<br>    AdjList G;<br>&#125;;<br><span class="hljs-keyword">typedef</span> PtrToGNode LGraph;<br><br><span class="hljs-function">LGraph <span class="hljs-title">ReadG</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">/* details omitted */</span><br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsTopSeq</span><span class="hljs-params">( LGraph Graph, Vertex Seq[] )</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, j, N;<br>    Vertex Seq[MaxVertexNum];<br>    LGraph G = <span class="hljs-built_in">ReadG</span>();<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;N);<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;N; i++) &#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>; j&lt;G-&gt;Nv; j++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;Seq[j]);<br>        <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">IsTopSeq</span>(G, Seq)==<span class="hljs-literal">true</span> ) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;yes\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* Your function will be put here */</span><br></code></pre></td></tr></table></figure><p>Sample Input (for the graph shown in the figure):</p><img src="/2022/05/13/DataStructuresTest/5373e878-196d-45dd-a82f-555b1fea6929.JPG" class="" title="topord.JPG"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs in">6 8<br>1 2<br>1 3<br>5 2<br>5 4<br>2 3<br>2 6<br>3 4<br>6 4<br>5<br>1 5 2 3 6 4<br>5 1 2 6 3 4<br>5 1 2 3 6 4<br>5 2 1 6 3 4<br>1 2 3 4 5 6<br></code></pre></td></tr></table></figure><p>Sample Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs out">yes<br>yes<br>yes<br>no<br>no<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> in[MaxVertexNum];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsTopSeq</span><span class="hljs-params">( LGraph Graph, Vertex Seq[] )</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=MaxVertexNum;i++)&#123;<br>        in[i]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;Graph-&gt;Nv;i++)&#123;<br>        <span class="hljs-keyword">for</span>(PtrToAdjVNode j=Graph-&gt;G[i].FirstEdge;j;j=j-&gt;Next)&#123;<br>            in[j-&gt;AdjV]++;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//    for(int i=0;i&lt;Graph-&gt;Nv;i++)&#123;</span><br><span class="hljs-comment">//        printf(&quot;%d &quot;,in[i]);</span><br><span class="hljs-comment">//    &#125;</span><br>    <span class="hljs-keyword">bool</span> fl=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;Graph-&gt;Nv;i++)&#123;<br>        <span class="hljs-keyword">int</span> temp=Seq[i]<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span>(in[temp]==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">for</span>(PtrToAdjVNode j=Graph-&gt;G[temp].FirstEdge;j;j=j-&gt;Next)&#123;<br>                in[j-&gt;AdjV]--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            fl=<span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> fl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-1-畅通工程之最低成本建设问题"><a href="#3-1-畅通工程之最低成本建设问题" class="headerlink" title="3-1 畅通工程之最低成本建设问题"></a>3-1 畅通工程之最低成本建设问题</h2><p>某地区经过对城镇交通状况的调查，得到现有城镇间快速道路的统计数据，并提出“畅通工程”的目标：使整个地区任何两个城镇间都可以实现快速交通（但不一定有直接的快速道路相连，只要互相间接通过快速路可达即可）。现得到城镇道路统计表，表中列出了有可能建设成快速路的若干条道路的成本，求畅通工程需要的最低成本。</p><p>输入格式:</p><p>输入的第一行给出城镇数目<em>N</em> (1&lt;<em>N</em>≤1000)和候选道路数目<em>M</em>≤3<em>N</em>；随后的<em>M</em>行，每行给出3个正整数，分别是该条道路直接连通的两个城镇的编号（从1编号到<em>N</em>）以及该道路改建的预算成本。</p><p>输出格式:</p><p>输出畅通工程需要的最低成本。如果输入数据不足以保证畅通，则输出“Impossible”。</p><p>输入样例1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs in">6 15<br>1 2 5<br>1 3 3<br>1 4 7<br>1 5 4<br>1 6 2<br>2 3 4<br>2 4 6<br>2 5 2<br>2 6 6<br>3 4 6<br>3 5 1<br>3 6 1<br>4 5 10<br>4 6 8<br>5 6 3<br></code></pre></td></tr></table></figure><p>输出样例1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">12<br></code></pre></td></tr></table></figure><p>输入样例2:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>输出样例2:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Impossible</span><br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1007</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> u,v,w;<br>    <span class="hljs-built_in">node</span>(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> w):<span class="hljs-built_in">u</span>(u),<span class="hljs-built_in">v</span>(v),<span class="hljs-built_in">w</span>(w)&#123;&#125;;<br>&#125;;<br>vector&lt;node&gt; E;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node &amp;a,node &amp;b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a.w&lt;b.w;<br>&#125;<br><span class="hljs-keyword">int</span> f[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;maxn;i++)&#123;<br>        f[i]=i;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(f[a]==a) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> f[a]=<span class="hljs-built_in">find</span>(f[a]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> temp=<span class="hljs-built_in">find</span>(a);<br>    f[temp]=<span class="hljs-built_in">find</span>(b);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">find</span>(a)==<span class="hljs-built_in">find</span>(b);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">sort</span>(E.<span class="hljs-built_in">begin</span>(),E.<span class="hljs-built_in">end</span>(),cmp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">check</span>(E[i].u,E[i].v))&#123;<br>            <span class="hljs-built_in">merge</span>(E[i].u,E[i].v);<br>            cnt++;ans+=E[i].w;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(cnt&lt;n<span class="hljs-number">-1</span>) cout&lt;&lt;<span class="hljs-string">&quot;Impossible&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">else</span> cout&lt;&lt;ans&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-keyword">int</span> x,y,z;<br>        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;<br>        E.<span class="hljs-built_in">emplace_back</span>(x,y,z);<br>    &#125;<br>    <span class="hljs-built_in">kruskal</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-2-How-Long-Does-It-Take"><a href="#3-2-How-Long-Does-It-Take" class="headerlink" title="3-2 How Long Does It Take"></a>3-2 How Long Does It Take</h2><p>Given the relations of all the activities of a project, you are supposed to find the earliest completion time of the project.</p><p>Input Specification:</p><p>Each input file contains one test case. Each case starts with a line containing two positive integers <em>N</em> (≤100), the number of activity check points (hence it is assumed that the check points are numbered from 0 to <em>N</em>−1), and <em>M</em>, the number of activities. Then <em>M</em> lines follow, each gives the description of an activity. For the <code>i</code>-th activity, three non-negative numbers are given: <code>S[i]</code>, <code>E[i]</code>, and <code>L[i]</code>, where <code>S[i]</code> is the index of the starting check point, <code>E[i]</code> of the ending check point, and <code>L[i]</code> the lasting time of the activity. The numbers in a line are separated by a space.</p><p>Output Specification:</p><p>For each test case, if the scheduling is possible, print in a line its earliest completion time; or simply output “Impossible”.</p><p>Sample Input 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs in">9 12<br>0 1 6<br>0 2 4<br>0 3 5<br>1 4 1<br>2 4 1<br>3 5 2<br>5 4 0<br>4 6 9<br>4 7 7<br>5 7 4<br>6 8 2<br>7 8 4<br></code></pre></td></tr></table></figure><p>Sample Output 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">18<br></code></pre></td></tr></table></figure><p>Sample Input 2:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>Sample Output 2:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Impossible</span><br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">107</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> to,w;<br>    <span class="hljs-built_in">node</span>(<span class="hljs-keyword">int</span> to,<span class="hljs-keyword">int</span> w):<span class="hljs-built_in">to</span>(to),<span class="hljs-built_in">w</span>(w)&#123;&#125;;<br>&#125;;<br>vector&lt;node&gt; fro[maxn],to[maxn];<br><span class="hljs-keyword">int</span> in[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br>queue&lt;<span class="hljs-keyword">int</span>&gt;que;<br>vector&lt;<span class="hljs-keyword">int</span>&gt;tpo1,tpo2;<br><span class="hljs-keyword">int</span> ve[maxn],vl[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(ve,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(ve));<br>    <span class="hljs-built_in">memset</span>(vl,inf,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(vl));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tpo</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>,ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!in[i])&#123;<br>            que.<span class="hljs-built_in">push</span>(i);<br>            vis[i]=<span class="hljs-literal">true</span>;<br>            cnt++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-keyword">int</span> temp=que.<span class="hljs-built_in">front</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br>        tpo1.<span class="hljs-built_in">push_back</span>(temp);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;fro[temp].<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-keyword">int</span> t=fro[temp][i].to;<br>            ve[t]=<span class="hljs-built_in">max</span>(ve[t],ve[temp]+fro[temp][i].w);<br>            ans=(ans,ve[t]);<br>            in[t]--;<br>            <span class="hljs-keyword">if</span>(in[t]==<span class="hljs-number">0</span>&amp;&amp;!vis[t])&#123;<br>                que.<span class="hljs-built_in">push</span>(t);<br>                vis[t]=<span class="hljs-literal">true</span>;<br>                cnt++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(cnt!=n)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Impossible&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> cout&lt;&lt;ans;<br>&#125;<br><br><br><span class="hljs-comment">//void critical_path()&#123;</span><br><span class="hljs-comment">//    init();</span><br><span class="hljs-comment">//    int ans=0;</span><br><span class="hljs-comment">//    for(int i=0;i&lt;tpo1.size();i++)&#123;</span><br><span class="hljs-comment">//        int temp=tpo1[i];</span><br><span class="hljs-comment">//        for(int j=0;j&lt;fro[temp].size();j++)&#123;</span><br><span class="hljs-comment">//            if(ve[fro[temp][j].to]&lt;ve[temp]+fro[temp][j].w)&#123;</span><br><span class="hljs-comment">//                ve[fro[temp][j].to]=ve[temp]+fro[temp][j].w;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="hljs-comment">//        vl[i]=ve[i];</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//    for(int i=0;i&lt;tpo2.size();i++)&#123;</span><br><span class="hljs-comment">//        int temp=tpo2[i];</span><br><span class="hljs-comment">//        for(int j=0;j&lt;to[temp].size();j++)&#123;</span><br><span class="hljs-comment">//            if(vl[temp]-to[temp][j].w&lt;vl[to[temp][j].to])&#123;</span><br><span class="hljs-comment">//                vl[to[temp][j].to]=vl[temp]-to[temp][j].w;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="hljs-comment">//        for(int j=0;j&lt;fro[i].size();j++)&#123;</span><br><span class="hljs-comment">//            int e=ve[i];</span><br><span class="hljs-comment">//            int l=vl[fro[i][j].to]-fro[i][j].w;</span><br><span class="hljs-comment">//            if(e==l)&#123;//突然发现，也许我们的目的根本不是。。。</span><br><span class="hljs-comment">//                cout&lt;&lt;i&lt;&lt;&#x27; &#x27;&lt;&lt;fro[i][j].to&lt;&lt;&#x27; &#x27;&lt;&lt;fro[i][j].w&lt;&lt;endl;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-keyword">int</span> x,y,z;<br>        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;<br>        fro[x].<span class="hljs-built_in">emplace_back</span>(y,z);<br>        to[y].<span class="hljs-built_in">emplace_back</span>(x,z);<br>        in[y]++;<br>    &#125;<br>    <span class="hljs-built_in">tpo</span>();<br><span class="hljs-comment">//    critical_path();</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-3-Harry-Potter’s-Exam"><a href="#3-3-Harry-Potter’s-Exam" class="headerlink" title="3-3 Harry Potter’s Exam"></a>3-3 Harry Potter’s Exam</h2><p>In Professor McGonagall’s class of Transfiguration, Harry Potter is learning how to transform one object into another by some spells. He has learnt that, to turn a cat into a mouse one can say <code>docamo</code>! To reverse the effect, simply say <code>decamo</code>! Formally speaking, the transfiguration spell to transform between object A and object B is said to be <code>S</code> if there are two spells, <code>doS</code> and <code>deS</code>, to turn A into B and vice versa, respectively.</p><p>In some cases, short-cut spells are defined to make transfiguration easier. For example, suppose that the spell to transform a cat to a mouse is <code>docamo</code>, and that to transform a mouse into a fatmouse is <code>dofamo</code>, then to turn a cat into a fatmouse one may say <code>docamodofamo</code>! Or if a shot-cut spell is defined to be <code>cafam</code>, one may get the same effect by saying <code>docafam</code>!</p><p>Time is passing by quickly and the Final Exam is coming. By the end of the transfiguration exam, students will be requested to show Professor McGonagall several objects transformed from the initial objects they bring to the classroom. Each of them is allowed to bring 1 object only.</p><p>Now Harry is coming to you for help: he needs a program to select the object he must take to the exam, so that the maximum length of any spell he has to say will be minimized. For example, if cat, mouse, and fatmouse are the only three objects involved in the exam, then mouse is the one that Harry should take, since it will take a 6-letter spell to turn a mouse into either a cat or a fatmouse. Cat is not a good choice since it will take at least a 7-letter spell to turn it into a fatmouse. And for the same reason Harry must not take a fatmouse.</p><p>Input Specification:</p><p>Each input file contains one test case. For each case, the first line contains two positive integers <em>N</em> (≤100) and <em>M</em>, which are the total number of objects involved in the exam and the number of spells to be tested, respectively. For the sake of simplicity, the objects are numbered from 1 to <em>N</em>. Then <em>M</em> lines follow, each contains 3 integers, separated by a space: the numbers of two objects, and the length of the spell to transform between them.</p><p>Output Specification:</p><p>For each test case, print in one line the number of the object which Harry must take to the exam, and the maximum length of the spell he may have to say. The numbers must be separated by a space.</p><p>If it is impossible to complete all the transfigurations by taking one object only, simply output 0. If the solution is not unique, output the one with the smallest number.</p><p>Sample Input:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs in">6 11<br>3 4 70<br>1 2 1<br>5 4 50<br>2 6 50<br>5 6 60<br>1 3 70<br>4 6 60<br>3 6 80<br>5 1 100<br>2 4 60<br>5 2 80<br></code></pre></td></tr></table></figure><p>Sample Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">4 70<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//某天梯赛模拟，故copy</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">307</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">int</span> f[maxn][maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lenlen</span>&#123;</span><br>    <span class="hljs-keyword">int</span> point,len,fl;<br>&#125;len[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br>        len[i].fl=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;=n;j++)&#123;<br>            f[i][j]=inf;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(lenlen &amp;a,lenlen &amp;b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a.fl||b.fl)&#123;<br>        <span class="hljs-keyword">return</span> a.fl&lt;b.fl;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(a.len==b.len) <span class="hljs-keyword">return</span> a.point&lt;b.point;<br>    <span class="hljs-keyword">return</span> a.len&lt;b.len;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-keyword">int</span> x,y,z;<br>        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;<br>        f[x][y]=z;<br>        f[y][x]=z;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;=n;k++)&#123;<br>                <span class="hljs-keyword">if</span>(f[j][i]+f[i][k]&lt;f[j][k])&#123;<br>                    f[j][k]=f[j][i]+f[i][k];<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            <span class="hljs-keyword">if</span>(j!=i) &#123;<br>                len[i].point = i;<br>                <span class="hljs-keyword">if</span> (f[i][j] != inf) len[i].len = <span class="hljs-built_in">max</span>(len[i].len, f[i][j]);<br>                <span class="hljs-keyword">if</span> (f[i][j] == inf) len[i].fl = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(len+<span class="hljs-number">1</span>,len+<span class="hljs-number">1</span>+n,cmp);<br>    <span class="hljs-keyword">if</span>(len[<span class="hljs-number">1</span>].fl) cout&lt;&lt;<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        cout&lt;&lt;len[<span class="hljs-number">1</span>].point&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;len[<span class="hljs-number">1</span>].len;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;因为考试看不到练习的在线题集，所以放一下原题和代码&lt;/p&gt;
&lt;p&gt;&lt;del&gt;但是有一说一，因为blog没做目录，这篇翻起来应该相当痛苦（）&lt;/del&gt;可恶，为什么时至今日我才发现目录能调出来&lt;/p&gt;
&lt;h1 id=&quot;1-tree&quot;&gt;&lt;a href=&quot;#1-tree&quot; cla</summary>
      
    
    
    
    
    <category term="cpp" scheme="https://github.com/sterne012/sterne012.github.io/tags/cpp/"/>
    
    <category term="c" scheme="https://github.com/sterne012/sterne012.github.io/tags/c/"/>
    
    <category term="review" scheme="https://github.com/sterne012/sterne012.github.io/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-循环神经网络</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/05/13/deep-rnn/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/05/13/deep-rnn/</id>
    <published>2022-05-13T06:57:29.000Z</published>
    <updated>2022-05-13T07:00:39.436Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/05/13/deep-rnn/image-20220513145900239.png" class="" title="image-20220513145900239"><img src="/2022/05/13/deep-rnn/image-20220513145925130.png" class="" title="image-20220513145925130"><img src="/2022/05/13/deep-rnn/image-20220513145941266.png" class="" title="image-20220513145941266"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">在 IMDB 情感分类任务上训练双向 LSTM。</span><br><span class="hljs-string">Output after 4 epochs on CPU: ~0.8146. Time per epoch on CPU (Core i7): ~150s.</span><br><span class="hljs-string">在 CPU 上经过 4 个轮次后的输出：〜0.8146。 CPU（Core i7）上每个轮次的时间：〜150s。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-comment"># os.environ[&quot;CUDA_VISIBLE_DEVICES&quot;] = &quot;-1&quot;</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-keyword">import</span> ssl<br><span class="hljs-keyword">from</span> tensorflow.keras.preprocessing <span class="hljs-keyword">import</span> sequence<br><span class="hljs-keyword">from</span> tensorflow.keras.models <span class="hljs-keyword">import</span> Sequential<br><span class="hljs-keyword">from</span> tensorflow.keras.layers <span class="hljs-keyword">import</span> Dense, Dropout, Embedding<br><span class="hljs-keyword">from</span> tensorflow.keras.layers <span class="hljs-keyword">import</span> LSTM,Bidirectional<br><span class="hljs-keyword">from</span> tensorflow.keras.optimizers <span class="hljs-keyword">import</span> Adam,SGD<br><span class="hljs-keyword">from</span> tensorflow.keras.datasets <span class="hljs-keyword">import</span> imdb<br><span class="hljs-keyword">from</span> tensorflow.keras.utils <span class="hljs-keyword">import</span> plot_model<br><br>ssl._create_default_https_context = ssl._create_unverified_context<br>os.environ[<span class="hljs-string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="hljs-string">&#x27;2&#x27;</span><br>os.environ[<span class="hljs-string">&#x27;KMP_DUPLICATE_LIB_OK&#x27;</span>] = <span class="hljs-string">&quot;TRUE&quot;</span><br>np.set_printoptions(threshold=np.inf)<br><br><span class="hljs-keyword">if</span> <span class="hljs-number">1</span> == <span class="hljs-number">0</span>:<br>    gpus = tf.config.experimental.list_physical_devices(device_type=<span class="hljs-string">&#x27;GPU&#x27;</span>)<br>    <span class="hljs-keyword">for</span> gpu <span class="hljs-keyword">in</span> gpus:<br>        tf.config.experimental.set_memory_growth(gpu, <span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">1</span>==<span class="hljs-number">0</span>:<br>            tf.config.experimental.set_virtual_device_configuration(gpu, [<br>                tf.config.experimental.VirtualDeviceConfiguration(memory_limit=<span class="hljs-number">800</span>)])<br><span class="hljs-keyword">if</span> <span class="hljs-number">1</span>==<span class="hljs-number">1</span>:<br>    config = tf.compat.v1.ConfigProto()<br>    config.gpu_options.allow_growth = <span class="hljs-literal">True</span><br>    session =tf.compat.v1.InteractiveSession(config=config)<br><br><br><br><br><span class="hljs-keyword">import</span> pylab <span class="hljs-keyword">as</span> plt<br><br><br>max_features = <span class="hljs-number">20000</span><br><span class="hljs-comment"># 在此数量的单词之后剪切文本（取最常见的 max_features 个单词）</span><br>maxlen = <span class="hljs-number">80</span><br><span class="hljs-comment"># maxlen = 580</span><br>batch_size = <span class="hljs-number">32</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;maxlen %d batch size %d &quot;</span> % (maxlen,batch_size))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Loading data...&#x27;</span>)<br><span class="hljs-comment"># (x_train, y_train), (x_test, y_test) = imdb.load_data(&#x27;/home/ubuntu/work/DNNcourse2022/RNN/imdb.npz&#x27;,num_words=max_features)</span><br>(x_train, y_train), (x_test, y_test) = imdb.load_data(<span class="hljs-string">&#x27;./imdb.npz&#x27;</span>,num_words=max_features)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(x_train), <span class="hljs-string">&#x27;train sequences&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(x_test), <span class="hljs-string">&#x27;test sequences&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Pad sequences (samples x time)&#x27;</span>)<br>x_train = sequence.pad_sequences(x_train, maxlen=maxlen)<br>x_test = sequence.pad_sequences(x_test, maxlen=maxlen)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x_train shape:&#x27;</span>, x_train.shape)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x_test shape:&#x27;</span>, x_test.shape)<br>y_train = np.array(y_train)<br>y_test = np.array(y_test)<br><br>model = Sequential()<br>model.add(Embedding(max_features, <span class="hljs-number">128</span>, input_length=maxlen))<br>model.add(Bidirectional(LSTM(<span class="hljs-number">64</span>)))<br><br>model.add(Dropout(<span class="hljs-number">0.5</span>))<br>model.add(Dense(<span class="hljs-number">1</span>, activation=<span class="hljs-string">&#x27;sigmoid&#x27;</span>))<br><br><span class="hljs-comment"># 尝试使用不同的优化器和优化器配置</span><br>optimizer = Adam(<span class="hljs-number">1e-4</span>)<br><span class="hljs-comment"># model.compile(optimizer=&#x27;adam&#x27;, &#x27;binary_crossentropy&#x27;, metrics=[&#x27;accuracy&#x27;])</span><br>model.<span class="hljs-built_in">compile</span>(optimizer=optimizer, loss=<span class="hljs-string">&#x27;binary_crossentropy&#x27;</span>, metrics=[<span class="hljs-string">&#x27;accuracy&#x27;</span>])<br>model.summary()<br>plot_model(model,  to_file=<span class="hljs-string">&#x27;./Figs/test2.png&#x27;</span>,show_shapes=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># exit()</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Train...&#x27;</span>)<br><br>os.makedirs(<span class="hljs-string">&quot;logs&quot;</span>,exist_ok=<span class="hljs-number">1</span>==<span class="hljs-number">1</span>)<br>history=model.fit(x_train, y_train,<br>          batch_size=batch_size,<br>          epochs=<span class="hljs-number">20</span>,<br>          validation_data=(x_test, y_test) )<br><br>os.makedirs(<span class="hljs-string">&quot;Figs&quot;</span>,exist_ok=<span class="hljs-number">1</span>==<span class="hljs-number">1</span>)<br>plt.plot(history.history[<span class="hljs-string">&#x27;accuracy&#x27;</span>])<br>plt.plot(history.history[<span class="hljs-string">&#x27;val_accuracy&#x27;</span>])<br>plt.title(<span class="hljs-string">&#x27;Model accuracy&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Accuracy&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;Epoch&#x27;</span>)<br>plt.legend([<span class="hljs-string">&#x27;Train&#x27;</span>, <span class="hljs-string">&#x27;Test&#x27;</span>], loc=<span class="hljs-string">&#x27;upper left&#x27;</span>)<br>plt.savefig(<span class="hljs-string">&#x27;./Figs/test2_accuracy.png&#x27;</span>)<br>plt.show()<br><br><span class="hljs-comment"># 绘制训练 &amp; 验证的损失值</span><br>plt.plot(history.history[<span class="hljs-string">&#x27;loss&#x27;</span>])<br>plt.plot(history.history[<span class="hljs-string">&#x27;val_loss&#x27;</span>])<br>plt.title(<span class="hljs-string">&#x27;Model loss&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Loss&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;Epoch&#x27;</span>)<br>plt.legend([<span class="hljs-string">&#x27;Train&#x27;</span>, <span class="hljs-string">&#x27;Test&#x27;</span>], loc=<span class="hljs-string">&#x27;upper left&#x27;</span>)<br>plt.savefig(<span class="hljs-string">&#x27;./Figs/test2_loss.png&#x27;</span>)<br>plt.show()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/2022/05/13/deep-rnn/image-20220513145900239.png&quot; class=&quot;&quot; title=&quot;image-20220513145900239&quot;&gt;

&lt;img src=&quot;/2022/05/13/deep-rnn/image-</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
    <category term="deeplearning" scheme="https://github.com/sterne012/sterne012.github.io/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>Arcaea-从零开始的萌星生活</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/05/10/Arcaea2/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/05/10/Arcaea2/</id>
    <published>2022-05-10T07:55:18.000Z</published>
    <updated>2022-05-13T08:57:39.307Z</updated>
    
    <content type="html"><![CDATA[<p>记录自摘星以来的些许进步 </p><p>2022-05-10</p><img src="/2022/05/10/Arcaea2/CA07EBFF49B5515B7E762997B90686A7.png" class="" title="img"><p>2022-05-12</p><p>爽p！没想到后面稳住了没翻车</p><p>也是目前pm定数最高（（好菜，9+性了好几首</p><img src="/2022/05/10/Arcaea2/5EEE702598A483A9BD5C06228EC538B6.png" class="" title="img">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记录自摘星以来的些许进步 &lt;/p&gt;
&lt;p&gt;2022-05-10&lt;/p&gt;
&lt;img src=&quot;/2022/05/10/Arcaea2/CA07EBFF49B5515B7E762997B90686A7.png&quot; class=&quot;&quot; title=&quot;img&quot;&gt;

&lt;p&gt;2022-05</summary>
      
    
    
    
    
    <category term="games" scheme="https://github.com/sterne012/sterne012.github.io/tags/games/"/>
    
    <category term="Arc" scheme="https://github.com/sterne012/sterne012.github.io/tags/Arc/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-resnet</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/04/22/deep-resnet/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/04/22/deep-resnet/</id>
    <published>2022-04-22T08:09:41.000Z</published>
    <updated>2022-04-22T14:16:15.652Z</updated>
    
    <content type="html"><![CDATA[<p>这次用了jupyter</p><p>然后weights文件爆了（131万行后爆炸…）</p><img src="/2022/04/22/deep-resnet/image-20220422161143650.png" class="" title="image-20220422161143650"><p>曲线</p><img src="/2022/04/22/deep-resnet/image-20220422161158541.png" class="" title="image-20220422161158541"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> tensorflow.keras.layers <span class="hljs-keyword">import</span> Conv2D, BatchNormalization, Activation, MaxPool2D, Dropout, Flatten, Dense<br><span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> Model<br><span class="hljs-keyword">import</span> ssl<br><br>ssl._create_default_https_context = ssl._create_unverified_context<br>os.environ[<span class="hljs-string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="hljs-string">&#x27;2&#x27;</span><br>os.environ[<span class="hljs-string">&#x27;KMP_DUPLICATE_LIB_OK&#x27;</span>] = <span class="hljs-string">&quot;TRUE&quot;</span><br>np.set_printoptions(threshold=np.inf)<br><br>cifar10 = tf.keras.datasets.cifar10<br>(x_train, y_train), (x_test, y_test) = cifar10.load_data()<br>x_train, x_test = x_train / <span class="hljs-number">255.0</span>, x_test / <span class="hljs-number">255.0</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResnetBlock</span>(<span class="hljs-params">Model</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, filters, strides=<span class="hljs-number">1</span>, residual_path=<span class="hljs-literal">False</span></span>):</span><br>        <span class="hljs-built_in">super</span>(ResnetBlock, self).__init__()<br>        self.filters = filters<br>        self.strides = strides<br>        self.residual_path = residual_path<br><br>        self.c1 = Conv2D(filters, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), strides=strides, padding=<span class="hljs-string">&#x27;same&#x27;</span>, use_bias=<span class="hljs-literal">False</span>)<br>        self.b1 = BatchNormalization()<br>        self.a1 = Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)<br><br>        self.c2 = Conv2D(filters, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), strides=<span class="hljs-number">1</span>, padding=<span class="hljs-string">&#x27;same&#x27;</span>, use_bias=<span class="hljs-literal">False</span>)<br>        self.b2 = BatchNormalization()<br><br>        <span class="hljs-comment"># residual_path为True时，对输入进行下采样，即用1x1的卷积核做卷积操作，保证x能和F(x)维度相同，顺利相加</span><br>        <span class="hljs-keyword">if</span> residual_path:<br>            self.down_c1 = Conv2D(filters, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), strides=strides, padding=<span class="hljs-string">&#x27;same&#x27;</span>, use_bias=<span class="hljs-literal">False</span>)<br>            self.down_b1 = BatchNormalization()<br>        <br>        self.a2 = Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span>(<span class="hljs-params">self, inputs</span>):</span><br>        residual = inputs  <span class="hljs-comment"># residual等于输入值本身，即residual=x</span><br>        <span class="hljs-comment"># 将输入通过卷积、BN层、激活层，计算F(x)</span><br>        x = self.c1(inputs)<br>        x = self.b1(x)<br>        x = self.a1(x)<br><br>        x = self.c2(x)<br>        y = self.b2(x)<br><br>        <span class="hljs-keyword">if</span> self.residual_path:<br>            residual = self.down_c1(inputs)<br>            residual = self.down_b1(residual)<br><br>        out = self.a2(y + residual)  <span class="hljs-comment"># 最后输出的是两部分的和，即F(x)+x或F(x)+Wx,再过激活函数</span><br>        <span class="hljs-keyword">return</span> out<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResNet18</span>(<span class="hljs-params">Model</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, block_list, initial_filters=<span class="hljs-number">64</span></span>):</span>  <span class="hljs-comment"># block_list表示每个block有几个卷积层</span><br>        <span class="hljs-built_in">super</span>(ResNet18, self).__init__()<br>        self.num_blocks = <span class="hljs-built_in">len</span>(block_list)  <span class="hljs-comment"># 共有几个block</span><br>        self.block_list = block_list<br>        self.out_filters = initial_filters<br>        self.c1 = Conv2D(self.out_filters, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), strides=<span class="hljs-number">1</span>, padding=<span class="hljs-string">&#x27;same&#x27;</span>, use_bias=<span class="hljs-literal">False</span>)<br>        self.b1 = BatchNormalization()<br>        self.a1 = Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)<br>        self.blocks = tf.keras.models.Sequential()<br>        <span class="hljs-comment"># 构建ResNet网络结构</span><br>        <span class="hljs-keyword">for</span> block_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(block_list)):  <span class="hljs-comment"># 第几个resnet block</span><br>            <span class="hljs-keyword">for</span> layer_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(block_list[block_id]):  <span class="hljs-comment"># 第几个卷积层</span><br><br>                <span class="hljs-keyword">if</span> block_id != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> layer_id == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 对除第一个block以外的每个block的输入进行下采样</span><br>                    block = ResnetBlock(self.out_filters, strides=<span class="hljs-number">2</span>, residual_path=<span class="hljs-literal">True</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    block = ResnetBlock(self.out_filters, residual_path=<span class="hljs-literal">False</span>)<br>                self.blocks.add(block)  <span class="hljs-comment"># 将构建好的block加入resnet</span><br>            self.out_filters *= <span class="hljs-number">2</span>  <span class="hljs-comment"># 下一个block的卷积核数是上一个block的2倍</span><br>        self.p1 = tf.keras.layers.GlobalAveragePooling2D()<br>        self.f1 = tf.keras.layers.Dense(<span class="hljs-number">10</span>, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>, kernel_regularizer=tf.keras.regularizers.l2())<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span>(<span class="hljs-params">self, inputs</span>):</span><br>        x = self.c1(inputs)<br>        x = self.b1(x)<br>        x = self.a1(x)<br>        x = self.blocks(x)<br>        x = self.p1(x)<br>        y = self.f1(x)<br>        <span class="hljs-keyword">return</span> y<br><br><br>model = ResNet18([<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>])<br><br>model.<span class="hljs-built_in">compile</span>(optimizer=<span class="hljs-string">&#x27;adam&#x27;</span>,<br>              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="hljs-literal">False</span>),<br>              metrics=[<span class="hljs-string">&#x27;sparse_categorical_accuracy&#x27;</span>])<br><br>checkpoint_save_path = <span class="hljs-string">&quot;./checkpoint/ResNet18.ckpt&quot;</span><br><span class="hljs-keyword">if</span> os.path.exists(checkpoint_save_path + <span class="hljs-string">&#x27;.index&#x27;</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-------------load the model-----------------&#x27;</span>)<br>    model.load_weights(checkpoint_save_path)<br><br>cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_save_path,<br>                                                 save_weights_only=<span class="hljs-literal">True</span>,<br>                                                 save_best_only=<span class="hljs-literal">True</span>)<br><br>history = model.fit(x_train, y_train, batch_size=<span class="hljs-number">32</span>, epochs=<span class="hljs-number">5</span>, validation_data=(x_test, y_test), validation_freq=<span class="hljs-number">1</span>,<br>                    callbacks=[cp_callback])<br>model.summary()<br><br><span class="hljs-comment"># print(model.trainable_variables)</span><br>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./weights.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> model.trainable_variables:<br>    file.write(<span class="hljs-built_in">str</span>(v.name) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    file.write(<span class="hljs-built_in">str</span>(v.shape) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    file.write(<span class="hljs-built_in">str</span>(v.numpy()) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>file.close()<br><br><br><span class="hljs-comment"># 显示训练集和验证集的acc和loss曲线</span><br>acc = history.history[<span class="hljs-string">&#x27;sparse_categorical_accuracy&#x27;</span>]<br>val_acc = history.history[<span class="hljs-string">&#x27;val_sparse_categorical_accuracy&#x27;</span>]<br>loss = history.history[<span class="hljs-string">&#x27;loss&#x27;</span>]<br>val_loss = history.history[<span class="hljs-string">&#x27;val_loss&#x27;</span>]<br><br>plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br>plt.plot(acc, label=<span class="hljs-string">&#x27;Training Accuracy&#x27;</span>)<br>plt.plot(val_acc, label=<span class="hljs-string">&#x27;Validation Accuracy&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;Training and Validation Accuracy&#x27;</span>)<br>plt.legend()<br><br>plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br>plt.plot(loss, label=<span class="hljs-string">&#x27;Training Loss&#x27;</span>)<br>plt.plot(val_loss, label=<span class="hljs-string">&#x27;Validation Loss&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;Training and Validation Loss&#x27;</span>)<br>plt.legend()<br>plt.show()<br><br></code></pre></td></tr></table></figure><p>话说回来inception是什么算法 吗？</p><img src="/2022/04/22/deep-resnet/image-20220422184707986.png" class="" title="image-20220422184707986"><p>cnn_baseline的也存一下</p><img src="/2022/04/22/deep-resnet/image-20220422221614706.png" class="" title="image-20220422221614706">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这次用了jupyter&lt;/p&gt;
&lt;p&gt;然后weights文件爆了（131万行后爆炸…）&lt;/p&gt;
&lt;img src=&quot;/2022/04/22/deep-resnet/image-20220422161143650.png&quot; class=&quot;&quot; title=&quot;image-2022</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
    <category term="deeplearning" scheme="https://github.com/sterne012/sterne012.github.io/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>嘤语学习助手-数据库课设</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/04/21/tnndsql/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/04/21/tnndsql/</id>
    <published>2022-04-21T08:44:08.000Z</published>
    <updated>2022-05-13T09:00:34.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-数据库"><a href="#1-数据库" class="headerlink" title="1.数据库"></a>1.数据库</h1><h2 id="0-连接"><a href="#0-连接" class="headerlink" title="0.连接"></a>0.连接</h2><p>终于把sql server（以下sql均指sql server）修好了。。。</p><p>昨天弄了一下午，真的不想玩辣，觉得用mysql摆烂算了，然后发现mysql的触发器和tsql不会写，寄</p><p>前段时间需求分析差不多的时候发现它从我的电脑上直接消失（一个什么配置管理器），然后正确的修复方法应该不是重装，或者不只是重装，在sql安装程序-&gt;维护-&gt;修复的地方修一下之后我才看到TCP/IP端口重现天日。。然后SSL什么的报错，改了jdbc里面的一段话（改的是idea里面jdbc的）</p><blockquote><p><strong>D:\jdk\jre\lib\security</strong>下就会有这个<strong>java.security</strong></p></blockquote><p>直接在idea安装路径下搜java.security，记事本打开，搜jdk.tls，将3DES_EDE_CBC删除</p><p>我超，行了！</p><h2 id="1-导入数据"><a href="#1-导入数据" class="headerlink" title="1.导入数据"></a>1.导入数据</h2><p>使用unicode(utf-8)字符集才能正确导入音标，否则一片问号</p><p>xlsx文件用excel打开后另存为-&gt;用csv保存-&gt;工具-&gt;编码-&gt;选unicode(utf-8)！选utf-8不行</p><p>在datagrip中导入，选utf-8</p><p>然后终于开始写触发器了</p><h2 id="2-数据库代码"><a href="#2-数据库代码" class="headerlink" title="2.数据库代码"></a>2.数据库代码</h2><p>同时也是备份</p><p><del>什么嘛，我这不是挺能写的，不要停下来啊</del></p><p>把type属性去掉了，拼字符串那种事情不要啊</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database EN_learning;<br>use EN_learning;<br><span class="hljs-keyword">ALTER</span> DATABASE EN_learning <span class="hljs-keyword">COLLATE</span> Chinese_PRC_CI_AS<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> Admin<br>(<br>    admin_id <span class="hljs-type">char</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">primary</span> key,<br>    admin_passwd <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>)<br>)<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> users<br>(<br>    user_id <span class="hljs-type">char</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">primary</span> key,<br>    user_passwd <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>),<br>    user_name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>    user_date <span class="hljs-type">date</span> <span class="hljs-keyword">default</span>(getdate()),<span class="hljs-comment">--注册时间</span><br>    user_learn <span class="hljs-type">smallint</span> <span class="hljs-keyword">default</span>(<span class="hljs-number">0</span>)<br>)<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> en_list<br>(<br>    word      <span class="hljs-type">char</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">primary</span> key,<br>    symbol    nvarchar(max),<br>    trans     nvarchar(max),<br>    frequency <span class="hljs-type">int</span> <span class="hljs-keyword">default</span>(<span class="hljs-number">0</span>),<br>    img       image,<br>    vocal     image<br>)<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> motto<br>(<br>    sentence nvarchar(max),<br>    trans    nvarchar(max)<br>)<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> jp_list <span class="hljs-comment">--计划后续添加</span><br>(<br>    word        nvarchar(<span class="hljs-number">80</span>) <span class="hljs-keyword">primary</span> key ,<br>    symbol      nvarchar(<span class="hljs-number">80</span>),<br>    trans       nvarchar(max),<br>    frequency   <span class="hljs-type">int</span> <span class="hljs-keyword">default</span>(<span class="hljs-number">0</span>),<br>    img         image,<br>    vocal       image<br>)<br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">--用户------------------------------------------------------</span><br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">--创建用户后触发：生成一张用户的新表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> users_add <span class="hljs-keyword">on</span> users after <span class="hljs-keyword">insert</span> <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<br>            <span class="hljs-variable">@create</span>_table <span class="hljs-type">varchar</span>(<span class="hljs-number">300</span>),<br>            <span class="hljs-variable">@create</span>_view <span class="hljs-type">varchar</span>(<span class="hljs-number">300</span>),<br>            <span class="hljs-variable">@sel</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">300</span>)<br>    <span class="hljs-keyword">select</span> <span class="hljs-variable">@user</span>_id<span class="hljs-operator">=</span>user_id <span class="hljs-keyword">from</span> inserted<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@create</span>_table<span class="hljs-operator">=</span><span class="hljs-string">&#x27;create table user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><br>                      <span class="hljs-string">&#x27; (&#x27;</span> <span class="hljs-operator">+</span><br>    <span class="hljs-string">&#x27;</span><br><span class="hljs-string">        rank      smallint default(0),</span><br><span class="hljs-string">        word      char(40) primary key,</span><br><span class="hljs-string">        symbol    nvarchar(max),</span><br><span class="hljs-string">        trans     nvarchar(max),</span><br><span class="hljs-string">        add_date  date default(getdate()),</span><br><span class="hljs-string">        del_date  date</span><br><span class="hljs-string">    )&#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@create</span>_table)<br><br>    <span class="hljs-comment">--生词表（view）user_1001001001 默认按rank降序排序</span><br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select rank,word,symbol,trans,add_date&#x27;</span> <span class="hljs-operator">+</span><br>             <span class="hljs-string">&#x27; from user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; where rank&gt;=0&#x27;</span><br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@create</span>_view<span class="hljs-operator">=</span><span class="hljs-string">&#x27;create view user_1_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; as &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@sel</span><br>    <span class="hljs-keyword">exec</span> (<span class="hljs-variable">@create</span>_view)<br><br>    <span class="hljs-comment">--熟词表（view）</span><br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select word,symbol,trans,add_date,del_date&#x27;</span> <span class="hljs-operator">+</span><br>             <span class="hljs-string">&#x27; from user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; where rank&lt;0&#x27;</span><br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@create</span>_view<span class="hljs-operator">=</span><span class="hljs-string">&#x27;create view user_2_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; as &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@sel</span><br>    <span class="hljs-keyword">exec</span> (<span class="hljs-variable">@create</span>_view)<br>go<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(user_id, user_passwd, user_name) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>)<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(user_id, user_passwd, user_name) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;1001001002&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>,<span class="hljs-string">&#x27;test2&#x27;</span>)<br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--注销用户后触发：删除用户的表&amp;视图</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> users_del <span class="hljs-keyword">on</span> users after <span class="hljs-keyword">delete</span> <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@user</span>_id <span class="hljs-type">char</span>(<span class="hljs-number">10</span>),<br>            <span class="hljs-variable">@drop</span>_table <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>),<br>            <span class="hljs-variable">@drop</span>_view <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">select</span> <span class="hljs-variable">@user</span>_id<span class="hljs-operator">=</span>user_id <span class="hljs-keyword">from</span> deleted<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@drop</span>_table<span class="hljs-operator">=</span><span class="hljs-string">&#x27;drop table user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<br>    <span class="hljs-keyword">exec</span> (<span class="hljs-variable">@drop</span>_table)<br><br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@drop</span>_view<span class="hljs-operator">=</span><span class="hljs-string">&#x27;drop view user_1_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<br>    <span class="hljs-keyword">exec</span> (<span class="hljs-variable">@drop</span>_view)<br><br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@drop</span>_view<span class="hljs-operator">=</span><span class="hljs-string">&#x27;drop view user_2_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<br>    <span class="hljs-keyword">exec</span> (<span class="hljs-variable">@drop</span>_view)<br>go<br><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> user_id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1001001001&#x27;</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> user_id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1001001002&#x27;</span><br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">--词库-----------------------------------------------------</span><br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">--单词总量统计</span><br><span class="hljs-keyword">create</span> proc en_list_counter <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> en_list<br>go<br><br><span class="hljs-keyword">exec</span> en_list_counter<br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">--使用单词模糊查找，找到后词频+1</span><br><span class="hljs-keyword">create</span> proc EN_search <span class="hljs-variable">@word</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@word</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;%&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@word</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;%&#x27;</span><br>    <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> en_list <span class="hljs-keyword">where</span> word <span class="hljs-keyword">like</span> <span class="hljs-variable">@word</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@w</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>),<br>            <span class="hljs-variable">@frequency</span> <span class="hljs-type">int</span><br>    <span class="hljs-keyword">declare</span> csr <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span><br>    <span class="hljs-keyword">select</span> word,frequency <span class="hljs-keyword">from</span> en_list<br>    <span class="hljs-keyword">where</span> word <span class="hljs-keyword">like</span> <span class="hljs-variable">@word</span><br>    <span class="hljs-keyword">open</span> csr<br>    <span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> csr <span class="hljs-keyword">into</span> <span class="hljs-variable">@w</span>,<span class="hljs-variable">@frequency</span><br>    while @<span class="hljs-variable">@FETCH</span>_STATUS<span class="hljs-operator">=</span><span class="hljs-number">0</span><br>    <span class="hljs-keyword">begin</span><br>        update en_list <span class="hljs-keyword">set</span> frequency<span class="hljs-operator">=</span><span class="hljs-variable">@frequency</span><span class="hljs-operator">+</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-variable">@w</span><br>        <span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> csr <span class="hljs-keyword">into</span> <span class="hljs-variable">@w</span>,<span class="hljs-variable">@frequency</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">close</span> csr<br>    <span class="hljs-keyword">deallocate</span> csr<br>go<br><br><span class="hljs-keyword">exec</span> EN_search <span class="hljs-string">&#x27;cat&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--使用中文或词性模糊查找，找到后词频+1</span><br><span class="hljs-keyword">create</span> proc CH_search <span class="hljs-variable">@trans</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@w</span> <span class="hljs-type">char</span>(<span class="hljs-number">40</span>),<br>            <span class="hljs-variable">@frequency</span> <span class="hljs-type">int</span><br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@trans</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;%&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@trans</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;%&#x27;</span><br>    <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> en_list<br>    <span class="hljs-keyword">where</span> trans <span class="hljs-keyword">like</span> <span class="hljs-variable">@trans</span><br><br>    <span class="hljs-keyword">declare</span> csr <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span><br>        <span class="hljs-keyword">select</span> word,frequency <span class="hljs-keyword">from</span> en_list<br>        <span class="hljs-keyword">where</span> trans <span class="hljs-keyword">like</span> <span class="hljs-variable">@trans</span><br>        <span class="hljs-keyword">open</span> csr<br>        <span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> csr <span class="hljs-keyword">into</span> <span class="hljs-variable">@w</span>,<span class="hljs-variable">@frequency</span><br>        while @<span class="hljs-variable">@FETCH</span>_STATUS<span class="hljs-operator">=</span><span class="hljs-number">0</span><br>            <span class="hljs-keyword">begin</span><br>                update en_list <span class="hljs-keyword">set</span> frequency<span class="hljs-operator">=</span><span class="hljs-variable">@frequency</span><span class="hljs-operator">+</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-variable">@w</span><br>                <span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> csr <span class="hljs-keyword">into</span> <span class="hljs-variable">@w</span>,<span class="hljs-variable">@frequency</span><br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">close</span> csr<br>        <span class="hljs-keyword">deallocate</span> csr<br>go<br><br><span class="hljs-keyword">exec</span> CH_search <span class="hljs-string">&#x27;好&#x27;</span><br><span class="hljs-keyword">exec</span> CH_search <span class="hljs-string">&#x27;prep&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--词库中单词按词频排序，输出</span><br><span class="hljs-keyword">create</span> proc order_en_list_fre <span class="hljs-variable">@order</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">as</span><br>    if(<span class="hljs-variable">@order</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;ASC&#x27;</span>)<br>    <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> en_list<br>        <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> frequency <span class="hljs-keyword">asc</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> if(<span class="hljs-variable">@order</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;DESC&#x27;</span>)<br>    <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> en_list<br>        <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> frequency <span class="hljs-keyword">desc</span><br>    <span class="hljs-keyword">end</span><br>go<br><br><span class="hljs-keyword">exec</span> order_en_list_fre <span class="hljs-string">&#x27;ASC&#x27;</span><br><span class="hljs-keyword">exec</span> order_en_list_fre <span class="hljs-string">&#x27;DESC&#x27;</span><br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">--用户表-----------------------------------------------------</span><br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">--用户手动向生词表添加，一个一个加</span><br><span class="hljs-keyword">create</span> proc en_list_to_user <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<span class="hljs-variable">@word</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@ins</span> nvarchar(max)<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@ins</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;insert into user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27;(word,symbol,trans)&#x27;</span> <span class="hljs-operator">+</span><br>             <span class="hljs-string">&#x27;select word,symbol,trans from en_list where word=&#x27;&#x27;&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@word</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@ins</span>)<br>go<br><br><span class="hljs-keyword">exec</span> en_list_to_user <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-string">&#x27;accomplished&#x27;</span><br><br><span class="hljs-comment">------------------------------------------------------------------</span><br><span class="hljs-comment">--每日生成生词表（向其中添加一定数目的单词）</span><br><span class="hljs-keyword">create</span> proc day_en_word <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<span class="hljs-variable">@num</span> <span class="hljs-type">smallint</span>,<span class="hljs-variable">@val</span> <span class="hljs-type">smallint</span> <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@word</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>),<br>            <span class="hljs-variable">@csr</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">300</span>)<br>    if(<span class="hljs-variable">@val</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>)<span class="hljs-comment">--根据词库word正序选取（从字典序最小开始）</span><br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">set</span> <span class="hljs-variable">@csr</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;declare csr cursor for &#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;select top &#x27;</span><span class="hljs-operator">+</span><span class="hljs-keyword">convert</span>(<span class="hljs-type">char</span>,<span class="hljs-variable">@num</span>)<span class="hljs-operator">+</span><span class="hljs-string">&#x27; word from en_list &#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;where word not in(select word from user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27;)&#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;order by word asc&#x27;</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> if(<span class="hljs-variable">@val</span><span class="hljs-operator">=</span><span class="hljs-number">2</span>)<span class="hljs-comment">--根据word倒序选取（从字典序最大开始）</span><br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">set</span> <span class="hljs-variable">@csr</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;declare csr cursor for &#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;select top &#x27;</span><span class="hljs-operator">+</span><span class="hljs-keyword">convert</span>(<span class="hljs-type">char</span>,<span class="hljs-variable">@num</span>)<span class="hljs-operator">+</span><span class="hljs-string">&#x27; word from en_list &#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;where word not in(select word from user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27;)&#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;order by word desc&#x27;</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> if(<span class="hljs-variable">@val</span><span class="hljs-operator">=</span><span class="hljs-number">3</span>)<span class="hljs-comment">--根据词频选取，最大词频优先</span><br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">set</span> <span class="hljs-variable">@csr</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;declare csr cursor for &#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;select top &#x27;</span><span class="hljs-operator">+</span><span class="hljs-keyword">convert</span>(<span class="hljs-type">char</span>,<span class="hljs-variable">@num</span>)<span class="hljs-operator">+</span><span class="hljs-string">&#x27; word from en_list &#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;where word not in(select word from user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27;)&#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;order by frequency desc&#x27;</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> if(<span class="hljs-variable">@val</span><span class="hljs-operator">=</span><span class="hljs-number">4</span>)<span class="hljs-comment">--随机抽选</span><br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">set</span> <span class="hljs-variable">@csr</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;declare csr cursor for &#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;select top &#x27;</span><span class="hljs-operator">+</span><span class="hljs-keyword">convert</span>(<span class="hljs-type">char</span>,<span class="hljs-variable">@num</span>)<span class="hljs-operator">+</span><span class="hljs-string">&#x27; word from en_list &#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;where word not in(select word from user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27;)&#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;order by newid()&#x27;</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">exec</span> (<span class="hljs-variable">@csr</span>)<br>    <span class="hljs-keyword">open</span> csr<br>    <span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> csr <span class="hljs-keyword">into</span> <span class="hljs-variable">@word</span><br>    while @<span class="hljs-variable">@FETCH</span>_STATUS<span class="hljs-operator">=</span><span class="hljs-number">0</span><br>    <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">exec</span> en_list_to_user <span class="hljs-variable">@user</span>_id,<span class="hljs-variable">@word</span><br>        <span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> csr <span class="hljs-keyword">into</span> <span class="hljs-variable">@word</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">close</span> csr<br>    <span class="hljs-keyword">deallocate</span> csr<br>go<br><br><span class="hljs-keyword">exec</span> day_en_word <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span><br><span class="hljs-keyword">exec</span> day_en_word <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">4</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--增加某个单词rank，上限为10（在前端检测并提示）</span><br><span class="hljs-keyword">create</span> proc rank_up <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<span class="hljs-variable">@word</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@update</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@update</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;update user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; set rank=rank+1 where word=&#x27;&#x27;&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@word</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@update</span>)<br>go<br><br><span class="hljs-keyword">exec</span> rank_up <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-keyword">exec</span> rank_up <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-string">&#x27;above&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--降低某个单词rank，下限为0</span><br><span class="hljs-keyword">create</span> proc rank_down <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<span class="hljs-variable">@word</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@update</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@update</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;update user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; set rank=rank-1 where word=&#x27;&#x27;&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@word</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@update</span>)<br>go<br><span class="hljs-keyword">exec</span> rank_down <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--从生词表删除移到熟词表</span><br><span class="hljs-keyword">create</span> proc rank_move <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<span class="hljs-variable">@word</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@update</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@update</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;update user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; set rank=-1,del_date=getdate() where word=&#x27;&#x27;&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@word</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@update</span>)<br>go<br><span class="hljs-keyword">exec</span> rank_move <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-string">&#x27;accomplished&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--按rank排序</span><br><span class="hljs-keyword">create</span> proc order_user1_rank <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<span class="hljs-variable">@order</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@sel</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    if(<span class="hljs-variable">@order</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;ASC&#x27;</span>)<br>    <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select * from user_1_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; order by rank asc&#x27;</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> if(<span class="hljs-variable">@order</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;DESC&#x27;</span>)<br>    <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select * from user_1_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; order by rank desc&#x27;</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@sel</span>)<br>go<br><br><span class="hljs-keyword">exec</span> order_user1_rank <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-string">&#x27;desc&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--按添加时间排序，方便看今天新添加的</span><br><span class="hljs-keyword">create</span> proc order_user1_date <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<span class="hljs-variable">@order</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@sel</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    if(<span class="hljs-variable">@order</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;ASC&#x27;</span>)<br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select * from user_1_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; order by add_date asc&#x27;</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> if(<span class="hljs-variable">@order</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;DESC&#x27;</span>)<br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select * from user_1_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; order by add_date desc&#x27;</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@sel</span>)<br>go<br><br><span class="hljs-keyword">exec</span> order_user1_date <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-string">&#x27;desc&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--报表：今日掌握的单词</span><br><span class="hljs-keyword">create</span> proc day_learn <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">as</span><br>    update users <span class="hljs-keyword">set</span> user_learn<span class="hljs-operator">=</span>user_learn<span class="hljs-operator">+</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> user_id<span class="hljs-operator">=</span><span class="hljs-variable">@user</span>_id<br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@sel</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select word,symbol,trans from user_2_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; where del_date=convert(date,getdate())&#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@sel</span>)<br>go<br><br><span class="hljs-keyword">exec</span> day_learn <span class="hljs-string">&#x27;1001001001&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--根据已学单词随机生成测试题，每次10词（前提是熟词表中有这么多）</span><br><span class="hljs-comment">--底层实现为随机从熟词表中select10个单词，前端可以选择不显示单词或者释义之类的</span><br><span class="hljs-keyword">create</span> proc user_en_test <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@sel</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select top 10 word,symbol,trans from user_2_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><br>             <span class="hljs-string">&#x27; order by newid()&#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@sel</span>)<br>go<br><br><span class="hljs-keyword">exec</span> user_en_test  <span class="hljs-string">&#x27;1001001001&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--随机名言，用于各种界面</span><br><span class="hljs-keyword">create</span> proc day_motto <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> sentence,trans <span class="hljs-keyword">from</span> motto <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> newid()<br>go<br><br><span class="hljs-keyword">exec</span> day_motto<br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--图片&amp;音频导入</span><br>update en_list <span class="hljs-keyword">set</span> img<span class="hljs-operator">=</span>BulkColumn <span class="hljs-keyword">from</span> openrowset(bulk N<span class="hljs-string">&#x27;D:\#DownLoad\2.2\数据库\img\cat.png&#x27;</span>,single_blob) <span class="hljs-keyword">as</span> <span class="hljs-type">blob</span><br><span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-string">&#x27;cat&#x27;</span><br>update en_list <span class="hljs-keyword">set</span> img<span class="hljs-operator">=</span>BulkColumn <span class="hljs-keyword">from</span> openrowset(bulk N<span class="hljs-string">&#x27;D:\#DownLoad\2.2\数据库\img\dog.png&#x27;</span>,single_blob) <span class="hljs-keyword">as</span> <span class="hljs-type">blob</span><br><span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-string">&#x27;dog&#x27;</span><br>update en_list <span class="hljs-keyword">set</span> img<span class="hljs-operator">=</span>BulkColumn <span class="hljs-keyword">from</span> openrowset(bulk N<span class="hljs-string">&#x27;D:\#DownLoad\2.2\数据库\img\amphibian.png&#x27;</span>,single_blob) <span class="hljs-keyword">as</span> <span class="hljs-type">blob</span><br><span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-string">&#x27;amphibian&#x27;</span><br>update en_list <span class="hljs-keyword">set</span> img<span class="hljs-operator">=</span>BulkColumn <span class="hljs-keyword">from</span> openrowset(bulk N<span class="hljs-string">&#x27;D:\#DownLoad\2.2\数据库\img\aback.png&#x27;</span>,single_blob) <span class="hljs-keyword">as</span> <span class="hljs-type">blob</span><br><span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-string">&#x27;aback&#x27;</span><br><span class="hljs-keyword">exec</span> EN_search <span class="hljs-string">&#x27;amphibian&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br>update en_list <span class="hljs-keyword">set</span> vocal<span class="hljs-operator">=</span>BulkColumn <span class="hljs-keyword">from</span> openrowset(bulk N<span class="hljs-string">&#x27;D:\#DownLoad\2.2\数据库\vocal\aback.mp3&#x27;</span>,single_blob) <span class="hljs-keyword">as</span> <span class="hljs-type">blob</span><br><span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-string">&#x27;aback&#x27;</span><br>update en_list <span class="hljs-keyword">set</span> vocal<span class="hljs-operator">=</span>BulkColumn <span class="hljs-keyword">from</span> openrowset(bulk N<span class="hljs-string">&#x27;D:\#DownLoad\2.2\数据库\vocal\cat.mp3&#x27;</span>,single_blob) <span class="hljs-keyword">as</span> <span class="hljs-type">blob</span><br><span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-string">&#x27;cat&#x27;</span><br>update en_list <span class="hljs-keyword">set</span> vocal<span class="hljs-operator">=</span>BulkColumn <span class="hljs-keyword">from</span> openrowset(bulk N<span class="hljs-string">&#x27;D:\#DownLoad\2.2\数据库\vocal\dog.mp3&#x27;</span>,single_blob) <span class="hljs-keyword">as</span> <span class="hljs-type">blob</span><br><span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-string">&#x27;dog&#x27;</span><br>update en_list <span class="hljs-keyword">set</span> vocal<span class="hljs-operator">=</span>BulkColumn <span class="hljs-keyword">from</span> openrowset(bulk N<span class="hljs-string">&#x27;D:\#DownLoad\2.2\数据库\vocal\amphibian.mp3&#x27;</span>,single_blob) <span class="hljs-keyword">as</span> <span class="hljs-type">blob</span><br><span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-string">&#x27;amphibian&#x27;</span><br><span class="hljs-keyword">exec</span> EN_search <span class="hljs-string">&#x27;dog&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><br></code></pre></td></tr></table></figure><p>新增：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询前多少个单词</span><br><span class="hljs-keyword">create</span> proc order_en_list <span class="hljs-variable">@top</span> <span class="hljs-type">int</span> <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@sel</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select top &#x27;</span><span class="hljs-operator">+</span><span class="hljs-keyword">convert</span>(<span class="hljs-type">varchar</span>,<span class="hljs-variable">@top</span>)<span class="hljs-operator">+</span><span class="hljs-string">&#x27; * from en_list&#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@sel</span>)<br><br><span class="hljs-comment">--熟词表按照日期倒序显示</span><br><span class="hljs-keyword">create</span> proc order_user2_date <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@sel</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select * from user_2_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; order by del_date desc &#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@sel</span>)<br><br><span class="hljs-keyword">exec</span> order_user2_date <span class="hljs-string">&#x27;1001001001&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="2-web"><a href="#2-web" class="headerlink" title="2.web"></a>2.web</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h2><ul><li><p>inStream parameter is null</p><p>druid.properties要复制两份放在resources和target/classes两个目录下</p></li><li><p>5月 07, 2022 3:30:50 下午 com.alibaba.druid.support.logging.JakartaCommonsLoggingImpl error<br>严重: testWhileIdle is true, validationQuery not set</p><p>5月 07, 2022 3:30:51 下午 com.alibaba.druid.support.logging.JakartaCommonsLoggingImpl info<br>信息: {dataSource-1} inited</p><p><a href="https://blog.csdn.net/qq_45954145/article/details/111073583">https://blog.csdn.net/qq_45954145/article/details/111073583</a></p></li><li><p>```java<br>BeanUtils.populate(loginuser,map);</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs stata"><br>  使用时前端的name要和后端user类对象名一样，否则调试时卡死<br>  <br>- 实例化Servlet类异常<br><br>  我真服了，真的，我改了一下包名（就是开头S统一成小写s结果找不到这个类。。。）<br>  <br>- 找不到jstl包<br><br>  下载`jakarta-taglibs-standard-1.1.0`版本，将lib目录中两个jar都丢到项目lib目录<br>  <br>- <span class="hljs-keyword">input</span>找不到属性，属性值为空<br><br>  不要设置<span class="hljs-keyword">input</span>标签为disabled，设置为readonly就好<br><br>## 2.web代码(复制用)<br><br>```jsp<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span> %&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span>%&gt;<br><br>&lt;%@ <span class="hljs-keyword">include</span> <span class="hljs-keyword">file</span>=<span class="hljs-string">&quot;bootstrap.jsp&quot;</span>%&gt;<br>    &lt;title&gt;Login -<span class="hljs-keyword">EN</span> Learning Assistant-&lt;/title&gt;<br><br>&lt;c:<span class="hljs-keyword">if</span> <span class="hljs-keyword">test</span>=<span class="hljs-string">&quot;$&#123;not empty user&#125;&quot;</span>&gt;&lt;%@<span class="hljs-keyword">include</span> <span class="hljs-keyword">file</span>=<span class="hljs-string">&quot;user_nav.jsp&quot;</span>%&gt;&lt;/c:<span class="hljs-keyword">if</span>&gt;<br>&lt;c:<span class="hljs-keyword">if</span> <span class="hljs-keyword">test</span>=<span class="hljs-string">&quot;$&#123;empty user&#125;&quot;</span>&gt;&lt;%@<span class="hljs-keyword">include</span> <span class="hljs-keyword">file</span>=<span class="hljs-string">&quot;nav.jsp&quot;</span>%&gt;&lt;/c:<span class="hljs-keyword">if</span>&gt;<br><br><br>&lt;%@ <span class="hljs-keyword">include</span> <span class="hljs-keyword">file</span>=<span class="hljs-string">&quot;copyright.jsp&quot;</span>%&gt;<br></code></pre></td></tr></table></figure></li></ul><h1 id="3-进度统计"><a href="#3-进度统计" class="headerlink" title="3.进度统计"></a>3.进度统计</h1><p>基本已经完成</p><p>目前没做的功能：</p><ol><li>lib&amp;用户表的分页(lib完成，用户表不想做了)</li><li>点开始之后(完成)</li><li>查询功能</li><li>单词测试</li><li>打卡</li><li>用户表里边一堆小按钮</li><li>单词表的vocal和img</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-数据库&quot;&gt;&lt;a href=&quot;#1-数据库&quot; class=&quot;headerlink&quot; title=&quot;1.数据库&quot;&gt;&lt;/a&gt;1.数据库&lt;/h1&gt;&lt;h2 id=&quot;0-连接&quot;&gt;&lt;a href=&quot;#0-连接&quot; class=&quot;headerlink&quot; title=&quot;0.连接&quot;</summary>
      
    
    
    
    
    <category term="sql" scheme="https://github.com/sterne012/sterne012.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>并行化编程练习</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/04/16/HPC/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/04/16/HPC/</id>
    <published>2022-04-16T03:41:52.000Z</published>
    <updated>2022-05-13T08:59:31.446Z</updated>
    
    <content type="html"><![CDATA[<p>HPC-高性能计算</p><p>说起高性能当然是atri了！</p><img src="/2022/04/16/HPC/image-20220416114456837.png" class="" title="image-20220416114456837"><img src="/2022/04/16/HPC/image-20220416114511405.png" class="" title="image-20220416114511405">robo真是太屑了（<p>不过真的好多刀，建议不玩呜呜</p><p>不扯了，正经点</p><p>由于学校server里的c版本比较低，所以大部分是用c语言写的</p><h1 id="mpi"><a href="#mpi" class="headerlink" title="mpi"></a>mpi</h1><p>这部分打到服务器上去了。。找时间把他们下回来qwq</p><h1 id="openmp"><a href="#openmp" class="headerlink" title="openmp"></a>openmp</h1><h2 id="常用编译指导语句"><a href="#常用编译指导语句" class="headerlink" title="常用编译指导语句"></a>常用编译指导语句</h2><ol><li><h3 id="并行域结构"><a href="#并行域结构" class="headerlink" title="并行域结构"></a>并行域结构</h3></li></ol><p>  parallel语句：创建线程组并行执行程序</p><ol start="2"><li><h3 id="共享任务结构"><a href="#共享任务结构" class="headerlink" title="共享任务结构"></a>共享任务结构</h3></li></ol><p>  for循环语句：将for循环分配给各线程并行执行</p><p>  sections语句：非迭代共享任务结构，将任务分配给各线程</p><p>  single语句：将代码段交由1个线程执行</p><ol start="3"><li><h3 id="同步与临界区"><a href="#同步与临界区" class="headerlink" title="同步与临界区"></a>同步与临界区</h3></li></ol><p>  barrier语句：实现线程组中所有线程同步</p><p>  ordered语句：位于循环内，按序串行执行</p><p>  critical语句：同一时刻只能有一个线程执行</p><p>  atomic语句：指定的存储单元被原子地更新</p><p>  master语句：代码段由主线程执行，其他线程忽略</p><p>•OpenMP程序在同一个共享内存空间上执行</p><p>•可以任意使用这个共享内存空间上的变量进行线程间的数据传递</p><p>•内存分布结构如图</p><p>•每一个线程的栈空间都是私有的</p><p>•全局变量以及程序代码都是全局共享</p><p>•动态分配的堆空间也是共享的</p><p>•通过threadprivate指出的数据结构在每一个线程中都会有一个副本 </p><p>•shared定义变量作用域是共享的</p><p>•private定义变量作用域是私有的 </p><img src="/2022/04/16/HPC/image-20220416115344365.png" class="" title="image-20220416115344365"><h2 id="1-hello-world并行化高性能版"><a href="#1-hello-world并行化高性能版" class="headerlink" title="1 hello world并行化高性能版"></a>1 hello world并行化高性能版</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel</span><br>   &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world\n&quot;</span>);<br>   &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-高性能算pi"><a href="#2-高性能算pi" class="headerlink" title="2 高性能算pi"></a>2 高性能算pi</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NUM_THREADS 16</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> num_steps=<span class="hljs-number">1000000000</span>;<br>    <span class="hljs-keyword">double</span> step;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">double</span> x,pi,sum=<span class="hljs-number">0.0</span>;<br>    step=<span class="hljs-number">1.0</span>/(<span class="hljs-keyword">double</span>) num_steps;<br>    omp_set_num_threads(NUM_THREADS);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for reduction(+:sum) private(x)</span><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;num_steps;i++)<br>&#123;<br>    x=(i+<span class="hljs-number">0.5</span>)*step;<br>    sum+=<span class="hljs-number">4.0</span>/(<span class="hljs-number">1.0</span>+x*x);<br>&#125;<br>    pi=step*sum;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Pi=%21.20f(%ld steps)\n&quot;</span>,pi,num_steps);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-私有变量的初始化和终结"><a href="#3-私有变量的初始化和终结" class="headerlink" title="3 私有变量的初始化和终结"></a>3 私有变量的初始化和终结</h2><p>private子句用于将一个或多个变量声明成线程私有的变量，变量声明成私有变量后，指定每个线程都有它自己的变量私有副本，其他线程无法访问私有副本。即使在并行区域外有同名的共享变量，共享变量在并行区域内不起任何作用，并且并行区域内不会操作到外面的共享变量。</p><p>private声明的私有变量不能继承同名变量的值，但实际情况中有时需要继承原有共享变量的值，OpenMP提供了firstprivate子句来实现这个功能。若上述程序使用firstprivate(k)，则并行区域内的私有变量k继承了外面共享变量k的值100作为初始值，并且在退出并行区域后，共享变量k的值保持为100未变。</p><p>有时在并行区域内的私有变量的值经过计算后，在退出并行区域时，需要将它的值赋给同名的共享变量，前面的private和firstprivate子句在退出并行区域时都没有将私有变量的最后取值赋给对应的共享变量，lastprivate子句就是用来实现在退出并行区域时将私有变量的值赋给共享变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> val=<span class="hljs-number">8</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for firstprivate(val) lastprivate(val)</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">2</span>;i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i=%d val=%d\n&quot;</span>,i,val);<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)<br>        val=<span class="hljs-number">10000</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i=%d val=%d\n&quot;</span>,i,val);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;val=%d\n&quot;</span>,val);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-循环嵌套"><a href="#4-循环嵌套" class="headerlink" title="4 循环嵌套"></a>4 循环嵌套</h2><p>在一个循环体内包涵另一个循环体，循环体产生嵌套</p><p>循环并行化编译指导语句可以加在任一循环之前，对应的最近的循环语句被并行化，其它部分不变</p><p>并行化作用于嵌套循环中的某一个循环，其他部分由执行到的线程负责执行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">30</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-keyword">int</span> i,j;<br>    <span class="hljs-keyword">int</span> a[maxn][maxn];<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;maxn;i++)&#123;<br>        a[<span class="hljs-number">0</span>][i]=<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;maxn; i++) &#123;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for</span><br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; maxn; j++) &#123;<br>            a[i][j] = <span class="hljs-number">2</span> * a[i - <span class="hljs-number">1</span>][j];<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a[%d][%d] = %d\n&quot;</span>, i, j, a[i][j]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>下面这个是并行化i的，但是运行时出现了一些问题？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">30</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-keyword">int</span> i,j;<br>    <span class="hljs-keyword">int</span> a[maxn][maxn];<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;maxn;i++)&#123;<br>        a[<span class="hljs-number">0</span>][i]=<span class="hljs-number">1</span>;<br>    &#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;maxn; i++) &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; maxn; j++) &#123;<br>            a[i][j] = <span class="hljs-number">2</span> * a[i - <span class="hljs-number">1</span>][j];<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a[%d][%d] = %d\n&quot;</span>, i, j, a[i][j]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-循环调度策略"><a href="#5-循环调度策略" class="headerlink" title="5 循环调度策略"></a>5 循环调度策略</h2><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>循环变量区域分为n等份，每个线程平分n份任务</p><p>适用：各个cpu性能差距不大</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">30</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for schedule(static, 2)</span><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;thread id = %d  value = %d\n&quot;</span>,omp_get_thread_num(),i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="dynamic"><a href="#dynamic" class="headerlink" title="dynamic"></a>dynamic</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">30</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for schedule(dynamic, 2)</span><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;thread id = %d  value = %d\n&quot;</span>,omp_get_thread_num(),i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="guided"><a href="#guided" class="headerlink" title="guided"></a>guided</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">30</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for schedule(guided, 80)</span><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">800</span>; ++i)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;thread id = %d  value = %d\n&quot;</span>,omp_get_thread_num(),i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>两个cpu，那么任务分配如下：</p><p>•第一个任务： [800/(2*2)] = 200</p><p>•第二个任务：第一个任务分了200，还有600，那么[600/(2*2)] = 150</p><p>•第三个任务：第二个任务分了150，还有450，那么[450/2*2)] = 113</p><p>•第四个人任务：第三个任务分了113，还有337，那么[337/(2*2)] = 85</p><p>•第五个任务：第四个任务分了85，还有252，那么[252/(2*2)] = 63, 小于声明的80，那么这里为80</p><p>•第六个任务：第五个任务分了80，还有172，根据声明，这里为80（因为会小于80）</p><p>•第七个任务：第六个任务分了80，还有92，根据声明，这里为80（因为会小于80）</p><p>•第八个任务：第七个任务分了80，还有12，根据声明，这里为12（因为不够80）</p><h3 id="runtime"><a href="#runtime" class="headerlink" title="runtime"></a>runtime</h3><p>schedule(runtime)</p><h2 id="6-规约reduction"><a href="#6-规约reduction" class="headerlink" title="6 规约reduction"></a>6 规约reduction</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">30</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> i;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for num_threads(10) private(i)</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">101</span>;i++)<br>        a=a+i;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a1=%d\n&quot;</span>,a);<br>    a=<span class="hljs-number">0</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for num_threads(10) private(i) reduction(+:a)</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">101</span>;i++)<br>        a=a+i;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a2=%d\n&quot;</span>,a);<br>    a=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">101</span>;i++)<br>        a=a+i;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a3=%d\n&quot;</span>,a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-section"><a href="#7-section" class="headerlink" title="7 section"></a>7 section</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">30</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a,b,c;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel sections</span><br>&#123;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp section</span><br>    a = <span class="hljs-number">1</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp section</span><br>    b = <span class="hljs-number">2</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp section</span><br>    c = <span class="hljs-number">3</span>;<br><br>&#125;<br>    <span class="hljs-keyword">int</span> d=a+b+c;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;d = %d&quot;</span>,d);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-互斥锁"><a href="#8-互斥锁" class="headerlink" title="8 互斥锁"></a>8 互斥锁</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;HPC-高性能计算&lt;/p&gt;
&lt;p&gt;说起高性能当然是atri了！&lt;/p&gt;
&lt;img src=&quot;/2022/04/16/HPC/image-20220416114456837.png&quot; class=&quot;&quot; title=&quot;image-20220416114456837&quot;&gt;&lt;img </summary>
      
    
    
    
    
    <category term="c" scheme="https://github.com/sterne012/sterne012.github.io/tags/c/"/>
    
    <category term="HPC" scheme="https://github.com/sterne012/sterne012.github.io/tags/HPC/"/>
    
  </entry>
  
  <entry>
    <title>常用网站整理</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/04/15/web/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/04/15/web/</id>
    <published>2022-04-15T13:49:55.000Z</published>
    <updated>2022-05-13T09:00:43.447Z</updated>
    
    <content type="html"><![CDATA[<p>凯尔希在看着你.jpg（图片与内容无关，只是开服到现在终于满了，留个纪念） </p><h1 id="啥都有"><a href="#啥都有" class="headerlink" title="啥都有"></a>啥都有</h1><h4 id="Gayhub-https-github-com-sterne012"><a href="#Gayhub-https-github-com-sterne012" class="headerlink" title="Gayhub https://github.com/sterne012"></a>Gayhub <a href="https://github.com/sterne012">https://github.com/sterne012</a></h4><h4 id="GPUserver-http-219-231-164-76"><a href="#GPUserver-http-219-231-164-76" class="headerlink" title="GPUserver http://219.231.164.76/"></a>GPUserver <a href="http://219.231.164.76/">http://219.231.164.76/</a></h4><p>学校里的gpu服务器，主要是python&amp;jupyter，深度学习可用</p><h4 id="Twitter-https-twitter-com-home"><a href="#Twitter-https-twitter-com-home" class="headerlink" title="Twitter https://twitter.com/home"></a>Twitter <a href="https://twitter.com/home">https://twitter.com/home</a></h4><p><del>来一次紧张刺激的壁外调查吧</del></p><h4 id="Arcaea查分器-https-redive-estertion-win-arcaea-probe"><a href="#Arcaea查分器-https-redive-estertion-win-arcaea-probe" class="headerlink" title="Arcaea查分器 https://redive.estertion.win/arcaea/probe/"></a>Arcaea查分器 <a href="https://redive.estertion.win/arcaea/probe/">https://redive.estertion.win/arcaea/probe/</a></h4><p><del>ptt-0.01</del></p><h4 id="pytorch-https-pytorch-apachecn-org"><a href="#pytorch-https-pytorch-apachecn-org" class="headerlink" title="pytorch https://pytorch.apachecn.org/#/"></a>pytorch <a href="https://pytorch.apachecn.org/#/">https://pytorch.apachecn.org/#/</a></h4><h1 id="OJ"><a href="#OJ" class="headerlink" title="OJ"></a>OJ</h1><h4 id="PTA-https-pintia-cn"><a href="#PTA-https-pintia-cn" class="headerlink" title="PTA https://pintia.cn/"></a>PTA <a href="https://pintia.cn/">https://pintia.cn/</a></h4><h4 id="vj-https-vjudge-net"><a href="#vj-https-vjudge-net" class="headerlink" title="vj https://vjudge.net/"></a>vj <a href="https://vjudge.net/">https://vjudge.net/</a></h4><h4 id="CF-https-codeforces-com"><a href="#CF-https-codeforces-com" class="headerlink" title="CF https://codeforces.com/"></a>CF <a href="https://codeforces.com/">https://codeforces.com/</a></h4><h4 id="洛谷-https-www-luogu-com-cn"><a href="#洛谷-https-www-luogu-com-cn" class="headerlink" title="洛谷 https://www.luogu.com.cn/"></a>洛谷 <a href="https://www.luogu.com.cn/">https://www.luogu.com.cn/</a></h4><h1 id="SRTP相关"><a href="#SRTP相关" class="headerlink" title="SRTP相关"></a>SRTP相关</h1><h4 id="NASA-ADS-https-ui-adsabs-harvard-edu"><a href="#NASA-ADS-https-ui-adsabs-harvard-edu" class="headerlink" title="NASA/ADS https://ui.adsabs.harvard.edu/"></a>NASA/ADS <a href="https://ui.adsabs.harvard.edu/">https://ui.adsabs.harvard.edu/</a></h4><h4 id="ARXIV-https-arxiv-org"><a href="#ARXIV-https-arxiv-org" class="headerlink" title="ARXIV https://arxiv.org/"></a>ARXIV <a href="https://arxiv.org/">https://arxiv.org/</a></h4><h4 id="巡天-数据源-https-archive-stsci-edu"><a href="#巡天-数据源-https-archive-stsci-edu" class="headerlink" title="巡天/数据源 https://archive.stsci.edu/"></a>巡天/数据源 <a href="https://archive.stsci.edu/">https://archive.stsci.edu/</a></h4><h4 id="SDSS-https-www-sdss-org"><a href="#SDSS-https-www-sdss-org" class="headerlink" title="SDSS https://www.sdss.org/"></a>SDSS <a href="https://www.sdss.org/">https://www.sdss.org/</a></h4><h4 id="变星分类-http-sunguoyou-lamost-org-bxfl-html"><a href="#变星分类-http-sunguoyou-lamost-org-bxfl-html" class="headerlink" title="变星分类 http://sunguoyou.lamost.org/bxfl.html"></a>变星分类 <a href="http://sunguoyou.lamost.org/bxfl.html">http://sunguoyou.lamost.org/bxfl.html</a></h4><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><h4 id="Bootstrap-https-www-bootcss-com"><a href="#Bootstrap-https-www-bootcss-com" class="headerlink" title="Bootstrap https://www.bootcss.com/"></a>Bootstrap <a href="https://www.bootcss.com/">https://www.bootcss.com/</a></h4><h4 id="live2d-https-www-fghrsh-net-post-123-html"><a href="#live2d-https-www-fghrsh-net-post-123-html" class="headerlink" title="live2d https://www.fghrsh.net/post/123.html"></a>live2d <a href="https://www.fghrsh.net/post/123.html">https://www.fghrsh.net/post/123.html</a></h4><h1 id="bot"><a href="#bot" class="headerlink" title="bot"></a>bot</h1><p>但总体而言都没研究懂</p><h4 id="nonebot-https-v2-nonebot-dev"><a href="#nonebot-https-v2-nonebot-dev" class="headerlink" title="nonebot https://v2.nonebot.dev/"></a>nonebot <a href="https://v2.nonebot.dev/">https://v2.nonebot.dev/</a></h4><h4 id="go-cqhttp-https-docs-go-cqhttp-org"><a href="#go-cqhttp-https-docs-go-cqhttp-org" class="headerlink" title="go-cqhttp https://docs.go-cqhttp.org/"></a>go-cqhttp <a href="https://docs.go-cqhttp.org/">https://docs.go-cqhttp.org/</a></h4>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;凯尔希在看着你.jpg（图片与内容无关，只是开服到现在终于满了，留个纪念） &lt;/p&gt;
&lt;h1 id=&quot;啥都有&quot;&gt;&lt;a href=&quot;#啥都有&quot; class=&quot;headerlink&quot; title=&quot;啥都有&quot;&gt;&lt;/a&gt;啥都有&lt;/h1&gt;&lt;h4 id=&quot;Gayhub-https-gi</summary>
      
    
    
    
    <category term="帮助文档" scheme="https://github.com/sterne012/sterne012.github.io/categories/%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>SRTP-时域变源证认与分类的机器学习研究</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/04/15/SRTP/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/04/15/SRTP/</id>
    <published>2022-04-15T13:38:46.000Z</published>
    <updated>2022-05-13T09:00:24.141Z</updated>
    
    <content type="html"><![CDATA[<p>纯干货（）这就是立项原文，仅供参考，严禁原文再次发表或使用</p><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p>时域天文学主要研究天体的各种性质如何随时间变化，这可能是由于天体本征性质发生改变，也可能源自其运动。分属时域天文领域的变星是光度随时间（周期）变化的恒星，其作为天体物理学中的重要研究对象，可应用于银河系和附近星系的结构和运动学示踪，星系化学演化示踪，研究恒星可变性也有助于我们理解恒星本身的演化和物理特性等，是许多领域的主要科学驱动力。随着科技进步，观测手段不断改进，在海量天体观测数据中对变源进行证认，仅凭目视分类法在时间和人力上都难以实现。藉由计算机领域的机器学习方法，对变星及其它变源（如系外行星凌星、活动星系核AGN等）进行特征提取并分类，是时域天文学前沿领域的重要课题，也是本项目的主要研究方向。本项目研究成果可应用于当前及未来时域巡天观测项目（如司天等）。</p><h2 id="研究综述"><a href="#研究综述" class="headerlink" title="研究综述"></a>研究综述</h2><p>至少归纳总结5个同类课题的研究观点/结论</p><ol><li><p>光变曲线特征提取</p><p>提取变星周期使用的方法为周期图，其核心思想为傅里叶变换，该方法同样适用于恒星星震信号、恒星自转信号的搜索。傅立叶变换是一种线性的积分变换，常用 来对信号进行时域到频域的处理，对光变数据的傅立叶分析就是一个从时域到频域的 变换．我们使用Lom-Scargle(L-S)周期图和Box Least Squares(BLS)周期图法，其中L-S周期图(Lomb-Scargle)算法能很好地检测和提 取不均匀采样时域中的周期性，并且在不同学科的时序分析中得到了广泛的应用，它允许对不均匀采样的数据进行傅里叶变换，从而可以直观地表征光变周期.在L-S算法中， 只有时间序列中t时刻为实测值时才对光变数据进行处理，如果序列yi(ti)由N个数据点构成，将角频率w&gt;0位变量的L-S周期频谱用Px来表示，则根据Lomb和Scargle的工作，可以按下式对Px进行计算：</p><img src="/2022/04/15/SRTP/image-20220419200514604.png" class="" title="image-20220419200514604"><p>另一种方法是BLS周期图，当凌星过程占行星轨道周期的比例较小时，BLS周期图 更加精确，对较长周期行星凌星使用BLS周期图法，利用该方法相较于L-S周期图可以找到更准确的信号峰值。（唐延柯、盖宁et al,2021,TESS空间卫星单扇区变星的周期性研究）</p></li><li><p>K-Means聚类方法属于迭代算法，根据分类个数随机生成相应个数的聚类中心，然后进入内循环，不断重复簇分配和移动聚类中心两个步骤，原则上靠近哪个聚类中心就被分为哪一类，可以用颜色区分标记，再移动聚类中心置属于该聚类中心的特征类的均值中心，簇分配和移动聚类中心的过程就是在不断地最小化代价函数。(Zafiirah Hosenie,Robert Lyon, Benjamin Stappers, Arrykrishna Mootoovaloo, 2019, Comparing Multi-class, Binary and Hierarchical Machine Learning Classification schemes for variable stars)</p></li><li><p>主成分分析方法（PCA）主要是通过数据压缩，或者说降维的方法来加速学习过程，通过数据可视化、均值归一化和特征规范化的方法使得均值为0，且数值在可比较的范围内，就此寻找低维平面，将数据投影使得数据到平面的距离的平方（投影误差）最短；独立成分分析方法（ICA）同样用于降维，但相较于PCA多了独立性。在不同样本重叠的时候，ICA的特征分离效果更显著，效率更高。(Suman Paul, Tanuka Chattopadhyay, 2022, Structural properties and classification of variable stars: A study through unsupervised machine learning techniques)</p></li><li><p>SOM算法将一个N维的数据集（由N个估计值或参数组成）还原成一个由mxn个单元组成的二维网格。这使得SOM成为可视化高维数据集中相关关系的有力工具。SOM优势在于，它不仅能够稳健地识别给定AGN数据集中的可变光曲线，而且也是研究多维空间中物理参数之间相关性的工具–例如AGN可变性与其宿主星系属性之间的联系。(Faisst et al, 2019, How to Find Variable Active Galactic Nuclei with Machine Learning)</p></li><li><p>关于 SOM 的训练，其输入参数有两个，分别是影响 Kohonen 层中像素调整速率的初始学习率$\alpha_0$和影响组大小的初始学习半径$\sigma_0$。对于一系列迭代，将每个输入的相位曲线与 Kohonen 层进行比较，并最小化像素元素和相位曲线之间的差异，找到层中的最佳匹配像素，然后按照以下表达式（Kohonen 层为二维的情况）更新每个像素：</p><img src="/2022/04/15/SRTP/image-20220420152120449.png" class="" title="image-20220420152120449"><p>其中：</p><ul><li>$m_{xy,k,new}$是相位曲线中元素$k$、坐标$x,y$处的像素值。</li><li>$d_{xy}$是该层中这个像素与最佳匹配像素的欧几里得距离。</li><li>$s_k$是所考虑的相位曲线的第$k$个元素。</li></ul><p>&emsp;&emsp;对每个相位曲线执行该操作后，$\alpha$和$\sigma$将按照以下公式更新：</p><img src="/2022/04/15/SRTP/image-20220420152137880.png" class="" title="image-20220420152137880"><p>其中：</p><ul><li>i 是当前迭代轮数。</li><li>r 是 Kohonen 层最大维度的大小。</li><li>$n_{iter}$是进行迭代的次数。</li></ul></li><li><p>Repeating this project with a dataset that is larger, more balanced between categories, and has a lower proportion of edge cases, is recommended.（T. N. Stenborg，2020，Machine Learning Classification of Candidate Variable Stars in Python）</p></li><li><p>Image classification was automated here via multinomial logistic regression. The six classes used were: pulsator, rotator, EA/EB type, EW type, unknown and junk. （T. N. Stenborg，2020，Machine Learning Classification of Candidate Variable Stars in Python）</p></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>Zafiirah Hosenie,Robert Lyon, Benjamin Stappers, Arrykrishna Mootoovaloo, 2019, Comparing Multi-class, Binary and Hierarchical Machine Learning Classification schemes for variable stars</li><li>Suman Paul, Tanuka Chattopadhyay, 2022, Structural properties and classification of variable stars: A study through unsupervised machine learning techniques</li><li>Xiaodian Chen1 , Shu Wang et al. 2020, The Zwicky Transient Facility Catalog of Periodic Variable Stars</li><li>T. N. Stenborg, 2020, Machine Learning Classification of Candidate Variable Stars in Python</li><li>Andreas L. Faisst, Abhishek Prakash, Peter L. Capak, and Bomee Lee, 2019, How to Find Variable Active Galactic Nuclei with Machine Learning</li><li>Joseph W. Richards, Dan L. Starr et al. 2011, ON MACHINE-LEARNED CLASSIFICATION OF VARIABLE STARS WITH SPARSE AND NOISY TIME-SERIES DATA</li><li>D. J. Armstrong, J. Kirk, K. W. F. Lam et al. 2016, K2 variable catalogue – II. Machine learning classification of variable stars and eclipsing binaries in K2 fields 0–4</li><li>Ilya N. Pashchenko, Kirill V. Sokolovsky, and Panagiotis Gavras, 2017, Machine learning search for variable stars</li><li>Jan van Roestel, Dmitry A. Duev, Ashish A. Mahabal et al. 2021, The ZTF Source Classification Project. I. Methods and Infrastructure</li><li>唐延柯,盖宁 et al. 2021, TESS空间卫星单扇区变星的周期性研究</li><li>王瑞, 2021, 深度学习在LAMOST光谱恒星参数测量中的应用</li></ol><h2 id="研究方案"><a href="#研究方案" class="headerlink" title="研究方案"></a>研究方案</h2><h3 id="研究内容"><a href="#研究内容" class="headerlink" title="研究内容"></a>研究内容</h3><p>本项目计划首先对变星数据进行数据获取和预处理，提取光变曲线主要特征，后使用DNN和SOM两种算法对变星分类，然后根据训练结果和测试结果进行超参数调优和优化器调整，预期得出准确率较高的分类结果。后期计划尝试其他无监督学习算法，与主要的两种算法进行对比；并尝试添加变星除光变曲线之外的其他观测特征进行Meta Learning训练。</p><h3 id="研究方法"><a href="#研究方法" class="headerlink" title="研究方法"></a>研究方法</h3><ol><li>收集整理相关变源时序测光数据，处理分析测光数据，提取数据光变特征信息；</li><li>将获取的测光数据进行分类，处理可能出现的不平衡的数据情况，组成训练集和测试集；</li><li>搭建深度神经网络DNN和自组织映射SOM 算法，对变源进行证认、分类测试；</li><li>分析证认分类效果，优化改进算法，研究相关优化器并对超参数等进行调整，提高算法分类的准确率；</li><li>测试其他相关算法，并与主要的两种算法效果进行对比，得出结论；</li><li>综合以上研究，给出适用于大样本变源自动证认与分类的普适性算法、程序。</li></ol><h3 id="进度安排"><a href="#进度安排" class="headerlink" title="进度安排"></a>进度安排</h3><p>计划将研究过程分为三个阶段：</p><ol><li>项目前期：学习时域天文学、机器学习相关内容，做好知识储备；获取相关天文观测数据，掌握从光变曲线中分析提取特征、消除噪声的方法，并进行数据集的初步处理；查阅相关文献，学习文章所涉及ML分类算法，进行迁移应用；</li><li>项目中期：确定训练集和测试集，并对可能存在数据不平衡情况进行处理；结合所学构建ML主体算法，进行超参数调优，优化器调试等，最终得到准确率较高的分类结果；进行其他ML算法的尝试，并与主体算法相对比，比较二者（或多者）的优劣；尝试添加变星除光变曲线之外的其他观测特征进行训练。</li><li>项目后期：完成上述工作后，对所得结果进行分析，并最终以论文的形式阐述研究结果，进行发表。</li></ol><h3 id="重点难点"><a href="#重点难点" class="headerlink" title="重点难点"></a>重点难点</h3><ol><li>不同于常规的机器学习项目，有关时域天文领域的数据具有其自身特点，难以将现有的、发展完备的算法直接应用到相关数据分析当中；</li><li>观测数据量大，难以直接使用原始光变曲线进行分析，可能需要依据变星特征提取重要光变信息作处理；</li><li>天文观测数据易受天气条件限制，同一类数据受不同噪声的影响呈现效果有所不同，易造成分类准确率下降；</li><li>对于某些变星，仅凭借光变曲线这一特征不足以对其进行正确分类，可能需要其他相关数据的配合；</li><li>目前的观测数据中，脉动变星、食变双星的观测数据量较多，而相比之下喷发变星、激变或爆发变星观测数据量较少，易导致数据集产生不平衡的问题，从而可能对分类的精确率和召回率产生影响；</li><li>特殊地，某些变星根据天文学的分类方式可以同时分属两个系统，对此类数据的分析处理存在一定困难。</li></ol><h3 id="创新之处"><a href="#创新之处" class="headerlink" title="创新之处"></a>创新之处</h3><ol><li>天文学传统的目视分类法难以满足目前迅速增长的观测数据量的支持，使用机器学习进行分类能大量减少目前目视证认变星的负担，代替人类完成分类工作；</li><li>机器学习在时域天文学的应用刚刚起步，发展前景广阔，本项目发掘有效的变星分类手段，为时域天文学领域发展做出贡献；</li><li>项目并不局限于一种分类方式，而是有监督、无监督学习均有涉及，通过多种算法的尝试得出最终结论。</li><li>本项目研究成果可应用于当前及未来时域巡天观测项目（如司天等）。</li></ol><h3 id="研究基础"><a href="#研究基础" class="headerlink" title="研究基础"></a>研究基础</h3><p>本项目有关的研究工作积累或相关课程经验积累</p><ol><li>项目成员对天文学有浓厚兴趣，已学习天文学新概论、基础天文学等课程内容，并阅读变星相关文献进行学习；</li><li>目前已有大量变源观测数据可供研究使用，如K2、TESS、ZTF等观测项目；</li><li>机器学习方面计算机专业成员已有相关课程（机器学习、深度学习等）提供理论支持，并拓展课外相关知识，主动学习；</li><li>指导老师认真负责，在天文学领域造诣颇深，为项目组成员提供切实有效课题知识指导。</li></ol><h2 id="指导老师意见"><a href="#指导老师意见" class="headerlink" title="指导老师意见"></a>指导老师意见</h2><p>本项目针对当前天文学与天体物理学研究的热门前沿领域之一的“时域天文学”，利用机器学习、人工智能AI等创新方法手段对变源进行自动证认与分类研究分析，可帮助解决大数据背景下的重要科学问题，也可进一步促进机器学习方法在天文学中应用，加强天文物理与计算机信息技术、数学统计等领域的交叉融合，此外其研究成果可应用于当前及未来时域巡天观测项目（如司天等），具有重要意义。强烈建议项目立项！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;纯干货（）这就是立项原文，仅供参考，严禁原文再次发表或使用&lt;/p&gt;
&lt;h2 id=&quot;项目简介&quot;&gt;&lt;a href=&quot;#项目简介&quot; class=&quot;headerlink&quot; title=&quot;项目简介&quot;&gt;&lt;/a&gt;项目简介&lt;/h2&gt;&lt;p&gt;时域天文学主要研究天体的各种性质如何随时间变化，这</summary>
      
    
    
    
    
    <category term="srtp" scheme="https://github.com/sterne012/sterne012.github.io/tags/srtp/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-优化器对比</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/04/15/deep-optimizer/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/04/15/deep-optimizer/</id>
    <published>2022-04-15T13:28:49.000Z</published>
    <updated>2022-04-15T14:26:31.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SGD"><a href="#SGD" class="headerlink" title="SGD"></a>SGD</h2><p>SGD全称Stochastic Gradient Descent，随机梯度下降，1847年提出。每次选择一个mini-batch，而不是全部样本，使用梯度下降来更新模型参数。它解决了随机小批量样本的问题，但仍然有自适应学习率、容易卡在梯度较小点等问题。</p><p>（lr=0.1  epoch=500  batch=32 sgdm momentum=0.1）下的图像</p><img src="/2022/04/15/deep-optimizer/image-20220415214125579.png" class="" title="image-20220415214125579"><img src="/2022/04/15/deep-optimizer/image-20220415214153593.png" class="" title="image-20220415214153593"><h2 id="SGDM"><a href="#SGDM" class="headerlink" title="SGDM"></a>SGDM</h2><p>在SGD的基础上添加动量参数momentum，相比SGD优势明显，加入动量后，参数更新就可以保持之前更新趋势，而不会卡在当前梯度较小的点了。</p><img src="/2022/04/15/deep-optimizer/image-20220415214311664.png" class="" title="image-20220415214311664"><img src="/2022/04/15/deep-optimizer/image-20220415214331433.png" class="" title="image-20220415214331433"><p>Adagrad</p><p>它利用迭代次数和累积梯度，对学习率进行自动衰减，2011年提出。从而使得刚开始迭代时，学习率较大，可以快速收敛。而后来则逐渐减小，精调参数，使得模型可以稳定找到最优点。</p><p>与SGD的区别在于，学习率除以 前t-1 迭代的梯度的平方和。故称为自适应梯度下降。</p><p>Adagrad有个致命问题，就是没有考虑迭代衰减。极端情况，如果刚开始的梯度特别大，而后面的比较小，则学习率基本不会变化了，也就谈不上自适应学习率了。这个问题在RMSProp中得到了修正。</p><img src="/2022/04/15/deep-optimizer/image-20220415214427346.png" class="" title="image-20220415214427346"><img src="/2022/04/15/deep-optimizer/image-20220415214440459.png" class="" title="image-20220415214440459"><h2 id="RMSprop"><a href="#RMSprop" class="headerlink" title="RMSprop"></a>RMSprop</h2><img src="/2022/04/15/deep-optimizer/image-20220415214511114.png" class="" title="image-20220415214511114"><img src="/2022/04/15/deep-optimizer/image-20220415214526011.png" class="" title="image-20220415214526011"><h2 id="Adam"><a href="#Adam" class="headerlink" title="Adam"></a>Adam</h2><p>Adam是SGDM和RMSProp的结合，它基本解决了之前提到的梯度下降的一系列问题，比如随机小样本、自适应学习率、容易卡在梯度较小点等问题。</p><img src="/2022/04/15/deep-optimizer/image-20220415214544714.png" class="" title="image-20220415214544714"><img src="/2022/04/15/deep-optimizer/image-20220415214557602.png" class="" title="image-20220415214557602"><p>代码运行上没有遇到太多问题，在绘制图像时使用keras.Callback.History()中返回的数值进行绘制，使用的损失函数为交叉熵损失函数，具体图像如下：</p><p>不过感觉epoch=500的情况下训练时间相当长（GPU加速有装，但可能没成功调用？这一块有待研究）</p><p>分析数据，Rmsprop算法一定程度上出现了过拟合的问题，Rmsprop的测试集loss曲线几乎一直在保持上升态势；</p><p>而Adam算法得到的训练效果并不好，准确率仅有约66%，而且测试集的loss相当高。</p><p>总体而言，对于minst数据集，sgd、sgdm、adagrad优化器的优化效果是不错的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-keyword">import</span> tensorflow.keras<br><span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> optimizers<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> os<br><br>os.environ[<span class="hljs-string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="hljs-string">&#x27;2&#x27;</span><br>os.environ[<span class="hljs-string">&quot;KMP_DUPLICATE_LIB_OK&quot;</span>] = <span class="hljs-string">&quot;TRUE&quot;</span><br><br>mnist = tf.keras.datasets.mnist<br>(x_train, y_train), (x_test, y_test) = mnist.load_data()<br><span class="hljs-comment"># (x_train, y_train), (x_test, y_test) = load_data(path=&#x27;mnist.npz&#x27;)</span><br>x_train, x_test = x_train / <span class="hljs-number">255.0</span>, x_test / <span class="hljs-number">255.0</span><br><br>model = tf.keras.models.Sequential([<br>    tf.keras.layers.Flatten(),<br>    tf.keras.layers.Dense(<span class="hljs-number">128</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>    tf.keras.layers.Dense(<span class="hljs-number">10</span>, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>)<br>])<br><br><span class="hljs-comment">#主要通过修改compile中optimizer来尝试各种优化器</span><br>model.<span class="hljs-built_in">compile</span>(optimizer=optimizers.Adam(learning_rate=<span class="hljs-number">0.1</span>),<br>              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="hljs-literal">False</span>),<br>              metrics=[<span class="hljs-string">&#x27;sparse_categorical_accuracy&#x27;</span>])<br>start = datetime.datetime.now()<br>hist = model.fit(x_train, y_train, batch_size=<span class="hljs-number">32</span>, epochs=<span class="hljs-number">500</span>, validation_data=(x_test, y_test), validation_freq=<span class="hljs-number">1</span>)<br>end = datetime.datetime.now()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;time:&#x27;</span>+<span class="hljs-built_in">str</span>(end-start))<br><br>model.summary()<br><br>plt.figure()<br><br>acc = hist.history[<span class="hljs-string">&#x27;sparse_categorical_accuracy&#x27;</span>]<br>val_acc = hist.history[<span class="hljs-string">&#x27;val_sparse_categorical_accuracy&#x27;</span>]<br>loss = hist.history[<span class="hljs-string">&#x27;loss&#x27;</span>]<br>val_loss = hist.history[<span class="hljs-string">&#x27;val_loss&#x27;</span>]<br><br>epochs = <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(loss))<br><br>plt.plot(epochs, acc, label=<span class="hljs-string">&#x27;Training acc&#x27;</span>)  <span class="hljs-comment"># &#x27;bo&#x27;为画蓝色圆点，不连线</span><br>plt.plot(epochs, val_acc, label=<span class="hljs-string">&#x27;Validation acc&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;Training and validation accuracy&#x27;</span>)<br>plt.legend()  <span class="hljs-comment"># 绘制图例，默认在右上角</span><br><br>plt.figure()<br><br>plt.plot(epochs, loss, label=<span class="hljs-string">&#x27;Training loss&#x27;</span>)<br>plt.plot(epochs, val_loss, label=<span class="hljs-string">&#x27;Validation loss&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;Training and validation loss&#x27;</span>)<br>plt.legend()<br><br>plt.show()<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SGD&quot;&gt;&lt;a href=&quot;#SGD&quot; class=&quot;headerlink&quot; title=&quot;SGD&quot;&gt;&lt;/a&gt;SGD&lt;/h2&gt;&lt;p&gt;SGD全称Stochastic Gradient Descent，随机梯度下降，1847年提出。每次选择一个mini-batch，而</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
    <category term="deeplearning" scheme="https://github.com/sterne012/sterne012.github.io/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-手写数字识别</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/03/23/deep-digit-reco/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/03/23/deep-digit-reco/</id>
    <published>2022-03-23T06:46:28.000Z</published>
    <updated>2022-03-23T06:47:34.757Z</updated>
    
    <content type="html"><![CDATA[<p>简单贴一下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> layers, optimizers, datasets, Sequential<br><span class="hljs-keyword">from</span> tensorflow.keras.layers <span class="hljs-keyword">import</span> Dense, Dropout, Activation<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">from</span> tensorflow.python.keras.optimizer_v2.gradient_descent <span class="hljs-keyword">import</span> SGD<br><span class="hljs-keyword">from</span> tensorflow.python.keras.utils <span class="hljs-keyword">import</span> np_utils<br><br>os.environ[<span class="hljs-string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="hljs-string">&#x27;2&#x27;</span><br>os.environ[<span class="hljs-string">&quot;KMP_DUPLICATE_LIB_OK&quot;</span>] = <span class="hljs-string">&quot;TRUE&quot;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_data</span>(<span class="hljs-params">path</span>):</span><br>    f = np.load(path)<br>    x_train, y_train = f[<span class="hljs-string">&#x27;x_train&#x27;</span>], f[<span class="hljs-string">&#x27;y_train&#x27;</span>]<br>    x_test, y_test = f[<span class="hljs-string">&#x27;x_test&#x27;</span>], f[<span class="hljs-string">&#x27;y_test&#x27;</span>]<br>    f.close()<br>    x_train = x_train.reshape(x_train.shape[<span class="hljs-number">0</span>], <span class="hljs-number">28</span> * <span class="hljs-number">28</span>)<br>    x_test = x_test.reshape(x_test.shape[<span class="hljs-number">0</span>], <span class="hljs-number">28</span> * <span class="hljs-number">28</span>)<br>    x_train = x_train.astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>    x_test = x_test.astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>    y_train = np_utils.to_categorical(y_train, <span class="hljs-number">10</span>)<br>    y_test = np_utils.to_categorical(y_test, <span class="hljs-number">10</span>)<br>    x_train = x_train / <span class="hljs-number">255</span><br>    x_test = x_test / <span class="hljs-number">255</span><br>    <span class="hljs-keyword">return</span> (x_train, y_train), (x_test, y_test)<br><br><br>(x_train, y_train), (x_test, y_test) = load_data(path=<span class="hljs-string">&#x27;mnist.npz&#x27;</span>)<br><br><span class="hljs-comment"># 输出少量测试集结果</span><br><span class="hljs-comment"># print(x_train.shape)</span><br><span class="hljs-comment"># print(x_train[0])</span><br><span class="hljs-comment"># print(y_train.shape)</span><br><span class="hljs-comment"># print(y_train[0])</span><br><span class="hljs-comment"># plt.Figure()</span><br><span class="hljs-comment"># for i in range(10):</span><br><span class="hljs-comment">#     im = x_train[i].reshape(28, 28)</span><br><span class="hljs-comment">#     plt.imshow(im, &#x27;gray&#x27;)</span><br><span class="hljs-comment">#     print(y_train[i])</span><br><span class="hljs-comment">#     plt.pause(0.5)</span><br><span class="hljs-comment"># plt.show()</span><br><br>model = Sequential()<br>model.add(Dense(input_dim=<span class="hljs-number">28</span> * <span class="hljs-number">28</span>, units=<span class="hljs-number">500</span>, activation=<span class="hljs-string">&#x27;sigmoid&#x27;</span>))<br>model.add(Dense(units=<span class="hljs-number">500</span>, activation=<span class="hljs-string">&#x27;sigmoid&#x27;</span>))<br>model.add(Dense(units=<span class="hljs-number">500</span>, activation=<span class="hljs-string">&#x27;sigmoid&#x27;</span>))<br>model.add(Dense(units=<span class="hljs-number">10</span>, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>))<br><br>model.<span class="hljs-built_in">compile</span>(loss=<span class="hljs-string">&#x27;categorical_crossentropy&#x27;</span>, optimizer=SGD(lr=<span class="hljs-number">0.1</span>), metrics=[<span class="hljs-string">&#x27;accuracy&#x27;</span>])<br><br>model.fit(x_train, y_train, batch_size=<span class="hljs-number">100</span>, epochs=<span class="hljs-number">20</span>)<br><br>result = model.evaluate(x_test, y_test)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nTest loss:&#x27;</span>, result[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nTest Accuracy:&#x27;</span>, result[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;简单贴一下代码&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
    <category term="deeplearning" scheme="https://github.com/sterne012/sterne012.github.io/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>Arcaea-从零开始的玩蛇生活</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/03/22/Arcaea/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/03/22/Arcaea/</id>
    <published>2022-03-22T08:00:00.000Z</published>
    <updated>2022-05-13T08:57:32.433Z</updated>
    
    <content type="html"><![CDATA[<p>ARCAEA——这是一款促进人类进化的出张模拟器。</p><p><del>暴论：mush是纵连模拟器，lanota倒打模拟器，ADOFAI音押模拟器，arc出张模拟器，phi要素过多</del></p><p>欢迎萌新多多入坑，大佬多多暴打</p><hr><h2 id="2021-6-18-入坑"><a href="#2021-6-18-入坑" class="headerlink" title="2021/6/18 入坑"></a>2021/6/18 入坑</h2><p>第一个fr，同时这首也是先前打phi萌新时期的练手谱</p><img src="/2022/03/22/Arcaea/577F99608F8237EDB8A2A9B2FEF510DA.png" class="" title="img"><hr><h2 id="2021-8-12-10-0"><a href="#2021-8-12-10-0" class="headerlink" title="2021/8/12 10.0"></a>2021/8/12 10.0</h2><p>经过一个考试月+军训的折磨之后终于10.0</p><img src="/2022/03/22/Arcaea/6D9DE46978DB36666E9BD2959D02DEF9.png" class="" title="img"><hr><p>2021/8/30</p><p>第一个p的8</p><img src="/2022/03/22/Arcaea/57C1AF723391D8EC8B1F692676F2B19C.png" class="" title="img"><p>当时的我仍未理解这个游戏到底该怎么玩</p><hr><h2 id="2021-11-24-11-0"><a href="#2021-11-24-11-0" class="headerlink" title="2021/11/24 11.0"></a>2021/11/24 11.0</h2><p>本文原标题：arcaea红框纪念</p><p>所以这里格外长</p><p>不愧是我 </p><img src="/2022/03/22/Arcaea/9A9326969C9F34F7F56C1111D854AD06.jpg" class="" title="img"><img src="/2022/03/22/Arcaea/3E4EACE455AF0B5E2F9D8AE953A4775F.jpg" class="" title="img"><img src="/2022/03/22/Arcaea/8D55AF670FE801E48BF4C3669F03C411.jpg" class="" title="img"><img src="/2022/03/22/Arcaea/image-20211124150310139.png" class="" title="image-20211124150310139"><p>红框时间2021-11-23-16:00左右</p><p>我音游龄算长了，大概小学就在玩，大概从乐动时代（都没什么人听说过的音游）到少量节奏大师、诺亚瓶子、cy2、喵赛克、phigros/musedash、Arcaea的历程，时间跨度还是挺大的，不过arc真的是一上来就让我感觉这个音游挺难，也可能是因为phi打习惯了吧，换手接蛇，按不到键等等…</p><p>不过当初想玩主要是因为phi瓶颈很久了（2.0的rks14.4左右），想玩Arc提提准度，于是六七月份左右开始玩</p><p>这个美术风格真的好棒，Seirra老师很早就有所听闻了，Arc也像cy2一样很有自己的风格。</p><p>然后经历了9-11月的躺平之后我们社团办了个音游挑战赛在结识各路神仙之后就开始尝试红</p><p>挑战赛冠军说他当时红只用了25天，我直接进行亿个您的喊并祝他早日制霸</p><p>最主要还是要靠多练，每天都打打一定有进步这是真的</p><p>再就有个明确的目标吧，比如我就是想红，（然后现在红了又躺平了）于是就比较有动力去推一些难曲</p><p>作为一个4k gamer，也许个人差和二指比较大，毕竟四指主要是靠协调然后弥补那些自己二指底力不够的操作</p><p>还有一个很好用的软件叫音乐游戏训练（界面一看就是机翻hh），ios商店有，安卓不太清楚，可以把自己的录像放进去调倍速拆谱用，图上Vindication有一段3+3+3双押就是拆出来才打会的，但是感觉蛇不太好拆，就纯靠多练吧</p><p>虽然没人问过我但是我调成English纯因为中文页面那个字体太丑了233 英文真的很好康</p><p>phi的近况是比赛的时候收了一个然后直接进决赛了233 不过打了arc之后准度确实有提升，但是底力永远都不是一蹴而就的，还有很多15我都是靠糊</p><p>下一步继续练双押，然后多推一推九级上位曲吧？暂时没有什么目标了，摘星离我还有挺遥远的距离</p><p>突然发现这个还挺有的写（水），可能以后想说点什么还会有吧~诶嘿</p><hr><p>嘿嘿 好看捏（轻微剧透？</p><img src="/2022/03/22/Arcaea/33C28A3BB3C874D387572693CE4FDF38.png" class="" title="img"><img src="/2022/03/22/Arcaea/AC838C3A0A7C8B5ED2B27CA32A33458B.png" class="" title="img"><img src="/2022/03/22/Arcaea/F77ECE19347A6D21F602C9C7A9AED981.png" class="" title="img"><p>arcahv解锁时候忘了调中文然后。。。悲叹自己的英语水平太差了</p><hr><h2 id="2021-12-29-11-4"><a href="#2021-12-29-11-4" class="headerlink" title="2021/12/29 11.4"></a>2021/12/29 11.4</h2><p>学了一天（概率论+课程论文）后的底力爆发之夜11.39-11.43</p><img src="/2022/03/22/Arcaea/F37611351E7CAAAC9D62F84AE01D1FF7.png" class="" title="img"><img src="/2022/03/22/Arcaea/F2D98DD3274ABD548C63E917A74526C6.png" class="" title="img"><p>我的评价是，ej交互难个球，难的是天地散打（</p><p>后将vt推上986w再加0.01</p><hr><p>2021/1/1</p><p>元旦觉醒了光</p><img src="/2022/03/22/Arcaea/4DAAB4806E15DC38976B5A0C4E4DCB70.png" class="" title="img"><p>细看背景是p歌列表（）以一堆7-8和少量水9为主</p><hr><h2 id="2021-1-16-11-5"><a href="#2021-1-16-11-5" class="headerlink" title="2021/1/16 11.5"></a>2021/1/16 11.5</h2><p>如今打算把这一篇当作玩arc的记录ww</p><p>11.50了，很艰难，短时间内必不可能摘星</p><img src="/2022/03/22/Arcaea/B2BD4BE67B24A5F4AB5242F53F1717C2.png" class="" title="img"><p>这首在b30里凑了个数然后终于11.5了……</p><p>抛开众多的小二连三连不提，本身配置并不难，但真的好吃爆发力，这种我是拆不成交互就只能硬抗了。。</p><p>并且11.5多由9+曲目堆积而成，10里面打得好的就变石（会了真的简单）、魔女（第一个上ex+的10，但癖了），会一点点的mirzam（暴far，总之打不好）、xanatos（尾杀寄）、黑魔王（同尾杀寄）、vh（还是尾杀寄）、vt（底力爆发时打上best1后至今一直到不了当时水平），嫖了里红（很有代表性的位移天地交互不会）以及上面的felis</p><p>欢迎各位大爹加好友多多暴打我OOOOOOOOOrz</p><img src="/2022/03/22/Arcaea/6D481B9BB81AF9C1BAEC27CF1990328C.jpg" class="" title="6D481B9BB81AF9C1BAEC27CF1990328C"><hr><p>2022/2/17</p><p>升天</p><p>梦 幻 联 动</p><p>这个游戏也去玩了下…然后第一周目使我明白我只想做个咸鱼我不想要那么多粉，后面开始刷成就狂魔然后逐渐失去本心了，不过有些结局那确实相当有意思ww</p><p>然后看过花花直播发现确实有连播30d的可能，于是刷出了近900w粉的结局…</p><img src="/2022/03/22/Arcaea/881719DA24446994B53B9C22C49B9815.png" class="" title="img"><p>然后发现爆小p户后来又小推了一下</p><hr><p>2022/2/26</p><p>来学校，练了四五天vt一点进步都没然后打了把vh手感起飞</p><img src="/2022/03/22/Arcaea/0091A3BCABECCB6BEC18C3C846868797.png" class="" title="img"><hr><h2 id="2022-3-2-11-6"><a href="#2022-3-2-11-6" class="headerlink" title="2022/3/2 11.6"></a>2022/3/2 11.6</h2><p>谢谢新出background的random随机到xanatos，虽然我不理解为什么就990</p><img src="/2022/03/22/Arcaea/EB48515E6A67EF23905A2D1ABDD0A106.png" class="" title="img"><p>看到群里巨佬爆鲨体罚，然后再次被体罚打爆</p><p><del>这就是寄点突然飞升的原因吗？</del></p><p>天地交互可能略微的好了那么一点点点吧..应该说谢谢vt和ac（ac练了一下午，现在970-&gt;11.5爽嫖状态）</p><img src="/2022/03/22/Arcaea/478B0BD9373FE15C501332FB01DEF50C.png" class="" title="img"><p>几乎全在推10的上升到11.6了。。</p><p>整体上没有11.5时候那么着急的想去提一提ptt什么的了，这大概就目前的水平，底力耗尽了牡蛎牡蛎</p><p>后面怎么办捏</p><p>首先周年庆全曲一下，但是支线包齐了，ether drop+55</p><p>黑魔王尾杀好了一些，慢速看一下中间4双押4交互段，练练后边</p><p>剩下的随缘吧，想打啥打啥</p><p>另外红枪真的听着好塑料啊</p><img src="/2022/03/22/Arcaea/FD5BE1A3A52A93BC908BD54422D7510E.png" class="" title="img"><p>另外新background好看！期待很久啦</p><img src="/2022/03/22/Arcaea/B51B1661FB54F8594534CF0704AB2247.png" class="" title="img"><p>关于我查了个分然后群友针对牛奶和vh谁是10.0最上吵起来后打三把牛奶上ex+并推分这件事</p><p>每 天 一 杯 奶，强 壮 音 游 人</p><p>里红除了天地位移交互的读不懂之外其他打的基本没什么毛病（不过印象中这把当时板子非常不顺滑还漏蛇（</p><img src="/2022/03/22/Arcaea/8FC96AF697B62B97C1DA253347B1E6BF.png" class="" title="img"><p>你倒是p啊！p！</p><p>打歌方差很大，这个状态好的时候几乎不失误，状态差的时候撑死986</p><img src="/2022/03/22/Arcaea/485F623C1246E7918AC033B242FDD9E7.png" class="" title="img"><h2 id="2022-3-22-11-7"><a href="#2022-3-22-11-7" class="headerlink" title="2022/3/22 11.7"></a>2022/3/22 11.7</h2><p>历经20d ptt+0.1</p><p>谢谢衔尾蛇。。虽然我感觉我还是没打明白，第一个单曲定数12.0了耶</p><img src="/2022/03/22/Arcaea/0B468E376885FFE8F21409279112AEE3.png" class="" title="img"><p>地板已经萌新线了淦。。。通常这个时候大佬差不多都已经摘了吧（</p><p>首先是终于把病女给解了</p><p>但是提不动（估计是因为越级），卡在965上不去了T T</p><img src="/2022/03/22/Arcaea/67160F55CD2D7234200BC3117F21AC98.png" class="" title="img"><p>红枪以来第二个从头far到尾，节奏怪难的，而且减速段打不好</p><img src="/2022/03/22/Arcaea/140A2A33F9397B538E29E0AD985E1631.png" class="" title="img"><p>掌握了一首自己很喜欢听的歌多是一件美事啊~</p><p>lfdy真的很上头，但是蛇也是相当容易漏，开头漏蛇重灾区，中段那一堆更是给我整不会了</p><img src="/2022/03/22/Arcaea/7E104C93C7B1BBB05B38D8BA595549D2.png" class="" title="img"><img src="/2022/03/22/Arcaea/A6F2A4715972B9D96D674C0E969DFA8E.png" class="" title="img"><p>恋歌2已经鲨疯，所以为什么你的恋歌1还是打的稀烂？</p><img src="/2022/03/22/Arcaea/651F9585B481C1C63B1052248B57E73C.png" class="" title="img"><p>反手依旧打的不太好</p><img src="/2022/03/22/Arcaea/C262159C2AE8E29F09767A906A9D5E91.png" class="" title="img"><p>哈哈，不过就是b30里面又多了一个性了的歌罢了，哈哈</p><img src="/2022/03/22/Arcaea/E3EFCC69A2EF02206106532943952D4E.png" class="" title="img"><h2 id="2022-4-12-11-8"><a href="#2022-4-12-11-8" class="headerlink" title="2022/4/12 11.8"></a>2022/4/12 11.8</h2><p>《镜像为什么是神》</p><p>这我才意识到vt真的癖得有些严重</p><img src="/2022/03/22/Arcaea/DAB7E723B2CF8BC62D348860A486E315.png" class="" title="img"><p>可莉max，没有休息段（后来发现中间还是有一点的），才发现曲名真实的反映了没有休息段的铺面（）</p><p>USAO佬的xp还是一向让人难以捉摸（这不加？？这不加？）</p><img src="/2022/03/22/Arcaea/FEADDC611AA41F946D2828D29392C685.png" class="" title="img"><p>只能说到目前为止都不太上手的绿魔王qwq<img src="/2022/03/22/Arcaea/D57DA5FF607740E754C9618CE40C889E.png" class="" title="img"></p><p>爬梯子随手打了一下，我超（</p><p>但是当时打又没觉得自己打的很好。。中间五个hold加蛇那还是漏，意料之外了</p><img src="/2022/03/22/Arcaea/694874285BBDDBAE6305E0B3576A14A0.png" class="" title="img"><hr><p>又推了一下绿魔王和翡翠鸡，截止4/14是11.84</p><p>绿魔王逐渐的能看得懂双押段了，但肯定还是有漏，后面没感觉到太多难点？但是准度不是很好，还能提（</p><p>翡翠鸡emm，有高速版的类似恋歌的交互，打打就全成far了，不太稳（不过感觉和起手有很大关系）</p><hr><p>《镜像为什么是神 2》</p><img src="/2022/03/22/Arcaea/E013742644D126BF7A2B393832AD7D4E.png" class="" title="img"><p>然后补一下11.8的b30，前几天查分器坏了（我超 r10居然快摘了）</p><p>感慨一下最大瓶颈就在11.4-11.6附近…怪不得11.5叫萌新线，之前能几乎全靠9+，之后必须得推10。。现在感觉打起来比以前顺畅好多了，虽说摘星还有一段距离吧，但是也对ptt没有特别高的追求，一点点练的话肯定会感觉有提升的</p><p>目前也没有非常明确的推哪一首的目标…要说非常喜欢哪首的话当然是overwhelm，然后RG应该也能提，然后病女。。还是不想动它了（悲）真的嫖不动；说起寄点应该也能推，但是最近一直手感不佳，放置了</p><p>还有求里红那种天地交互的练习方法？慢一点的就打的来（比如红枪和寄点）一快就很难打（黑魔王中间有一个也是这样的也是经常的far和lost）</p><img src="/2022/03/22/Arcaea/C06BA0D6ABF39FED6F46C489E7344074.jpg" class="" title="img"><img src="/2022/03/22/Arcaea/0051577B019217A7872917F23244AB6F.png" class="" title="img"><img src="/2022/03/22/Arcaea/89A888C383AB5731D75A2C53E7985FDC.png" class="" title="img"><p>GDP！起飞！</p><p>就是中间那段和结尾突然很有感觉，左右分别打不同的节奏，然后就突然的打了995</p><img src="/2022/03/22/Arcaea/42B2AF1C56E69304FA23FC2A73791535.png" class="" title="img"><img src="/2022/03/22/Arcaea/99BC2C6A3E1E5436CC0DF6D5A776758C.png" class="" title="img"><p>上面这两个是4月22日的</p><h2 id="2022-5-4-11-9"><a href="#2022-5-4-11-9" class="headerlink" title="2022/5/4 11.9"></a>2022/5/4 11.9</h2><p>隔了十多天才推上去这最后0.01</p><p>我甚至都觉得这会是新的一个瓶颈了，11.89</p><p>先不说想要摘星的心情，光是想上11.9，的热情，就慢慢被现实打垮，几乎所有10都推过试过但是没什么提升，要么停留在原来分数附近，要么甚至大不如前</p><p>然后今天早晨随口在群里问了问，说推rg，我看了看我976的rg，打了一遍，我不理解</p><p>遂去慢速练了几遍，虽说我是真的不想练的，打歌就是要随心所欲！放飞自我！</p><p>但是</p><p>但是</p><p>但是</p><p>？！</p><img src="/2022/03/22/Arcaea/A33A7EFD31CDB05D1A6B374A0615750F.png" class="" title="img"><p>我更不理解了</p><p>但是好诶</p><p>那么下一次记录，会是什么时候呢</p><p>会是20天之后吗</p><p>我不敢想</p><p>但终有一天</p><p>我会到达那个地方</p><p><del>不 要 停 下 来 啊，打 音 游 的 大 姐 姐</del></p><img src="/2022/03/22/Arcaea/F04915FA6B71A9D5CA7AF4AEFF21A3FA.png" class="" title="img"><p>榨出来了！！！好耶</p><p>对立好好看，<del>超市我超市我，</del>这个眼神真是绝了ww挺符合现在我的状态（伞对立和猫对立做得到吗？）</p><img src="/2022/03/22/Arcaea/908815E2EAF9FCC9F349B4DC2CD82550.png" class="" title="img"><p>开头狂far，后面打的倒还好，看上次成绩971w就，每次开头寄了就退出，这次好歹没退然后上分了（</p><img src="/2022/03/22/Arcaea/8CA86F2CCDB9C0BB5526B42FF67D8A27.png" class="" title="img"><img src="/2022/03/22/Arcaea/8FFCAEE0BDEEAB75F420A436C2FA8D0B.png" class="" title="img"><p>本来只是突然想到大爹的b30里面有994w的寄点，算出来好像有12.4多，就感觉我这天花板不够啊，是不是应该有一个ex+的10+，然后随手一打…..好耶！</p><img src="/2022/03/22/Arcaea/37DD558ACBA013C9163B4B83F4BDA3E0.png" class="" title="img"><p>感觉慢速看一下体罚和骨折光是有机会的</p><p>那就用骨折光摘吧！</p><p>5月9日，顶级折磨</p><p>虽然+0.02很美好，但是11.998</p><img src="/2022/03/22/Arcaea/B8D2EC6AFDF96A2042FAA9C930EA27AE.png" class="" title="img"><img src="/2022/03/22/Arcaea/42BDC846F037DB615EF50E89AFAD9A01.png" class="" title="img"><p>这衔尾蛇打到最后觉得应该都结束了，摘星什么的大概也就这样了，然后出来一看</p><p>KEEP</p><p>淦，差0.002，然后试了好多首都丝毫不动，打体罚打了好几次985w，逐渐状态非常不好，看来今天是没希望了</p><p>想开点，单日很大突破了，这三首还有LC ex+，烈华还是刚刚学会的</p><img src="/2022/03/22/Arcaea/CBB6ADEE8325E1F43E8985751468A35F.png" class="" title="img"><h2 id="2022-5-10-12-0-摘星！"><a href="#2022-5-10-12-0-摘星！" class="headerlink" title="2022/5/10 12.0 摘星！"></a>2022/5/10 12.0 摘星！</h2><p>前情提要</p><img src="/2022/03/22/Arcaea/image-20220510155147642.png" class="" title="image-20220510155147642"><p>对立，我爱你，拉格兰，对不起</p><p>终于动辣！！！！！感觉就像过了十几天一样</p><img src="/2022/03/22/Arcaea/CA07EBFF49B5515B7E762997B90686A7.png" class="" title="img"><img src="/2022/03/22/Arcaea/B904B3886915A027714370A617F7935E.jpg" class="" title="img"><p>所以严格来说瓶颈是10.5和11.5附近吗（</p><img src="/2022/03/22/Arcaea/image-20220510155429672.png" class="" title="image-20220510155429672"><p>接下来休息，然后练习基础的9，推8的PM</p><p>再开一篇更新捏</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ARCAEA——这是一款促进人类进化的出张模拟器。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;暴论：mush是纵连模拟器，lanota倒打模拟器，ADOFAI音押模拟器，arc出张模拟器，phi要素过多&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;欢迎萌新多多入坑，大佬多多暴打&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id</summary>
      
    
    
    
    
    <category term="games" scheme="https://github.com/sterne012/sterne012.github.io/tags/games/"/>
    
    <category term="Arc" scheme="https://github.com/sterne012/sterne012.github.io/tags/Arc/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-逻辑回归</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/03/20/deep-logistic-regression/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/03/20/deep-logistic-regression/</id>
    <published>2022-03-20T13:04:33.000Z</published>
    <updated>2022-03-20T13:18:32.296Z</updated>
    
    <content type="html"><![CDATA[<p>在linear regression基础上修改了loss和gradient函数，添加了sigmoid函数，添加了测试集结果输出，acc、精确率、召回率计算、ROC曲线绘制、auc计算等</p><p>实验过程：（遇到各种问题后解决的过程）</p><p>1.修改线性回归为逻辑回归，主要是增加sigmoid函数、修改了梯度下降的公式，逻辑回归主体迭代过程不变</p><p>2.刚开始运行时初始值还是用了上次线性回归的数据，即w=1，b=60，然后得到了曲线方向完全相反的结果，运行测试集发现loss大概在21左右，感觉误差过大后根据测试集loss输出和预测结果的整体loss调整之后将b逐步调小，b=5左右得到比较好的训练结果。</p><p>在这之中又发现了过拟合的问题，具体如下：</p><p>根据绘制的counter图知，梯度下降的最优结果区间大致在这里：</p><img src="/2022/03/20/deep-logistic-regression/image-20220320211244928.png" class="" title="image-20220320211244928"><p>但如果进一步增大迭代次数，训练集的loss进一步减小，但测试集的loss开始上升，为避免过拟合最终选择初始值w=1，b=5，iter=10000，learningrate=0.001</p><p>3.接下来的问题和一个报错有关：</p><img src="/2022/03/20/deep-logistic-regression/image-20220320211704979.png" class="" title="image-20220320211704979"><p>简单来说就是log（0）-&gt;无穷的情况，询问老师后增加一个小正数可以解决，随后完善loss函数，这也是第二个问题中图片右上全部是白色的原因</p><img src="/2022/03/20/deep-logistic-regression/image-20220320211716098.png" class="" title="image-20220320211716098"><p>至此，逻辑回归主体部分已经完成，开始着手绘制roc曲线</p><p>4.绘制roc曲线调用sklearn的roc_courve函数，计算auc调用auc函数，在调用roc_courve函数时遇到了一点小问题，在先前计算precision和recall时，提前将y_pred进行了四舍五入的处理，导致roc曲线只有一个拐点，查阅资料后发现了这个问题，并修改测试集输出函数如下：</p><img src="/2022/03/20/deep-logistic-regression/image-20220320211729712.png" class="" title="image-20220320211729712">roc曲线问题<img src="/2022/03/20/deep-logistic-regression/image-20220320211734594.png" class="" title="image-20220320211734594">修改后的函数<p>5.最后的运行结果：Acc=0.800，precision=0.8333，recall=0.8333，auc=0.9583，图上是更详细的结果</p><img src="/2022/03/20/deep-logistic-regression/clip_image002.jpg" class="" title="img"><p>画图：</p><img src="/2022/03/20/deep-logistic-regression/image-20220320211813733.png" class="" title="image-20220320211813733"><img src="/2022/03/20/deep-logistic-regression/image-20220320211818580.png" class="" title="image-20220320211818580"><img src="/2022/03/20/deep-logistic-regression/image-20220320211823629.png" class="" title="image-20220320211823629"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> roc_curve, auc<br><br><br><br>xdata = [<span class="hljs-number">8.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">9.</span>, <span class="hljs-number">7.</span>, <span class="hljs-number">16.</span>, <span class="hljs-number">05.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">10.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">6.</span>]<br>ydata = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br><br>xtest = [<span class="hljs-number">5.</span>, <span class="hljs-number">4.5</span>, <span class="hljs-number">9.8</span>, <span class="hljs-number">8.</span>, <span class="hljs-number">22.</span>, <span class="hljs-number">17.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">19.</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>]<br>ytest = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br>plt.cla()<br><br>w_init = <span class="hljs-number">1.</span><br>b_init = <span class="hljs-number">5.</span><br><br>w_change = [w_init]<br>b_change = [b_init]<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sigmoid</span>(<span class="hljs-params">x</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1.</span> / (<span class="hljs-number">1.</span> + np.exp(-x))<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loss</span>(<span class="hljs-params">w, b</span>):</span><br>    res = <span class="hljs-number">0</span><br>    exp = <span class="hljs-number">1e-8</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(xdata)):<br>        y_pred = sigmoid(w * xdata[i] + b)<br>        res += - (<span class="hljs-number">1</span> - ydata[i]) * np.log(<span class="hljs-number">1</span> - y_pred+exp)-ydata[i] * np.log(y_pred+exp)<br>    <span class="hljs-keyword">return</span> res / <span class="hljs-built_in">len</span>(xdata)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">grad</span>(<span class="hljs-params">w, b</span>):</span><br>    w_grad = <span class="hljs-number">0</span><br>    b_grad = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(xdata)):<br>        y_pred = sigmoid(w * xdata[i] + b)<br>        w_grad += -(ydata[i] - y_pred) * xdata[i]<br>        b_grad += -(ydata[i] - y_pred)<br>    <span class="hljs-keyword">return</span> w_grad, b_grad<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">logistic_regression</span>(<span class="hljs-params">w_pred, b_pred, lr=<span class="hljs-number">0.001</span>, <span class="hljs-built_in">iter</span>=<span class="hljs-number">10000</span></span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">iter</span>):<br>        gradf = grad(w=w_pred, b=b_pred)<br>        w_pred = <span class="hljs-built_in">float</span>(w_pred - learning_rate * gradf[<span class="hljs-number">0</span>])<br>        b_pred = <span class="hljs-built_in">float</span>(b_pred - learning_rate * gradf[<span class="hljs-number">1</span>])<br>        w_change.append(w_pred)<br>        b_change.append(b_pred)<br>    <span class="hljs-keyword">return</span> w_pred, b_pred<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_set</span>(<span class="hljs-params">xtest, ytest, w, b</span>):</span><br>    ytest_pred = []<br>    tp = fp = tn = fn = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(xtest)):<br>        y_pred = sigmoid(w * xtest[i] + b)<br>        ytest_pred.append(y_pred)<br>        <span class="hljs-keyword">if</span> y_pred &gt; <span class="hljs-number">0.5</span>:<br>            y_pred = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            y_pred = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> ytest[i] == y_pred &amp; y_pred == <span class="hljs-number">1</span>:<br>            tp += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> ytest[i] == y_pred &amp; y_pred == <span class="hljs-number">0</span>:<br>            tn += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> ytest[i] != y_pred &amp; y_pred == <span class="hljs-number">1</span>:<br>            fp += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> ytest[i] != y_pred &amp; y_pred == <span class="hljs-number">0</span>:<br>            fn += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> ytest_pred, tp, fp, tn, fn<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_loss</span>(<span class="hljs-params">w, b</span>):</span><br>    res = <span class="hljs-number">0</span><br>    exp = <span class="hljs-number">1e-8</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(xtest)):<br>        y_pred = sigmoid(w * xtest[i] + b)<br>        res += - (<span class="hljs-number">1</span> - ytest[i]) * np.log(<span class="hljs-number">1</span> - y_pred+exp)-ytest[i] * np.log(y_pred+exp)<br>    <span class="hljs-keyword">return</span> res / <span class="hljs-built_in">len</span>(xtest)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;data set:&quot;</span>)<br><span class="hljs-built_in">print</span>(xdata)<br><span class="hljs-built_in">print</span>(ydata)<br>plt.figure(<span class="hljs-number">1</span>)<br>plt.scatter(xdata, ydata,label=<span class="hljs-string">&quot;training set&quot;</span>)<br>plt.title(<span class="hljs-string">&quot;output&quot;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;x&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;y&quot;</span>)<br><br><span class="hljs-comment"># 测试集</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;test set:&quot;</span>)<br><span class="hljs-built_in">print</span>(xtest)<br><span class="hljs-built_in">print</span>(ytest)<br>plt.scatter(xtest, ytest, marker=<span class="hljs-string">&#x27;v&#x27;</span>,label=<span class="hljs-string">&quot;test set&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;initial input:&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;w = &quot;</span> + <span class="hljs-built_in">str</span>(w_init))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b = &quot;</span> + <span class="hljs-built_in">str</span>(b_init))<br><br>learning_rate = <span class="hljs-number">0.001</span><br><span class="hljs-built_in">iter</span> = <span class="hljs-number">10000</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Logistic Regression: learning_rate = &quot;</span> + <span class="hljs-built_in">str</span>(learning_rate) + <span class="hljs-string">&quot;,iteration = &quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">iter</span>))<br>w_pred, b_pred = logistic_regression(w_pred=w_init, b_pred=b_init, lr=learning_rate, <span class="hljs-built_in">iter</span>=<span class="hljs-built_in">iter</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;result: w_pred = &quot;</span> + <span class="hljs-built_in">str</span>(w_pred) + <span class="hljs-string">&quot;, b_pred = &quot;</span> + <span class="hljs-built_in">str</span>(b_pred))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;loss = &quot;</span>+<span class="hljs-built_in">str</span>(loss(w_pred,b_pred)))<br>x = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">40</span>, <span class="hljs-number">0.1</span>)<br>y = sigmoid(w_pred * x + b_pred)<br>plt.plot(x, y)<br>plt.legend()<br>plt.show()<br><br><span class="hljs-comment"># ROC曲线</span><br>plt.figure(<span class="hljs-number">2</span>)<br>ytest_pred, tp, fp, tn, fn = test_set(xtest, ytest, w_pred, b_pred)<br>acc = <span class="hljs-built_in">float</span>(tp + tn) / <span class="hljs-built_in">float</span>(<span class="hljs-built_in">len</span>(xtest))<br>precision = <span class="hljs-built_in">float</span>(tp) / <span class="hljs-built_in">float</span>(tp + fp)<br>recall = <span class="hljs-built_in">float</span>(tp) / <span class="hljs-built_in">float</span>(tp + fn)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;y_pred:&quot;</span>)<br><span class="hljs-built_in">print</span>(ytest_pred)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;test loss = &quot;</span>+<span class="hljs-built_in">str</span>(test_loss(w_pred,b_pred)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;tp = &quot;</span>+<span class="hljs-built_in">str</span>(tp)+<span class="hljs-string">&quot; fp = &quot;</span>+<span class="hljs-built_in">str</span>(fp)+<span class="hljs-string">&quot; tn = &quot;</span>+<span class="hljs-built_in">str</span>(tn)+<span class="hljs-string">&quot; fn = &quot;</span>+<span class="hljs-built_in">str</span>(fn))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;acc = &quot;</span> + <span class="hljs-built_in">str</span>(acc))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;precision = &quot;</span> + <span class="hljs-built_in">str</span>(precision))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;recall = &quot;</span> + <span class="hljs-built_in">str</span>(recall))<br><br>fpr, tpr, thresholds = roc_curve(ytest, ytest_pred,pos_label=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;fpr = &quot;</span>+<span class="hljs-built_in">str</span>(fpr))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;tpr = &quot;</span>+<span class="hljs-built_in">str</span>(tpr))<br>roc_auc = auc(fpr, tpr)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;auc = &quot;</span>+<span class="hljs-built_in">str</span>(roc_auc))<br>plt.plot(fpr, tpr, <span class="hljs-string">&#x27;k--&#x27;</span>, label=<span class="hljs-string">&#x27;ROC (area = &#123;0:.2f&#125;)&#x27;</span>.<span class="hljs-built_in">format</span>(roc_auc), lw=<span class="hljs-number">2</span>)<br>plt.xlabel(<span class="hljs-string">&quot;FPR&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;TPR&quot;</span>)<br>plt.show()<br><br><br><br><span class="hljs-comment"># counter图</span><br>plt.figure(<span class="hljs-number">3</span>)<br>x = np.arange(-<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0.1</span>)<br>y = np.arange(-<span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">0.2</span>)<br><span class="hljs-comment"># 对x,y网格化，得到X,Y</span><br>X, Y = np.meshgrid(x, y)<br><span class="hljs-comment"># 等高线</span><br>Z = loss(X, Y)<br>fig, ax = plt.subplots(figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">8</span>), dpi=<span class="hljs-number">100</span>)<br><span class="hljs-comment"># 画contour图</span><br>CS = ax.contourf(X, Y, Z, <span class="hljs-number">100</span>)<br><span class="hljs-comment"># 画轮廓线</span><br>CS = ax.contour(X, Y, Z, <span class="hljs-number">100</span>, colors=<span class="hljs-string">&#x27;white&#x27;</span>)<br><br>plt.scatter(w_change, b_change)<br>plt.title(<span class="hljs-string">&quot;predict change&quot;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;w_change&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;b_change&quot;</span>)<br>plt.tight_layout()<br>plt.show()<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在linear regression基础上修改了loss和gradient函数，添加了sigmoid函数，添加了测试集结果输出，acc、精确率、召回率计算、ROC曲线绘制、auc计算等&lt;/p&gt;
&lt;p&gt;实验过程：（遇到各种问题后解决的过程）&lt;/p&gt;
&lt;p&gt;1.修改线性回归为逻</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
    <category term="deeplearning" scheme="https://github.com/sterne012/sterne012.github.io/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-线性回归</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/03/20/deep-linear-regression/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/03/20/deep-linear-regression/</id>
    <published>2022-03-20T13:04:20.000Z</published>
    <updated>2022-03-20T13:10:20.236Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>xdata = [<span class="hljs-number">8.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">9.</span>, <span class="hljs-number">7.</span>, <span class="hljs-number">16.</span>, <span class="hljs-number">05.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">10.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">6.</span>]<br>ydata = [<span class="hljs-number">30.</span>, <span class="hljs-number">21.</span>, <span class="hljs-number">35.</span>, <span class="hljs-number">27.</span>, <span class="hljs-number">42.</span>, <span class="hljs-number">24.</span>, <span class="hljs-number">10.</span>, <span class="hljs-number">38.</span>, <span class="hljs-number">22.</span>, <span class="hljs-number">25.</span>]<br>plt.cla()<br><br>w_init = <span class="hljs-number">2.</span><br>b_init = <span class="hljs-number">60.</span><br><br>w_change = [w_init]<br>b_change = [b_init]<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">grad</span>(<span class="hljs-params">w, b</span>):</span><br>    w_grad = <span class="hljs-number">0</span><br>    b_grad = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(xdata)):<br>        y_pred = w * xdata[i] + b<br>        w_grad += <span class="hljs-built_in">float</span>(<span class="hljs-number">2</span> * (ydata[i] - y_pred) * (-xdata[i]))<br>        b_grad += <span class="hljs-built_in">float</span>(<span class="hljs-number">2</span> * (ydata[i] - y_pred) * (-<span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">return</span> w_grad, b_grad<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loss</span>(<span class="hljs-params">w, b</span>):</span><br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(xdata)):<br>        y_pred = w * xdata[i] + b<br>        res += <span class="hljs-built_in">pow</span>(ydata[i] - y_pred, <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> res/<span class="hljs-number">10</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gradient_descent</span>(<span class="hljs-params">w_pred, b_pred, learning_rate=<span class="hljs-number">0.001</span>, <span class="hljs-built_in">iter</span>=<span class="hljs-number">10000</span></span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">iter</span>):<br>        lossf = loss(w=w_pred, b=b_pred)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;range &quot;</span> + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&quot;: loss = &quot;</span> + <span class="hljs-built_in">str</span>(lossf))<br>        gradf = grad(w=w_pred, b=b_pred)<br>        w_pred = <span class="hljs-built_in">float</span>(w_pred - learning_rate * gradf[<span class="hljs-number">0</span>])<br>        b_pred = <span class="hljs-built_in">float</span>(b_pred - learning_rate * gradf[<span class="hljs-number">1</span>])<br>        w_change.append(w_pred)<br>        b_change.append(b_pred)<br>    <span class="hljs-keyword">return</span> w_pred, b_pred<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;data set:&quot;</span>)<br><span class="hljs-built_in">print</span>(xdata)<br><span class="hljs-built_in">print</span>(ydata)<br>plt.figure(<span class="hljs-number">1</span>)<br>plt.scatter(xdata, ydata)<br>plt.title(<span class="hljs-string">&quot;output&quot;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;xdata&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;ydata&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;initial input:&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;w = &quot;</span> + <span class="hljs-built_in">str</span>(w_init))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b = &quot;</span> + <span class="hljs-built_in">str</span>(b_init))<br><br>learning_rate = <span class="hljs-number">0.001</span><br><span class="hljs-built_in">iter</span> = <span class="hljs-number">10000</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Linear Regression: learning_rate = &quot;</span> + <span class="hljs-built_in">str</span>(learning_rate) + <span class="hljs-string">&quot;,iteration = &quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">iter</span>))<br>res = gradient_descent(w_pred=w_init, b_pred=b_init, learning_rate=learning_rate, <span class="hljs-built_in">iter</span>=<span class="hljs-built_in">iter</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;result: w_pred = &quot;</span> + <span class="hljs-built_in">str</span>(res[<span class="hljs-number">0</span>]) + <span class="hljs-string">&quot;, b_pred = &quot;</span> + <span class="hljs-built_in">str</span>(res[<span class="hljs-number">1</span>]))<br>x = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>)<br>y = res[<span class="hljs-number">0</span>] * x + res[<span class="hljs-number">1</span>]<br>plt.plot(x, y)<br>plt.show()<br><br><span class="hljs-comment">#counter图</span><br>plt.figure(<span class="hljs-number">2</span>)<br>x = np.arange(-<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">0.2</span>)<br>y = np.arange(-<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">1</span>)<br><span class="hljs-comment">#对x,y网格化，得到X,Y</span><br>X,Y = np.meshgrid(x,y)<br><span class="hljs-comment"># 等高线</span><br>Z = loss(X, Y)<br>fig, ax = plt.subplots(figsize=(<span class="hljs-number">8</span>,<span class="hljs-number">8</span>),dpi=<span class="hljs-number">100</span>)<br><span class="hljs-comment"># 画contour图</span><br>CS = ax.contourf(X, Y, Z, <span class="hljs-number">100</span>)<br><span class="hljs-comment"># 画轮廓线</span><br>CS = ax.contour(X, Y, Z, <span class="hljs-number">100</span>, colors=<span class="hljs-string">&#x27;white&#x27;</span>)<br><br>plt.scatter(w_change,b_change)<br>plt.title(<span class="hljs-string">&quot;predict change&quot;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;w_change&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;b_change&quot;</span>)<br>plt.tight_layout()<br>plt.show()<br></code></pre></td></tr></table></figure><img src="/2022/03/20/deep-linear-regression/image-20220320210953425.png" class="" title="image-20220320210953425"><img src="/2022/03/20/deep-linear-regression/image-20220320211003005.png" class="" title="image-20220320211003005">]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
    <category term="deeplearning" scheme="https://github.com/sterne012/sterne012.github.io/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>滴答清单，沉浸式出发！</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/03/16/dida/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/03/16/dida/</id>
    <published>2022-03-16T08:05:31.000Z</published>
    <updated>2022-04-15T14:13:56.862Z</updated>
    
    <content type="html"><![CDATA[<p>强力安利，我挖个坑放在这.jpg</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;强力安利，我挖个坑放在这.jpg&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="recommends" scheme="https://github.com/sterne012/sterne012.github.io/tags/recommends/"/>
    
  </entry>
  
  <entry>
    <title>修 网 大 胜 利</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/03/09/fixmysshkey/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/03/09/fixmysshkey/</id>
    <published>2022-03-09T07:32:21.000Z</published>
    <updated>2022-05-13T08:59:25.310Z</updated>
    
    <content type="html"><![CDATA[<p>简而言之，开学之后突然发现上传不了，在3/9即arc5th周年的这天修网1h后终于复活</p><p>原因大概是寒假时候换了梯子</p><p>首先换sshkey</p><p><code>ssh-keygen -t rsa -C &quot;youremail&quot;</code></p><p>在<code>C:\Users\用户名\.ssh</code>下的<code>id_rsa.pub</code>中内容到settings-keys-add deploy key，新建，勾选可修改</p><p>然后git运行</p><p><code>ssh -T git@github.com</code></p><p>这才真正开始修网</p><h3 id="1-ssh-Could-not-resolve-hostname-github-com-Name-or-service-not-known"><a href="#1-ssh-Could-not-resolve-hostname-github-com-Name-or-service-not-known" class="headerlink" title="1.ssh: Could not resolve hostname github.com: Name or service not known"></a>1.<code>ssh: Could not resolve hostname github.com: Name or service not known</code></h3><p>ping github.com发现ping命令用不了，然后去搜添加环境变量（也许是装什么东西的时候不小心删了吧）</p><p>装好ping之后<del>发现请求超时</del>挂梯子连得到github的ip</p><p>用管理员权限运行任意文本编辑软件修改<code>C:\Windows\System32\drivers\etc</code>目录下的hosts，在最后一行添加</p><p><code>xxx.xxx.xxx.xxx github.com</code>（就是ping到ip）</p><p>这算第一步弄完，再次尝试<code>ssh -T git@github.com</code></p><h3 id="2-ssh-connect-to-host-github-com-port-22-Connection-timed-out"><a href="#2-ssh-connect-to-host-github-com-port-22-Connection-timed-out" class="headerlink" title="2.ssh: connect to host github.com port 22: Connection timed out"></a>2.<code>ssh: connect to host github.com port 22: Connection timed out</code></h3><p>在<code>C:\Users\用户名\.ssh</code>下添加<code>config</code>文件（没有后缀名）</p><p>内容：</p><p>Host github.com<br>User git<br>Hostname ssh.github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_rsa<br>Port 443</p><p>（意思应该是使用443端口什么的）</p><p>尝试<code>ssh -T git@github.com</code>，提示有一个修改什么的没截图，yes回车</p><p>然后就行了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;简而言之，开学之后突然发现上传不了，在3/9即arc5th周年的这天修网1h后终于复活&lt;/p&gt;
&lt;p&gt;原因大概是寒假时候换了梯子&lt;/p&gt;
&lt;p&gt;首先换sshkey&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ssh-keygen -t rsa -C &amp;quot;youremail&amp;quot;</summary>
      
    
    
    
    <category term="帮助文档" scheme="https://github.com/sterne012/sterne012.github.io/categories/%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="hexo" scheme="https://github.com/sterne012/sterne012.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>cifar100电脑跑不动啊不中用啊</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/01/17/py-cifar100-train/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/01/17/py-cifar100-train/</id>
    <published>2022-01-17T08:58:39.000Z</published>
    <updated>2022-04-15T14:14:09.983Z</updated>
    
    <content type="html"><![CDATA[<p>速寄了，cpu使用率拉满跑了30min还不到一半</p><p>我不理解代码但我大受震撼</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> layers, optimizers, datasets, Sequential<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> ssl<br>ssl._create_default_https_context = ssl._create_unverified_context<br><span class="hljs-comment"># 忽略ssl认证否则下载数据集报错</span><br><br>os.environ[<span class="hljs-string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-comment"># 用于忽略级别 2 及以下的消息（级别 1 是提示，级别 2 是警告，级别 3 是错误）。</span><br>tf.random.set_seed(<span class="hljs-number">2345</span>)<br><br>conv_layers = [  <span class="hljs-comment"># 5 units: conv+max pooling</span><br>    <span class="hljs-comment"># unit1</span><br>    <span class="hljs-comment"># padding=&quot;same&quot; 输入和输出的图像大小相同</span><br>    layers.Conv2D(<span class="hljs-number">64</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),  <span class="hljs-comment"># 创建一个卷积层</span><br>    layers.Conv2D(<span class="hljs-number">64</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.MaxPool2D(pool_size=[<span class="hljs-number">2</span>, <span class="hljs-number">2</span>], strides=<span class="hljs-number">2</span>, padding=<span class="hljs-string">&quot;same&quot;</span>), <span class="hljs-comment"># max pooling</span><br><br>    <span class="hljs-comment"># unit2</span><br>    layers.Conv2D(<span class="hljs-number">128</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.Conv2D(<span class="hljs-number">128</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.MaxPool2D(pool_size=[<span class="hljs-number">2</span>, <span class="hljs-number">2</span>], strides=<span class="hljs-number">2</span>, padding=<span class="hljs-string">&quot;same&quot;</span>),<br><br>    <span class="hljs-comment"># unit3</span><br>    layers.Conv2D(<span class="hljs-number">256</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.Conv2D(<span class="hljs-number">256</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.MaxPool2D(pool_size=[<span class="hljs-number">2</span>, <span class="hljs-number">2</span>], strides=<span class="hljs-number">2</span>, padding=<span class="hljs-string">&quot;same&quot;</span>),<br><br>    <span class="hljs-comment"># unit4</span><br>    layers.Conv2D(<span class="hljs-number">512</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.Conv2D(<span class="hljs-number">512</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.MaxPool2D(pool_size=[<span class="hljs-number">2</span>, <span class="hljs-number">2</span>], strides=<span class="hljs-number">2</span>, padding=<span class="hljs-string">&quot;same&quot;</span>),<br><br>    <span class="hljs-comment"># unit5</span><br>    layers.Conv2D(<span class="hljs-number">512</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.Conv2D(<span class="hljs-number">512</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.MaxPool2D(pool_size=[<span class="hljs-number">2</span>, <span class="hljs-number">2</span>], strides=<span class="hljs-number">2</span>, padding=<span class="hljs-string">&quot;same&quot;</span>),<br>]<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">preprocess</span>(<span class="hljs-params">x, y</span>):</span><br>    <span class="hljs-comment"># 预处理，x转换到0-1的范围(?)</span><br>    x = tf.cast(x, dtype=tf.float32) / <span class="hljs-number">255.</span><br>    y = tf.cast(y, dtype=tf.int32)<br>    <span class="hljs-keyword">return</span> x, y<br><br><br>(x, y), (x_test, y_test) = datasets.cifar100.load_data()<br>y = tf.squeeze(y, axis=<span class="hljs-number">1</span>)<br>y_test = tf.squeeze(y_test, axis=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(x.shape, y.shape, x_test.shape, y_test.shape)<br><br>train_db = tf.data.Dataset.from_tensor_slices((x, y))<br>train_db = train_db.shuffle(<span class="hljs-number">1000</span>).<span class="hljs-built_in">map</span>(preprocess).batch(<span class="hljs-number">64</span>)<br><br>test_db = tf.data.Dataset.from_tensor_slices((x_test, y_test))<br>test_db = test_db.<span class="hljs-built_in">map</span>(preprocess).batch(<span class="hljs-number">64</span>)<br><br>sample = <span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(train_db))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sample:&#x27;</span>, sample[<span class="hljs-number">0</span>].shape, sample[<span class="hljs-number">1</span>].shape,<br>      tf.reduce_min(sample[<span class="hljs-number">0</span>]), tf.reduce_max(sample[<span class="hljs-number">0</span>]))<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-comment"># Convolution</span><br>    <span class="hljs-comment"># [b, 32, 32, 3] -&gt; [b, 1, 1, 512]</span><br>    conv_net = Sequential(conv_layers)<br>    conv_net.build(input_shape=[<span class="hljs-literal">None</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">3</span>])<br>    <span class="hljs-comment"># x = tf.random.normal([4, 32, 32, 3])</span><br>    <span class="hljs-comment"># out = conv_net(x)</span><br>    <span class="hljs-comment"># print(out.shape)</span><br><br>    <span class="hljs-comment"># Full connection</span><br>    fc_net = Sequential([<br>        layers.Dense(<span class="hljs-number">256</span>, activation=tf.nn.relu),<br>        layers.Dense(<span class="hljs-number">128</span>, activation=tf.nn.relu),<br>        layers.Dense(<span class="hljs-number">100</span>, activation=<span class="hljs-literal">None</span>),<br>    ])<br><br>    conv_net.build(input_shape=[<span class="hljs-literal">None</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">3</span>])<br>    fc_net.build(input_shape=[<span class="hljs-literal">None</span>, <span class="hljs-number">512</span>])<br><br>    <span class="hljs-comment"># 优化器  learning rate=0.0001</span><br>    optimizer = optimizers.Adam(learning_rate=<span class="hljs-number">1e-4</span>)<br><br>    <span class="hljs-comment"># list合并 [a,b]+[c,d]=[a,b,c,d]</span><br>    variables = conv_net.trainable_variables + fc_net.trainable_variables<br><br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>        <span class="hljs-keyword">for</span> step, (x, y) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_db):<br>            <span class="hljs-keyword">with</span> tf.GradientTape() <span class="hljs-keyword">as</span> tape:<br>                out = conv_net(x)<br>                <span class="hljs-comment"># squeeze/flatten =&gt; [b,512]</span><br>                out = tf.reshape(out, [-<span class="hljs-number">1</span>, <span class="hljs-number">512</span>])<br>                <span class="hljs-comment"># [b,512] =&gt; [b,100]</span><br>                logits = fc_net(out)<br>                <span class="hljs-comment"># [b] =&gt; [b,100]</span><br>                y_onehot = tf.one_hot(y, depth=<span class="hljs-number">100</span>)<br>                <span class="hljs-comment"># compute loss</span><br>                loss = tf.keras.losses.categorical_crossentropy(y_onehot, logits, from_logits=<span class="hljs-literal">True</span>)<br>                <span class="hljs-comment"># avg loss</span><br>                loss = tf.reduce_mean(loss)<br><br>            grads = tape.gradient(loss, variables)<br>            optimizer.apply_gradients(<span class="hljs-built_in">zip</span>(grads, variables))<br><br>            <span class="hljs-keyword">if</span> step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(epoch, step, <span class="hljs-string">&#x27;loss:&#x27;</span>, <span class="hljs-built_in">float</span>(loss))<br><br>        <span class="hljs-comment"># test</span><br>        total_num = <span class="hljs-number">0</span><br>        total_correct = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> test_db:<br>            out = conv_net(x)<br>            out = tf.reshape(out, [-<span class="hljs-number">1</span>, <span class="hljs-number">512</span>])<br>            logits = fc_net(out)<br>            prob = tf.nn.softmax(logits, axis=<span class="hljs-number">1</span>)<br>            pred = tf.argmax(prob, axis=<span class="hljs-number">1</span>)<br>            pred = tf.cast(pred, dtype=tf.int32)<br><br>            correct = tf.cast(tf.equal(pred, y), dtype=tf.int32)<br>            correct = tf.reduce_sum(correct)<br><br>            total_num += x.shape[<span class="hljs-number">0</span>]<br>            total_correct += <span class="hljs-built_in">int</span>(correct)<br><br>        acc = total_correct / total_num<br>        <span class="hljs-built_in">print</span>(epoch, <span class="hljs-string">&#x27;acc:&#x27;</span>, acc)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;速寄了，cpu使用率拉满跑了30min还不到一半&lt;/p&gt;
&lt;p&gt;我不理解代码但我大受震撼&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
    <category term="deeplearning" scheme="https://github.com/sterne012/sterne012.github.io/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>Hacking to The CS Homework</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/01/05/DSpta/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/01/05/DSpta/</id>
    <published>2022-01-05T07:08:19.000Z</published>
    <updated>2022-01-05T11:01:02.416Z</updated>
    
    <content type="html"><![CDATA[<p> 淦，错好多</p><blockquote><p>稀疏矩阵采用三元组存储的时候，一般需要一个行逻辑链接的顺序表，用以指出每一行的第一个非零元素在三元组中的位置。用这个顺序表的主要目的是为了___。</p><p>(2分)</p><p>A.节省存储空间</p><p>B.更清晰表示每行元素所在位置</p><p>C.更清晰表示每列元素所在位置</p><p>D.加快算法运行效率</p></blockquote><p><strong>指出每一行的第一个非零元素在三元组中的位置</strong></p><p>这个不是矩阵转置用的那个吗 加快运行D</p><p>（当时选了B）（甚至我记得以前还选过A）</p><blockquote><p>Given the result of the 2nd run of a sorting method as { 11, 12, 13, 7, 8, 9, 23, 4, 5 }. Then among the following methods, this method has to be:</p><p>(1分)</p><p>A.bubble sort</p><p>B.selection sort</p><p>C.insertion sort</p><p>D.merge sort</p></blockquote><p>（错选D）merge是归并吧？</p><blockquote><p>To sort 10 elements by simple selection sort, the worst-case number of swaps is:</p><p>(1分)</p><p>A.9</p><p>B.36</p><p>C.45</p><p>D.100</p></blockquote><p>（错选C）</p><blockquote><p>将序列{ 2, 12, 16, 88, 5, 10, 34 }排序。若前2趟排序的结果如下：</p><ul><li>第1趟排序后：2, 12, 16, 10, 5, 34, 88</li><li>第2趟排序后：2, 5, 10, 12, 16, 34, 88</li></ul><p>则可能的排序算法是：</p><p>(1分)</p><p>A.冒泡排序</p><p>B.快速排序</p><p>C.归并排序</p><p>D.插入排序</p></blockquote><p>（错选A）完了这不是冒泡？</p><blockquote><p>数据序列{ 3, 1, 4, 11, 9, 16, 7, 28 }只能是下列哪种排序算法的两趟排序结果？</p><p>(1分)</p><p>A.冒泡排序</p><p>B.快速排序</p><p>C.插入排序</p><p>D.堆排序</p></blockquote><p>（错选D）完了</p><blockquote><p>无向连通图边数一定大于顶点个数减1。</p><p>(1分)</p><p>T</p><p>F</p></blockquote><p>（错选T）寄</p><blockquote><p>如果从有向图 <em>G</em> 的每一点均能通过深度优先搜索遍历到所有其它顶点，那么该图一定不存在拓扑序列。</p><p>(2分)</p><p>T</p><p>F</p></blockquote><p>（错选F）啊啊啊啊</p><blockquote><p>在用邻接表表示有<em>N</em>个结点<em>E</em>条边的图时，深度优先遍历算法的时间复杂度为：</p><p>(2分)</p><p>A.<em>O</em>(<em>N</em>)</p><p>B.</p><p>O*(<em>N</em>+<em>E</em>)</p><p>C.</p><p><em>O</em>(<em>N</em>2)</p><p>D.<em>O</em>(<em>N</em>2×<em>E</em>)</p></blockquote><p>（错选C）</p><blockquote><p>试利用Floyed算法，求下图所示有向图的各对顶点之间的最短路径。下列选项哪个给出了正确的最短路径长度矩阵和最短路径矩阵？</p><img src="/2022/01/05/DSpta/51cc76b9-d3b6-4ec6-bdf7-cfb542755b8b.JPG" class="" title="51cc76b9-d3b6-4ec6-bdf7-cfb542755b8b"><img src="/2022/01/05/DSpta/image-20220105190051921.png" class="" title="image-20220105190051921"></blockquote><p>（错选D）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 淦，错好多&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;稀疏矩阵采用三元组存储的时候，一般需要一个行逻辑链接的顺序表，用以指出每一行的第一个非零元素在三元组中的位置。用这个顺序表的主要目的是为了___。&lt;/p&gt;
&lt;p&gt;(2分)&lt;/p&gt;
&lt;p&gt;A.节省存储空间&lt;/p&gt;
&lt;p&gt;B</summary>
      
    
    
    
    
    <category term="c" scheme="https://github.com/sterne012/sterne012.github.io/tags/c/"/>
    
    <category term="review" scheme="https://github.com/sterne012/sterne012.github.io/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>Java</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2021/12/27/Java/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2021/12/27/Java/</id>
    <published>2021-12-27T12:49:14.000Z</published>
    <updated>2022-05-13T08:59:37.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自qt以来见到了更强-菜-的做界面语言"><a href="#自qt以来见到了更强-菜-的做界面语言" class="headerlink" title="自qt以来见到了更强(菜)的做界面语言!"></a>自qt以来见到了更强(菜)的做界面语言!</h1><h3 id="首先记得写各种变量并且统一加private"><a href="#首先记得写各种变量并且统一加private" class="headerlink" title="首先记得写各种变量并且统一加private"></a>首先记得写各种变量并且统一加private</h3><h3 id="然后把这些东西拍在构造函数开头"><a href="#然后把这些东西拍在构造函数开头" class="headerlink" title="然后把这些东西拍在构造函数开头:"></a>然后把这些东西拍在构造函数开头:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">super</span>(<span class="hljs-string">&quot;title&quot;</span>);<br>      <span class="hljs-keyword">this</span>.setSize(<span class="hljs-number">800</span>,<span class="hljs-number">300</span>);<span class="hljs-comment">//大小</span><br>      <span class="hljs-keyword">this</span>.setDefaultCloseOperation();<span class="hljs-comment">//按退出关闭，数据库连接的关闭见javaDB</span><br>      <span class="hljs-keyword">this</span>.setLocationRelativeTo(<span class="hljs-keyword">null</span>);<span class="hljs-comment">//设置位置居中</span><br>      <span class="hljs-keyword">this</span>.setLayout(<span class="hljs-keyword">new</span> xxxLayout());<span class="hljs-comment">//你想要的布局</span><br>      <span class="hljs-keyword">this</span>.setVisible(<span class="hljs-keyword">true</span>);<span class="hljs-comment">//可见，写在构造函数最后一行</span><br></code></pre></td></tr></table></figure><h3 id="为JPanel加小标题："><a href="#为JPanel加小标题：" class="headerlink" title="为JPanel加小标题："></a>为JPanel加小标题：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Border titleBorder = BorderFactory.createTitledBorder(<span class="hljs-string">&quot;数据操作&quot;</span>);<br>panel_operate.setBorder(titleBorder);<br></code></pre></td></tr></table></figure><h3 id="int-String转换"><a href="#int-String转换" class="headerlink" title="int/String转换:"></a>int/String转换:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer.parseInt(String s)<br>edge.toString()<span class="hljs-comment">//某个类中重写的toString函数</span><br></code></pre></td></tr></table></figure><h3 id="拆文件中字符串"><a href="#拆文件中字符串" class="headerlink" title="拆文件中字符串:"></a>拆文件中字符串:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String arr[<span class="hljs-number">4</span>],s=<span class="hljs-string">&quot;11 45 14 1919810&quot;</span>;<br>arr=s.spilt(<span class="hljs-string">&quot; &quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="对话框"><a href="#对话框" class="headerlink" title="对话框:"></a>对话框:</h3><p>消息对话框</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">JOptionPane.showMessageDialog(<span class="hljs-keyword">this</span>(填一个组件),<span class="hljs-string">&quot;主体显示的内容&quot;</span>);<br>JOptionPane.showMessageDialog(<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;neirong&quot;</span>,<span class="hljs-string">&quot;haoye&quot;</span>, JOptionPane.INFORMATION_MESSAGE);<span class="hljs-comment">//图标一个叹号,默认的</span><br></code></pre></td></tr></table></figure><p><code>JOptionPane.INFORMATION_MESSAGE</code>:</p><img src="/2021/12/27/Java/image-20211208182903152.png" class="" title="image-20211208182903152"><p><code>JOptionPane.PLAIN_MESSAGE</code>:</p><img src="/2021/12/27/Java/image-20211208182945771.png" class="" title="image-20211208182945771"><p><code>JOptionPane.ERROR_MESSAGE</code>:</p><img src="/2021/12/27/Java/image-20211208183021788.png" class="" title="image-20211208183021788"><p><code>JOptionPane.WARNING_MESSAGE:</code></p><img src="/2021/12/27/Java/image-20211208183101003.png" class="" title="image-20211208183101003"><p><code>JOptionPane.QUESTION_MESSAGE</code>: 诶 这个挺可爱的</p><img src="/2021/12/27/Java/image-20211208183142876.png" class="" title="image-20211208183142876"><h3 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h3><h4 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h4><h4 id="Jcomponent"><a href="#Jcomponent" class="headerlink" title="Jcomponent"></a>Jcomponent</h4><h4 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h4><h4 id="JFrame"><a href="#JFrame" class="headerlink" title="JFrame"></a>JFrame</h4><p>最好使用<code>this.getContentPane().add()</code>添加组件</p><h4 id="JPanel"><a href="#JPanel" class="headerlink" title="JPanel"></a>JPanel</h4><h4 id="JDialog"><a href="#JDialog" class="headerlink" title="JDialog"></a>JDialog</h4><h4 id="JLabel"><a href="#JLabel" class="headerlink" title="JLabel"></a>JLabel</h4><p>一般就是显示一行文本(idea里面中文会乱码注意)</p><h4 id="JTextField"><a href="#JTextField" class="headerlink" title="JTextField"></a>JTextField</h4><p>一个文本输入区,构造函数的参数设置输入区宽度（如果不写就只有一点点大）</p><h4 id="JTextArea"><a href="#JTextArea" class="headerlink" title="JTextArea"></a>JTextArea</h4><h4 id="JButton"><a href="#JButton" class="headerlink" title="JButton"></a>JButton</h4><p>记得<code>button.addActionListener(this)</code></p><h4 id="JCheckBox"><a href="#JCheckBox" class="headerlink" title="JCheckBox"></a>JCheckBox</h4><p>复选按钮</p><h4 id="JRadioButton"><a href="#JRadioButton" class="headerlink" title="JRadioButton"></a>JRadioButton</h4><p>单选按钮</p><h4 id="JButtonGroup"><a href="#JButtonGroup" class="headerlink" title="JButtonGroup"></a>JButtonGroup</h4><p>一组按钮才能实现单选</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ButtonGroup bg=<span class="hljs-keyword">new</span> ButtonGroup();<br>bg.add(rb_male=<span class="hljs-keyword">new</span> JRadioButton(<span class="hljs-string">&quot;男&quot;</span>));<br>bg.add(rb_female=<span class="hljs-keyword">new</span> JRadioButton(<span class="hljs-string">&quot;女&quot;</span>));<br>rb_male.setSelected(<span class="hljs-keyword">true</span>);<br></code></pre></td></tr></table></figure><h4 id="JList-amp-DefaultListModel"><a href="#JList-amp-DefaultListModel" class="headerlink" title="JList&amp;DefaultListModel"></a>JList&amp;DefaultListModel</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">model=<span class="hljs-keyword">new</span> DefaultListModel&lt;&gt;();<br>list=<span class="hljs-keyword">new</span> JList&lt;&gt;(<span class="hljs-keyword">this</span>.model);<br></code></pre></td></tr></table></figure><p>其他方法在课本P165 常用</p><h4 id="JTable"><a href="#JTable" class="headerlink" title="JTable"></a>JTable</h4><p>太智障了，问就智障</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">JTable jt;<br>DefaultTableModel model;<br><br>model=<span class="hljs-keyword">new</span> DefaultTableModel(title,<span class="hljs-number">20</span>);<br>jt=<span class="hljs-keyword">new</span> JTable(model);<br><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">(String name)</span></span>&#123;<br>        String sql=<span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">while</span>(model.getRowCount()!=<span class="hljs-number">0</span>) model.removeRow(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(name==<span class="hljs-keyword">null</span>)&#123;<br>            sql=<span class="hljs-string">&quot;SELECT * FROM mydb.goods&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            sql= <span class="hljs-string">&quot;SELECT * FROM mydb.goods WHERE type LIKE &#x27;%&quot;</span> +name+<span class="hljs-string">&quot;%&#x27;&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            st= stmt.executeQuery(sql);<br>            <span class="hljs-keyword">while</span> (st.next())&#123;<br>                String[] s=<span class="hljs-keyword">new</span> String[]&#123;st.getString(<span class="hljs-number">1</span>),st.getString(<span class="hljs-number">2</span>),<br>                        st.getString(<span class="hljs-number">3</span>),st.getString(<span class="hljs-number">4</span>),<br>                        st.getString(<span class="hljs-number">5</span>)&#125;;<br>                model.addRow(s);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="JComboBox"><a href="#JComboBox" class="headerlink" title="JComboBox"></a>JComboBox</h4><p>组合框</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">JComboBox jcbox=<span class="hljs-keyword">new</span> JComboBox&lt;&gt;(<span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;品牌&quot;</span>,<span class="hljs-string">&quot;型号&quot;</span>,<span class="hljs-string">&quot;颜色&quot;</span>,<span class="hljs-string">&quot;马力&quot;</span>&#125;);<br><span class="hljs-keyword">int</span> val=jcbox.getSelectedIndex();<br></code></pre></td></tr></table></figure><p>布局类:</p><h4 id="BorderLayout"><a href="#BorderLayout" class="headerlink" title="BorderLayout"></a>BorderLayout</h4><p>边布局,有东西南北的</p><h4 id="FlowLayout"><a href="#FlowLayout" class="headerlink" title="FlowLayout"></a>FlowLayout</h4><p>流布局,一直往后加</p><h4 id="GridLayout"><a href="#GridLayout" class="headerlink" title="GridLayout"></a>GridLayout</h4><p>网格布局,两个参数rows行 cols列</p><h3 id="中间容器"><a href="#中间容器" class="headerlink" title="中间容器:"></a>中间容器:</h3><h4 id="JScrollPane"><a href="#JScrollPane" class="headerlink" title="JScrollPane"></a>JScrollPane</h4><p>带有滚动条的视图容器,为其他组件提供可滚动视图,只要组件内容超过视图大小就会自动显示水平或垂直滚动条</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">panel1.add(<span class="hljs-keyword">new</span> JScrollPane(list));<br></code></pre></td></tr></table></figure><h4 id="JSpiltPane"><a href="#JSpiltPane" class="headerlink" title="JSpiltPane"></a>JSpiltPane</h4><p>分割窗格</p><h1 id="java-sql-server从入门到完全放弃到mySQL真香"><a href="#java-sql-server从入门到完全放弃到mySQL真香" class="headerlink" title="java-sql server从入门到完全放弃到mySQL真香"></a>java-sql server从入门到完全放弃到mySQL真香</h1><ol><li><p>DriverManager驱动管理</p><ul><li><p>负责注册驱动 static void registerDriver(Driver driver)</p><p>Class.forName(“com.mysql.jdbc.Driver”);//加载对应包中的Driver类，使用registerDriver方法</p><p>但由于jdbc包已经自动注册了驱动所以可以不写，并且会有如下报错：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">Loading class `com.mysql.jdbc.Drive<span class="hljs-string">r&#x27;. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver&#x27;</span>. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.<br></code></pre></td></tr></table></figure></li><li><p>获取数据库连接 static Connection getConnection(String url,String user,String password)</p><p>url:指定连接路径jdbc:mysql://localhost:3306(ip地址:端口号)/MyDB(数据库名)</p><p>在hexo中这个还是有点熟悉</p></li></ul></li><li><p>Connection</p><ul><li><p>获取执行sql的对象</p><p>CreateStatement() 创建Statement对象，用于将sql语句发送到数据库</p><p>prepareStatement(String sql)</p></li><li><p>管理事务</p><p>开启事务 setAutoCommit(boolean autoCommit) 参数false即关闭自动提交，开启事务</p><p>提交事务 commit()</p><p>回滚事务 rollback()</p></li></ul></li><li><p>Statement 执行静态sql并返回结果对象</p><ul><li><p>执行sql</p><p>boolean execute(String sql) 执行任意语句 true：第一个结果是ResultSet；false：更新计数或没有结果（？）</p><p>int executeUpdate(String sql) 执行DML (insert update delete) &amp; DDL(create alter drop) (不常用)；返回值：影响的行数；DDL语句没有返回结果（返回0）</p><p>Result executeQuery(String sql) 执行DQL(select)</p></li></ul></li><li><p>ResultSet 结果集对象，用类似游标读取</p><ul><li>boolean next():游标向下移一行（默认在第0行，向下一行之后才能获取表中数据）（若此行为空，返回false）</li><li>以及类似next的 详见p321</li><li>getxxx(参数):获取数据 （getString 获取String类型数据）；参数：int（table列号，<strong>从1开始</strong>）or String（table列名）</li></ul></li><li><p>PreparedStatement(Statement的子类) 执行动态（预编译）sql并返回</p></li></ol><p>导包：<code>C:\Program Files (x86)\MySQL\Connector J 8.0</code></p><p>idea：复制这个文件到目录下，右键lib包 add as library</p><p>eclipse：<a href="https://www.cnblogs.com/fnng/archive/2011/07/18/2110023.html">https://www.cnblogs.com/fnng/archive/2011/07/18/2110023.html</a></p><p>工程文件夹右键-&gt;build path-&gt;add external archives选择包路径导入</p><p>草，好奇幻，我从我写的另一个文件里复制过去会自动import，从这就不行。。</p><h3 id="类开头写："><a href="#类开头写：" class="headerlink" title="类开头写："></a>类开头写：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Connection connection=<span class="hljs-keyword">null</span>;<br>   Statement stmt = <span class="hljs-keyword">null</span>;<br>   ResultSet st=<span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure><h3 id="连接数据库："><a href="#连接数据库：" class="headerlink" title="连接数据库："></a>连接数据库：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>    connection = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/MyDB&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;zaq123456&quot;</span>);<br>    stmt = connection.createStatement();<br><br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="一般insert："><a href="#一般insert：" class="headerlink" title="一般insert："></a>一般insert：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(Person per)</span></span>&#123;<br>    String sql=<span class="hljs-string">&quot;INSERT INTO mydb.person VALUES(&quot;</span>+per.toString()+<span class="hljs-string">&quot;)&quot;</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        stmt.executeUpdate(sql);<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="一般query："><a href="#一般query：" class="headerlink" title="一般query："></a>一般query：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">(String name)</span></span>&#123;<br>    model.removeAllElements();<br>    String sql=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">if</span>(name==<span class="hljs-keyword">null</span>)&#123;<br>        sql=<span class="hljs-string">&quot;SELECT * FROM mydb.person&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        sql= <span class="hljs-string">&quot;SELECT * FROM mydb.person WHERE name LIKE &#x27;%&quot;</span> +name+<span class="hljs-string">&quot;%&#x27;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        st= stmt.executeQuery(sql);<br>        <span class="hljs-keyword">while</span> (st.next())&#123;<br>            String s=st.getString(<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;,&quot;</span>+st.getString(<span class="hljs-number">2</span>)+<span class="hljs-string">&quot;,&quot;</span>+<br>                    st.getString(<span class="hljs-number">3</span>)+<span class="hljs-string">&quot;,&quot;</span>+st.getString(<span class="hljs-number">4</span>)+<span class="hljs-string">&quot;,&quot;</span>+<br>                    st.getString(<span class="hljs-number">5</span>)+<span class="hljs-string">&quot;,&quot;</span>+st.getString(<span class="hljs-number">6</span>);<br>            model.addElement(s);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="释放资源："><a href="#释放资源：" class="headerlink" title="释放资源："></a>释放资源：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDefaultCloseOperation</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(st!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                st.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(stmt!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                stmt.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(connection!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                connection.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        setDefaultCloseOperation(EXIT_ON_CLOSE);<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="线程：也写在这算了"><a href="#线程：也写在这算了" class="headerlink" title="线程：也写在这算了"></a>线程：也写在这算了</h1><img src="/2021/12/27/Java/image-20211219113425612.png" class="" title="image-20211219113425612"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(e.getSource()==button_count)&#123;<br>    <span class="hljs-keyword">if</span>(thread.getState()!=Thread.State.NEW) &#123;<br>        thread=<span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">this</span>);<br>    &#125;<br>    thread.start();<br>    button_count.setEnabled(<span class="hljs-keyword">false</span>);<br>    button_stop.setEnabled(<span class="hljs-keyword">true</span>);<br><br>&#125;<br> <span class="hljs-keyword">if</span>(e.getSource()==button_stop)&#123;<br>    thread.interrupt();<br>    utton_stop.setEnabled(<span class="hljs-keyword">false</span>);<br>    button_count.setEnabled(<span class="hljs-keyword">true</span>);<br>&#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">double</span> i=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                label_thread.setText(String.format(<span class="hljs-string">&quot;%.1f&quot;</span>,i));<br>                i+=<span class="hljs-number">0.1</span>;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException ex) &#123;<br>                <span class="hljs-keyword">break</span>;<span class="hljs-comment">//默认是backTrace，改为跳出循环</span><br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="字节-amp-字符流：这绝对是最没有格式的一篇"><a href="#字节-amp-字符流：这绝对是最没有格式的一篇" class="headerlink" title="字节&amp;字符流：这绝对是最没有格式的一篇"></a>字节&amp;字符流：这绝对是最没有格式的一篇</h1><p>字节输入（即读取）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">FileInputStream fis= <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">int</span> len;<br>String ans=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;src\\JavaExam\\re2017\\types.txt&quot;</span>);<br>    <span class="hljs-keyword">while</span>((len=fis.read())!=-<span class="hljs-number">1</span>)&#123;<br>        ans+=(<span class="hljs-keyword">char</span>)len;<br>    &#125;<br>    System.out.println(ans);<br>&#125;<span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><p>字节输出（即写入）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    fos =<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;src\\javaExam\\re2018\\out.txt&quot;</span>,<span class="hljs-keyword">true</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt; model.size();i++)&#123;<br>        String s=model.getElementAt(i)+<span class="hljs-string">&#x27;\n&#x27;</span>;<br>        <span class="hljs-comment">//ohhhhhhhhhh</span><br>        fos.write(s.getBytes(StandardCharsets.UTF_8));<br>    &#125;<br><br>&#125; <span class="hljs-keyword">catch</span> (IOException ex) &#123;<br>    JOptionPane.showMessageDialog(<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;未找到文件&quot;</span>);<br>    ex.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自qt以来见到了更强-菜-的做界面语言&quot;&gt;&lt;a href=&quot;#自qt以来见到了更强-菜-的做界面语言&quot; class=&quot;headerlink&quot; title=&quot;自qt以来见到了更强(菜)的做界面语言!&quot;&gt;&lt;/a&gt;自qt以来见到了更强(菜)的做界面语言!&lt;/h1&gt;&lt;h3</summary>
      
    
    
    
    
    <category term="java" scheme="https://github.com/sterne012/sterne012.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>sqlQuery-对答案</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2021/12/24/sqlQuery2/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2021/12/24/sqlQuery2/</id>
    <published>2021-12-24T00:55:33.000Z</published>
    <updated>2022-05-13T09:00:02.702Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验1"><a href="#实验1" class="headerlink" title="实验1"></a>实验1</h2><h2 id="实验2"><a href="#实验2" class="headerlink" title="实验2"></a>实验2</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--2.列出年龄超过平均值的所有学生名单，按年龄降序显示</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sage<span class="hljs-operator">&gt;=</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(sage) <span class="hljs-keyword">from</span> student)<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sage <span class="hljs-keyword">desc</span><br><span class="hljs-comment">-- 注意这个嵌套查询</span><br><br><span class="hljs-comment">--3.显示在1985年以后出生的学生的基本信息；</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span>( <span class="hljs-keyword">year</span>(getdate())<span class="hljs-operator">-</span>Sage)<span class="hljs-operator">&gt;</span><span class="hljs-number">1985</span><br><span class="hljs-comment">-- 使用year(getdate())-Sage（我直接写的2021，会不泛用）</span><br><br><span class="hljs-comment">--10.按照出生年份升序显示所有学生的学号、姓名、性别、出生年份及院系，在结果集中列标题分别指定为“学号，姓名，性别，出生年份，院系”；</span><br><span class="hljs-keyword">SELECT</span> Sno <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;学号&#x27;</span>,Sname <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;姓名&#x27;</span>,Ssex <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;性别&#x27;</span>,<span class="hljs-keyword">year</span>(getdate()<span class="hljs-operator">-</span>Sage) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;出生年份&#x27;</span>,Sdept <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;院系&#x27;</span><br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;出生年份&#x27;</span> <span class="hljs-keyword">ASC</span>;<br><span class="hljs-comment">-- 下面order by可以直接使用改名之后的</span><br><br><span class="hljs-comment">--16.列出有二门以上课程（含两门）不及格的学生的学号及该学生的平均成绩；</span><br>我的答案属于是直接不对<br><span class="hljs-keyword">SELECT</span> Sno,<span class="hljs-built_in">AVG</span>(Grade) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;平均成绩&#x27;</span><br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> Grade<span class="hljs-operator">&lt;</span><span class="hljs-number">60</span> <span class="hljs-comment">-- 会导致avg算出的是低于60分课程的平均分</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Sno<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&gt;=</span><span class="hljs-number">2</span>;<br><br>再写一遍：<br><span class="hljs-keyword">SELECT</span> Sno, <span class="hljs-built_in">AVG</span>(grade) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;平均成绩&#x27;</span><br><span class="hljs-keyword">FROM</span> SC X<br><span class="hljs-keyword">WHERE</span> EXIST(<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> SC Y<br><span class="hljs-keyword">WHERE</span> X.Sno<span class="hljs-operator">=</span>Y.Sno <span class="hljs-keyword">AND</span> grade<span class="hljs-operator">&lt;</span><span class="hljs-number">60</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Sno<br>    <span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&gt;=</span><span class="hljs-number">2</span><br>)<span class="hljs-comment">-- 或者这里用sno in什么什么，EXIST习惯了也得记得相关子查询的关联</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Sno<br><br>标答另一种写法：<br><span class="hljs-keyword">select</span> sno,<span class="hljs-built_in">avg</span>(grade) 平均成绩<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sno<br><span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> grade <span class="hljs-operator">&lt;</span><span class="hljs-number">60</span> <span class="hljs-keyword">then</span> <span class="hljs-number">1</span> <span class="hljs-keyword">end</span>)<span class="hljs-operator">&gt;=</span><span class="hljs-number">2</span><br><br><span class="hljs-comment">--19. 查询各个专业男生、女生的人数</span><br><span class="hljs-keyword">SELECT</span> Sdept,Ssex,<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;人数&#x27;</span><br><span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Ssex,Sdept;<span class="hljs-comment">-- 注意是专业-性别的聚合，先聚合性别后专业</span><br><br><span class="hljs-comment">--20. 查询各种姓氏的人数（假设没有复姓）；</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">left</span>(Sname,<span class="hljs-number">1</span>)姓氏,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)人数<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">left</span>(Sname,<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">--21查询选修课程数最多的学号及选修课程数最少的学号</span><br><span class="hljs-keyword">select</span> sno, <span class="hljs-built_in">count</span> (<span class="hljs-operator">*</span>) 选课门数<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sno<br><span class="hljs-keyword">having</span>  <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&gt;=</span><span class="hljs-keyword">all</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sno) <span class="hljs-keyword">or</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&lt;=</span><span class="hljs-keyword">all</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sno)<br><br><span class="hljs-comment">--5．求使用零件数量在200-400之间的工程号</span><br><span class="hljs-keyword">select</span> JNO<br><span class="hljs-keyword">from</span> SPJ<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> JNO<br><span class="hljs-keyword">having</span> <span class="hljs-built_in">sum</span>(QTY)<span class="hljs-keyword">between</span> <span class="hljs-number">200</span> <span class="hljs-keyword">and</span> <span class="hljs-number">400</span><br><span class="hljs-comment">-- 工程不止有一个条目所以是sum</span><br><br><span class="hljs-comment">--6．查询每种零件的零件号，以及使用该零件的工程数。</span><br><span class="hljs-keyword">SELECT</span> P.PNO,<span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> JNO) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;工程数&#x27;</span><br><span class="hljs-keyword">from</span> p <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> spj <span class="hljs-keyword">on</span> spj.PNO<span class="hljs-operator">=</span>p.PNO<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> p.PNO<br><span class="hljs-comment">-- 1我没用distinct，2没用左外连接，会忽略掉没被任何工程使用的零件</span><br></code></pre></td></tr></table></figure><h2 id="实验3"><a href="#实验3" class="headerlink" title="实验3"></a>实验3</h2><p>好久没看了，快忘了</p><p>记忆修复中……</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--1.查询以‘DB_’开头,且倒数第3个字符为‘s’的课程的详细情况；</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> Course<br><span class="hljs-keyword">WHERE</span> Cname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;DB_%s__&#x27;</span>;<br><span class="hljs-comment">-- 错了 下划线是任意字符 需要转码</span><br><span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;DB\_%s__&#x27;</span> <span class="hljs-keyword">ESCAPE</span> <span class="hljs-string">&#x27;\&#x27;&#x27;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">--6.查询所选课程的平均成绩大于张毅的平均成绩的学生学号、姓名及平均成绩；</span><br><span class="hljs-string">SELECT Student.Sno,Sname,AVG(Grade) AS &#x27;</span>平均成绩<span class="hljs-string">&#x27;</span><br><span class="hljs-string">FROM Student JOIN SC ON(Student.Sno=SC.Sno)</span><br><span class="hljs-string">GROUP BY Student.Sno,Sname</span><br><span class="hljs-string">HAVING AVG(Grade)&gt;(</span><br><span class="hljs-string">SELECT AVG(Grade) </span><br><span class="hljs-string">FROM Student JOIN SC ON(Student.Sno=SC.Sno)</span><br><span class="hljs-string">WHERE Sname=&#x27;</span>张力<span class="hljs-string">&#x27;);</span><br><span class="hljs-string">-- 要用avg是聚合函数所以需要groupby having里面也可以嵌套查询</span><br><span class="hljs-string"></span><br><span class="hljs-string">感觉是不是EXISTS的多看看</span><br><span class="hljs-string">--10.查询至少选修“数据库”和“数据结构”课程的学生的基本信息；</span><br><span class="hljs-string">我称之为“两个不存在问题”</span><br><span class="hljs-string">select *</span><br><span class="hljs-string">from student</span><br><span class="hljs-string">where not exists (select *</span><br><span class="hljs-string">              from course </span><br><span class="hljs-string">      where cname in (&#x27;</span>数据库<span class="hljs-string">&#x27;,&#x27;</span>数据结构<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">   and not exists(select *</span><br><span class="hljs-string">   from sc</span><br><span class="hljs-string">   where student.sno = sc.sno and sc.cno =course.cno))</span><br><span class="hljs-string">   </span><br><span class="hljs-string">或者：</span><br><span class="hljs-string">SELECT *</span><br><span class="hljs-string">FROM Student X</span><br><span class="hljs-string">WHERE EXISTS(</span><br><span class="hljs-string">SELECT Student.Sno</span><br><span class="hljs-string">FROM Student JOIN SC ON(Student.Sno=SC.Sno) JOIN Course ON(SC.Cno=Course.Cno)</span><br><span class="hljs-string">WHERE Cname=&#x27;</span>数据库<span class="hljs-string">&#x27; AND Student.Sno=X.Sno</span><br><span class="hljs-string">INTERSECT</span><br><span class="hljs-string">SELECT Student.Sno</span><br><span class="hljs-string">FROM Student JOIN SC ON(Student.Sno=SC.Sno) JOIN Course ON(SC.Cno=Course.Cno)</span><br><span class="hljs-string">WHERE Cname=&#x27;</span>数据结构<span class="hljs-string">&#x27; AND Student.Sno=X.Sno);</span><br><span class="hljs-string"></span><br><span class="hljs-string">--11.查询没有选修张毅所选修的全部课程的学生的姓名；</span><br><span class="hljs-string">--（就是查找一个学生，存在张毅选修的一个课程，他没有选修）</span><br><span class="hljs-string">select Sname</span><br><span class="hljs-string">from student S1</span><br><span class="hljs-string">where exists(-- 存在一门课</span><br><span class="hljs-string">    select * </span><br><span class="hljs-string">    from sc SC1</span><br><span class="hljs-string">    where Sno=(</span><br><span class="hljs-string">        select Sno</span><br><span class="hljs-string">        from student</span><br><span class="hljs-string">        where Sname=&#x27;</span>张毅<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    ) and not exists (-- 没有选修</span><br><span class="hljs-string">        select *</span><br><span class="hljs-string">        from sc SC2</span><br><span class="hljs-string">        where S1.Sno=SC2.Sno and SC1.Cno=SC2.Cno</span><br><span class="hljs-string">    )</span><br><span class="hljs-string">);</span><br><span class="hljs-string"></span><br><span class="hljs-string">--15.列出同时选修“1”号课程和“2”号课程的所有学生的姓名；（使用三种方法实现）</span><br><span class="hljs-string">--(1)exists</span><br><span class="hljs-string">select Sname</span><br><span class="hljs-string">from student S</span><br><span class="hljs-string">where exists(</span><br><span class="hljs-string">    select *</span><br><span class="hljs-string">    from sc</span><br><span class="hljs-string">    where S.Sno=sc.Sno and Cno=&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">) and exists(</span><br><span class="hljs-string">    select *</span><br><span class="hljs-string">    from sc</span><br><span class="hljs-string">    where S.Sno=sc.Sno and Cno=&#x27;</span><span class="hljs-number">2</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">);</span><br><span class="hljs-string">--(2)求交集</span><br><span class="hljs-string">select Sname</span><br><span class="hljs-string">from student</span><br><span class="hljs-string">where Sno in</span><br><span class="hljs-string">    ((select Sno</span><br><span class="hljs-string">    from sc</span><br><span class="hljs-string">    where Cno=&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;)</span><br><span class="hljs-string">    intersect </span><br><span class="hljs-string">    (select Sno</span><br><span class="hljs-string">    from sc</span><br><span class="hljs-string">    where Cno=&#x27;</span><span class="hljs-number">2</span><span class="hljs-string">&#x27;));</span><br><span class="hljs-string">--(3)</span><br><span class="hljs-string">select Sname</span><br><span class="hljs-string">from student</span><br><span class="hljs-string">where Sno in</span><br><span class="hljs-string">    (select Sno</span><br><span class="hljs-string">    from sc</span><br><span class="hljs-string">    where Cno=&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;and </span><br><span class="hljs-string">sno in(select Sno</span><br><span class="hljs-string">    from sc</span><br><span class="hljs-string">    where Cno=&#x27;</span><span class="hljs-number">2</span><span class="hljs-string">&#x27;))</span><br><span class="hljs-string">    </span><br><span class="hljs-string">--17.使用嵌套查询查询其它系中年龄小于CS系的某个学生的学生姓名、年龄和院系；</span><br><span class="hljs-string">某个（任意）学生用any，所有用all</span><br><span class="hljs-string">SELECT Sname,Sage,Sdept</span><br><span class="hljs-string">FROM Student</span><br><span class="hljs-string">WHERE Sdept!=&#x27;</span>CS<span class="hljs-string">&#x27; AND Sage&lt;ANY(</span><br><span class="hljs-string">SELECT Sage</span><br><span class="hljs-string">FROM Student</span><br><span class="hljs-string">WHERE Sdept=&#x27;</span>CS<span class="hljs-string">&#x27;);</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h2 id="实验4"><a href="#实验4" class="headerlink" title="实验4"></a>实验4</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--4.创建每门课程的平均分和选课人数的视图（课程号，课程名，平均分，人数）。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> course_data<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> kc.课程号,课程名,<span class="hljs-built_in">AVG</span>(成绩) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;平均分&#x27;</span>,<span class="hljs-built_in">COUNT</span>(学号) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;人数&#x27;</span><br><span class="hljs-keyword">FROM</span> kc <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> cj <span class="hljs-keyword">ON</span>(kc.课程号<span class="hljs-operator">=</span>cj.课程号)<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> kc.课程号,课程名;<br>注意左连接<br><br><span class="hljs-comment">--10.显示选修课程数最多的学号及选修课程数最少的学号，姓名（使用派生表实现）。</span><br><span class="hljs-keyword">SELECT</span> X.学号,姓名<br><span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> TOP <span class="hljs-number">1</span> 学号 <span class="hljs-keyword">FROM</span> cj <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 学号 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">DESC</span>) <span class="hljs-keyword">AS</span> maxsno,<br> (<span class="hljs-keyword">SELECT</span> TOP <span class="hljs-number">1</span> 学号 <span class="hljs-keyword">FROM</span> cj <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 学号 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">ASC</span>) <span class="hljs-keyword">AS</span> minsno,xs X<br><span class="hljs-keyword">WHERE</span> X.学号<span class="hljs-operator">=</span>maxsno.学号 <span class="hljs-keyword">or</span> X.学号<span class="hljs-operator">=</span>minsno.学号;<br><br><span class="hljs-comment">--11.查询每个学生成绩高于自己的平均成绩的学号，姓名，课程号和成绩（使用派生表实现）。</span><br><span class="hljs-keyword">SELECT</span> xs.学号,姓名,课程号,成绩<br><span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> 学号,<span class="hljs-built_in">AVG</span>(成绩) <span class="hljs-keyword">AS</span> score <span class="hljs-keyword">FROM</span> cj <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 学号) <span class="hljs-keyword">AS</span> avgscore,xs <span class="hljs-keyword">JOIN</span> cj <span class="hljs-keyword">ON</span>(xs.学号<span class="hljs-operator">=</span>cj.学号)<br><span class="hljs-keyword">WHERE</span> xs.学号<span class="hljs-operator">=</span>avgscore.学号 <span class="hljs-keyword">AND</span> cj.成绩<span class="hljs-operator">&gt;</span>avgscore.score;<br>派生表？好怪哦<br><br><span class="hljs-comment">--12.自己验证with check option的作用。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> CS_stu<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> xs<br><span class="hljs-keyword">WHERE</span> 专业<span class="hljs-operator">=</span><span class="hljs-string">&#x27;计算机&#x27;</span><br><span class="hljs-keyword">WITH</span> <span class="hljs-keyword">CHECK</span> OPTION;<br>GO<br><span class="hljs-keyword">INSERT</span><br><span class="hljs-keyword">INTO</span> CS_stu<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;100&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;1987-05-20&#x27;</span>,<span class="hljs-string">&#x27;信息管理&#x27;</span>,<span class="hljs-number">10</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-keyword">NULL</span>);<br>报错：<br><span class="hljs-comment">--试图进行的插入或更新已失败，原因是目标视图或者目标视图所跨越的某一视图指定了 WITH CHECK OPTION</span><br><span class="hljs-comment">--而该操作的一个或多个结果行又不符合 CHECK OPTION 约束。</span><br><span class="hljs-keyword">with</span> <span class="hljs-keyword">check</span> option更新视图要满足<span class="hljs-keyword">where</span>条件<br><br><span class="hljs-comment">--17.查询没有选修数据结构、操作系统和英语三门课的学生的学号，姓名，课程号，课程名和成绩。</span><br>写一个练练手<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-comment">-- 懒得写了</span><br><span class="hljs-keyword">FROM</span> XS <span class="hljs-keyword">JOIN</span> KC <span class="hljs-keyword">ON</span>(..) <span class="hljs-keyword">JOIN</span> CJ <span class="hljs-keyword">ON</span>(..)<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>(<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> KC Y<br><span class="hljs-keyword">WHERE</span> Y.课程名<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据结构&#x27;</span> <span class="hljs-keyword">OR</span> Y.课程名<span class="hljs-operator">=</span><span class="hljs-string">&#x27;操作系统&#x27;</span> <span class="hljs-keyword">OR</span> Y.课程名<span class="hljs-operator">=</span><span class="hljs-string">&#x27;英语&#x27;</span>);<br><br>以前写的作弊版（遇事不决建<span class="hljs-keyword">view</span>）<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> DS_OP_EN<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> X.学号<br><span class="hljs-keyword">FROM</span> xs X <span class="hljs-keyword">JOIN</span> cj Y <span class="hljs-keyword">ON</span>(X.学号<span class="hljs-operator">=</span>Y.学号) <span class="hljs-keyword">JOIN</span> kc Z <span class="hljs-keyword">ON</span>(Y.课程号<span class="hljs-operator">=</span>Z.课程号)<br><span class="hljs-keyword">WHERE</span> Z.课程名<span class="hljs-operator">=</span><span class="hljs-string">&#x27;数据结构&#x27;</span> <span class="hljs-keyword">OR</span> Z.课程名<span class="hljs-operator">=</span><span class="hljs-string">&#x27;操作系统&#x27;</span> <span class="hljs-keyword">OR</span> Z.课程名<span class="hljs-operator">=</span><span class="hljs-string">&#x27;英语&#x27;</span>;<br>GO <br><span class="hljs-keyword">SELECT</span> X.学号,姓名,Y.课程号,课程名,成绩<br><span class="hljs-keyword">FROM</span> xs X <span class="hljs-keyword">JOIN</span> cj Y <span class="hljs-keyword">ON</span>(X.学号<span class="hljs-operator">=</span>Y.学号) <span class="hljs-keyword">JOIN</span> kc Z <span class="hljs-keyword">ON</span>(Y.课程号<span class="hljs-operator">=</span>Z.课程号)<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>(<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> DS_OP_EN A<br><span class="hljs-keyword">WHERE</span> A.学号<span class="hljs-operator">=</span>X.学号);<br><br><span class="hljs-comment">--18.将没有选课的学生的总学分设置为0。</span><br>UPDATE xs<br><span class="hljs-keyword">SET</span> 总学分<span class="hljs-operator">=</span><span class="hljs-number">0</span><br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>(<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> cj<br><span class="hljs-keyword">WHERE</span> xs.学号<span class="hljs-operator">=</span>cj.学号);<br><br><br></code></pre></td></tr></table></figure><h2 id="实验5"><a href="#实验5" class="headerlink" title="实验5"></a>实验5</h2><p>安全性</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--1．创建一windows用户（名字自定），用sql语句建立windows验证模式的登录名。默认数据库为student</span><br><span class="hljs-keyword">CREATE</span> LOGIN [DESKTOP<span class="hljs-number">-8</span>QRH2EV\liu] <span class="hljs-keyword">FROM</span> WINDOWS<span class="hljs-comment">--注意：DESKTOP-8QRH2EV是计算机名，liu是Windows用户名</span><br><span class="hljs-keyword">WITH</span> DEFAULT_DATABASE <span class="hljs-operator">=</span> Student;<br><span class="hljs-comment">--2．用sql语句和系统存储过程建立登录名sqluser,密码为1234</span><br><span class="hljs-keyword">CREATE</span> LOGIN sqluser <span class="hljs-keyword">WITH</span> PASSWORD <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1234&#x27;</span><br><span class="hljs-keyword">exec</span> sp_addlogin sqluser, <span class="hljs-string">&#x27;1234&#x27;</span><br><span class="hljs-comment">--3．为student数据库新建用户u1，其登录名为sqluser。</span><br>USE student<br>GO<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> u1 <span class="hljs-keyword">FOR</span> LOGIN sqluser<br><span class="hljs-keyword">exec</span> sp_adduser sqluser,u1<br><span class="hljs-comment">--4．新建登录usersf，并将其加入到sysadmin固定服务器角色中。</span><br><span class="hljs-keyword">exec</span> sp_addlogin usersf, <span class="hljs-string">&#x27;1234&#x27;</span><br><span class="hljs-keyword">exec</span> sp_addsrvrolemember <span class="hljs-string">&#x27;usersf&#x27;</span>,<span class="hljs-string">&#x27;sysadmin&#x27;</span><span class="hljs-comment">--由于sysadmin是系统管理员角色，拥有所有权限。</span><br><span class="hljs-comment">--5．将student用户u1（登录名为sqluser）加入到db_owner角色中，使其全权负责该数据库,并验证其权限。</span><br>USE student<br>GO <br><span class="hljs-keyword">exec</span> sp_addrolemember <span class="hljs-string">&#x27;db_owner&#x27;</span>,u1<br> <span class="hljs-comment">-- 验证:以sqluser登录,在新建查询界面输入以下内容验证</span><br>    USE student<br>    GO<br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> SC<span class="hljs-comment">-- 成功，db_owner拥有查询权限</span><br>    UPDATE SC<br>    <span class="hljs-keyword">SET</span> Grade <span class="hljs-operator">=</span> <span class="hljs-number">75</span><br>    <span class="hljs-keyword">WHERE</span> Sno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;200515001&#x27;</span> <span class="hljs-keyword">AND</span> cno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;4&#x27;</span> <span class="hljs-comment">-- 成功，db_owner拥有修改表项的权限</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> course <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;12&#x27;</span>,<span class="hljs-string">&#x27;大数据&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-number">3</span>)<span class="hljs-comment">--成功，db_owner拥有插入的权限</span><br>    <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> SC<br>        <span class="hljs-keyword">ADD</span> temp tinyint <span class="hljs-comment">-- 成功，db_owner拥有更改表结构的权限</span><br><br><span class="hljs-comment">--6．为SPJ数据库新建用户u2，u3，其登录名分别为u2，u3。</span><br><span class="hljs-keyword">CREATE</span> LOGIN u2 <span class="hljs-keyword">WITH</span> PASSWORD <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1234&#x27;</span>, DEFAULT_DATABASE <span class="hljs-operator">=</span> SPJ<br><span class="hljs-keyword">CREATE</span> LOGIN u3 <span class="hljs-keyword">WITH</span> PASSWORD <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1234&#x27;</span>, DEFAULT_DATABASE <span class="hljs-operator">=</span> SPJ<br>USE SPJ<br>GO<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> u2 <span class="hljs-keyword">FOR</span> LOGIN u2<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> u3 <span class="hljs-keyword">FOR</span> LOGIN u3<br><br><span class="hljs-comment">--（1）授予用户u2对S表有SELECT 权，对P表颜色（COLOR）具有更新权限；</span><br>    <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> S <span class="hljs-keyword">TO</span> u2 <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> OPTION;<br>    <span class="hljs-keyword">GRANT</span> UPDATE(COLOR) <span class="hljs-keyword">ON</span> P <span class="hljs-keyword">TO</span> u2<br>    <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> OPTION;<br><span class="hljs-comment">--（2）u2将其拥有的权限授予u3；</span><br>    <span class="hljs-comment">-- 本小题在u2登录下执行.验证u2获得权限，并给u3授权</span><br>USE SPJ<br>GO<br> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> S; <span class="hljs-comment">-- 成功</span><br> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> P; <span class="hljs-comment">-- 拒绝</span><br> UPDATE P <span class="hljs-keyword">SET</span> COLOR<span class="hljs-operator">=</span><span class="hljs-string">&#x27;红&#x27;</span><span class="hljs-comment">--成功</span><br> update P <span class="hljs-keyword">set</span> color<span class="hljs-operator">=</span><span class="hljs-string">&#x27;绿&#x27;</span> <span class="hljs-keyword">where</span> pno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;p1&#x27;</span><span class="hljs-comment">--拒绝，因为u2没有对P的查询权限</span><br> <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> S <span class="hljs-keyword">TO</span> u3;<br> <span class="hljs-keyword">GRANT</span> UPDATE(COLOR) <span class="hljs-keyword">ON</span> P <span class="hljs-keyword">TO</span> u3<br><span class="hljs-comment">--（3）用sql语句逐一验证u3所获得的权限。</span><br>    <span class="hljs-comment">-- 以u3身份登录:</span><br> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> S; <span class="hljs-comment">-- 成功</span><br> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> P; <span class="hljs-comment">-- 拒绝</span><br> UPDATE P <span class="hljs-keyword">SET</span> COLOR<span class="hljs-operator">=</span><span class="hljs-string">&#x27;红&#x27;</span><span class="hljs-comment">--成功</span><br> update P <span class="hljs-keyword">set</span> color<span class="hljs-operator">=</span><span class="hljs-string">&#x27;绿&#x27;</span> <span class="hljs-keyword">where</span> pno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;p1&#x27;</span><span class="hljs-comment">--拒绝，因为u2没有对P的查询权限</span><br>  <span class="hljs-comment">--（4）撤销用户u3所获得的权限，并验证。</span><br>    <span class="hljs-comment">-- 以u2身份登录并操作:</span><br>    <span class="hljs-keyword">REVOKE</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> S <span class="hljs-keyword">FROM</span> u3;<br>    <span class="hljs-keyword">REVOKE</span> UPDATE(COLOR) <span class="hljs-keyword">ON</span> P <span class="hljs-keyword">FROM</span> u3;<br>    <span class="hljs-comment">-- 以u3身份登录并操作:</span><br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> S <span class="hljs-comment">-- 拒绝</span><br>    UPDATE P <span class="hljs-keyword">SET</span> COLOR<span class="hljs-operator">=</span><span class="hljs-string">&#x27;红&#x27;</span> <span class="hljs-comment">--拒绝</span><br><span class="hljs-comment">--7.在student数据库中建立角色operate,该角色具有对student和course表的查询权限；具有对表sc的插入和修改权限。</span><br>USE student<br>GO<br><span class="hljs-keyword">CREATE</span> ROLE operate<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> student <span class="hljs-keyword">TO</span> operate<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">ON</span> course <span class="hljs-keyword">TO</span> operate<br><span class="hljs-keyword">GRANT</span> update,<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">ON</span> SC <span class="hljs-keyword">TO</span> operate<br><span class="hljs-comment">--8.拒绝用户u1对sc表的修改权限。</span><br>DENY update <span class="hljs-keyword">ON</span> SC <span class="hljs-keyword">TO</span> u1<br><span class="hljs-comment">--9.使用存储过程将角色operate赋给用户u1,并用sql语句验证其权限。（特别验证u1对sc表的修改权限）</span><br><span class="hljs-keyword">exec</span> sp_addrolemember operate,u1<br><span class="hljs-comment">-- 验证:这里用登录名sqluser登录</span><br>USE student<br>GO<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Student<span class="hljs-comment">-- 成功</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> course<span class="hljs-comment">-- 成功</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> sc <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;200515003&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-number">88</span>,<span class="hljs-keyword">NULL</span>)<span class="hljs-comment">--成功</span><br>update sc <span class="hljs-keyword">set</span> temp<span class="hljs-operator">=</span><span class="hljs-number">0</span><br><span class="hljs-comment">--消息 229，级别 14，状态 5，第 6 行</span><br><span class="hljs-comment">--拒绝了对对象 &#x27;sc&#x27; (数据库 &#x27;student&#x27;，架构 &#x27;dbo&#x27;)的 UPDATE 权限。</span><br><span class="hljs-comment">--这是因为用户u1通过operate角色获得的对SC的update权限，由于被DENY了，因此该语句的执行被拒绝了.</span><br><span class="hljs-comment">--10.创建数据库架构jg_test,其所有者为student用户u1。</span><br>use student<br>go<br><span class="hljs-keyword">create</span> schema jg_test<br><span class="hljs-keyword">authorization</span> u1<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">alter</span><br><span class="hljs-keyword">on</span> schema::dbo<br><span class="hljs-keyword">to</span> u1<br><span class="hljs-comment">--（1）授予用户u1建表权限；</span><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span><br><span class="hljs-keyword">to</span> u1<br><span class="hljs-comment">--（2）授予用户（自己建立wei）对架构jg_test进行查询、插入的权限</span><br><span class="hljs-keyword">exec</span> sp_addlogin wei<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> wei<br><span class="hljs-keyword">for</span> login wei<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span>,<span class="hljs-keyword">insert</span><br><span class="hljs-keyword">on</span> schema::jg_test<br><span class="hljs-keyword">to</span> wei<br><span class="hljs-comment">--（3）以u1身份登录sql srver,新建一个表，观察表的架构名称。验证用户wei对该表的查询和插入权限，并验证其是否可对该表进行删除。</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> jg_test.s<br>(s1 <span class="hljs-type">char</span>(<span class="hljs-number">10</span>),s2 <span class="hljs-type">int</span>)<br><span class="hljs-comment">--命令成功完成</span><br><span class="hljs-comment">--以wei身份登录sql srver</span><br>use student<br>go<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> jg_test.s<span class="hljs-comment">--命令成功完成</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> jg_test.s <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;t1234&#x27;</span>,<span class="hljs-number">10</span>)<span class="hljs-comment">--命令成功完成</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> jg_test.s<br><span class="hljs-comment">--消息 229，级别 14，状态 5，第 5 行</span><br><span class="hljs-comment">--拒绝了对对象 &#x27;s&#x27; (数据库 &#x27;student&#x27;，架构 &#x27;jg_test&#x27;)的 DELETE 权限。</span><br>补充：<br><span class="hljs-comment">--11. 在student数据库中创建架构（schema）teacher指定给用户teacher（也就是要先创建一个teacher用户）</span><br>use student<br>go<br><span class="hljs-keyword">CREATE</span> LOGIN tt <span class="hljs-keyword">WITH</span> PASSWORD <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1234&#x27;</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> teacher <span class="hljs-keyword">for</span> login tt<br><span class="hljs-keyword">create</span> schema teacher <span class="hljs-keyword">AUTHORIZATION</span> teacher<br><span class="hljs-comment">--12.在已创建的teacher架构中创建“tea”表，表结构为（tno(编号), tname(姓名), tsd（专业）,tphone, te_mail）(数据类型和长度自己定义)，通过teacher架构为teacher1用户设置查询权限，验证teacher1用户对表tea是否具有select权限和delete权限，为什么？</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> teacher.tea<br>(tno <span class="hljs-type">char</span>(<span class="hljs-number">10</span>),<br> tname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br> tsd <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<br> tphone <span class="hljs-type">char</span>(<span class="hljs-number">11</span>),<br> te_mail <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>)<br> )<br> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teacher.tea <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;1234567890&#x27;</span>,<span class="hljs-string">&#x27;王伟&#x27;</span>,<span class="hljs-string">&#x27;计算机&#x27;</span>,<span class="hljs-string">&#x27;13963112345&#x27;</span>,<span class="hljs-string">&#x27;123.com&#x27;</span>)<br> <span class="hljs-comment">--验证过程</span><br> <span class="hljs-comment">/*在“对象资源管理器”中展开数据库“student”→“安全性”→“架构”，选择新创建的架构teacher，</span><br><span class="hljs-comment"> 右键单击鼠标，在弹出的快捷菜单中选择“属性”菜单项，打开“架构属性”窗口，</span><br><span class="hljs-comment"> 在该架构属性的“权限”选项页中，单击“搜索”按钮，选择用户u1（假设已经创建），为用户授予“选择”权限。单击“确定”*/</span><br> <span class="hljs-comment">--以sqluser登录</span><br> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teacher.tea<span class="hljs-comment">--成功</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> teacher.tea<span class="hljs-comment">--拒绝了对对象 &#x27;tea&#x27; (数据库 &#x27;student&#x27;，架构 &#x27;teacher&#x27;)的 DELETE 权限</span><br></code></pre></td></tr></table></figure><p>全复制了qwq</p><h2 id="实验6"><a href="#实验6" class="headerlink" title="实验6"></a>实验6</h2><p>数据库完整性约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--1.将stu数据库中student表的sno定义为主键；</span><br>USE STU<br>go<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> STUDENT <br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">COLUMN</span> SNO <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><span class="hljs-comment">/*将某属性设置为主键之前，必须先将该属性设置为NOT NULL*/</span>？？还有这种事<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> STUDENT<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> P1 <span class="hljs-keyword">PRIMARY</span> KEY(SNO)<br><br><span class="hljs-comment">--3.为表course中的字段cname添加唯一值约束；</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> COURSE<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> U1 <span class="hljs-keyword">UNIQUE</span>(CNAME)<br><br><span class="hljs-comment">--4.将数据库stu的表sc的sno及cno字段组合定义为主键，约束名称为sc_pk;</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> SC<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">COLUMN</span> SNO <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> SC<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">COLUMN</span> CNO <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> SC<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> SC_PK <span class="hljs-keyword">PRIMARY</span> KEY(SNO,CNO)<br><br><span class="hljs-comment">--5)向sc表添加记录时，如果该记录的sno字段的值在student中不存在，则拒绝插入；</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> SC<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> F4 <span class="hljs-keyword">FOREIGN</span> KEY(SNO)  <span class="hljs-keyword">REFERENCES</span> STUDENT(SNO)<br>就是添加外码的意思<br><br><span class="hljs-comment">--6.定义check约束，要求学生学号sno必须为9位数字字符，且不能以0开头，第二三位皆为0；</span><br>必须是数字字符！<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> STUDENT <br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> C1 <span class="hljs-keyword">CHECK</span>(SNO <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;[1-9]00[0-9][0-9][0-9][0-9][0-9][0-9]&#x27;</span>)<br>错误：<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Student<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> stu_sno_check <span class="hljs-keyword">CHECK</span>(Sno <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;[1-9]00______&#x27;</span>);<br><br><span class="hljs-comment">--13.设计触发器实现如果一个学生转专业了，那么输出一条信息显示该学生各门课程的平均分。</span><br>USE STUDENT<br>GO<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> A1<br><span class="hljs-keyword">ON</span> STUDENT<br><span class="hljs-keyword">FOR</span><br>UPDATE<br><span class="hljs-keyword">AS</span> <br>IF UPDATE(SDEPT)<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@AVG</span> <span class="hljs-type">NUMERIC</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>),<span class="hljs-variable">@SNO</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>)<br><span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@SNO</span><span class="hljs-operator">=</span>(<span class="hljs-keyword">SELECT</span> SNO <span class="hljs-keyword">FROM</span> DELETED)<br><span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@AVG</span><span class="hljs-operator">=</span>(<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(GRADE) <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> SNO<span class="hljs-operator">=</span><span class="hljs-variable">@SNO</span>) <br>PRINT <span class="hljs-variable">@SNO</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;各门课的平均成绩&#x27;</span><span class="hljs-operator">+</span><span class="hljs-built_in">cast</span>(<span class="hljs-variable">@AVG</span> <span class="hljs-keyword">as</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">5</span>))<br><span class="hljs-keyword">END</span><br>我的：<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> t13 <span class="hljs-keyword">ON</span> Student AFTER UPDATE <span class="hljs-keyword">AS</span><br>    IF(UPDATE(Sdept))<br>        <span class="hljs-keyword">BEGIN</span><br>            <span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@sno</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>)<br>            <span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@sno</span><span class="hljs-operator">=</span>Sno <span class="hljs-keyword">FROM</span> inserted<br>            <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(Grade) <span class="hljs-string">&#x27;平均分&#x27;</span> <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> SC.Sno<span class="hljs-operator">=</span><span class="hljs-variable">@sno</span><br>        <span class="hljs-keyword">end</span>;<br>GO<br><span class="hljs-comment">--测试</span><br>UPDATE STUDENT <span class="hljs-keyword">SET</span> SDEPT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CS&#x27;</span> <span class="hljs-keyword">WHERE</span> SNO<span class="hljs-operator">=</span><span class="hljs-string">&#x27;200515008&#x27;</span><span class="hljs-comment">/*只有修改sdept时，触发器才触发执行*/</span><br>UPDATE STUDENT <span class="hljs-keyword">SET</span> SAGE<span class="hljs-operator">=</span><span class="hljs-number">26</span> <span class="hljs-keyword">WHERE</span> SNO<span class="hljs-operator">=</span><span class="hljs-string">&#x27;200515008&#x27;</span><span class="hljs-comment">/*该语句只修改了学生的年龄，A1触发器并没有执行*/</span><br>if(update(sdept))总感觉在哪见过，记一下，要忘了<br><br><span class="hljs-number">15.</span>在课程表里添加一列：选课人数，设置触发器每门课如果有人选修了那么课程表里的选课人数相应修改，考虑批量插入选课记录的情况。<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> cnt_add<br><span class="hljs-keyword">on</span> sc <br><span class="hljs-keyword">for</span> <span class="hljs-keyword">insert</span><br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">begin</span><br>if @<span class="hljs-variable">@ROWCOUNT</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br>update course <span class="hljs-keyword">set</span> cnt<span class="hljs-operator">=</span>cnt<span class="hljs-operator">+</span><span class="hljs-number">1</span><br><span class="hljs-keyword">where</span> course .cno <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> cno  <span class="hljs-keyword">from</span> inserted)<br><span class="hljs-keyword">else</span> <br>update course <span class="hljs-keyword">set</span> cnt<span class="hljs-operator">=</span>cnt<span class="hljs-operator">+</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(sno) <span class="hljs-keyword">from</span> inserted <span class="hljs-keyword">where</span> course .cno <span class="hljs-operator">=</span>inserted.cno ) <br><span class="hljs-keyword">where</span> course.cno <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> cno <span class="hljs-keyword">from</span> inserted)<br><span class="hljs-keyword">end</span><br>看看没用游标版（用update...in）<br>建在sc上<br><br><span class="hljs-comment">--16.设计一触发器，约束每门课程的课容量为120。</span><br>use student<br>go<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> ex16<br><span class="hljs-keyword">on</span> sc<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">insert</span><br><span class="hljs-keyword">as</span> <br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@count</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@kecheng</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@count</span><span class="hljs-operator">=</span><span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> cno <span class="hljs-keyword">from</span> inserted)<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@kecheng</span><span class="hljs-operator">=</span>cname <span class="hljs-keyword">from</span> course <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> cno <span class="hljs-keyword">from</span> inserted)<br>if(<span class="hljs-variable">@count</span><span class="hljs-operator">&gt;</span><span class="hljs-number">120</span>)<br><span class="hljs-keyword">begin</span><br>print <span class="hljs-string">&#x27;课程&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@kecheng</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;人数已经达到课容量&#x27;</span><br><span class="hljs-keyword">rollback</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">begin</span><br>print <span class="hljs-string">&#x27;选课&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@kecheng</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;成功&#x27;</span><br><span class="hljs-keyword">end</span><br>看<span class="hljs-variable">@count</span>是如何得到的<br><br><span class="hljs-comment">--20.使用第19题的两个表设计触发器实现如果员工的工资发生变化则向工资变化表插入一条记录，包含教工编号，原工资，新工资。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TRIGGER</span> t20 <span class="hljs-keyword">ON</span> Teacher AFTER UPDATE <span class="hljs-keyword">AS</span><br>    IF(UPDATE(TSALARY))<span class="hljs-comment">-- 不应该是更新，工资发生变化有一个和原值比较的步骤</span><br>        <span class="hljs-keyword">BEGIN</span><br>            <span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@osalary</span> MONEY,<span class="hljs-variable">@nsalary</span> MONEY,<span class="hljs-variable">@tno</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>)<br>            <span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@osalary</span><span class="hljs-operator">=</span>TSALARY <span class="hljs-keyword">FROM</span> deleted<br>            <span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@nsalary</span><span class="hljs-operator">=</span>TSALARY,<span class="hljs-variable">@tno</span><span class="hljs-operator">=</span>TNO <span class="hljs-keyword">FROM</span> inserted<br><br>            <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Salary(TNO, T_old_salary, T_new_salary)<br>            <span class="hljs-keyword">VALUES</span>(<span class="hljs-variable">@tno</span>,<span class="hljs-variable">@osalary</span>,<span class="hljs-variable">@nsalary</span>)<br>        <span class="hljs-keyword">end</span>;<br>    GO<br>    <br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> tri20 <span class="hljs-keyword">on</span> teacher<br>after update<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@a</span> <span class="hljs-type">char</span>(<span class="hljs-number">9</span>), <span class="hljs-variable">@b</span> <span class="hljs-type">int</span>, <span class="hljs-variable">@c</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@a</span> <span class="hljs-operator">=</span> tno, <span class="hljs-variable">@b</span> <span class="hljs-operator">=</span> salary <span class="hljs-keyword">from</span> deleted<br><span class="hljs-keyword">select</span> <span class="hljs-variable">@c</span> <span class="hljs-operator">=</span> salary <span class="hljs-keyword">from</span> inserted<br>if (<span class="hljs-variable">@b</span><span class="hljs-operator">&lt;&gt;</span><span class="hljs-variable">@c</span>) <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> salary_change<br><span class="hljs-keyword">values</span>(<span class="hljs-variable">@a</span>, <span class="hljs-variable">@b</span>, <span class="hljs-variable">@c</span>)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h2 id="实验7"><a href="#实验7" class="headerlink" title="实验7"></a>实验7</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--4.编写一个存储过程，统计某门课程的优秀（90-100）人数、良好（80-89）人数、中等（70-79）人数、及格（60-69）人数和及格率，</span><br><span class="hljs-comment">--其输入参数是课程号，输出的是各级别人数及及格率，及格率的形式是90.25%，执行存储过程，在消息区显示1号课程的统计信息。</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> p1<br><span class="hljs-variable">@cno</span> <span class="hljs-type">char</span>(<span class="hljs-number">4</span>),<br><span class="hljs-variable">@great</span> <span class="hljs-type">int</span> output,<br><span class="hljs-variable">@good</span> <span class="hljs-type">int</span> output,<br><span class="hljs-variable">@medium</span> <span class="hljs-type">int</span> output,<br><span class="hljs-variable">@pass</span> <span class="hljs-type">int</span> output,<br><span class="hljs-variable">@passper</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) output<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@sum</span> <span class="hljs-type">float</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@great</span><span class="hljs-operator">=</span><span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span> <span class="hljs-keyword">and</span> grade <span class="hljs-keyword">between</span> <span class="hljs-number">90</span> <span class="hljs-keyword">and</span> <span class="hljs-number">100</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@good</span><span class="hljs-operator">=</span><span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span> <span class="hljs-keyword">and</span> grade <span class="hljs-keyword">between</span> <span class="hljs-number">80</span> <span class="hljs-keyword">and</span> <span class="hljs-number">89</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@medium</span><span class="hljs-operator">=</span><span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span> <span class="hljs-keyword">and</span> grade <span class="hljs-keyword">between</span> <span class="hljs-number">70</span> <span class="hljs-keyword">and</span> <span class="hljs-number">79</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@pass</span><span class="hljs-operator">=</span><span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span> <span class="hljs-keyword">and</span> grade <span class="hljs-keyword">between</span> <span class="hljs-number">60</span> <span class="hljs-keyword">and</span> <span class="hljs-number">69</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@sum</span><span class="hljs-operator">=</span><span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-keyword">from</span> sc <span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@passper</span> <span class="hljs-operator">=</span> str(<span class="hljs-built_in">cast</span>((<span class="hljs-variable">@great</span><span class="hljs-operator">+</span><span class="hljs-variable">@good</span><span class="hljs-operator">+</span><span class="hljs-variable">@medium</span><span class="hljs-operator">+</span><span class="hljs-variable">@pass</span>)<span class="hljs-operator">*</span><span class="hljs-number">100</span><span class="hljs-operator">/</span><span class="hljs-variable">@sum</span> <span class="hljs-keyword">as</span> <span class="hljs-type">numeric</span>(<span class="hljs-number">5</span>,<span class="hljs-number">2</span>)))<br><span class="hljs-comment">--select @passper=(str(cast((@great)*100.0/@sum*1.0 as ) ) +&#x27;%&#x27;)</span><br><span class="hljs-keyword">declare</span><span class="hljs-variable">@gr</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@go</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@me</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@pa</span> <span class="hljs-type">int</span>,<span class="hljs-variable">@pap</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>)<br><span class="hljs-keyword">exec</span> p1 <span class="hljs-string">&#x27;1&#x27;</span> ,<br><span class="hljs-variable">@gr</span> output,<br><span class="hljs-variable">@go</span>  output,<br><span class="hljs-variable">@me</span>  output,<br><span class="hljs-variable">@pa</span> output,<br><span class="hljs-variable">@pap</span> output<br>print <span class="hljs-string">&#x27;优秀人数&#x27;</span><span class="hljs-operator">+</span>str(<span class="hljs-variable">@gr</span>) <br>print <span class="hljs-string">&#x27;良好人数&#x27;</span><span class="hljs-operator">+</span>str(<span class="hljs-variable">@go</span>)  <br>print <span class="hljs-string">&#x27;中等人数&#x27;</span><span class="hljs-operator">+</span>str(<span class="hljs-variable">@me</span>) <br>print <span class="hljs-string">&#x27;及格人数&#x27;</span><span class="hljs-operator">+</span>str(<span class="hljs-variable">@pa</span>) <br>print <span class="hljs-string">&#x27;及格率&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@pap</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;%&#x27;</span><br><br>我的：<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> Course_percent <span class="hljs-variable">@cno</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">AS</span><br>    <span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@S</span> <span class="hljs-type">INT</span>,<span class="hljs-variable">@A</span> <span class="hljs-type">INT</span>,<span class="hljs-variable">@B</span> <span class="hljs-type">INT</span>,<span class="hljs-variable">@C</span> <span class="hljs-type">INT</span>,<span class="hljs-variable">@per</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>)<br>    <span class="hljs-keyword">SELECT</span>  <span class="hljs-variable">@S</span><span class="hljs-operator">=</span><span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> Grade <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">90</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">100</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">END</span>),<br>            <span class="hljs-variable">@A</span><span class="hljs-operator">=</span><span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> Grade <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">80</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">89</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">END</span>),<br>            <span class="hljs-variable">@B</span><span class="hljs-operator">=</span><span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> Grade <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">70</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">79</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">END</span>),<br>            <span class="hljs-variable">@C</span><span class="hljs-operator">=</span><span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> Grade <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">60</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">69</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">END</span>),<br>            <span class="hljs-variable">@per</span><span class="hljs-operator">=</span>CONCAT(<span class="hljs-built_in">CAST</span>(<span class="hljs-keyword">CONVERT</span>(<span class="hljs-type">FLOAT</span>,<span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> Grade <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">60</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">100</span> <span class="hljs-keyword">THEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">END</span>))<span class="hljs-operator">/</span><span class="hljs-keyword">CONVERT</span>(<span class="hljs-type">FLOAT</span>,<span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> Sno))<span class="hljs-operator">*</span><span class="hljs-number">100.0</span> <span class="hljs-keyword">AS</span> <span class="hljs-type">NUMERIC</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>)),<span class="hljs-string">&#x27;%&#x27;</span>)<br>    <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">JOIN</span> Course C2 <span class="hljs-keyword">on</span> C2.Cno <span class="hljs-operator">=</span> SC.Cno <span class="hljs-keyword">WHERE</span> <span class="hljs-variable">@cno</span><span class="hljs-operator">=</span>SC.Cno<br>    PRINT <span class="hljs-string">&#x27;优秀人数：&#x27;</span><span class="hljs-operator">+</span><span class="hljs-built_in">CAST</span>(<span class="hljs-variable">@S</span> <span class="hljs-keyword">AS</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>))<span class="hljs-operator">+</span><span class="hljs-string">&#x27; 良好人数：&#x27;</span><span class="hljs-operator">+</span><span class="hljs-built_in">CAST</span>(<span class="hljs-variable">@A</span> <span class="hljs-keyword">AS</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>))<span class="hljs-operator">+</span><span class="hljs-string">&#x27; 中等人数：&#x27;</span><span class="hljs-operator">+</span><span class="hljs-built_in">CAST</span>(<span class="hljs-variable">@B</span> <span class="hljs-keyword">AS</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>))<span class="hljs-operator">+</span><span class="hljs-string">&#x27; 及格人数：&#x27;</span><span class="hljs-operator">+</span><span class="hljs-built_in">CAST</span>(<span class="hljs-variable">@C</span> <span class="hljs-keyword">AS</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>))<span class="hljs-operator">+</span><span class="hljs-string">&#x27; 及格率：&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@per</span>;<br>GO<br><br><span class="hljs-comment">--7. 请设计一个存储过程实现下列功能：</span><br><span class="hljs-comment">--判断某个专业某门课程成绩排名为n的学生的成绩是否低于该门课程的平均分，如果低于平均分</span><br><span class="hljs-comment">--，则将其成绩改为平均分，否则输出学号、姓名、课程号、课程名、成绩。（提示：可以在存储过程内部使用游标）。</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> ex7 <span class="hljs-variable">@dept</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<span class="hljs-variable">@cno</span> <span class="hljs-type">char</span>(<span class="hljs-number">4</span>),<span class="hljs-variable">@n</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@avggrade</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@avggrade</span><span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(grade)<span class="hljs-keyword">from</span> sc<span class="hljs-keyword">where</span> cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span>)<br><span class="hljs-keyword">declare</span> c <span class="hljs-keyword">scroll</span> <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span><br><span class="hljs-keyword">select</span> student.sno,sname,sc.cno,cname,grade <span class="hljs-keyword">from</span> student,sc,course<br><span class="hljs-keyword">where</span> student.sno<span class="hljs-operator">=</span>sc.sno <span class="hljs-keyword">and</span> course.cno<span class="hljs-operator">=</span>sc.cno <span class="hljs-keyword">and</span> course.cno<span class="hljs-operator">=</span><span class="hljs-variable">@cno</span> <span class="hljs-keyword">and</span> student.sdept<span class="hljs-operator">=</span><span class="hljs-variable">@dept</span> <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> grade <span class="hljs-keyword">desc</span><br><span class="hljs-keyword">open</span> c<br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@sno</span> <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),<span class="hljs-variable">@sname</span> <span class="hljs-type">nchar</span>(<span class="hljs-number">6</span>),<span class="hljs-variable">@cno1</span>  <span class="hljs-type">char</span>(<span class="hljs-number">4</span>),<span class="hljs-variable">@cname</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<span class="hljs-variable">@grade</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">fetch</span> absolute <span class="hljs-variable">@n</span> <span class="hljs-keyword">from</span> c <span class="hljs-keyword">into</span> <span class="hljs-variable">@sno</span>,<span class="hljs-variable">@sname</span>,<span class="hljs-variable">@cno1</span>,<span class="hljs-variable">@cname</span>,<span class="hljs-variable">@grade</span><br>if <span class="hljs-variable">@grade</span><span class="hljs-operator">&gt;</span><span class="hljs-variable">@avggrade</span><br>print <span class="hljs-variable">@sno</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;   &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@sname</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;    &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@cno1</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;    &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@cname</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;    &#x27;</span><span class="hljs-operator">+</span><span class="hljs-built_in">cast</span>(<span class="hljs-variable">@grade</span> <span class="hljs-keyword">as</span> <span class="hljs-type">char</span>(<span class="hljs-number">4</span>))<br><span class="hljs-keyword">else</span><br>update sc<br><span class="hljs-keyword">set</span> grade<span class="hljs-operator">=</span><span class="hljs-variable">@avggrade</span><br><span class="hljs-keyword">where</span> <span class="hljs-keyword">current</span> <span class="hljs-keyword">of</span> c<br><span class="hljs-keyword">close</span> c<br><span class="hljs-keyword">deallocate</span> c<br><span class="hljs-comment">--测试</span><br><span class="hljs-keyword">exec</span>  ex7 <span class="hljs-string">&#x27;CS&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-number">3</span><br><br>完蛋，某个专业我就没看见<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span>  Student_grade_update <span class="hljs-variable">@cno</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>),<span class="hljs-variable">@rank</span> <span class="hljs-type">INT</span> <span class="hljs-keyword">AS</span><br>    <span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@avg</span> <span class="hljs-type">INT</span>,<span class="hljs-variable">@sno</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>),<span class="hljs-variable">@grade</span> <span class="hljs-type">SMALLINT</span><br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@avg</span><span class="hljs-operator">=</span><span class="hljs-built_in">AVG</span>(Grade) <span class="hljs-keyword">FROM</span> Student <span class="hljs-keyword">JOIN</span> SC S <span class="hljs-keyword">on</span> Student.Sno <span class="hljs-operator">=</span> S.Sno <span class="hljs-keyword">WHERE</span> <span class="hljs-variable">@cno</span><span class="hljs-operator">=</span>Cno<br>    <span class="hljs-keyword">DECLARE</span> csr3 <span class="hljs-keyword">SCROLL</span> <span class="hljs-keyword">CURSOR</span> <span class="hljs-keyword">FOR</span><br>        <span class="hljs-keyword">SELECT</span> Sno,Cno,Grade<br>        <span class="hljs-keyword">FROM</span> SC<br>        <span class="hljs-keyword">WHERE</span> <span class="hljs-variable">@cno</span><span class="hljs-operator">=</span>Cno<br>        <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> Grade <span class="hljs-keyword">DESC</span><br>    <span class="hljs-keyword">OPEN</span> csr3<br>    <span class="hljs-keyword">FETCH</span> ABSOLUTE <span class="hljs-variable">@rank</span> <span class="hljs-keyword">FROM</span> csr3 <span class="hljs-keyword">INTO</span> <span class="hljs-variable">@sno</span>,<span class="hljs-variable">@cno</span>,<span class="hljs-variable">@grade</span><br>    IF <span class="hljs-variable">@grade</span><span class="hljs-operator">&lt;</span><span class="hljs-variable">@avg</span><br>        <span class="hljs-keyword">BEGIN</span><br>            PRINT <span class="hljs-string">&#x27;成绩低于这门课程平均分&#x27;</span><br>            UPDATE SC <span class="hljs-keyword">SET</span> Grade<span class="hljs-operator">=</span><span class="hljs-variable">@avg</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-variable">@sno</span><span class="hljs-operator">=</span>Sno <span class="hljs-keyword">AND</span> <span class="hljs-variable">@cno</span><span class="hljs-operator">=</span>Cno<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">ELSE</span> <span class="hljs-keyword">BEGIN</span><br>            <span class="hljs-keyword">SELECT</span> S2.Sno,Sname,C.Cno,Cname,Grade<br>            <span class="hljs-keyword">FROM</span> Student <span class="hljs-keyword">JOIN</span> SC S2 <span class="hljs-keyword">on</span> Student.Sno <span class="hljs-operator">=</span> S2.Sno <span class="hljs-keyword">JOIN</span> Course C <span class="hljs-keyword">on</span> C.Cno <span class="hljs-operator">=</span> S2.Cno<br>            <span class="hljs-keyword">WHERE</span> <span class="hljs-variable">@cno</span><span class="hljs-operator">=</span>C.Cno <span class="hljs-keyword">AND</span> <span class="hljs-variable">@sno</span><span class="hljs-operator">=</span>S2.Sno<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">CLOSE</span> csr3<br>    <span class="hljs-keyword">DEALLOCATE</span> csr3<br>GO<br><br><br><span class="hljs-comment">--10.现有图书管理数据库， 其中包含如下几个表：</span><br><span class="hljs-comment">--读者表：reader(学号，姓名，性别，余额)</span><br><span class="hljs-comment">--借书表：lend（学号，书号，借书日期，应还日期，是否续借）</span><br><span class="hljs-comment">--欠款表：debt(学号，日期，欠款金额)</span><br><span class="hljs-comment">--还书表：return(学号，书号，还书日期) </span><br><span class="hljs-comment">--请设计一个存储过程实现续借或还书操作，具体要求如下：</span><br><span class="hljs-comment">--只有没有超期的书才可以续借（借书和续借时间都为30天），并修改应还日期，否则只能还书；还书时删除借书表内的借阅记录，并向还书表中插入一条还书记录，注意还书日期为当前日期，并且对超期图书，按照超期的天数计算出罚款金额（每天每本书罚款0.1元），并将罚款信息插入到欠款表中，同时将罚款从读者表的余额里扣除。</span><br>use 图书管理<span class="hljs-comment">--已建数据库</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> reader<br>(学号 <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),姓名 <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),性别 <span class="hljs-type">char</span>(<span class="hljs-number">2</span>),余额 money)<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> lend<br>(学号 <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),书号 <span class="hljs-type">char</span>(<span class="hljs-number">20</span>),借书日期 <span class="hljs-type">date</span>,应还日期 <span class="hljs-type">date</span>,是否续借 <span class="hljs-type">varchar</span>(<span class="hljs-number">6</span>))<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> debt<br>(学号 <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),日期 <span class="hljs-type">date</span>,欠款金额 money)<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> [<span class="hljs-keyword">return</span>]<br>(学号 <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),书号 <span class="hljs-type">char</span>(<span class="hljs-number">20</span>),还书日期 <span class="hljs-type">date</span>)<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> return_book <span class="hljs-variable">@sno</span> <span class="hljs-type">char</span>(<span class="hljs-number">9</span>),<span class="hljs-variable">@bno</span> <span class="hljs-type">char</span>(<span class="hljs-number">20</span>)<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@rdate</span> <span class="hljs-type">date</span>,<span class="hljs-variable">@xujie</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">6</span>),<span class="hljs-variable">@day</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">select</span> <span class="hljs-variable">@rdate</span><span class="hljs-operator">=</span>应还日期,<span class="hljs-variable">@xujie</span><span class="hljs-operator">=</span>是否续借<br><span class="hljs-keyword">from</span> lend<br><span class="hljs-keyword">where</span> 学号<span class="hljs-operator">=</span><span class="hljs-variable">@sno</span> <span class="hljs-keyword">and</span> 书号<span class="hljs-operator">=</span><span class="hljs-variable">@bno</span><br> if (<span class="hljs-variable">@xujie</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;续借&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-variable">@rdate</span><span class="hljs-operator">&gt;=</span>getdate() ) <br> update lend <span class="hljs-keyword">set</span> 应还日期<span class="hljs-operator">=</span>dateadd(<span class="hljs-keyword">day</span>,<span class="hljs-number">30</span>,应还日期)<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>       <span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> lend<br>   <span class="hljs-keyword">where</span> 学号<span class="hljs-operator">=</span><span class="hljs-variable">@sno</span> <span class="hljs-keyword">and</span> 书号<span class="hljs-operator">=</span><span class="hljs-variable">@bno</span><br>   <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> [<span class="hljs-keyword">return</span>] <span class="hljs-keyword">values</span> (<span class="hljs-variable">@sno</span>,<span class="hljs-variable">@bno</span>,getdate())<br>   <span class="hljs-keyword">end</span><br>if(<span class="hljs-variable">@rdate</span><span class="hljs-operator">&lt;</span>getdate())<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">set</span> <span class="hljs-variable">@day</span><span class="hljs-operator">=</span>datediff(<span class="hljs-keyword">day</span>,<span class="hljs-variable">@rdate</span>,getdate())<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> debt <span class="hljs-keyword">values</span>(<span class="hljs-variable">@sno</span>,getdate(),<span class="hljs-variable">@day</span><span class="hljs-operator">*</span><span class="hljs-number">0.1</span>)<br>update reader <span class="hljs-keyword">set</span> 余额<span class="hljs-operator">=</span>余额<span class="hljs-operator">-</span><span class="hljs-variable">@day</span><span class="hljs-operator">*</span><span class="hljs-number">0.1</span><br><span class="hljs-keyword">where</span> 学号<span class="hljs-operator">=</span><span class="hljs-variable">@sno</span> <br><span class="hljs-keyword">end</span><br><span class="hljs-comment">--测试</span><br><span class="hljs-keyword">exec</span> return_book <span class="hljs-string">&#x27;201900801&#x27;</span>,<span class="hljs-string">&#x27;12345678&#x27;</span><br><span class="hljs-keyword">exec</span> return_book <span class="hljs-string">&#x27;201900801&#x27;</span>,<span class="hljs-string">&#x27;112345678&#x27;</span><br><span class="hljs-keyword">exec</span> return_book <span class="hljs-string">&#x27;201900802&#x27;</span>,<span class="hljs-string">&#x27;12345678&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实验1&quot;&gt;&lt;a href=&quot;#实验1&quot; class=&quot;headerlink&quot; title=&quot;实验1&quot;&gt;&lt;/a&gt;实验1&lt;/h2&gt;&lt;h2 id=&quot;实验2&quot;&gt;&lt;a href=&quot;#实验2&quot; class=&quot;headerlink&quot; title=&quot;实验2&quot;&gt;&lt;/a&gt;实验2&lt;/h</summary>
      
    
    
    
    
    <category term="sql" scheme="https://github.com/sterne012/sterne012.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>数据库复习</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2021/12/18/sqlReview/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2021/12/18/sqlReview/</id>
    <published>2021-12-18T07:50:45.000Z</published>
    <updated>2022-05-13T09:00:18.089Z</updated>
    
    <content type="html"><![CDATA[<p>往往，最不详细的地方，可能更要考。  </p><h1 id="Chapter1-绪论"><a href="#Chapter1-绪论" class="headerlink" title="Chapter1.绪论"></a>Chapter1.绪论</h1><h2 id="1-1数据库系统概述"><a href="#1-1数据库系统概述" class="headerlink" title="1.1数据库系统概述"></a>1.1数据库系统概述</h2><h3 id="1-1-1概念"><a href="#1-1-1概念" class="headerlink" title="1.1.1概念"></a>1.1.1概念</h3><p>数据：是数据库中存储的基本对象</p><p>数据库：长期存储在计算机内、有组织的、可共享的大量数据的集合</p><p>数据库管理系统（DBMS）：主要功能：数据定义功能；数据组织、存储和管理；数据操纵功能；数据库的事务管理和运行管理；数据库的建立和维护功能；其他功能</p><h3 id="1-1-2历史"><a href="#1-1-2历史" class="headerlink" title="1.1.2历史"></a>1.1.2历史</h3><p>jump↑jump↓jump↑jump↓jump↑jump↓</p><p>人工管理-&gt;文件系统-&gt;数据库系统</p><h3 id="1-1-3数据库系统的特点"><a href="#1-1-3数据库系统的特点" class="headerlink" title="1.1.3数据库系统的特点"></a>1.1.3数据库系统的特点</h3><p>数据结构化：整体数据结构化，面向全组织，数据用数据模型描述，可以边长，最小存取单位是数据项</p><p>数据的共享性高、冗余度低、易扩充</p><p><strong>数据独立性高：</strong>物理独立性、逻辑独立性</p><ul><li><p>​    物理独立性：内模式，数据的物理存储改变，应用程序不用改变</p></li><li><p>​    逻辑独立性：外模式，数据的逻辑结构改变，用户程序不用改变</p></li></ul><p>数据由DBMS统一管理和控制：安全性保护、完整性检查、并发控制、数据库恢复</p><h2 id="1-2数据模型"><a href="#1-2数据模型" class="headerlink" title="1.2数据模型"></a>1.2数据模型</h2><p>数据模型是严格定义的一组概念的集合（说了跟没说）</p><p>用数据模型来抽象、表示和处理现实世界中的数据和信息</p><h3 id="1-2-1两大数据模型"><a href="#1-2-1两大数据模型" class="headerlink" title="1.2.1两大数据模型"></a>1.2.1两大数据模型</h3><ol><li>概念模型：也叫信息模型，按用户的观点对数据和信息建模</li><li>逻辑模型&amp;物理模型：按计算机观点<ul><li>逻辑模型：网状模型、层次模型、关系模型、面向对象模型等，按计算机系统的观点对数据建模，用DBMS实现</li><li>物理模型是对数据最底层的抽象，描述数据在系统内部的表示和存取方法。</li></ul></li></ol><p>抽象过程：现实世界中客观对象-&gt;概念模型-&gt;DBMS支持的数据模型</p><h3 id="1-2-2概念模型"><a href="#1-2-2概念模型" class="headerlink" title="1.2.2概念模型"></a>1.2.2概念模型</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ol><li><p>实体：客观存在并可相互区别的事物，可以是人、事、物或抽象概念</p></li><li><p>属性：实体所具有的某一特性</p></li><li><p>码：唯一标识实体的属性集</p></li><li><p>域：某一属性的取值范围</p></li><li><p>实体型：用实体名及属性名集合来抽象和刻画同类实体的模型？</p></li><li><p>实体集：同一类型实体的集合</p></li><li><p>联系：现实世界中事物内部及事物之间的联系在信息世界中反映为实体内部和实体之间的联系</p><p>实体内部：指组成实体的各属性之间的联系</p><p>实体之间：不同实体集之间的联系</p></li></ol><h4 id="两个实体型之间的联系"><a href="#两个实体型之间的联系" class="headerlink" title="两个实体型之间的联系"></a>两个实体型之间的联系</h4><p>一对一，一对多，多对多</p><h4 id="实体-联系方法（E-R图）"><a href="#实体-联系方法（E-R图）" class="headerlink" title="实体-联系方法（E-R图）"></a>实体-联系方法（E-R图）</h4><p>咋整啊，一个大题，找点题做</p><p>实体型：矩形</p><p>属性：实体的属性/联系的属性，用椭圆形，并且和相应实体连接</p><p>联系：菱形，与实体相连，并在边上标注联系的类型（1:1 1:n m:n 同一个节点上的编号不要重复)</p><h3 id="1-2-3数据模型的组成要素"><a href="#1-2-3数据模型的组成要素" class="headerlink" title="1.2.3数据模型的组成要素"></a>1.2.3数据模型的组成要素</h3><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>描述数据库的组成对象，以及对象之间的联系</p><p>是对系统静态特性的描述</p><h4 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h4><p>对各种对象的实例允许执行的操作和操作规则（突然java？），对系统动态特性的描述</p><p>主要是查询、更新</p><h4 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h4><p>给定数据模型中数据及联系所具有的制约和存储规则</p><p>用于限定数据库状态和数据库状态的变化，保证数据正确、有效、相容</p><h3 id="1-2-4常用数据模型"><a href="#1-2-4常用数据模型" class="headerlink" title="1.2.4常用数据模型"></a>1.2.4常用数据模型</h3><p>jump↑jump↓jump↑jump↓jump↑jump↓</p><h3 id="1-2-5关系模型"><a href="#1-2-5关系模型" class="headerlink" title="1.2.5关系模型"></a>1.2.5关系模型</h3><p>关系：对应一张表</p><p>元组：一行</p><p>属性：一列即一个属性，属性的名称就是属性名</p><p>主码：可以唯一确定一个元组的属性集</p><p>域：属性的取值范围</p><p>分量：元组中的一个属性值</p><p>关系模式：对关系的描述 Student(sno,sname,ssex,sdept,sage…)</p><h4 id="※关系的完整性约束"><a href="#※关系的完整性约束" class="headerlink" title="※关系的完整性约束"></a>※关系的完整性约束</h4><h5 id="实体完整性"><a href="#实体完整性" class="headerlink" title="实体完整性"></a>实体完整性</h5><h5 id="参照完整性"><a href="#参照完整性" class="headerlink" title="参照完整性"></a>参照完整性</h5><h5 id="用户定义的完整性"><a href="#用户定义的完整性" class="headerlink" title="用户定义的完整性"></a>用户定义的完整性</h5><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p>优点：建立在严格的数学概念基础上；概念单一；存取路径对用户透明</p><p>缺点：查询效率不如非关系数据模型；对用户请求进行优化提高了DBMS开发难度</p><h4 id="E-R模型到关系模型转化"><a href="#E-R模型到关系模型转化" class="headerlink" title="E-R模型到关系模型转化"></a>E-R模型到关系模型转化</h4><table><thead><tr><th>E-R模型</th><th>关系模型</th></tr></thead><tbody><tr><td>实体 属性 码</td><td>关系 属性 码</td></tr><tr><td>联系 1:1</td><td>转换为独立的关系模式，或与任意一端关系模式合并</td></tr><tr><td>1：n</td><td>转换为独立的关系模式，或与n端关系模式合并</td></tr><tr><td>m：n</td><td>转换为一个关系模式</td></tr></tbody></table><h2 id="1-3数据库系统结构"><a href="#1-3数据库系统结构" class="headerlink" title="1.3数据库系统结构"></a>1.3数据库系统结构</h2><h3 id="1-3-1数据库系统模式的概念"><a href="#1-3-1数据库系统模式的概念" class="headerlink" title="1.3.1数据库系统模式的概念"></a>1.3.1数据库系统模式的概念</h3><p>型type：对值的抽象类型</p><p>值value：型的具体值</p><p>模式schema：型的描述</p><p>实例instance：模式的具体值</p><h3 id="1-3-2数据库三级模式结构"><a href="#1-3-2数据库三级模式结构" class="headerlink" title="1.3.2数据库三级模式结构"></a>1.3.2数据库三级模式结构</h3><img src="/2021/12/18/sqlReview/AA8C70DC2A3A31D2117B6C2F9ADCFF22.png" class="" title="img"><h4 id="内模式（存储模式）"><a href="#内模式（存储模式）" class="headerlink" title="内模式（存储模式）"></a>内模式（存储模式）</h4><p>数据物理结构和存储方式的描述，在数据库内部的表示方式</p><p><strong>一个数据库只有一个内模式</strong></p><p>存储方式（顺序？B树？hash？）</p><p>索引</p><p>压缩存储</p><p>加密</p><p>存储记录结构的规定</p><h4 id="模式（逻辑模式）"><a href="#模式（逻辑模式）" class="headerlink" title="模式（逻辑模式）"></a>模式（逻辑模式）</h4><p>内模式和外模式的中间层，<strong>一个数据库只有一个模式</strong></p><p>数据库中<strong>全体</strong>数据的逻辑结构和特征的描述</p><p>所有用户的公共数据视图，综合所有用户需求</p><p>模式的定义：</p><ul><li>数据的逻辑结构（数据项名字、类型、取值范围）</li><li>数据之间的关系</li><li>数据有关的安全性、完整性要求</li></ul><p><strong>是数据库的中心与关键，独立于数据库其他层次，应该首先设计模式</strong></p><h4 id="外模式（子模式或用户模式）"><a href="#外模式（子模式或用户模式）" class="headerlink" title="外模式（子模式或用户模式）"></a>外模式（子模式或用户模式）</h4><p>用户使用的<strong>局部</strong>逻辑结构和特征的描述</p><p>模式-外模式：一对多</p><p><strong>一个数据库可以有多个外模式</strong>，反映不同用户的应用需求，看待数据的方式、保密需求</p><p>外模式-应用：一对多</p><p>同一外模式也可为某一用户的多个应用系统使用</p><p>用途：安全性；用户只能看见部分数据，保密性</p><h3 id="1-3-3数据库二级映像功能与数据独立性"><a href="#1-3-3数据库二级映像功能与数据独立性" class="headerlink" title="1.3.3数据库二级映像功能与数据独立性"></a>1.3.3数据库二级映像功能与数据独立性</h3><p>二级映像在DBMS内部实现三个抽象层次（模式）的联系和转换</p><h4 id="外模式-模式映像"><a href="#外模式-模式映像" class="headerlink" title="外模式/模式映像"></a>外模式/模式映像</h4><p>定义外模式与模式间的对应关系，</p><p>映像定义通常包含在各自外模式的描述中？</p><p>保证数据逻辑独立性：模式改变时，修改映像，使外模式不变；从而应用程序不必修改</p><h4 id="模式-内模式映像"><a href="#模式-内模式映像" class="headerlink" title="模式/内模式映像"></a>模式/内模式映像</h4><p>定义数据全局逻辑结构与存储结构之间的对应关系</p><p>模式/内模式映像唯一（模式和内模式都唯一了显然）</p><p>映像定义通常包含在模式描述中</p><p>保证数据物理独立性：存储结构改变，修改映像，使模式不变；从而外模式、应用程序不必修改</p><h2 id="1-4数据库系统组成"><a href="#1-4数据库系统组成" class="headerlink" title="1.4数据库系统组成"></a>1.4数据库系统组成</h2><h3 id="硬件平台及数据库"><a href="#硬件平台及数据库" class="headerlink" title="硬件平台及数据库"></a>硬件平台及数据库</h3><p>足够大的内外存，较高的通道能力，提高数据传送率</p><h3 id="软件：DBMS"><a href="#软件：DBMS" class="headerlink" title="软件：DBMS"></a>软件：DBMS</h3><h3 id="人员"><a href="#人员" class="headerlink" title="人员"></a>人员</h3><img src="/2021/12/18/sqlReview/0C46E2209A9A5AB1BF0B487973EF0C90.png" class="" title="img"><h4 id="数据库管理员"><a href="#数据库管理员" class="headerlink" title="数据库管理员"></a>数据库管理员</h4><p>决定数据库中信息内容和结构</p><p>存储结构和存取策略</p><p>安全性要求和完整性约束条件</p><p>监控数据库的使用和运行</p><p>数据库的改进和重组</p><h4 id="系统分析员和数据库设计人员"><a href="#系统分析员和数据库设计人员" class="headerlink" title="系统分析员和数据库设计人员"></a>系统分析员和数据库设计人员</h4><p>系统分析员：与用户协商，数据库系统概要设计</p><p>设计人员：用户需求调查和系统分析，确定数据库中的数据，设计各级模式</p><h4 id="应用程序员"><a href="#应用程序员" class="headerlink" title="应用程序员"></a>应用程序员</h4><p>设计和编写应用系统的程序模块</p><p>进行调试和安装</p><h4 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h4><p>偶然用户：不经常访问，但每次访问往往需要不同的数据库信息，中高级管理人员</p><p>简单用户：查询和更新数据库，职员</p><p>复杂用户：直接使用数据库语言访问数据库，工程师，科学家</p><h1 id="Chapter2-关系数据库"><a href="#Chapter2-关系数据库" class="headerlink" title="Chapter2.关系数据库"></a>Chapter2.关系数据库</h1><h2 id="2-1关系模型概述"><a href="#2-1关系模型概述" class="headerlink" title="2.1关系模型概述"></a>2.1关系模型概述</h2><p>域：一组具有相同数据类型的值的集合 D={1,2,3}</p><p>基数：域中数据个数</p><p>笛卡尔积：就笛卡尔积</p><p>元组：笛卡尔积中每一个元素(d1,d2,d3,…,dn)</p><p>分量：di叫分量</p><p>基数：各集合基数相乘</p><p>关系：从笛卡尔积构造出的表中选取有实际意义的元组构造关系</p><p>D1*D2*…*Dn的子集叫做在域D1，D2，…，Dn上的关系，表示为R(D1，D2，…，Dn)</p><p><strong>候选码：关系中的某一属性组能唯一识别一个元组</strong></p><p><strong>主码：若某个关系有多个候选码，选定其中一个作主码</strong></p><p><strong>主属性：候选码的所有属性</strong></p><p><strong>非码属性：不包含在任何候选码中的属性</strong></p><p><strong>全码：关系模式的所有属性组是这个关系的候选码</strong></p><p>关系模式：关系的型</p><p>关系：很多条内容，关系模式和关系又统称为关系</p><h2 id="2-2关系操作"><a href="#2-2关系操作" class="headerlink" title="2.2关系操作"></a>2.2关系操作</h2><p>查询：选择、投影、连接、除、并、交、差、笛卡尔积</p><p>数据更新：插入、删除、修改</p><p><strong>5种基本操作：选择、投影、并、差、笛卡尔积</strong></p><p>能够用来表达其他的运算</p><h2 id="2-3关系的完整性"><a href="#2-3关系的完整性" class="headerlink" title="2.3关系的完整性"></a>2.3关系的完整性</h2><p>关系的完整性约束：实体完整性，参照完整性，用户定义的完整性</p><p><strong>实体完整性和参照完整性又叫关系的两个不变性</strong>，用户定义的完整性体现具体领域中的语义约束</p><h3 id="实体完整性-1"><a href="#实体完整性-1" class="headerlink" title="实体完整性"></a>实体完整性</h3><p><strong>若属性A是关系R的主属性，则属性A不能取空值</strong></p><h3 id="参照完整性-1"><a href="#参照完整性-1" class="headerlink" title="参照完整性"></a>参照完整性</h3><p>1.关系间的引用：引用关系或其他关系的某个属性</p><p>2.外码：F是R的一个或一组属性，但不是R的码，如果F与基本关系S的主码K相对应，则称F是基本关系R的外码</p><p>R称为参照关系，S为被参照关系</p><p>所以F必是原来关系中的一个主码</p><p><strong>参照完整性：外码F或者取空值（若F是一组属性，F的每个属性值都为空值），或者等于S中某个元组的主码值</strong></p><h3 id="用户定义的完整性-1"><a href="#用户定义的完整性-1" class="headerlink" title="用户定义的完整性"></a>用户定义的完整性</h3><p>针对某一具体关系数据库的约束条件，反映某一具体应用所涉及的数据必须满足的语义要求。</p><p>关系模型提供定义和检验这类完整性的机制</p><p>例如：性别只能输入男或女</p><h2 id="2-4关系代数"><a href="#2-4关系代数" class="headerlink" title="2.4关系代数"></a>2.4关系代数</h2><p>一种抽象查询语言</p><p>看ppt</p><p>运算符：</p><p>集合运算符（并、差、交、笛卡尔积）</p><p>专门的关系运算符（选择、投影、连接、除）</p><p>算数运算符（加减乘除，比较大小）</p><p>逻辑运算符（与或非）</p><p>元组的连接</p><p>象集<br>$$<br>选择：\sigma_{Sage&lt;20}(Student) \<br>投影：\pi_{Sname,Sdept}(Student)\<br>(关系的)连接：R\Join_{R.a=S.a} S\<br>除：R\div S<br>$$<br>自然连接：连有一个属性列相等的</p><p>连接还有左外连接、右外连接、全外连接（左+右），外连接其他属性上填NULL</p><p>关系代数不能表达：最大最小值，排序，模糊查询</p><p>没了！</p><h1 id="Chapter3-5-8-SQL各种操作"><a href="#Chapter3-5-8-SQL各种操作" class="headerlink" title="Chapter3.5.8 SQL各种操作"></a>Chapter3.5.8 SQL各种操作</h1><p>3-关系数据库标准语言SQL</p><p>5-数据库完整性</p><p>T-sql编程</p><p>8-数据库编程</p><p>见另一篇</p><h1 id="Chapter4-数据库安全性"><a href="#Chapter4-数据库安全性" class="headerlink" title="Chapter4.数据库安全性"></a>Chapter4.数据库安全性</h1><p>概念部分还是再写一下</p><h2 id="4-1数据库安全性概述"><a href="#4-1数据库安全性概述" class="headerlink" title="4.1数据库安全性概述"></a>4.1数据库安全性概述</h2><h3 id="4-1-1数据库的不安全因素"><a href="#4-1-1数据库的不安全因素" class="headerlink" title="4.1.1数据库的不安全因素"></a>4.1.1数据库的不安全因素</h3><ol><li><p>非授权用户对数据库的恶意存取和破坏</p><p>安全机制：用户身份鉴别、存取控制、视图</p></li><li><p>数据库中重要或敏感的数据被泄露</p><p>安全机制：强制存取控制、数据加密存储和加密传输、审计日志分析</p></li><li><p>安全环境的脆弱性：与计算机系统的安全性紧密联系</p><p>安全机制：建立一套可信计算机系统的概念和标准</p></li></ol><h4 id="计算机系统安全性问题"><a href="#计算机系统安全性问题" class="headerlink" title="计算机系统安全性问题"></a>计算机系统安全性问题</h4><p>技术安全类：系统采用具有一定安全性的硬件、软件来实现对计算机系统及其所存数据的安全保护，当系统受到供给时仍能保证系统正常运行，保证数据不增加、不丢失、不泄露。</p><p>管理安全类：管理不善导致的计算机设备和数据介质的物理破坏、丢失等软硬件意外故障、场地的意外事故等安全问题</p><p>政策法律类：政府部门建立的有关计算机犯罪、数据安全保密的法律道德准则和政策法规、法令</p><h3 id="4-1-2安全标准简介"><a href="#4-1-2安全标准简介" class="headerlink" title="4.1.2安全标准简介"></a>4.1.2安全标准简介</h3><h4 id="TCESC-TDI：安全策略、责任、保证、文档"><a href="#TCESC-TDI：安全策略、责任、保证、文档" class="headerlink" title="TCESC/TDI：安全策略、责任、保证、文档"></a>TCESC/TDI：安全策略、责任、保证、文档</h4><p>四组七个等级，A表示可靠性最高，各安全级别 偏序向下兼容</p><h5 id="D"><a href="#D" class="headerlink" title="D"></a>D</h5><p>一切不符合更高标准的系统</p><p>DOS</p><h5 id="C-C1-C2"><a href="#C-C1-C2" class="headerlink" title="C(C1,C2)"></a>C(C1,C2)</h5><p>C1：初级的安全保护；能够实现对用户和数据的分离，进行自主存取控制（DAC）(?)，保护或限制用户权限的传播</p><p>C2：安全产品的最低档次；提供受控的存取保护，DAC细化，以个人身份注册负责，实施审计和资源隔离</p><p>win2000 oracle7</p><h5 id="B-B1-B2-B3"><a href="#B-B1-B2-B3" class="headerlink" title="B(B1,B2,B3)"></a>B(B1,B2,B3)</h5><p>B1：标记安全保护；安全和可信的产品；对系统的数据加标记，对标记的主体和客体试试强制存取控制（MAC，用户需要与标记的数据标签对等才能使用数据）、审计等安全机制</p><p>Trusted Oracle 7、sql server 11.0.6</p><p>B2：结构化保护；建立形式化的安全策略模型并对系统内的所有主体和客体实施DAC&amp;MAC</p><p>B3：安全域；TCB满足访问监控器的要求，审计跟踪能力更强，提供系统恢复功能</p><h5 id="A-A1"><a href="#A-A1" class="headerlink" title="A(A1)"></a>A(A1)</h5><p>A1：验证设计；提供B3的同时给出系统的形式化设计说明和验证以确信各安全保护真正实现；理论阶段</p><h4 id="CC"><a href="#CC" class="headerlink" title="CC"></a>CC</h4><p>提出国标公认的表述信息技术安全性的结构</p><p>把信息产品的安全要求分为：安全功能要求、安全保证要求</p><h2 id="4-2数据库安全性控制"><a href="#4-2数据库安全性控制" class="headerlink" title="4.2数据库安全性控制"></a>4.2数据库安全性控制</h2><h3 id="非法使用数据库的情况"><a href="#非法使用数据库的情况" class="headerlink" title="非法使用数据库的情况"></a>非法使用数据库的情况</h3><ol><li>编写合法程序绕过DBMS及其授权机制</li><li>直接或编写应用程序执行非授权操作</li><li>通过多次合法查询数据库从中推导出一些保密数据</li></ol><h3 id="安全性控制的常用方法（举例）"><a href="#安全性控制的常用方法（举例）" class="headerlink" title="安全性控制的常用方法（举例）"></a>安全性控制的常用方法（举例）</h3><ol><li>用户标识与鉴别</li><li>存取控制</li><li>视图</li><li>审计</li><li>加密（存储加密、传输加密）</li></ol><h3 id="4-2-1用户标识与鉴别"><a href="#4-2-1用户标识与鉴别" class="headerlink" title="4.2.1用户标识与鉴别"></a>4.2.1用户标识与鉴别</h3><p>用户身份鉴别：系统提供最外层安全保护措施；用户标识由用户名和用户标识号组成（用户标识号在系统整个声明周期唯一）</p><h4 id="静态口令鉴别"><a href="#静态口令鉴别" class="headerlink" title="静态口令鉴别"></a>静态口令鉴别</h4><p>一般由用户自己设定静态口令（密码）</p><h4 id="动态口令鉴别"><a href="#动态口令鉴别" class="headerlink" title="动态口令鉴别"></a>动态口令鉴别</h4><p>每次产生新的动态口令，一次一密（短信验证码）</p><h4 id="生物特征鉴别"><a href="#生物特征鉴别" class="headerlink" title="生物特征鉴别"></a>生物特征鉴别</h4><p>通过生物特征认证（指纹、虹膜）</p><h4 id="智能卡鉴别"><a href="#智能卡鉴别" class="headerlink" title="智能卡鉴别"></a>智能卡鉴别</h4><p>智能卡是一种不可复制的硬件，内置集成电路芯片，硬件加密功能</p><h3 id="4-2-2存取控制"><a href="#4-2-2存取控制" class="headerlink" title="4.2.2存取控制"></a>4.2.2存取控制</h3><h4 id="存取控制子系统"><a href="#存取控制子系统" class="headerlink" title="存取控制子系统"></a>存取控制子系统</h4><h5 id="用户权限定义"><a href="#用户权限定义" class="headerlink" title="用户权限定义"></a>用户权限定义</h5><p>用户对某一数据对象的操作权利称为权限</p><p>DBMS定义的用户权限存放在数据字典中，定义规则称为安全规则或授权规则</p><h5 id="合法权限检查"><a href="#合法权限检查" class="headerlink" title="合法权限检查"></a>合法权限检查</h5><p>用户发出存取数据库操作请求</p><p>DBMS查找数据字典，进行合法权限检查</p><h4 id="常用存取控制方法"><a href="#常用存取控制方法" class="headerlink" title="常用存取控制方法"></a>常用存取控制方法</h4><p>4.2.3&amp;4.2.6</p><h3 id="4-2-3自主存取控制方法"><a href="#4-2-3自主存取控制方法" class="headerlink" title="4.2.3自主存取控制方法"></a>4.2.3自主存取控制方法</h3><p>DAC</p><ol><li>用户对不同的数据对象有不同存取权限</li><li>不同用户对同一对象也有不同权限</li><li>用户还可将其拥有的存取权限转授给其他用户</li></ol><p>GRANT/REVOKE语句</p><p>用户权限组成：数据库对象；操作类型</p><p>定义用户存取权限：定义用户可以在哪些数据库对象上进行哪些类型的操作（？</p><p>↑这个词（定义用户存取权限）叫做授权</p><p>缺点：仅仅通过对数据的存取权限进行安全控制，数据本身并无安全标记，收权后，数据可能还存在于原用户中</p><h3 id="4-2-4授权与回收"><a href="#4-2-4授权与回收" class="headerlink" title="4.2.4授权与回收"></a>4.2.4授权与回收</h3><p>sql语句见另一篇</p><p>循环授权：A-&gt;B-&gt;C-(x)&gt;A</p><h3 id="4-2-5数据库角色"><a href="#4-2-5数据库角色" class="headerlink" title="4.2.5数据库角色"></a>4.2.5数据库角色</h3><p>被命名的一组与数据库操作相关的权限，角色是权限的集合，可以为一组具有相同权限的用户创建一个角色，以简化为每个用户授权的过程</p><p>角色的sql语句</p><h3 id="4-2-6强制存取控制方法"><a href="#4-2-6强制存取控制方法" class="headerlink" title="4.2.6强制存取控制方法"></a>4.2.6强制存取控制方法</h3><ol><li>B1级</li><li>每一个数据对象被标以一定的密级</li><li>每一个用户被授予某一个级别的许可证</li><li>对于任意一个对象，只有具有合法许可证的用户才可以存取</li></ol><p>主体：系统中的活动实体（DBMS所管理的实际用户，代表用户的各进程）</p><p>客体：系统中被动实体，受主体操作的（文件、基表、索引、视图）</p><p>敏感度标记：对于主体和客体，DBMS为每个实例指派一个敏感度标记</p><p>敏感度标记级别：绝密TS、机密S、可信C、公开P</p><p>主体的敏感度标记称为<strong>许可证级别</strong></p><p>客体的敏感度标记称为<strong>密级</strong></p><h4 id="强制存取控制规则"><a href="#强制存取控制规则" class="headerlink" title="强制存取控制规则"></a>强制存取控制规则</h4><ol><li>仅当主体许可证级别大于或等于客体密级时，该主体可以读相应客体（不能写）</li><li>仅当主体许可证级别小于或等于客体密级时，该主题可以写相应客体（不能读）</li></ol><p>禁止了拥有高许可证级别的主题更新低密级的数据对象</p><p>举个例子，高考试卷（客体）我（主体，密级低于高考试卷）阅卷人（主体，密级高于高考试卷）</p><p>我可以写，不能读答案（这个地方感觉不够严谨）；阅卷人可以读，但不能写试卷</p><p>强制存取控制是对数据本身进行密级标记，<strong>标记和数据是不可分的整体</strong></p><p>实现MAC首先要实现DAC（高级的向下兼容）</p><h2 id="4-3视图机制"><a href="#4-3视图机制" class="headerlink" title="4.3视图机制"></a>4.3视图机制</h2><p>吧保密的数据对无权存取这些数据的用户隐藏起来，对数据提供一定的安全保护；提供数据独立性</p><p>剩下的都交给sql语句</p><h2 id="4-4审计"><a href="#4-4审计" class="headerlink" title="4.4审计"></a>4.4审计</h2><p>审计日志：将用户对数据库的所有操作自动记录下来存入其中</p><p>管理员用日志找出非法存取数据的人、时间和内容；对潜在的威胁提前采取措施加以防范</p><p>C2以上必须具有审计机制</p><h3 id="审计功能的可选性"><a href="#审计功能的可选性" class="headerlink" title="审计功能的可选性"></a>审计功能的可选性</h3><p>审计费时间空间，可以根据应用对安全性的要求，灵活地打开或关闭审计功能</p><h3 id="审计事件"><a href="#审计事件" class="headerlink" title="审计事件"></a>审计事件</h3><h4 id="服务器事件"><a href="#服务器事件" class="headerlink" title="服务器事件"></a>服务器事件</h4><p>审计数据库服务器发生的事件</p><h4 id="系统权限"><a href="#系统权限" class="headerlink" title="系统权限"></a>系统权限</h4><p>对系统拥有的结构或模式对象进行操作的审计</p><p>要求该操作的权限是通过系统权限获得的</p><h4 id="语句事件"><a href="#语句事件" class="headerlink" title="语句事件"></a>语句事件</h4><p>SQL语句的审计（DDL DML DQL DCL）</p><h4 id="模式对象事件"><a href="#模式对象事件" class="headerlink" title="模式对象事件"></a>模式对象事件</h4><p>对特定模式对象（?）上进行的SELECT或DML操作的审计</p><h3 id="审计功能"><a href="#审计功能" class="headerlink" title="审计功能"></a>审计功能</h3><p>不是很懂诶</p><img src="/2021/12/18/sqlReview/739EE19E97F381466E58E432FC2AA67D.png" class="" title="img"><h3 id="审计分类"><a href="#审计分类" class="headerlink" title="审计分类"></a>审计分类</h3><h4 id="用户级审计"><a href="#用户级审计" class="headerlink" title="用户级审计"></a>用户级审计</h4><p>针对自己创建的数据库表视图进行审计</p><p>记录所有用户的一切成功和不成功访问要求以及各种类型的SQL操作</p><h4 id="系统级审计"><a href="#系统级审计" class="headerlink" title="系统级审计"></a>系统级审计</h4><p>DBA设置(DATABASE ADMIN)</p><p>检测成功或失败的登录请求</p><p>检测GRANT和REVOKE以及其他数据库级权限下的操作</p><p>AUDIT：设置审计</p><p>NOAUDIT：取消审计</p><p>what怎么感觉从来没见过</p><h2 id="4-5数据加密"><a href="#4-5数据加密" class="headerlink" title="4.5数据加密"></a>4.5数据加密</h2><p>防止数据库中数据在存储和传输中失密</p><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>根据一定算法将原始数据（明文）变为不可直接识别的格式（密文）</p><h3 id="加密方法"><a href="#加密方法" class="headerlink" title="加密方法"></a>加密方法</h3><h4 id="存储加密"><a href="#存储加密" class="headerlink" title="存储加密"></a>存储加密</h4><h5 id="透明存储加密（内核级加密）"><a href="#透明存储加密（内核级加密）" class="headerlink" title="透明存储加密（内核级加密）"></a>透明存储加密（内核级加密）</h5><p>将数据写到磁盘时对数据进行加密，授权用户读取时解密</p><p>性能较好，安全完备性较高</p><h5 id="非透明存储加密"><a href="#非透明存储加密" class="headerlink" title="非透明存储加密"></a>非透明存储加密</h5><p>通过多个加密函数实现</p><h4 id="传输加密（计算机网络）"><a href="#传输加密（计算机网络）" class="headerlink" title="传输加密（计算机网络）"></a>传输加密（计算机网络）</h4><h5 id="链路加密"><a href="#链路加密" class="headerlink" title="链路加密"></a>链路加密</h5><p>在链路层进行加密，传输信息由报头和报文两部分组成，报头报问均加密</p><h5 id="端到端加密"><a href="#端到端加密" class="headerlink" title="端到端加密"></a>端到端加密</h5><p>发送端加密，接收端解密</p><h2 id="4-6其他安全性保护"><a href="#4-6其他安全性保护" class="headerlink" title="4.6其他安全性保护"></a>4.6其他安全性保护</h2><h3 id="推理控制"><a href="#推理控制" class="headerlink" title="推理控制"></a>推理控制</h3><p>处理强制存取控制未解决的问题，避免用户通过多次合法查询数据库从中推导出一些保密数据（非法使用数据库3）</p><p>常用方法：基于函数依赖的推理控制；基于敏感关联的推理控制</p><h3 id="隐蔽信道"><a href="#隐蔽信道" class="headerlink" title="隐蔽信道"></a>隐蔽信道</h3><h3 id="数据隐私保护"><a href="#数据隐私保护" class="headerlink" title="数据隐私保护"></a>数据隐私保护</h3><p>个人控制隐私信息的能力，范围设计数据收集、存储、处理、发布等</p><h2 id="4-7sql-server的安全管理"><a href="#4-7sql-server的安全管理" class="headerlink" title="4.7sql server的安全管理"></a>4.7sql server的安全管理</h2><p>另一篇</p><h1 id="Chapter7-数据库设计"><a href="#Chapter7-数据库设计" class="headerlink" title="Chapter7.数据库设计"></a>Chapter7.数据库设计</h1><p>数据库设计的基本步骤：7.2-7.6标题</p><p>不想敲了</p><p>数据库设计的特点：三分技术，七分管理，十二分基础数据</p><p>数据库设计基本步骤：</p><ol><li>需求分析</li><li>概念结构设计</li><li>逻辑结构设计</li><li>物理结构设计</li><li>数据库实施</li><li>数据库运行和维护</li></ol><h2 id="7-1数据库设计概述"><a href="#7-1数据库设计概述" class="headerlink" title="7.1数据库设计概述"></a>7.1数据库设计概述</h2><h2 id="7-2需求分析"><a href="#7-2需求分析" class="headerlink" title="7.2需求分析"></a>7.2需求分析</h2><p>分析用户活动，产生业务流程图</p><p>确定系统范围，产生业务范围图</p><p>分析用户活动及所设计的数据，产生<strong>数据流图</strong></p><p>分析系统数据，产生<strong>数据字典</strong></p><p>分析方法：自顶向下的结构化分析方法</p><h3 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h3><p>是各类数据描述的集合，不是数据本身</p><p>是进行详细的数据收集和数据分析所获得的主要结果</p><p>数据字典在需求分析阶段建立，在数据库设计过程中不断修改、充实、完善</p><p>看一下课本P207</p><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><p>数据项</p><p>数据结构</p><p>数据流</p><p>数据存储</p><p>处理过程</p><h2 id="7-3概念结构设计"><a href="#7-3概念结构设计" class="headerlink" title="7.3概念结构设计"></a>7.3概念结构设计</h2><p>是整个数据库设计的关键</p><p>概念模型：E-R模型（第一章扒出来讲过）</p><p>设计方法：自顶向下，自底向上，逐步扩张，混合策略</p><p>常用策略：自顶向下进行需求分析，自底向上设计概念结构</p><p>实体和属性的划分准则：</p><ol><li>属性不再有需要描述的性质，属性是不可分的数据项</li><li>属性不与其他实体有联系，联系仅发生在实体之间</li></ol><h2 id="7-4逻辑结构设计"><a href="#7-4逻辑结构设计" class="headerlink" title="7.4逻辑结构设计"></a>7.4逻辑结构设计</h2><p>将概念模型转化为一般的关系、网状、层次模型</p><p>将关系模型向特定DBMS数据模型转换</p><p>设计用户子模式，采用视图机制</p><h2 id="7-5物理结构设计"><a href="#7-5物理结构设计" class="headerlink" title="7.5物理结构设计"></a>7.5物理结构设计</h2><p>物理结构主要指：存取方法（B+树索引方法，聚簇方法，HASH方法等）和存储结构</p><p>对物理结构评价：时间和空间效率、维护代价</p><p>选择索引的规则：经常在查询条件中出现、经常用作聚集函数的参数、经常在连接操作的连接条件中出现</p><p>聚簇方法：为提高某个属性（或属性组）的查询速度，把这个（或这些）属性（属性称为聚簇码）上具有相同值的元组集中存放在连续的物理块称为聚簇，提高按聚簇属性进行查询的效率，节省存储空间</p><h2 id="7-6数据库的实施和维护"><a href="#7-6数据库的实施和维护" class="headerlink" title="7.6数据库的实施和维护"></a>7.6数据库的实施和维护</h2><h1 id="Chapter10-数据库恢复技术"><a href="#Chapter10-数据库恢复技术" class="headerlink" title="Chapter10.数据库恢复技术"></a>Chapter10.数据库恢复技术</h1><h2 id="10-1事务的基本概念"><a href="#10-1事务的基本概念" class="headerlink" title="10.1事务的基本概念"></a>10.1事务的基本概念</h2><p>定义：一个数据库操作序列，不可分割的工作单位，恢复和并发控制的基本单位</p><p>一个程序通常包含多个事务</p><h3 id="事务的特性-ACID"><a href="#事务的特性-ACID" class="headerlink" title="事务的特性 ACID"></a>事务的特性 ACID</h3><h4 id="原子性-Atomicity"><a href="#原子性-Atomicity" class="headerlink" title="原子性 Atomicity"></a>原子性 Atomicity</h4><p>事务是数据库的逻辑工作单位</p><h4 id="一致性-Consistency"><a href="#一致性-Consistency" class="headerlink" title="一致性 Consistency"></a>一致性 Consistency</h4><p>事务执行结果必须是使数据库从一个一致性状态变到另一个一致性状态</p><p>一致性：只包含成功事务提交的结果</p><p>不一致：包含失败事务的结果</p><h4 id="隔离性-Isolation"><a href="#隔离性-Isolation" class="headerlink" title="隔离性 Isolation"></a>隔离性 Isolation</h4><p>对于并发事务而言，一个事务的执行不能被其他事务干扰；并发执行的事务之间不能互相干扰</p><h4 id="持续性-Durability"><a href="#持续性-Durability" class="headerlink" title="持续性 Durability"></a>持续性 Durability</h4><p>事务一旦提交，他对数据库中数据的改变就应该是永久性的</p><h2 id="10-2数据库恢复概述"><a href="#10-2数据库恢复概述" class="headerlink" title="10.2数据库恢复概述"></a>10.2数据库恢复概述</h2><p>把数据库从错误状态恢复到某一已知的正确状态（也叫一致状态\完整状态）</p><h2 id="10-3故障的种类-amp-10-5恢复策略"><a href="#10-3故障的种类-amp-10-5恢复策略" class="headerlink" title="10.3故障的种类&amp;10.5恢复策略"></a>10.3故障的种类&amp;10.5恢复策略</h2><h3 id="1-事务内部的故障"><a href="#1-事务内部的故障" class="headerlink" title="1.事务内部的故障"></a>1.事务内部的故障</h3><p>可以预期的故障（程序问题）不考虑</p><p>仅指非预期的故障：运算溢出、并发事务发生死锁而被撤销的事务、违反完整性限制</p><p>事务在运行至正常终止前被终止</p><h3 id="事务故障恢复：撤销事务（UNDO）"><a href="#事务故障恢复：撤销事务（UNDO）" class="headerlink" title="事务故障恢复：撤销事务（UNDO）"></a>事务故障恢复：撤销事务（UNDO）</h3><p>由恢复子系统利用日志文件撤销此事务已对数据库进行的修改</p><p>由系统自动完成，不需用户干预</p><p>步骤：</p><ol><li><p>反向扫描日志文件（从最后向前扫描），查找该事务的更新操作</p></li><li><p>对该事务的更新操作执行逆操作，即将日志记录中更新前的值写入数据库</p><p>insert，更新前值为空，做delete</p><p>delete，同理，做insert</p><p>update，用修改前的值代替修改后的值</p></li><li><p>继续反向扫描日志文件，查找该事务的其他更新操作，并做同样处理</p></li><li><p>直到读到此事务的开始标记停止，事务故障恢复完成</p></li></ol><h3 id="系统故障"><a href="#系统故障" class="headerlink" title="系统故障"></a>系统故障</h3><p>软故障，系统停止运行，所有正在运行的事务非正常终止，不破坏数据库，内存中数据库缓冲区信息全部丢失</p><p>原因：硬件错误（CPU故障）、操作系统故障、DBMS代码错误、断电</p><h3 id="系统故障恢复（UNDO-REDO）"><a href="#系统故障恢复（UNDO-REDO）" class="headerlink" title="系统故障恢复（UNDO+REDO）"></a>系统故障恢复（UNDO+REDO）</h3><p>（在系统重新启动时自动完成，不需用户干预）</p><ol><li><p>发生故障时，事务未提交，但对数据库的更新可能已写入数据库</p><p>撤销（UNDO）所有<strong>未完成</strong>的事务</p></li><li><p>发生故障时，事务已提交，但缓冲区中信息尚未完全写入数据库</p><p>重做（REDO）所有<strong>已提交</strong>的事务</p></li></ol><p>恢复步骤：</p><ol><li><p>正向扫描日志文件（从头扫描），未完成事务记入撤销队列，已提交事务记入重做队列</p><p>撤销（UNDO）队列：未完成的事务队列（只有BEGIN TRANSACTION）</p><p>重做（REDO）队列：已提交的事务队列（既有BEGIN TRANSACTION也有COMMIT）</p></li><li><p>对撤销队列事务进行撤销处理</p><p>反向扫描日志文件，对每个UNDO事务的更新操作执行逆操作（见事务故障）</p></li><li><p>对重做队列事务进行重做处理</p><p>正向扫描日志文件，对每个REDO 事务重新执行登记的操作，将日志记录中更新后的值写入数据库</p></li></ol><h3 id="介质故障"><a href="#介质故障" class="headerlink" title="介质故障"></a>介质故障</h3><p>硬故障，外存故障：磁盘损坏、磁头碰撞、瞬间强磁干扰</p><h3 id="介质故障恢复（重装备份并恢复到一致性状态-REDO）"><a href="#介质故障恢复（重装备份并恢复到一致性状态-REDO）" class="headerlink" title="介质故障恢复（重装备份并恢复到一致性状态+REDO）"></a>介质故障恢复（重装备份并恢复到一致性状态+REDO）</h3><p>恢复：装入数据库发生故障前某个时刻的数据副本，重做自此之后的所有<strong>成功</strong>事务，将事务已提交的结果重新写入数据库</p><ol><li><p>重装数据库</p><p>装入最新的后备副本，恢复到最近一次转储时的一致性状态</p><ul><li>静态转储，装入即可</li><li>动态转储，同时装入转储时克的日志副本，利用恢复系统故障的方法UNDO+REDO，才能将数据库恢复到一致性状态</li></ul></li><li><p>重做已完成的事务</p><p>装入转储结束时刻的日志文件副本，重做已完成的事务</p><p>正向扫描，已提交的事务记入重做队列；对重做队列中所有事务进行重做处理</p></li></ol><p>需要DBA介入，重装副本，执行恢复命令</p><p>什么？你说你分不清UNDO 和REDO？</p><p>怎么可能呢</p><p><img src="sqlReview/image-20220107104518176.png" alt="image-20220107104518176"  />大大的一个UR写在这里是吧</p><h3 id="计算机病毒"><a href="#计算机病毒" class="headerlink" title="计算机病毒"></a>计算机病毒</h3><p>破坏、盗窃系统数据、破坏系统文件</p><h3 id="故障小结"><a href="#故障小结" class="headerlink" title="故障小结"></a>故障小结</h3><p>两种情况：</p><ol><li>数据库本身被破坏</li><li>数据库没有被破坏，但数据可能不正确，这是由于事务的运行被非正常终止导致的</li></ol><h2 id="10-4恢复的实现技术"><a href="#10-4恢复的实现技术" class="headerlink" title="10.4恢复的实现技术"></a>10.4恢复的实现技术</h2><p>基本原理：冗余，利用存储在其他地方的冗余数据重建</p><p>冗余数据的建立：</p><h3 id="10-4-1数据转储"><a href="#10-4-1数据转储" class="headerlink" title="10.4.1数据转储"></a>10.4.1数据转储</h3><p>DBA将整个数据库复制到其他位置保存的过程，备用数据称为后备副本/后援副本</p><p>只能将数据库恢复到转储时的状态</p><h3 id="转储方法"><a href="#转储方法" class="headerlink" title="转储方法"></a>转储方法</h3><p>1.</p><p>静态转储：系统中无事务运行时转储，期间不允许任何活动；优缺：实现简单，降低数据库可用性</p><p>动态转储：转储与用户事务并发进行，允许转储时存取和修改；缺点：不能保证副本中数据正确有效（啊这；将动态转储期间活动建立日志文件，后备副本+日志文件才能将数据库恢复到某一时刻的正确状态</p><p>2.</p><p>海量转储：每次转储全部数据库</p><p>增量转储：只转储上次转储后更新过的数据</p><p>优缺：海量比增量在进行恢复时更方便；但数据库很大或事务处理十分频繁，增量转储更实用有效</p><p>总的方法分类：1和2笛卡尔积</p><h3 id="10-4-2登记日志文件"><a href="#10-4-2登记日志文件" class="headerlink" title="10.4.2登记日志文件"></a>10.4.2登记日志文件</h3><p>用来记录事务对数据库的更新操作的文件</p><p>作用：进行事务故障恢复，系统故障的恢复，协助后备副本进行介质故障恢复</p><p>必须先写日志文件，再更新数据库</p><h2 id="10-6具有检查点的恢复技术"><a href="#10-6具有检查点的恢复技术" class="headerlink" title="10.6具有检查点的恢复技术"></a>10.6具有检查点的恢复技术</h2><p>提高系统故障的恢复效率</p><ul><li><p>在日志文件中增加检查点（checkpoint）记录</p><p>内容：建立检查点时刻所有正在执行的事务清单、这些事务最近一个日志记录的地址</p></li><li><p>增加重新开始文件</p><p>内容：检查点记录在日志文件中的地址</p></li><li><p>恢复子系统在登录日志文件期间动态维护日志</p><p>建立检查点，保存数据库状态</p></li></ul><p>可以定期（按照预定时间间隔）或不定期（按照某种规则，如日志文件写满一半）建立检查点，保存数据库状态</p><p>好处：改善恢复效率</p><p>当事务T在一个检查点P之前提交，T对数据库的修改已经写入数据库，在恢复时不需对T进行REDO操作</p><h3 id="恢复步骤"><a href="#恢复步骤" class="headerlink" title="恢复步骤"></a>恢复步骤</h3><ol><li><p>从重新开始文件中找到最后一个检查点记录在日志文件中的地址，由该地址在日志文件中找到最后一个检查点的记录</p></li><li><p>由该检查点记录得到检查点建立时刻所有正在执行的事务清单ACTIVE-LIST，同时建立UNDO-LIST和REDO-LIST，将ACTIVE-LIST暂时放入UNDO-LIST，REDO-LIST暂为空</p></li><li><p>从检查点开始正向扫描日志文件（向后扫），直到日志文件结束</p><p>若有新开始的事务Ti，将Ti暂时放入UNDO-LIST</p><p>若由提交的事务Tj，将Tj从UNDO-LIST队列移到REDO-LIST队列</p></li><li><p>对UNDO-LIST中的每个事务执行撤销UNDO</p><p>对REDO-LIST中的每个事务执行重做REDO</p></li></ol><h2 id="10-7数据库镜像"><a href="#10-7数据库镜像" class="headerlink" title="10.7数据库镜像"></a>10.7数据库镜像</h2><p>提高介质故障的恢复效率</p><p>介质故障是最严重的一种故障，严重影响数据库的可用性，恢复费时、必须周期性转储数据库</p><p>提高数据库可用性：数据库镜像（mirror）</p><p>DBMS自动把整个数据库或其中的关键数据复制到另一个磁盘上，自动保证镜像与主数据库的一致性，每次主数据库更新时，DBMS自动把更新后的数据复制过去</p><p>出现故障时由镜像磁盘继续提供使用，同时DBMS利用镜像数据进行数据库恢复，不需关闭系统和重装数据库副本</p><p>没有故障时可用于并发操作</p><h1 id="Chapter11-并发控制"><a href="#Chapter11-并发控制" class="headerlink" title="Chapter11.并发控制"></a>Chapter11.并发控制</h1><p>多事务执行方式：</p><ol><li><p>事务串行执行：每个时刻只有一个事务运行，其他事务必须等待它完成才能执行</p></li><li><p>交叉并发方式</p><p>带来的问题：多个事务同时存取同一数据，破坏事务一致性和数据库一致性</p></li></ol><h2 id="11-1并发控制概述"><a href="#11-1并发控制概述" class="headerlink" title="11.1并发控制概述"></a>11.1并发控制概述</h2><p>并发操作破坏了事务的<strong>隔离性</strong>，并发控制就是用正确的方式调度并发操作，避免造成数据的不一致</p><h3 id="1-丢失修改"><a href="#1-丢失修改" class="headerlink" title="1.丢失修改"></a>1.丢失修改</h3><p>我的神秘理解：改上加改（X+X）</p><p>两个事务同时读一数据并修改，T2的提交破坏T1的提交结果，导致T1的修改丢失（飞机订票）</p><h3 id="2-不可重复读"><a href="#2-不可重复读" class="headerlink" title="2.不可重复读"></a>2.不可重复读</h3><p>读上加改（S+X）</p><p>T1读取数据后，T2执行更新操作，使T1无法再现前一次读取结果</p><p>三种情况：</p><ol><li>T1读取后T2修改，T1再次读取得到与前一次不同的值</li><li>T1读取后T2插入，T1再次读取发现多了一些记录</li><li>T1读取后T2删除，T1再次读取发现少了一些记录</li></ol><p>后两种又叫幻影现象</p><h3 id="3-读脏数据"><a href="#3-读脏数据" class="headerlink" title="3.读脏数据"></a>3.读脏数据</h3><p>改上加读（X+S）</p><p>T1修改某一数据并写入数据库，T2读取同一数据后T1被撤销，此时T2读的数据就与数据库中不一致，称为读脏数据</p><h3 id="并发控制主要技术"><a href="#并发控制主要技术" class="headerlink" title="并发控制主要技术"></a>并发控制主要技术</h3><p>有封锁</p><p>时间戳：事务盖开始时间的戳，发生冲突就回滚具有较早时间戳的调度，再重新进入系统盖戳；可能有事务一直回滚</p><p>乐观控制法（乐）：就是开摆</p><h2 id="11-2封锁"><a href="#11-2封锁" class="headerlink" title="11.2封锁"></a>11.2封锁</h2><h3 id="X锁"><a href="#X锁" class="headerlink" title="X锁"></a>X锁</h3><p>排它锁/写锁，若事务T对数据对象A加X锁，则只允许T读取和修改，其他任何事物都不能再对A加任何类型的锁，直到T释放A上的锁</p><h3 id="S锁"><a href="#S锁" class="headerlink" title="S锁"></a>S锁</h3><p>共享锁/读锁，若事务T对数据对象A加S锁，则其他事务只能再对A加S锁，不能加X锁，直到T释放A上的S锁。保证其他事务可以读A，但不能对A进行任何修改</p><h3 id="一级封锁协议"><a href="#一级封锁协议" class="headerlink" title="一级封锁协议"></a>一级封锁协议</h3><p>事务T在修改数据A前必须加X锁，直到事务结束释放。（不使用S锁，读数据可以发生在任何时刻）</p><p>可以解决丢失修改，不能解决不可重复读、读脏数据</p><h3 id="二级封锁协议"><a href="#二级封锁协议" class="headerlink" title="二级封锁协议"></a>二级封锁协议</h3><p>在一级的基础上，事务T在读取A前必须先加S锁，读完后立即释放S</p><p>可以解决丢失修改和读脏数据，不能解决不可重复读（S+X，S读完释放，X能加）</p><h3 id="三级封锁协议"><a href="#三级封锁协议" class="headerlink" title="三级封锁协议"></a>三级封锁协议</h3><p>在二级的基础上，S直到事务结束才释放</p><p>都可以解决</p><h2 id="11-3活锁和死锁"><a href="#11-3活锁和死锁" class="headerlink" title="11.3活锁和死锁"></a>11.3活锁和死锁</h2><h3 id="活锁"><a href="#活锁" class="headerlink" title="活锁"></a>活锁</h3><p>活锁：T1封锁数据R，T2请求封锁R于是等待，T3也请求封锁R于是T1释放R上封锁后首先批准T3的请求，T2继续等待；然后又来了T4T5Tn…（明明是我先来的.jpg）</p><p>避免：先进先出</p><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>T1封锁R1，T2封锁R2后请求封锁R1于是等待，而T1又请求封锁R2于是等待</p><h4 id="1-预防死锁"><a href="#1-预防死锁" class="headerlink" title="1.预防死锁"></a>1.预防死锁</h4><p>破坏产生死锁的条件</p><h5 id="一次封锁法"><a href="#一次封锁法" class="headerlink" title="一次封锁法"></a>一次封锁法</h5><p>必须一次将所有要使用的数据加锁，否则不能继续执行</p><p>问题：降低并发度，难于事先确定封锁对象</p><h5 id="顺序封锁法"><a href="#顺序封锁法" class="headerlink" title="顺序封锁法"></a>顺序封锁法</h5><p>预先对数据对象规定封锁顺序，所有事务按照这个顺序实行封锁</p><p>问题：维护成本高（事务非常多并且不断变化），难以实现</p><h4 id="2-死锁的诊断与解除（普遍）"><a href="#2-死锁的诊断与解除（普遍）" class="headerlink" title="2.死锁的诊断与解除（普遍）"></a>2.死锁的诊断与解除（普遍）</h4><h5 id="超时法"><a href="#超时法" class="headerlink" title="超时法"></a>超时法</h5><p>如果一个事务的等待时间超过规定时限，认为发生死锁</p><p>优点：实现简单</p><p>缺点：若时限太短，容易误判；时限太长，死锁发生不能及时发现</p><h5 id="事务等待图法"><a href="#事务等待图法" class="headerlink" title="事务等待图法"></a>事务等待图法</h5><p>有向图G={T,U}</p><p>T：节点集，表示正在运行的事务</p><p>U：边集，表示等待情况，若1等2，则1-&gt;2</p><p>出现回路说明产生了死锁</p><p>并发控制子系统周期性生成事务等待图，若出现回路，说明系统中出现了死锁</p><h5 id="死锁的解除"><a href="#死锁的解除" class="headerlink" title="死锁的解除"></a>死锁的解除</h5><p>选择一个代价最小的事务将其撤销，释放它持有的所有锁，使其他事务能继续运行</p><p>撤销后-10章事务故障的处理</p><h2 id="11-4并发调度的可串行性"><a href="#11-4并发调度的可串行性" class="headerlink" title="11.4并发调度的可串行性"></a>11.4并发调度的可串行性</h2><p>可串行化调度：多个事务的并发执行是正确的，当且仅当其结果与按某一次序串行执行这些事务的结果相同</p><p>可串行性：是并发事务正确调度的准则，一个给定的并发调度，当且仅当它是可串行化的，才认为是正确调度</p><p>冲突可串行化调度：保证冲突操作次序不变情况下，交换两个事务中不冲突操作的次序，若能得到一个串行的调度，该调度称为冲突可串行化调度</p><p>冲突可串行化调度=&gt;可串行化调度（<strong>充分条件</strong>）</p><p>冲突操作：不同事务对同一数据的读写操作和写写操作</p><p><strong>不同事务的冲突操作和同一事务的两个操作不能交换</strong></p><h2 id="11-5两段锁协议"><a href="#11-5两段锁协议" class="headerlink" title="11.5两段锁协议"></a>11.5两段锁协议</h2><p>使用两段锁协议产生的是可串行化调度</p><p>所有事务必须分两个阶段对数据项加锁和解锁：扩展阶段只申请锁不释放锁，收缩阶段只释放锁不申请锁</p><p>遵循两段锁协议的调度=&gt;可串行化调度（充分条件）</p><h3 id="两段锁协议-amp-防止死锁的一次封锁法"><a href="#两段锁协议-amp-防止死锁的一次封锁法" class="headerlink" title="两段锁协议&amp;防止死锁的一次封锁法"></a>两段锁协议&amp;防止死锁的一次封锁法</h3><p>一次封锁法遵守两段锁协议</p><p>两段锁协议不要求事务一次性将数据全部加锁，因此可能发生死锁</p><h2 id="11-6封锁的粒度"><a href="#11-6封锁的粒度" class="headerlink" title="11.6封锁的粒度"></a>11.6封锁的粒度</h2><p>封锁对象的大小称为封锁粒度</p><p>粒度越大（封锁数据库），数据库封锁数据单元越少，并发度越小，系统开销越小</p><p>粒度越小（封锁某元组），数据库封锁数据单元越多，并发度越高，系统开销越大</p><p>多粒度封锁-多粒度树：以树形姐欧股表示多级封锁粒度</p><p>三级粒度树</p><img src="/2021/12/18/sqlReview/883442E5FF633936573008FD3C6B1BCB.png" class="" title="img"><ol><li>每个节点可独立加锁</li><li>对一个节点加锁意味着这个节点所有子树节点也加同样类型的锁</li><li>一个数据对象可能被两种形式封锁：显式&amp;隐式封锁</li></ol><p>对R1加锁：搜索R1上级节点数据库，搜索R1，R1下级节点（每个元组），若其中有不相容锁，则必须等待</p><h3 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h3><p>提高对某个数据对象加锁时系统的检查效率</p><p>对一个节点加意向锁，说明该节点的下层节点正在被加锁；对任意节点加基本锁，必须先对它的上层节点加意向锁</p><h3 id="IS"><a href="#IS" class="headerlink" title="IS"></a>IS</h3><p>对A加IS，表示对A的子树节点B意向加S锁；若成功对A加IS，则对B加S锁</p><h3 id="IX"><a href="#IX" class="headerlink" title="IX"></a>IX</h3><p>对A加IX，表示对A的子树B节点意向加X锁；若成功对A加IS，则对B加X锁</p><h3 id="SIX"><a href="#SIX" class="headerlink" title="SIX"></a>SIX</h3><p>对A加SIX锁，表示对A加S锁和IX锁，表示要读取A中所有数据（表中所有数据）和更新子树节点级别的个别数据（更新个别元组）</p><p>这两个操作在SIX锁的定义中不冲突</p><p><img src="sqlReview/9D149E27BD51D77FE7B8091BE8E4686E.png" alt="img" style="zoom: 50%;" />神秘理解之一图掌握锁的强度关系和相容关系</p><p>IS与S、IX、SIX相容</p><p>S与IX不相容</p><p>S、IX与SIX不相容</p><p>都与X不相容</p><p>锁的强度是如图所示的偏序关系</p><img src="/2021/12/18/sqlReview/2E41006F05EF79212F75208A7509771B.png" class="" title="img"><p>优点：提高并发度，减少加锁解锁的开销</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;往往，最不详细的地方，可能更要考。  &lt;/p&gt;
&lt;h1 id=&quot;Chapter1-绪论&quot;&gt;&lt;a href=&quot;#Chapter1-绪论&quot; class=&quot;headerlink&quot; title=&quot;Chapter1.绪论&quot;&gt;&lt;/a&gt;Chapter1.绪论&lt;/h1&gt;&lt;h2 id=&quot;1-</summary>
      
    
    
    
    
    <category term="review" scheme="https://github.com/sterne012/sterne012.github.io/tags/review/"/>
    
    <category term="sql" scheme="https://github.com/sterne012/sterne012.github.io/tags/sql/"/>
    
  </entry>
  
</feed>
