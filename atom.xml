<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome -Sterne&#39;s Blog-</title>
  
  <subtitle>And in that light, I find deliverance——</subtitle>
  <link href="https://github.com/sterne012/sterne012.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/sterne012/sterne012.github.io/"/>
  <updated>2022-05-31T00:46:12.093Z</updated>
  <id>https://github.com/sterne012/sterne012.github.io/</id>
  
  <author>
    <name>sterne</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深度学习-邪神制造机</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/05/29/deep-gan/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/05/29/deep-gan/</id>
    <published>2022-05-29T09:01:30.000Z</published>
    <updated>2022-05-31T00:46:12.093Z</updated>
    
    <content type="html"><![CDATA[<p>21</p><p>完蛋跑完之后忘了存结果了T T折磨。。。难道真的要再跑6h吗</p><img src="/2022/05/29/deep-gan/00500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/01000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/01500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/02000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/02500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/03000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/03500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/04000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/04500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/05000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/05500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/06000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/06500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/07000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/07500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/08000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/08500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/09000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/09500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/10000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/10500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/11000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/11500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/12000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/12500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/13000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/13500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/14000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/14500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/15000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/15500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/16000.png" class="" width="00500">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;21&lt;/p&gt;
&lt;p&gt;完蛋跑完之后忘了存结果了T T折磨。。。难道真的要再跑6h吗&lt;/p&gt;
&lt;img src=&quot;/2022/05/29/deep-gan/00500.png&quot; class=&quot;&quot; width=&quot;00500&quot;&gt;

&lt;img src=&quot;/2022/05/29/dee</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
    <category term="deeplearning" scheme="https://github.com/sterne012/sterne012.github.io/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-恒星星系分类</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/05/19/deepTest/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/05/19/deepTest/</id>
    <published>2022-05-19T11:01:28.000Z</published>
    <updated>2022-06-02T10:02:20.366Z</updated>
    
    <content type="html"><![CDATA[<p>姑且存一下训练结果，后面应该还会改，比如20个epoch应该不太够</p><p>1</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br>Epoch 1/20<br>1038/1038 [==============================] - 22s 21ms/step - loss: 0.2031 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9348 - val<span class="hljs-emphasis">_loss: 0.1866 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9469<br>Epoch 2/20<br>1038/1038 [==============================] - 25s 24ms/step - loss: 0.1375 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9558 - val<span class="hljs-emphasis">_loss: 0.1296 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9620<br>Epoch 3/20<br>1038/1038 [==============================] - 24s 23ms/step - loss: 0.1155 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9632 - val<span class="hljs-emphasis">_loss: 0.1259 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9599<br>Epoch 4/20<br>1038/1038 [==============================] - 23s 22ms/step - loss: 0.1001 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9670 - val<span class="hljs-emphasis">_loss: 0.1430 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9612<br>Epoch 5/20<br>1038/1038 [==============================] - 23s 22ms/step - loss: 0.0953 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9686 - val<span class="hljs-emphasis">_loss: 0.1109 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9637<br>Epoch 6/20<br>1038/1038 [==============================] - 23s 22ms/step - loss: 0.0877 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9707 - val<span class="hljs-emphasis">_loss: 0.1097 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9648<br>Epoch 7/20<br>1038/1038 [==============================] - 23s 22ms/step - loss: 0.0796 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9744 - val<span class="hljs-emphasis">_loss: 0.1058 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9680<br>Epoch 8/20<br>1038/1038 [==============================] - 23s 22ms/step - loss: 0.0790 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9748 - val<span class="hljs-emphasis">_loss: 0.0977 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9707<br>Epoch 9/20<br>1038/1038 [==============================] - 23s 23ms/step - loss: 0.0696 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9772 - val<span class="hljs-emphasis">_loss: 0.1074 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9672<br>Epoch 10/20<br>1038/1038 [==============================] - 23s 22ms/step - loss: 0.0654 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9793 - val<span class="hljs-emphasis">_loss: 0.0979 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9707<br>Epoch 11/20<br>1038/1038 [==============================] - 23s 22ms/step - loss: 0.0658 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9783 - val<span class="hljs-emphasis">_loss: 0.1075 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9707<br>Epoch 12/20<br>1038/1038 [==============================] - 25s 24ms/step - loss: 0.0604 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9802 - val<span class="hljs-emphasis">_loss: 0.1040 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9680<br>Epoch 13/20<br>1038/1038 [==============================] - 25s 24ms/step - loss: 0.0595 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9802 - val<span class="hljs-emphasis">_loss: 0.1135 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9664<br>Epoch 14/20<br>1038/1038 [==============================] - 26s 25ms/step - loss: 0.0553 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9819 - val<span class="hljs-emphasis">_loss: 0.1049 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9680<br>Epoch 15/20<br>1038/1038 [==============================] - 25s 24ms/step - loss: 0.0546 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9821 - val<span class="hljs-emphasis">_loss: 0.1126 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9715<br>Epoch 16/20<br>1038/1038 [==============================] - 25s 24ms/step - loss: 0.0522 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9825 - val<span class="hljs-emphasis">_loss: 0.0917 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9713<br>Epoch 17/20<br>1038/1038 [==============================] - 25s 24ms/step - loss: 0.0470 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9842 - val<span class="hljs-emphasis">_loss: 0.1050 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9721<br>Epoch 18/20<br>1038/1038 [==============================] - 25s 24ms/step - loss: 0.0444 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9855 - val<span class="hljs-emphasis">_loss: 0.1025 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9686<br>Epoch 19/20<br>1038/1038 [==============================] - 25s 24ms/step - loss: 0.0503 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9830 - val<span class="hljs-emphasis">_loss: 0.1110 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9737<br>Epoch 20/20<br>1038/1038 [==============================] - 25s 24ms/step - loss: 0.0425 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9854 - val<span class="hljs-emphasis">_loss: 0.1055 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9715<br>Model: &quot;sequential&quot;<br><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-emphasis">_</span><br><span class="hljs-emphasis">Layer (type)                 Output Shape              Param #   </span><br><span class="hljs-emphasis">=================================================================</span><br><span class="hljs-emphasis">flatten (Flatten)            (None, 12288)             0         </span><br><span class="hljs-emphasis"><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span>_</span><br>dense (Dense)                (None, 64)                786496    <br><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-emphasis">_</span><br><span class="hljs-emphasis">dense_</span>1 (Dense)              (None, 2)                 130       <br>=================================================================<br>Total params: 786,626<br>Trainable params: 786,626<br>Non-trainable params: 0<br><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-emphasis">_</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">Process finished with exit code 0</span><br><span class="hljs-emphasis"></span><br></code></pre></td></tr></table></figure><img src="/2022/05/19/deepTest/image-20220519190216184.png" class="" title="image-20220519190216184"><img src="/2022/05/19/deepTest/image-20220519190232323.png" class="" title="image-20220519190232323"><p>试了一圈还是这么存吧。。。</p><p>4</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs markdown">model = tf.keras.models.Sequential([<br><span class="hljs-code">    tf.keras.layers.Flatten(),</span><br><span class="hljs-code">    Dense(64, activation=&#x27;relu&#x27;),</span><br><span class="hljs-code">    Dropout(0.2),</span><br><span class="hljs-code">    Dense(32, activation=&#x27;relu&#x27;),</span><br><span class="hljs-code">    Dropout(0.2),</span><br><span class="hljs-code">    Dense(2, activation=&#x27;softmax&#x27;)</span><br><span class="hljs-code">])</span><br><span class="hljs-code"></span><br>D:\pyAnaconda\envs\pythonProject\python.exe D:/Code/pythonProject/work/sdss<span class="hljs-emphasis">_reco.py</span><br><span class="hljs-emphasis">Epoch 1/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 23s 21ms/step - loss: 0.2327 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9268 - val_</span>loss: 0.1805 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9447</span><br><span class="hljs-emphasis">Epoch 2/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 23s 22ms/step - loss: 0.1538 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9497 - val_</span>loss: 0.1279 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9596</span><br><span class="hljs-emphasis">Epoch 3/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 23s 22ms/step - loss: 0.1367 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9562 - val_</span>loss: 0.1220 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9607</span><br><span class="hljs-emphasis">Epoch 4/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 26s 25ms/step - loss: 0.1210 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9613 - val_</span>loss: 0.1104 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9607</span><br><span class="hljs-emphasis">Epoch 5/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 24s 23ms/step - loss: 0.1194 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9620 - val_</span>loss: 0.1141 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9642</span><br><span class="hljs-emphasis">Epoch 6/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 23s 22ms/step - loss: 0.1131 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9634 - val_</span>loss: 0.1064 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9637</span><br><span class="hljs-emphasis">Epoch 7/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 24s 23ms/step - loss: 0.1059 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9657 - val_</span>loss: 0.1019 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9691</span><br><span class="hljs-emphasis">Epoch 8/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 24s 23ms/step - loss: 0.1069 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9670 - val_</span>loss: 0.1052 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9648</span><br><span class="hljs-emphasis">Epoch 9/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 24s 23ms/step - loss: 0.1003 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9685 - val_</span>loss: 0.0998 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9680</span><br><span class="hljs-emphasis">Epoch 10/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 24s 23ms/step - loss: 0.0980 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9694 - val_</span>loss: 0.0965 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9696</span><br><span class="hljs-emphasis">Epoch 11/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 25s 24ms/step - loss: 0.1009 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9677 - val_</span>loss: 0.0952 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9683</span><br><span class="hljs-emphasis">Epoch 12/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 23s 22ms/step - loss: 0.0943 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9704 - val_</span>loss: 0.0933 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9710</span><br><span class="hljs-emphasis">Epoch 13/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 24s 23ms/step - loss: 0.0926 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9707 - val_</span>loss: 0.0978 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9699</span><br><span class="hljs-emphasis">Epoch 14/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 23s 22ms/step - loss: 0.0917 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9715 - val_</span>loss: 0.0914 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9699</span><br><span class="hljs-emphasis">Epoch 15/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 24s 23ms/step - loss: 0.0861 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9727 - val_</span>loss: 0.0938 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9713</span><br><span class="hljs-emphasis">Epoch 16/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 24s 23ms/step - loss: 0.0876 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9725 - val_</span>loss: 0.0984 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9691</span><br><span class="hljs-emphasis">Epoch 17/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 23s 22ms/step - loss: 0.0884 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9717 - val_</span>loss: 0.0990 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9686</span><br><span class="hljs-emphasis">Epoch 18/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 24s 23ms/step - loss: 0.0832 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9736 - val_</span>loss: 0.0985 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9686</span><br><span class="hljs-emphasis">Epoch 19/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 23s 23ms/step - loss: 0.0798 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9748 - val_</span>loss: 0.0892 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9734</span><br><span class="hljs-emphasis">Epoch 20/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 24s 23ms/step - loss: 0.0799 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9755 - val_</span>loss: 0.0956 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9683</span><br><span class="hljs-emphasis">Model: &quot;sequential&quot;</span><br><span class="hljs-emphasis"><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span>_</span><br><span class="hljs-section">Layer (type)                 Output Shape              Param #   </span><br><span class="hljs-section">=================================================================</span><br>flatten (Flatten)            (None, 12288)             0         <br><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-emphasis">_</span><br><span class="hljs-emphasis">dense (Dense)                (None, 64)                786496    </span><br><span class="hljs-emphasis"><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span>_</span><br>dropout (Dropout)            (None, 64)                0         <br><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-emphasis">_</span><br><span class="hljs-emphasis">dense_</span>1 (Dense)              (None, 32)                2080      <br><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-emphasis">_</span><br><span class="hljs-emphasis">dropout_</span>1 (Dropout)          (None, 32)                0         <br><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-emphasis">_</span><br><span class="hljs-emphasis">dense_</span>2 (Dense)              (None, 2)                 66        <br>=================================================================<br>Total params: 788,642<br>Trainable params: 788,642<br>Non-trainable params: 0<br><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-emphasis">_</span><br><span class="hljs-emphasis"></span><br></code></pre></td></tr></table></figure><p>5</p><p>训练集接近99，测试集差不多还那样，有点明显过拟合，感觉效果还算不错</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs gradle">model = tf.keras.models.Sequential([<br>    tf.keras.layers.<span class="hljs-keyword">Flatten</span>(),<br>    Dense(<span class="hljs-number">128</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>    Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>    Dense(<span class="hljs-number">32</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>    Dense(<span class="hljs-number">2</span>, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>)<br>])<br>D:\pyAnaconda\envs\pythonProject\python.exe D:<span class="hljs-regexp">/Code/</span>pythonProject<span class="hljs-regexp">/work/</span>sdss_reco.py<br>Epoch <span class="hljs-number">1</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 13s 12ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1989</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9375</span> - val_loss: <span class="hljs-number">0.1320</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9620</span><br>Epoch <span class="hljs-number">2</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 15s 15ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1232</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9612</span> - val_loss: <span class="hljs-number">0.1179</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9669</span><br>Epoch <span class="hljs-number">3</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 9s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1024</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9665</span> - val_loss: <span class="hljs-number">0.1009</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9683</span><br>Epoch <span class="hljs-number">4</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 5s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0898</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9708</span> - val_loss: <span class="hljs-number">0.1039</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9677</span><br>Epoch <span class="hljs-number">5</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 5s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0798</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9733</span> - val_loss: <span class="hljs-number">0.0972</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9680</span><br>Epoch <span class="hljs-number">6</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 5s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0747</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9748</span> - val_loss: <span class="hljs-number">0.0818</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9737</span><br>Epoch <span class="hljs-number">7</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 5s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0667</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9772</span> - val_loss: <span class="hljs-number">0.0849</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9740</span><br>Epoch <span class="hljs-number">8</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 5s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0611</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9788</span> - val_loss: <span class="hljs-number">0.0816</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9764</span><br>Epoch <span class="hljs-number">9</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 5s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0582</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9808</span> - val_loss: <span class="hljs-number">0.0859</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9715</span><br>Epoch <span class="hljs-number">10</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0558</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9805</span> - val_loss: <span class="hljs-number">0.1014</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9694</span><br>Epoch <span class="hljs-number">11</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0506</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9828</span> - val_loss: <span class="hljs-number">0.0815</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9745</span><br>Epoch <span class="hljs-number">12</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 5s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0510</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9824</span> - val_loss: <span class="hljs-number">0.1146</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9653</span><br>Epoch <span class="hljs-number">13</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0476</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9835</span> - val_loss: <span class="hljs-number">0.0982</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9724</span><br>Epoch <span class="hljs-number">14</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0433</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9856</span> - val_loss: <span class="hljs-number">0.0820</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9770</span><br>Epoch <span class="hljs-number">15</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0420</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9852</span> - val_loss: <span class="hljs-number">0.0855</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9737</span><br>Epoch <span class="hljs-number">16</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0376</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9868</span> - val_loss: <span class="hljs-number">0.1125</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9691</span><br>Epoch <span class="hljs-number">17</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0431</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9853</span> - val_loss: <span class="hljs-number">0.1019</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">18</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0356</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9877</span> - val_loss: <span class="hljs-number">0.0895</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9748</span><br>Epoch <span class="hljs-number">19</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0313</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9888</span> - val_loss: <span class="hljs-number">0.0921</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9759</span><br>Epoch <span class="hljs-number">20</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0294</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9897</span> - val_loss: <span class="hljs-number">0.1218</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9694</span><br>Model: <span class="hljs-string">&quot;sequential&quot;</span><br>_________________________________________________________________<br>Layer (type)                 Output Shape              Param #   <br>=================================================================<br><span class="hljs-keyword">flatten</span> (<span class="hljs-keyword">Flatten</span>)            (None, <span class="hljs-number">12288</span>)             <span class="hljs-number">0</span>         <br>_________________________________________________________________<br>dense (Dense)                (None, <span class="hljs-number">128</span>)               <span class="hljs-number">1572992</span>   <br>_________________________________________________________________<br>dense_1 (Dense)              (None, <span class="hljs-number">64</span>)                <span class="hljs-number">8256</span>      <br>_________________________________________________________________<br>dense_2 (Dense)              (None, <span class="hljs-number">32</span>)                <span class="hljs-number">2080</span>      <br>_________________________________________________________________<br>dense_3 (Dense)              (None, <span class="hljs-number">2</span>)                 <span class="hljs-number">66</span>        <br>=================================================================<br>Total params: <span class="hljs-number">1</span>,<span class="hljs-number">583</span>,<span class="hljs-number">394</span><br>Trainable params: <span class="hljs-number">1</span>,<span class="hljs-number">583</span>,<span class="hljs-number">394</span><br>Non-trainable params: <span class="hljs-number">0</span><br>_________________________________________________________________<br><br></code></pre></td></tr></table></figure><p>6</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs gradle">model = tf.keras.models.Sequential([<br>    tf.keras.layers.<span class="hljs-keyword">Flatten</span>(),<br>    Dense(<span class="hljs-number">128</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>    Dropout(<span class="hljs-number">0.2</span>),<br>    Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>    Dense(<span class="hljs-number">32</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>    Dense(<span class="hljs-number">2</span>, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>)<br>])<br>D:\pyAnaconda\envs\pythonProject\python.exe D:<span class="hljs-regexp">/Code/</span>pythonProject<span class="hljs-regexp">/work/</span>sdss_reco.py<br>Epoch <span class="hljs-number">1</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 9s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.2111</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9320</span> - val_loss: <span class="hljs-number">0.1328</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9599</span><br>Epoch <span class="hljs-number">2</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 8s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1339</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9560</span> - val_loss: <span class="hljs-number">0.1196</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9626</span><br>Epoch <span class="hljs-number">3</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 8s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1209</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9606</span> - val_loss: <span class="hljs-number">0.1059</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9658</span><br>Epoch <span class="hljs-number">4</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 8s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1100</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9645</span> - val_loss: <span class="hljs-number">0.1252</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9599</span><br>Epoch <span class="hljs-number">5</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1062</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9652</span> - val_loss: <span class="hljs-number">0.0966</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9686</span><br>Epoch <span class="hljs-number">6</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1027</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9663</span> - val_loss: <span class="hljs-number">0.1018</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9661</span><br>Epoch <span class="hljs-number">7</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0965</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9683</span> - val_loss: <span class="hljs-number">0.0893</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9696</span><br>Epoch <span class="hljs-number">8</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0938</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9699</span> - val_loss: <span class="hljs-number">0.0873</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9696</span><br>Epoch <span class="hljs-number">9</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0873</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9716</span> - val_loss: <span class="hljs-number">0.0977</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9658</span><br>Epoch <span class="hljs-number">10</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0869</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9717</span> - val_loss: <span class="hljs-number">0.0934</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9680</span><br>Epoch <span class="hljs-number">11</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 8s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0816</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9737</span> - val_loss: <span class="hljs-number">0.0905</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9705</span><br>Epoch <span class="hljs-number">12</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0797</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9745</span> - val_loss: <span class="hljs-number">0.0858</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">13</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0783</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9742</span> - val_loss: <span class="hljs-number">0.0815</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">14</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0766</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9748</span> - val_loss: <span class="hljs-number">0.0921</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9710</span><br>Epoch <span class="hljs-number">15</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0731</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9763</span> - val_loss: <span class="hljs-number">0.0839</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">16</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0732</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9761</span> - val_loss: <span class="hljs-number">0.0871</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9713</span><br>Epoch <span class="hljs-number">17</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0697</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9775</span> - val_loss: <span class="hljs-number">0.0992</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9694</span><br>Epoch <span class="hljs-number">18</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0721</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9771</span> - val_loss: <span class="hljs-number">0.0869</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">19</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 8s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0690</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9778</span> - val_loss: <span class="hljs-number">0.0870</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9748</span><br>Epoch <span class="hljs-number">20</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0674</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9780</span> - val_loss: <span class="hljs-number">0.0876</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Model: <span class="hljs-string">&quot;sequential&quot;</span><br>_________________________________________________________________<br>Layer (type)                 Output Shape              Param #   <br>=================================================================<br><span class="hljs-keyword">flatten</span> (<span class="hljs-keyword">Flatten</span>)            (None, <span class="hljs-number">12288</span>)             <span class="hljs-number">0</span>         <br>_________________________________________________________________<br>dense (Dense)                (None, <span class="hljs-number">128</span>)               <span class="hljs-number">1572992</span>   <br>_________________________________________________________________<br>dropout (Dropout)            (None, <span class="hljs-number">128</span>)               <span class="hljs-number">0</span>         <br>_________________________________________________________________<br>dense_1 (Dense)              (None, <span class="hljs-number">64</span>)                <span class="hljs-number">8256</span>      <br>_________________________________________________________________<br>dense_2 (Dense)              (None, <span class="hljs-number">32</span>)                <span class="hljs-number">2080</span>      <br>_________________________________________________________________<br>dense_3 (Dense)              (None, <span class="hljs-number">2</span>)                 <span class="hljs-number">66</span>        <br>=================================================================<br>Total params: <span class="hljs-number">1</span>,<span class="hljs-number">583</span>,<span class="hljs-number">394</span><br>Trainable params: <span class="hljs-number">1</span>,<span class="hljs-number">583</span>,<span class="hljs-number">394</span><br>Non-trainable params: <span class="hljs-number">0</span><br>_________________________________________________________________<br><br></code></pre></td></tr></table></figure><p>6.1</p><p>epoch=50后</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs gradle">D:\pyAnaconda\envs\pythonProject\python.exe D:<span class="hljs-regexp">/Code/</span>pythonProject<span class="hljs-regexp">/work/</span>sdss_reco.py<br>Epoch <span class="hljs-number">1</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.2069</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9303</span> - val_loss: <span class="hljs-number">0.1715</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9466</span><br>Epoch <span class="hljs-number">2</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 8s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1347</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9559</span> - val_loss: <span class="hljs-number">0.1272</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9596</span><br>Epoch <span class="hljs-number">3</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1186</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9611</span> - val_loss: <span class="hljs-number">0.1345</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9561</span><br>Epoch <span class="hljs-number">4</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1087</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9640</span> - val_loss: <span class="hljs-number">0.0992</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9683</span><br>Epoch <span class="hljs-number">5</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0996</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9675</span> - val_loss: <span class="hljs-number">0.1021</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9661</span><br>Epoch <span class="hljs-number">6</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0962</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9671</span> - val_loss: <span class="hljs-number">0.0946</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9686</span><br>Epoch <span class="hljs-number">7</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0908</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9708</span> - val_loss: <span class="hljs-number">0.0886</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9694</span><br>Epoch <span class="hljs-number">8</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0874</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9708</span> - val_loss: <span class="hljs-number">0.0940</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9669</span><br>Epoch <span class="hljs-number">9</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0863</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9716</span> - val_loss: <span class="hljs-number">0.0917</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9715</span><br>Epoch <span class="hljs-number">10</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0817</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9720</span> - val_loss: <span class="hljs-number">0.0838</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9732</span><br>Epoch <span class="hljs-number">11</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0753</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9751</span> - val_loss: <span class="hljs-number">0.0930</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9699</span><br>Epoch <span class="hljs-number">12</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0752</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9753</span> - val_loss: <span class="hljs-number">0.0838</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9737</span><br>Epoch <span class="hljs-number">13</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0734</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9760</span> - val_loss: <span class="hljs-number">0.0904</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9710</span><br>Epoch <span class="hljs-number">14</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 8s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0712</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9764</span> - val_loss: <span class="hljs-number">0.0784</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9745</span><br>Epoch <span class="hljs-number">15</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0718</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9765</span> - val_loss: <span class="hljs-number">0.0915</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">16</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0691</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9775</span> - val_loss: <span class="hljs-number">0.1016</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9694</span><br>Epoch <span class="hljs-number">17</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0667</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9780</span> - val_loss: <span class="hljs-number">0.0810</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9745</span><br>Epoch <span class="hljs-number">18</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0659</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9780</span> - val_loss: <span class="hljs-number">0.0839</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9753</span><br>Epoch <span class="hljs-number">19</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0655</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9786</span> - val_loss: <span class="hljs-number">0.0829</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9756</span><br>Epoch <span class="hljs-number">20</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0634</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9791</span> - val_loss: <span class="hljs-number">0.0998</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9691</span><br>Epoch <span class="hljs-number">21</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0609</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9794</span> - val_loss: <span class="hljs-number">0.1092</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9680</span><br>Epoch <span class="hljs-number">22</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0627</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9794</span> - val_loss: <span class="hljs-number">0.0826</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9753</span><br>Epoch <span class="hljs-number">23</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0595</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9803</span> - val_loss: <span class="hljs-number">0.0938</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9724</span><br>Epoch <span class="hljs-number">24</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0575</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9813</span> - val_loss: <span class="hljs-number">0.0962</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9718</span><br>Epoch <span class="hljs-number">25</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 8s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0562</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9808</span> - val_loss: <span class="hljs-number">0.0936</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9718</span><br>Epoch <span class="hljs-number">26</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0564</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9812</span> - val_loss: <span class="hljs-number">0.0908</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9713</span><br>Epoch <span class="hljs-number">27</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0545</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9823</span> - val_loss: <span class="hljs-number">0.0820</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9753</span><br>Epoch <span class="hljs-number">28</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0542</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9831</span> - val_loss: <span class="hljs-number">0.0894</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9737</span><br>Epoch <span class="hljs-number">29</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0548</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9826</span> - val_loss: <span class="hljs-number">0.0934</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9740</span><br>Epoch <span class="hljs-number">30</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0490</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9835</span> - val_loss: <span class="hljs-number">0.0948</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9732</span><br>Epoch <span class="hljs-number">31</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0528</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9826</span> - val_loss: <span class="hljs-number">0.1016</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9707</span><br>Epoch <span class="hljs-number">32</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0520</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9827</span> - val_loss: <span class="hljs-number">0.1126</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9672</span><br>Epoch <span class="hljs-number">33</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0506</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9834</span> - val_loss: <span class="hljs-number">0.0868</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9740</span><br>Epoch <span class="hljs-number">34</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0513</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9829</span> - val_loss: <span class="hljs-number">0.0980</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9710</span><br>Epoch <span class="hljs-number">35</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0489</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9836</span> - val_loss: <span class="hljs-number">0.1010</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">36</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0453</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9844</span> - val_loss: <span class="hljs-number">0.0969</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9740</span><br>Epoch <span class="hljs-number">37</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0492</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9837</span> - val_loss: <span class="hljs-number">0.0982</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9737</span><br>Epoch <span class="hljs-number">38</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0459</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9855</span> - val_loss: <span class="hljs-number">0.1095</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9724</span><br>Epoch <span class="hljs-number">39</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0449</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9858</span> - val_loss: <span class="hljs-number">0.0932</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9740</span><br>Epoch <span class="hljs-number">40</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0426</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9852</span> - val_loss: <span class="hljs-number">0.1021</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9726</span><br>Epoch <span class="hljs-number">41</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0455</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9851</span> - val_loss: <span class="hljs-number">0.0996</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9742</span><br>Epoch <span class="hljs-number">42</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0429</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9859</span> - val_loss: <span class="hljs-number">0.1024</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9734</span><br>Epoch <span class="hljs-number">43</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0421</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9858</span> - val_loss: <span class="hljs-number">0.1048</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9732</span><br>Epoch <span class="hljs-number">44</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0436</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9857</span> - val_loss: <span class="hljs-number">0.1084</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9702</span><br>Epoch <span class="hljs-number">45</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0424</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9864</span> - val_loss: <span class="hljs-number">0.1064</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9724</span><br>Epoch <span class="hljs-number">46</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0398</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9869</span> - val_loss: <span class="hljs-number">0.1104</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9740</span><br>Epoch <span class="hljs-number">47</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0414</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9859</span> - val_loss: <span class="hljs-number">0.1193</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9718</span><br>Epoch <span class="hljs-number">48</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0404</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9861</span> - val_loss: <span class="hljs-number">0.1003</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9737</span><br>Epoch <span class="hljs-number">49</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0408</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9868</span> - val_loss: <span class="hljs-number">0.0993</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9734</span><br>Epoch <span class="hljs-number">50</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0462</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9848</span> - val_loss: <span class="hljs-number">0.1090</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Model: <span class="hljs-string">&quot;sequential&quot;</span><br>_________________________________________________________________<br>Layer (type)                 Output Shape              Param #   <br>=================================================================<br><span class="hljs-keyword">flatten</span> (<span class="hljs-keyword">Flatten</span>)            (None, <span class="hljs-number">12288</span>)             <span class="hljs-number">0</span>         <br>_________________________________________________________________<br>dense (Dense)                (None, <span class="hljs-number">128</span>)               <span class="hljs-number">1572992</span>   <br>_________________________________________________________________<br>dropout (Dropout)            (None, <span class="hljs-number">128</span>)               <span class="hljs-number">0</span>         <br>_________________________________________________________________<br>dense_1 (Dense)              (None, <span class="hljs-number">64</span>)                <span class="hljs-number">8256</span>      <br>_________________________________________________________________<br>dense_2 (Dense)              (None, <span class="hljs-number">32</span>)                <span class="hljs-number">2080</span>      <br>_________________________________________________________________<br>dense_3 (Dense)              (None, <span class="hljs-number">2</span>)                 <span class="hljs-number">66</span>        <br>=================================================================<br>Total params: <span class="hljs-number">1</span>,<span class="hljs-number">583</span>,<span class="hljs-number">394</span><br>Trainable params: <span class="hljs-number">1</span>,<span class="hljs-number">583</span>,<span class="hljs-number">394</span><br>Non-trainable params: <span class="hljs-number">0</span><br>_________________________________________________________________<br></code></pre></td></tr></table></figure><p>6.2 epoch=100</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><code class="hljs gradle">D:\pyAnaconda\envs\pythonProject\python.exe D:<span class="hljs-regexp">/Code/</span>pythonProject<span class="hljs-regexp">/work/</span>sdss_reco.py<br>Epoch <span class="hljs-number">1</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 15s 14ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.2090</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9314</span> - val_loss: <span class="hljs-number">0.1482</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9566</span><br>Epoch <span class="hljs-number">2</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1369</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9558</span> - val_loss: <span class="hljs-number">0.1326</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9574</span><br>Epoch <span class="hljs-number">3</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 5s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1219</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9597</span> - val_loss: <span class="hljs-number">0.1185</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9637</span><br>Epoch <span class="hljs-number">4</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1108</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9641</span> - val_loss: <span class="hljs-number">0.1095</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9648</span><br>Epoch <span class="hljs-number">5</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 5s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1016</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9670</span> - val_loss: <span class="hljs-number">0.1094</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9637</span><br>Epoch <span class="hljs-number">6</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0973</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9687</span> - val_loss: <span class="hljs-number">0.1157</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9645</span><br>Epoch <span class="hljs-number">7</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 5s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0963</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9687</span> - val_loss: <span class="hljs-number">0.0963</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9702</span><br>Epoch <span class="hljs-number">8</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0917</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9711</span> - val_loss: <span class="hljs-number">0.0938</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9691</span><br>Epoch <span class="hljs-number">9</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 14s 13ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0854</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9726</span> - val_loss: <span class="hljs-number">0.0964</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9696</span><br>Epoch <span class="hljs-number">10</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 12s 11ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0843</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9727</span> - val_loss: <span class="hljs-number">0.1120</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9607</span><br>Epoch <span class="hljs-number">11</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 5s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0811</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9730</span> - val_loss: <span class="hljs-number">0.0926</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9707</span><br>Epoch <span class="hljs-number">12</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 5s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0783</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9751</span> - val_loss: <span class="hljs-number">0.0949</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9726</span><br>Epoch <span class="hljs-number">13</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 5s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0771</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9748</span> - val_loss: <span class="hljs-number">0.0901</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9713</span><br>Epoch <span class="hljs-number">14</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0756</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9758</span> - val_loss: <span class="hljs-number">0.0988</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9713</span><br>Epoch <span class="hljs-number">15</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0734</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9758</span> - val_loss: <span class="hljs-number">0.0970</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9715</span><br>Epoch <span class="hljs-number">16</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0714</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9763</span> - val_loss: <span class="hljs-number">0.1045</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9672</span><br>Epoch <span class="hljs-number">17</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0692</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9778</span> - val_loss: <span class="hljs-number">0.1101</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9669</span><br>Epoch <span class="hljs-number">18</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 8s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0731</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9770</span> - val_loss: <span class="hljs-number">0.0948</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9726</span><br>Epoch <span class="hljs-number">19</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0659</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9785</span> - val_loss: <span class="hljs-number">0.1006</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9696</span><br>Epoch <span class="hljs-number">20</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0667</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9783</span> - val_loss: <span class="hljs-number">0.1242</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9618</span><br>Epoch <span class="hljs-number">21</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0635</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9788</span> - val_loss: <span class="hljs-number">0.1007</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9713</span><br>Epoch <span class="hljs-number">22</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0705</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9771</span> - val_loss: <span class="hljs-number">0.0928</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9745</span><br>Epoch <span class="hljs-number">23</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0614</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9801</span> - val_loss: <span class="hljs-number">0.0957</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9734</span><br>Epoch <span class="hljs-number">24</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0613</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9805</span> - val_loss: <span class="hljs-number">0.0967</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9713</span><br>Epoch <span class="hljs-number">25</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0621</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9797</span> - val_loss: <span class="hljs-number">0.0828</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9726</span><br>Epoch <span class="hljs-number">26</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0597</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9807</span> - val_loss: <span class="hljs-number">0.1076</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9691</span><br>Epoch <span class="hljs-number">27</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0593</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9805</span> - val_loss: <span class="hljs-number">0.0948</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9732</span><br>Epoch <span class="hljs-number">28</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0613</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9808</span> - val_loss: <span class="hljs-number">0.0974</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9713</span><br>Epoch <span class="hljs-number">29</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 9s 9ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0552</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9821</span> - val_loss: <span class="hljs-number">0.1000</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9688</span><br>Epoch <span class="hljs-number">30</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0567</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9810</span> - val_loss: <span class="hljs-number">0.0922</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9726</span><br>Epoch <span class="hljs-number">31</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0575</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9820</span> - val_loss: <span class="hljs-number">0.0956</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9740</span><br>Epoch <span class="hljs-number">32</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0551</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9833</span> - val_loss: <span class="hljs-number">0.1317</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9620</span><br>Epoch <span class="hljs-number">33</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0560</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9822</span> - val_loss: <span class="hljs-number">0.0863</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9721</span><br>Epoch <span class="hljs-number">34</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0571</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9812</span> - val_loss: <span class="hljs-number">0.0888</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9748</span><br>Epoch <span class="hljs-number">35</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0527</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9823</span> - val_loss: <span class="hljs-number">0.1107</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9707</span><br>Epoch <span class="hljs-number">36</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0534</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9827</span> - val_loss: <span class="hljs-number">0.1104</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9721</span><br>Epoch <span class="hljs-number">37</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0533</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9822</span> - val_loss: <span class="hljs-number">0.1183</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9680</span><br>Epoch <span class="hljs-number">38</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0541</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9828</span> - val_loss: <span class="hljs-number">0.1079</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9713</span><br>Epoch <span class="hljs-number">39</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0522</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9831</span> - val_loss: <span class="hljs-number">0.1045</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9732</span><br>Epoch <span class="hljs-number">40</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0503</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9838</span> - val_loss: <span class="hljs-number">0.0964</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9715</span><br>Epoch <span class="hljs-number">41</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0500</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9836</span> - val_loss: <span class="hljs-number">0.0952</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9732</span><br>Epoch <span class="hljs-number">42</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0529</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9825</span> - val_loss: <span class="hljs-number">0.0954</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9715</span><br>Epoch <span class="hljs-number">43</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0475</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9844</span> - val_loss: <span class="hljs-number">0.1000</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9726</span><br>Epoch <span class="hljs-number">44</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0498</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9839</span> - val_loss: <span class="hljs-number">0.1020</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9688</span><br>Epoch <span class="hljs-number">45</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0486</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9833</span> - val_loss: <span class="hljs-number">0.1088</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9694</span><br>Epoch <span class="hljs-number">46</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0478</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9843</span> - val_loss: <span class="hljs-number">0.0983</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9726</span><br>Epoch <span class="hljs-number">47</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0469</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9852</span> - val_loss: <span class="hljs-number">0.1149</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9680</span><br>Epoch <span class="hljs-number">48</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0462</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9856</span> - val_loss: <span class="hljs-number">0.1039</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9721</span><br>Epoch <span class="hljs-number">49</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0462</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9852</span> - val_loss: <span class="hljs-number">0.1063</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">50</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0481</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9846</span> - val_loss: <span class="hljs-number">0.0931</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9742</span><br>Epoch <span class="hljs-number">51</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0461</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9851</span> - val_loss: <span class="hljs-number">0.1039</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9707</span><br>Epoch <span class="hljs-number">52</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0422</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9858</span> - val_loss: <span class="hljs-number">0.1228</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9680</span><br>Epoch <span class="hljs-number">53</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0446</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9855</span> - val_loss: <span class="hljs-number">0.1068</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9702</span><br>Epoch <span class="hljs-number">54</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0420</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9858</span> - val_loss: <span class="hljs-number">0.1050</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9715</span><br>Epoch <span class="hljs-number">55</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0446</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9851</span> - val_loss: <span class="hljs-number">0.1147</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9721</span><br>Epoch <span class="hljs-number">56</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0432</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9855</span> - val_loss: <span class="hljs-number">0.1015</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9745</span><br>Epoch <span class="hljs-number">57</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0463</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9851</span> - val_loss: <span class="hljs-number">0.1018</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9707</span><br>Epoch <span class="hljs-number">58</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0434</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9858</span> - val_loss: <span class="hljs-number">0.1078</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9696</span><br>Epoch <span class="hljs-number">59</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0443</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9854</span> - val_loss: <span class="hljs-number">0.1153</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9686</span><br>Epoch <span class="hljs-number">60</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0419</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9868</span> - val_loss: <span class="hljs-number">0.1222</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9664</span><br>Epoch <span class="hljs-number">61</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0409</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9865</span> - val_loss: <span class="hljs-number">0.1257</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9680</span><br>Epoch <span class="hljs-number">62</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0428</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9859</span> - val_loss: <span class="hljs-number">0.1155</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9710</span><br>Epoch <span class="hljs-number">63</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0440</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9850</span> - val_loss: <span class="hljs-number">0.1254</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9667</span><br>Epoch <span class="hljs-number">64</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0409</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9869</span> - val_loss: <span class="hljs-number">0.1135</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9691</span><br>Epoch <span class="hljs-number">65</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0423</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9867</span> - val_loss: <span class="hljs-number">0.1272</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9696</span><br>Epoch <span class="hljs-number">66</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0389</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9867</span> - val_loss: <span class="hljs-number">0.1229</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">67</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0400</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9870</span> - val_loss: <span class="hljs-number">0.0986</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9742</span><br>Epoch <span class="hljs-number">68</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0414</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9868</span> - val_loss: <span class="hljs-number">0.1165</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9726</span><br>Epoch <span class="hljs-number">69</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0416</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9866</span> - val_loss: <span class="hljs-number">0.1248</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9694</span><br>Epoch <span class="hljs-number">70</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0374</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9878</span> - val_loss: <span class="hljs-number">0.1092</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9713</span><br>Epoch <span class="hljs-number">71</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0408</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9872</span> - val_loss: <span class="hljs-number">0.1141</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9702</span><br>Epoch <span class="hljs-number">72</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0393</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9868</span> - val_loss: <span class="hljs-number">0.1115</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9718</span><br>Epoch <span class="hljs-number">73</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0384</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9882</span> - val_loss: <span class="hljs-number">0.1278</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9656</span><br>Epoch <span class="hljs-number">74</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0392</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9875</span> - val_loss: <span class="hljs-number">0.1134</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9715</span><br>Epoch <span class="hljs-number">75</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0371</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9883</span> - val_loss: <span class="hljs-number">0.1292</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9713</span><br>Epoch <span class="hljs-number">76</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0412</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9867</span> - val_loss: <span class="hljs-number">0.1344</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9664</span><br>Epoch <span class="hljs-number">77</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 8s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0351</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9881</span> - val_loss: <span class="hljs-number">0.1517</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9672</span><br>Epoch <span class="hljs-number">78</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0385</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9876</span> - val_loss: <span class="hljs-number">0.1131</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9691</span><br>Epoch <span class="hljs-number">79</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0387</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9870</span> - val_loss: <span class="hljs-number">0.1222</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9705</span><br>Epoch <span class="hljs-number">80</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0367</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9880</span> - val_loss: <span class="hljs-number">0.1233</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9718</span><br>Epoch <span class="hljs-number">81</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0340</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9888</span> - val_loss: <span class="hljs-number">0.1138</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9702</span><br>Epoch <span class="hljs-number">82</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0427</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9870</span> - val_loss: <span class="hljs-number">0.1517</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9593</span><br>Epoch <span class="hljs-number">83</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0424</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9863</span> - val_loss: <span class="hljs-number">0.1133</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9702</span><br>Epoch <span class="hljs-number">84</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0399</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9871</span> - val_loss: <span class="hljs-number">0.1268</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9724</span><br>Epoch <span class="hljs-number">85</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0394</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9874</span> - val_loss: <span class="hljs-number">0.1281</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9691</span><br>Epoch <span class="hljs-number">86</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0382</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9884</span> - val_loss: <span class="hljs-number">0.1268</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9710</span><br>Epoch <span class="hljs-number">87</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0375</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9879</span> - val_loss: <span class="hljs-number">0.1293</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9702</span><br>Epoch <span class="hljs-number">88</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0390</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9876</span> - val_loss: <span class="hljs-number">0.1538</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9694</span><br>Epoch <span class="hljs-number">89</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0361</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9883</span> - val_loss: <span class="hljs-number">0.1266</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9699</span><br>Epoch <span class="hljs-number">90</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0383</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9874</span> - val_loss: <span class="hljs-number">0.1244</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9718</span><br>Epoch <span class="hljs-number">91</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0323</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9901</span> - val_loss: <span class="hljs-number">0.1377</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9713</span><br>Epoch <span class="hljs-number">92</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0347</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9882</span> - val_loss: <span class="hljs-number">0.1412</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9705</span><br>Epoch <span class="hljs-number">93</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0339</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9894</span> - val_loss: <span class="hljs-number">0.1389</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9658</span><br>Epoch <span class="hljs-number">94</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0354</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9886</span> - val_loss: <span class="hljs-number">0.1223</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9699</span><br>Epoch <span class="hljs-number">95</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0352</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9887</span> - val_loss: <span class="hljs-number">0.1688</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9604</span><br>Epoch <span class="hljs-number">96</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0334</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9892</span> - val_loss: <span class="hljs-number">0.1383</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9661</span><br>Epoch <span class="hljs-number">97</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0318</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9902</span> - val_loss: <span class="hljs-number">0.1281</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9694</span><br>Epoch <span class="hljs-number">98</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0372</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9884</span> - val_loss: <span class="hljs-number">0.1387</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9702</span><br>Epoch <span class="hljs-number">99</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0400</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9871</span> - val_loss: <span class="hljs-number">0.1396</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9702</span><br>Epoch <span class="hljs-number">100</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0339</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9890</span> - val_loss: <span class="hljs-number">0.1252</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9710</span><br>Model: <span class="hljs-string">&quot;sequential&quot;</span><br>_________________________________________________________________<br>Layer (type)                 Output Shape              Param #   <br>=================================================================<br><span class="hljs-keyword">flatten</span> (<span class="hljs-keyword">Flatten</span>)            (None, <span class="hljs-number">12288</span>)             <span class="hljs-number">0</span>         <br>_________________________________________________________________<br>dense (Dense)                (None, <span class="hljs-number">128</span>)               <span class="hljs-number">1572992</span>   <br>_________________________________________________________________<br>dropout (Dropout)            (None, <span class="hljs-number">128</span>)               <span class="hljs-number">0</span>         <br>_________________________________________________________________<br>dense_1 (Dense)              (None, <span class="hljs-number">64</span>)                <span class="hljs-number">8256</span>      <br>_________________________________________________________________<br>dense_2 (Dense)              (None, <span class="hljs-number">32</span>)                <span class="hljs-number">2080</span>      <br>_________________________________________________________________<br>dense_3 (Dense)              (None, <span class="hljs-number">2</span>)                 <span class="hljs-number">66</span>        <br>=================================================================<br>Total params: <span class="hljs-number">1</span>,<span class="hljs-number">583</span>,<span class="hljs-number">394</span><br>Trainable params: <span class="hljs-number">1</span>,<span class="hljs-number">583</span>,<span class="hljs-number">394</span><br>Non-trainable params: <span class="hljs-number">0</span><br>_________________________________________________________________<br></code></pre></td></tr></table></figure><p>6.4</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs gradle">D:\pyAnaconda\envs\pythonProject\python.exe D:<span class="hljs-regexp">/Code/</span>pythonProject<span class="hljs-regexp">/work/</span>sdss_reco.py<br>Epoch <span class="hljs-number">1</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.2239</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9276</span> - val_loss: <span class="hljs-number">0.1582</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9504</span><br>Epoch <span class="hljs-number">2</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1384</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9546</span> - val_loss: <span class="hljs-number">0.1269</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9604</span><br>Epoch <span class="hljs-number">3</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1186</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9612</span> - val_loss: <span class="hljs-number">0.1119</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9631</span><br>Epoch <span class="hljs-number">4</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1159</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9615</span> - val_loss: <span class="hljs-number">0.1103</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9639</span><br>Epoch <span class="hljs-number">5</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1049</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9646</span> - val_loss: <span class="hljs-number">0.0992</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9677</span><br>Epoch <span class="hljs-number">6</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0989</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9675</span> - val_loss: <span class="hljs-number">0.1057</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9650</span><br>Epoch <span class="hljs-number">7</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0922</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9708</span> - val_loss: <span class="hljs-number">0.1037</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9658</span><br>Epoch <span class="hljs-number">8</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0916</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9698</span> - val_loss: <span class="hljs-number">0.1100</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9686</span><br>Epoch <span class="hljs-number">9</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0864</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9719</span> - val_loss: <span class="hljs-number">0.0980</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9688</span><br>Epoch <span class="hljs-number">10</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0812</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9736</span> - val_loss: <span class="hljs-number">0.0850</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">11</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0768</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9757</span> - val_loss: <span class="hljs-number">0.0868</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9724</span><br>Epoch <span class="hljs-number">12</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0743</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9756</span> - val_loss: <span class="hljs-number">0.0987</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9680</span><br>Epoch <span class="hljs-number">13</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0731</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9761</span> - val_loss: <span class="hljs-number">0.0906</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9718</span><br>Epoch <span class="hljs-number">14</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0711</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9771</span> - val_loss: <span class="hljs-number">0.0782</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9751</span><br>Epoch <span class="hljs-number">15</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0669</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9784</span> - val_loss: <span class="hljs-number">0.0904</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9734</span><br>Epoch <span class="hljs-number">16</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0750</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9755</span> - val_loss: <span class="hljs-number">0.0949</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9705</span><br>Epoch <span class="hljs-number">17</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0723</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9764</span> - val_loss: <span class="hljs-number">0.0831</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9761</span><br>Epoch <span class="hljs-number">18</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0639</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9794</span> - val_loss: <span class="hljs-number">0.0987</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9710</span><br>Epoch <span class="hljs-number">19</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0648</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9787</span> - val_loss: <span class="hljs-number">0.0897</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9734</span><br>Epoch <span class="hljs-number">20</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0637</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9793</span> - val_loss: <span class="hljs-number">0.0803</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9759</span><br>Epoch <span class="hljs-number">21</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0612</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9798</span> - val_loss: <span class="hljs-number">0.0770</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9783</span><br>Epoch <span class="hljs-number">22</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0574</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9820</span> - val_loss: <span class="hljs-number">0.0890</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9753</span><br>Epoch <span class="hljs-number">23</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0590</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9801</span> - val_loss: <span class="hljs-number">0.0872</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">24</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0581</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9806</span> - val_loss: <span class="hljs-number">0.1062</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9699</span><br>Epoch <span class="hljs-number">25</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0578</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9810</span> - val_loss: <span class="hljs-number">0.0894</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9721</span><br>Epoch <span class="hljs-number">26</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0529</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9828</span> - val_loss: <span class="hljs-number">0.0863</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9745</span><br>Epoch <span class="hljs-number">27</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0524</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9833</span> - val_loss: <span class="hljs-number">0.0928</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">28</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0540</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9820</span> - val_loss: <span class="hljs-number">0.0815</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9759</span><br>Epoch <span class="hljs-number">29</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0536</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9829</span> - val_loss: <span class="hljs-number">0.1091</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9686</span><br>Epoch <span class="hljs-number">30</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 5s 9ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0483</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9837</span> - val_loss: <span class="hljs-number">0.0886</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9756</span><br>Epoch <span class="hljs-number">31</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0484</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9843</span> - val_loss: <span class="hljs-number">0.0877</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">32</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0490</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9836</span> - val_loss: <span class="hljs-number">0.0902</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9740</span><br>Epoch <span class="hljs-number">33</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0491</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9839</span> - val_loss: <span class="hljs-number">0.0917</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9734</span><br>Epoch <span class="hljs-number">34</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0517</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9833</span> - val_loss: <span class="hljs-number">0.0899</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">35</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0478</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9840</span> - val_loss: <span class="hljs-number">0.0999</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9724</span><br>Epoch <span class="hljs-number">36</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0444</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9855</span> - val_loss: <span class="hljs-number">0.0949</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9726</span><br>Epoch <span class="hljs-number">37</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0480</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9843</span> - val_loss: <span class="hljs-number">0.0861</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9751</span><br>Epoch <span class="hljs-number">38</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0430</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9857</span> - val_loss: <span class="hljs-number">0.0805</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9756</span><br>Epoch <span class="hljs-number">39</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0415</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9868</span> - val_loss: <span class="hljs-number">0.0850</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9775</span><br>Epoch <span class="hljs-number">40</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0417</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9864</span> - val_loss: <span class="hljs-number">0.1631</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9547</span><br>Epoch <span class="hljs-number">41</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0526</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9826</span> - val_loss: <span class="hljs-number">0.0935</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9751</span><br>Epoch <span class="hljs-number">42</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0423</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9863</span> - val_loss: <span class="hljs-number">0.0992</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9718</span><br>Epoch <span class="hljs-number">43</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0403</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9861</span> - val_loss: <span class="hljs-number">0.0881</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9745</span><br>Epoch <span class="hljs-number">44</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0407</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9864</span> - val_loss: <span class="hljs-number">0.0972</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">45</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0413</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9863</span> - val_loss: <span class="hljs-number">0.0901</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9753</span><br>Epoch <span class="hljs-number">46</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0397</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9867</span> - val_loss: <span class="hljs-number">0.0934</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9745</span><br>Epoch <span class="hljs-number">47</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0408</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9865</span> - val_loss: <span class="hljs-number">0.1015</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9715</span><br>Epoch <span class="hljs-number">48</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0377</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9878</span> - val_loss: <span class="hljs-number">0.0932</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9748</span><br>Epoch <span class="hljs-number">49</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0384</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9871</span> - val_loss: <span class="hljs-number">0.0941</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9751</span><br>Epoch <span class="hljs-number">50</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0395</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9871</span> - val_loss: <span class="hljs-number">0.0971</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9753</span><br>Model: <span class="hljs-string">&quot;sequential&quot;</span><br>_________________________________________________________________<br>Layer (type)                 Output Shape              Param #   <br>=================================================================<br><span class="hljs-keyword">flatten</span> (<span class="hljs-keyword">Flatten</span>)            (None, <span class="hljs-number">12288</span>)             <span class="hljs-number">0</span>         <br>_________________________________________________________________<br>dense (Dense)                (None, <span class="hljs-number">128</span>)               <span class="hljs-number">1572992</span>   <br>_________________________________________________________________<br>dropout (Dropout)            (None, <span class="hljs-number">128</span>)               <span class="hljs-number">0</span>         <br>_________________________________________________________________<br>dense_1 (Dense)              (None, <span class="hljs-number">64</span>)                <span class="hljs-number">8256</span>      <br>_________________________________________________________________<br>dense_2 (Dense)              (None, <span class="hljs-number">32</span>)                <span class="hljs-number">2080</span>      <br>_________________________________________________________________<br>dense_3 (Dense)              (None, <span class="hljs-number">2</span>)                 <span class="hljs-number">66</span>        <br>=================================================================<br>Total params: <span class="hljs-number">1</span>,<span class="hljs-number">583</span>,<span class="hljs-number">394</span><br>Trainable params: <span class="hljs-number">1</span>,<span class="hljs-number">583</span>,<span class="hljs-number">394</span><br>Non-trainable params: <span class="hljs-number">0</span><br>_________________________________________________________________<br><br>auc = <span class="hljs-number">0.992495791163834</span><br></code></pre></td></tr></table></figure><p>21</p><p>loss: 0.0612 - sparse_categorical_accuracy: 0.9798 - val_loss: 0.0770 - val_sparse_categorical_accuracy: 0.9783</p><p>39</p><p>519/519 [==============================] - 3s 6ms/step - loss: 0.0415 - sparse_categorical_accuracy: 0.9868 - val_loss: 0.0850 - val_sparse_categorical_accuracy: 0.9775</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;姑且存一下训练结果，后面应该还会改，比如20个epoch应该不太够&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
    <category term="deeplearning" scheme="https://github.com/sterne012/sterne012.github.io/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>软件工程复习</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/05/18/software/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/05/18/software/</id>
    <published>2022-05-18T11:43:31.000Z</published>
    <updated>2022-06-03T09:21:37.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Part1-软件工程概述"><a href="#Part1-软件工程概述" class="headerlink" title="Part1.软件工程概述"></a>Part1.软件工程概述</h1><h2 id="1-软件与软件工程的概念"><a href="#1-软件与软件工程的概念" class="headerlink" title="1.软件与软件工程的概念"></a>1.软件与软件工程的概念</h2><h3 id="1-1软件的概念、特性和分类"><a href="#1-1软件的概念、特性和分类" class="headerlink" title="1.1软件的概念、特性和分类"></a>1.1软件的概念、特性和分类</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>•软件是计算机系统中与硬件相互依存的另一部分，它是包括程序，数据及其相关文档的完整集合。</p><p>•程序是按事先设计的功能和性能要求执行的指令序列。</p><p>•数据是使程序能正常操纵信息的数据结构。</p><p>•文档是与程序开发，维护和使用有关的图文材料。</p><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>(1) 形态特性: 软件是无形的、不可见的逻辑实体。度量常规产品的几何尺寸、物理性质和化学成分对它却是毫无意义的。 </p><p>(2) 智能特性：软件是复杂的智力产品，它的开发凝聚了人们的大量脑力劳动，它本身也体现了知识实践经验和人类的智慧，具有一定的智能。它可以帮助我们解决复杂的计算、分析、判断和决策问题。</p><p>(3) 开发特性: 尽管已经有了一些工具（也是软件）来辅助软件开发工作，但到目前为止尚未实现自动化。软件开发中仍然包含了相当份量的个体劳动，使得这一大规模知识型工作充满了个人行为和个人因素。</p><p>(4) 质量特性：目前还无法得到完全没有缺陷的软件产品 。</p><p>(5) 生产特性:与硬件或传统的制造业产品的生产完全不同，软件一旦设计开发出来，如果需要提供多个用户，它的复制十分简单，其成本也极为有限 。 </p><p>(6) 管理特性：由于上述的几个特点，使得软件的开发管理显得更为重要，也更为独特 。</p><p>(7) 环境特性:软件的开发和运行都离不开相关的计算机系统环境，包括支持它的开发和运行的相关硬件和软件。软件对于计算机系统的环境有着不可摆脱的依赖性。 </p><p>(8) 维护特性：软件投入使用以后需要进行维护，但这种维护与传统产业产品的维护概念有着很大差别。</p><p>(9) 废弃特性: 与硬件不同，软件并不是由于被“用坏”而被废弃的 。</p><p>(10) 应用特性：软件的应用极为广泛，如今它已渗入国民经济和国防的各个领域，现已成为信息产业、先进制造业和现代服务业的核心，占据了无可取代的地位。</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>（1） 系统软件</p><p>•操作系统•数据库管理系统•设备驱动程序•通信和网络处理程序等 </p><p>（2）支撑软件（工具软件）</p><p>•纵向支撑软件：分析、设计、编码、测试工具等•横向支撑软件：项目管理工具，配置管理工具等</p><p>（3）应用软件</p><p>•工程与科学计算软件•商业数据处理软件•ERP软件•计算机辅助设计／制造软件•系统仿真软件•智能产品嵌入软件•事务管理、办公自动化软件</p><p>（4）可复用软件</p><p>•标准函数库、类库、构件库等</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>具有产品和产品生产载体的双重作用。</p><p>(1)作为产品，软件显示了由计算机硬件体现的计算能力，扮演着信息转换的角色：产生、管理、查询、修改、显示或者传递各种不同的信息。</p><p>(2)作为产品生产的载体，软件提供了计算机控制（操作系统）、信息通信（网络），以及应用程序开发和控制的基础平台（软件工具和环境）。 </p><h4 id="软件质量"><a href="#软件质量" class="headerlink" title="软件质量"></a>软件质量</h4><p>不同类型、不同应用领域、不同用户对软件质量要素的要求也有很大差别。从事办公和机要工作的软件对安全性要求比较高。实时嵌入式软件对正确性和可靠性要求比较高等等。软件开发过程必须根据软件的实际情况对软件质量要素的定位进行折衷和决策。</p><p>下面给出软件工程常用的八个质量要素的定义和解释。</p><p>(1)正确性(correctness)。</p><p> 软件满足需求规约及完成用户目标的程度。</p><p>(2)可用性(usability)。</p><p>学习和使用软件的难易程度，包括：操作软件、为软件准备输入数据，解释软件输出结果等。学习和使用困难的软件可用性差，符合人们习惯、传统的软件可用性好。</p><p>(3)可靠性(reliability)。</p><p>软件完成预期功能，成功运行的概率。软件可靠性反映了软件无故障工作的状况。为了提高可靠性必须提高软件开发、测试、维护的质量，减少软件潜伏的缺陷数量。对于实时嵌入式计算机系统，软件要实时地控制一个物理过程，如果可靠性得不到保证，一旦出现问题可能是灾难性的，后果不堪设想。</p><p>(4)有效性(efficiency)。</p><p>软件系统利用计算机的时间资源和空间资源完成系统功能的能力。各种计算机软件无不将系统的时／空开销和网络环境下的信息传输开销作为衡量软件质量的一项重要技术指标。很多场合，在追求时间有效性和空间有效性方面会发生矛盾，这时不得不牺牲时间效率换取空间有效性，或牺牲空间效率换取时间有效性。时／空折衷是经常出现的。有经验的软件设计人员会巧妙地利用折衷概念，在具体的物理环境中实现用户的需求和自己的设计。</p><p>(5)可维护性(maintainability)。</p><p>软件制品交付用户使用后，能够对它进行修改，以便改正潜伏的缺陷、改进性能和其他属性，使软件制品适应环境的变化等等。由于软件是逻辑产品，只要用户需要可以无限期地使用下去，软件维护是不可避免的。软件维护成本约占整个生命周期的40%至60%。软件维护费用高的问题今天仍然没有明显改变。</p><p>(6)可移植性(portability)。</p><p>将软件安装在不同计算机系统或环境的难易程度。为了获得比较高的可移植性，在软件设计过程中通常采用通用的程序设计语言和运行支撑环境。对依赖于计算机系统的低级(物理)特征部分，如编译系统的目标代码生成，应相对独立、集中。这样与处理机无关的部分就可以移植到其他系统上使用。</p><p>(7)安全性(security)。</p><p>控制或保护程序和数据不受破坏的机制，以防止程序和数据受到意外的或蓄意的存取、使用、修改、毁坏或泄密。在网络环境下计算机犯罪、恶作剧增多，软件安全受到人们的高度重视。软件的安全性已成为用户十分关心的质量要素，影响着软件开发、测试、维护各个方面。</p><p>(8)可复用性(reusebility)。</p><p>概念或功能相对独立的一个或一组相关模块定义为一个软构件。软构件可以在多种场合应用的程度称为构件的可复用性。可复用的软构件有的可以不加修改直接使用，有的需要修改才可使用。可复用软构件应具有清晰的结构和注解，应具有正确的编码和较低的时/空开销。各种可复用软构件还可以按照某种规则存放在软构件库中，供软件工程师们选用。可复用性有助于提高软件制品的质量和开发效率、有助于降低软件的开发和维护费用。</p><h3 id="1-2软件危机与软件工程"><a href="#1-2软件危机与软件工程" class="headerlink" title="1.2软件危机与软件工程"></a>1.2软件危机与软件工程</h3><p>软件危机暴发于上个世纪六十年代末。</p><p>主要表现为：软件的发展速度远远滞后于硬件的发展速度，不能满足社会日益增长的软件需求。软件开发周期长、成本高、质量差、维护困难。</p><p>原因：</p><p>缺乏软件开发的经验和有关软件开发数据的积累，使得开发工作的计划很难制定。</p><p>软件人员与用户的交流存在障碍，使得获取的需求不充分或存在错误 。</p><p>软件开发过程不规范。如，没有真正了解用户的需求就开始编程序。</p><p>随着软件规模的增大，其复杂性往往会呈指数级升高。需要很多人分工协作，不仅涉及技术问题，更重要的是必须有科学严格的管理。</p><p>缺少有效的软件评测手段，提交用户的软件质量不能完全保证。   </p><p>解决：</p><p>彻底消除“软件就是程序”的错误观念。</p><p>充分认识到软件开发应该是一种组织良好、管理严密、各类人员协同配合、共同完成的工程项目。</p><p>推广和使用在实践中总结出来的开发软件的成功技术、方法和工具。</p><p>按工程化的原则和方法组织软件开发工作。</p><p>软件工程概念的提出：</p><p>在NATO会议上，Fritz Bauer对软件工程的定义是：“软件工程就是为了经济地获得可靠的且能在实际机器上有效地运行的软件，而建立和使用完善的工程原理。”</p><p>1993年IEEE给出的定义：“软件工程是：① 把系统的、规范的、可度量的途径应用于软件开发、运行和维护过程，也就是把工程应用于软件；② 研究①中提到的途径。”。</p><p>•概括地说，软件工程是指导计算机软件开发和维护的工程学科。<br> 采用工程的概念、原理、技术和方法来开发与维护软件，把经过时间考验而证明正确的管理技术和当前能够得到的最好的技术方法结合起来，以经济地开发出高质量的软件并有效地维护它，这就是软件工程。</p><h3 id="1-3软件工程的目标"><a href="#1-3软件工程的目标" class="headerlink" title="1.3软件工程的目标"></a>1.3软件工程的目标</h3><p>软件工程的目标是运用先进的软件开发技术和管理方法来提高软件的质量和生产率，也就是要以较短的周期、较低的成本生产出高质量的软件产品，并最终实现软件的工业化生产。 </p><p> 付出较低的开发成本</p><p> 达到要求的软件功能</p><p> 取得较好的软件性能</p><p> 开发的软件易于移植</p><p> 需要较低的维护费用</p><p> 能按时完成开发工作，及时交付使用</p><img src="/2022/05/18/software/image-20220603095340882.png" class="" title="image-20220603095340882"><h3 id="1-4软件生存期"><a href="#1-4软件生存期" class="headerlink" title="1.4软件生存期"></a>1.4软件生存期</h3><p>软件也有一个孕育、诞生、成长、成熟和衰亡的生存过程，我们称这个过程为软件生命周期或软件生存期。</p><p>软件生存期分为三个时期</p><h4 id="软件定义"><a href="#软件定义" class="headerlink" title="软件定义"></a>软件定义</h4><p>问题定义：关键问题是：“要解决的问题是什么”。提交的内容为关于问题性质、工程目标和工程规模的书面报告。</p><p>可行性研究：回答的关键问题是：“上一个阶段所确定的问题是否有行得通的解决办法”。提交的内容为可行性研究报告，即从技术、经济和社会因素等方面研究各方案的可行性</p><p>需求分析：对用户提出的要求进行分析并给出详细的定义</p><p>准确地回答“目标系统必须做什么”这个问题。也就是对目标系统提出完整、准确、清晰、具体的要求。</p><p>编写软件需求说明书或系统功能说明书及初步的系统用户手册</p><p>提交管理机构评审</p><h4 id="软件开发"><a href="#软件开发" class="headerlink" title="软件开发"></a>软件开发</h4><p>任务：具体设计和实现前一个时期即软件定义时期定义的软件。</p><p>执行人：系统设计员，高级程序员，程序员，测试工程师和辅助人员等</p><p>阶段划分：分为概要设计、详细设计、编码和单元测试、集成测试和系统测试。其中前两个阶段又称为系统设计，后两个阶段又称为系统实现。</p><h5 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h5><p>概括地回答“怎样实现目标系统?”。</p><p>设计程序的体系结构，也就是确定程序由哪些模块组成以及模块间的关系。</p><p>提交的文档是概要设计说明书。</p><h5 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h5><p>回答“应该怎样具体地实现这个系统”。</p><p>详细地设计每个模块，确定实现模块功能所需要的算法和数据结构。</p><p>提交的文档是软件的详细设计说明书。</p><h5 id="程序编码和单元测试"><a href="#程序编码和单元测试" class="headerlink" title="程序编码和单元测试"></a>程序编码和单元测试</h5><p>写出正确的容易理解、容易维护的程序模块。</p><p>提交的文档为源程序、详尽的程序说明和单元测试报告。</p><h5 id="集成测试和系统测试"><a href="#集成测试和系统测试" class="headerlink" title="集成测试和系统测试"></a>集成测试和系统测试</h5><p>通过各种类型的测试(及相应的调试)使软件达到预定的要求。（黑盒白盒测试等）</p><p>提交的文档为测试计划、详细测试方案以及实际测试结果等。</p><h4 id="运行维护"><a href="#运行维护" class="headerlink" title="运行维护"></a>运行维护</h4><p>改正性维护，也就是诊断和改正在使用过程中发现的软件错误；</p><p>适应性维护，即修改软件以适应环境的变化；</p><p>完善性维护，即根据用户的要求改进或扩充软件，使它更完善；</p><p>预防性维护，即修改软件为将来的维护活动预先做准备。</p><h3 id="1-5软件工程方法概述"><a href="#1-5软件工程方法概述" class="headerlink" title="1.5软件工程方法概述"></a>1.5软件工程方法概述</h3><p>软件工程包含技术和管理两方面的内容，是技术和管理紧密结合所形成的工程学科。</p><p>通常将软件开发全过程中使用的一整套技术方法的集合称为方法学(methedology)，也称为范型(paradigm)。</p><p>目前使用最广泛的软件工程方法学：传统方法学（<strong>结构化方法学</strong>），<strong>面向对象方法学</strong>。</p><h4 id="三要素：方法、工具和过程。"><a href="#三要素：方法、工具和过程。" class="headerlink" title="三要素：方法、工具和过程。"></a>三要素：方法、工具和过程。</h4><p>软件工程方法为软件开发提供了 “如何做” 的技术;</p><p>软件工具为软件工程方法提供了自动的或半自动的软件支撑环境;</p><p>过程是为了获得高质量的软件所需要完成的一系列任务框架，它规定了完成各项任务的工作步骤。</p><h3 id="1-6软件工具概述"><a href="#1-6软件工具概述" class="headerlink" title="1.6软件工具概述"></a>1.6软件工具概述</h3><p>软件工具的概念</p><p>软件工具是指能支持软件生存周期中某一阶段（如系统定义、需求分析、设计、编码、测试或维护等）的需要而使用的软件工具。</p><p>早期的软件工具主要用来辅助程序员编程，如编辑程序、编译程序、排错程序等。</p><p>软件工具的分类：支持软件开发过程的工具、支持软件维护过程的工具、支持软件管理过程和支持过程的工具</p><h3 id="1-7软件工程知识体系及知识域"><a href="#1-7软件工程知识体系及知识域" class="headerlink" title="1.7软件工程知识体系及知识域"></a>1.7软件工程知识体系及知识域</h3><p>似乎不太重要</p><h2 id="2-软件生存期模型"><a href="#2-软件生存期模型" class="headerlink" title="2.软件生存期模型"></a>2.软件生存期模型</h2><h3 id="2-1瀑布模型"><a href="#2-1瀑布模型" class="headerlink" title="2.1瀑布模型"></a>2.1瀑布模型</h3><img src="/2022/05/18/software/image-20220603101635795.png" class="" title="image-20220603101635795"><p>瀑布模型(waterfall model)也称软件生存周期模型，是W.Royce在1970年首先提出的。</p><p>瀑布模型将软件开发过程分解为<strong>可行性研究、软件需求、设计、编码、测试、运行与维护、退役</strong>。</p><p>它们既是软件开发过程的分解，也是软件生存周期的阶段划分。</p><p>瀑布模型按照各阶段的目标和任务逐步进行开发，直至通过确认测试，向用户交付最终软件制品为止。</p><p>面对较大的复杂系统，人们细化了瀑布模型的阶段或过程划分，如下图所示。</p><img src="/2022/05/18/software/image-20220603101810065.png" class="" title="image-20220603101810065"><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>阶段间具有顺序性和依赖性。其中包含两重含义：</p><p>① 必须等前一阶段的工作完成之后，才能开始后一阶段的工作；</p><p>② 前一阶段的输出文档就是后一阶段的输入文档。</p><p>推迟实现的观点</p><p>① 瀑布模型在编码之前设置了系统分析和系统设计的各个阶段，分析与设计阶段的基本任务规定，在这两个阶段主要考虑目标系统的逻辑模型，不涉及软件的物理实现。</p><p>② 清楚地区分逻辑设计与物理设计，尽可能推迟程序的物理实现，是按照瀑布模型开发软件的一条重要的指导思想</p><p>质量保证的观点</p><p>① 每个阶段都必须完成规定的文档，没有交出合格的文档就是没有完成该阶段的任务。</p><p>② 每个阶段结束前都要对所完成的文档进行评审，以便尽早发现问题，改正错误。</p><p>实际的瀑布模型</p><p>实际的瀑布模型是带“反馈环”的，如图所示。实现代表开发过程，虚线代表维护过程。</p><img src="/2022/05/18/software/image-20220603101930531.png" class="" title="image-20220603101930531"><p>•V模型：瀑布模型的一个变体</p><p>V模型描述了测试阶段的活动与开发阶段相关活动（包括需求建模、概要设计、详细设计、编码）之间的关系。</p><img src="/2022/05/18/software/image-20220603102002610.png" class="" title="image-20220603102002610"><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>可强迫开发人员采用规范化的方法。</p><p>严格地规定了每个阶段必须提交的文档。</p><p>要求每个阶段交出的所有产品都必须是经过验证的。</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>由于瀑布模型几乎完全依赖于书面的规格说明，很可能导致最终开发出的软件产品不能真正满足用户的需要。如果需求规格说明与用户需求之间有差异，就会发生这种情况。</p><p>瀑布模型只适用于项目开始时需求已确定的情况。（需求不确定→不适合）</p><h3 id="2-2快速原型模型"><a href="#2-2快速原型模型" class="headerlink" title="2.2快速原型模型"></a>2.2快速原型模型</h3><p>快速原型是快速建立起来的可以在计算机上运行的程序，它所能完成的功能往往是最终产品能完成的功能的一个子集。</p><img src="/2022/05/18/software/image-20220603102113100.png" class="" title="image-20220603102113100"><p>原型有两类。</p><img src="/2022/05/18/software/image-20220603102257320.png" class="" title="image-20220603102257320"><p>(1)抛弃型原型(实验性原型)</p><p> 利用原型定义和确认了软件需求后，原型就完成了任务。</p><p> 开发人员就可以按照确认的需求进行软件设计、编码、测试。</p><p>(2)应用型原型(进化性原型)</p><p> 利用原型确认软件需求后，对原型进一步加工、完善，使之成为系统的一部分。</p><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><p>(1)有助于满足用户的真实需求。</p><p>(2)原型系统已经通过与用户的交互而得到验证，据此产生的规格说明文档能够正确地描述用户需求。</p><p>(3)软件产品的开发基本上是按线性顺序进行。</p><p>(4)因为规格说明文档正确地描述了用户需求，因此，在开发过程的后续阶段不会因为发现规格说明文档的错误而进行较大的返工。</p><p>(5)开发人员通过建立原型系统已经学到了许多东西，因此，在设计和编码阶段发生错误的可能性也比较小，这自然减少了在后续阶段需要改正前面阶段所犯错误的可能性。</p><p>(6) 快速原型的突出特点是“快速”。开发人员应该尽可能快地建造出原型系统，以加速软件开发过程，节约软件开发成本。原型的用途是获知用户的真正需求，一旦需求确定了，原型可以抛弃，当然也可以在原型的基础上进行开发。</p><h3 id="2-3增量模型"><a href="#2-3增量模型" class="headerlink" title="2.3增量模型"></a>2.3增量模型</h3><img src="/2022/05/18/software/image-20220603102515586.png" class="" title="image-20220603102515586"><p>使用增量模型开发软件时，把软件产品作为一系列的增量构件来设计、编码、集成和测试。</p><p>每个构件由多个相互作用的模块构成，并且能够完成特定的功能。</p><p>每个增量构件应当实现某种系统功能，因此增量构件的开发可以采用瀑布模型的方式</p><img src="/2022/05/18/software/image-20220603102620177.png" class="" title="image-20220603102620177"><p>采用增量模型需注意的问题 </p><p>(1)在把每个新的增量构件集成到现有软件体系结构中时，必须不破坏原来已经开发出的产品。</p><p>(2)软件体系结构必须是开放的，即向现有产品中加入新构件的过程必须简单、方便。</p><p> 因此，采用增量模型比采用瀑布模型和快速原型模型更需要精心的设计。</p><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><p>(1)能在较短时间内向用户提交可完成一些有用的工作产品，即从第1个构件交付之日起，用户就能做一些有用的工作。</p><p>(2)逐步增加产品的功能可以使用户有较充裕的时间学习和适应新产品，从而减少一个全新的软件可能给用户组织带来的冲击。</p><p>(3)项目失败的风险较低，虽然在某些增量构件中可能遇到一些问题，但其他增量构件将能够成功地交付给客户。</p><p>(4)优先级最高的服务首先交付，然后再将其他增量构件逐次集成进来。因此，最重要的系统服务将接受最多的测试。 </p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="2-4螺旋模型"><a href="#2-4螺旋模型" class="headerlink" title="2.4螺旋模型"></a>2.4螺旋模型</h3><p>采用增量模型需注意的问题 </p><p>(1)在把每个新的增量构件集成到现有软件体系结构中时，必须不破坏原来已经开发出的产品。</p><p>(2)软件体系结构必须是开放的，即向现有产品中加入新构件的过程必须简单、方便。</p><p> 因此，采用增量模型比采用瀑布模型和快速原型模型更需要精心的设计。</p><p>理解这种模型的一个简便方法，是把它看做在每个阶段之前都增加了风险分析过程的快速原型模型。 </p><img src="/2022/05/18/software/image-20220603102736394.png" class="" title="image-20220603102736394"><img src="/2022/05/18/software/image-20220603102750586.png" class="" title="image-20220603102750586"><h4 id="完整的螺旋模型"><a href="#完整的螺旋模型" class="headerlink" title="完整的螺旋模型"></a>完整的螺旋模型</h4><p>在螺旋模型中，软件过程表示成一个螺线，而不是像以往的模型那样表示为一个具有回溯的活动序列。</p><p>在螺线上的每一个循环表示过程的一个阶段。</p><p>每个阶段开始时的任务是确定该阶段的目标、为完成这些目标选择方案及设定这些方案的约束条件。接下来的任务是，从风险角度分析上一步的工作结果，努力排除各种潜在的风险，通常用建造原型的方法来排除风险。如果成功地排除了所有风险，则启动下一步开发步骤，在这个步骤的工作过程相当于纯粹的瀑布模型。最后是评价该阶段的工作成果并计划下一个阶段的工作。</p><p>螺旋模型适合大型软件开发，特别是目前应用广泛的电子商务、电子政务一类的业务软件系统。</p><p>开发这类系统时，软件需求往往不能完全确定。</p><p>项目开始时开发人员与用户协商，将能够确定的需求、暂时不能确定的需求划分为一系列的增量，并为增量排序，确定的、急需的增量排在前面，暂时不能确定或不急需的放在后面。</p><p>采用螺旋模型开发这类软件具有边学习、边建模，边开发、边使用、边改进的优点。</p><h4 id="螺旋模型的4项活动"><a href="#螺旋模型的4项活动" class="headerlink" title="螺旋模型的4项活动"></a>螺旋模型的4项活动</h4><p>螺线上的每一个循环可划分为4个象限，分别表达了4个方面的活动。</p><p>(1)目标设定——定义在该阶段的目标，弄清对过程和产品的限制条件，制订详细的管理计划，识别项目风险，可能还要计划与这些风险有关的对策。</p><p>(2)风险估计与弱化——针对每一个风险进行详细分析，设想弱化风险的步骤。</p><p>(3)开发与验证——评价风险之后选择系统开发模型。</p><p>(4)计划——评价开发工作，确定是否继续进行螺线的下一个循环。如果确定要继续，则计划项目的下一个阶段的工作</p><h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><p>对可选方案和约束条件的强调有利于已有软件的重用，也有助于把软件质量作为软件开发的一个重要目标。</p><p>减少了过多测试或测试不足所带来的风险。</p><p>在螺旋模型中维护只是模型的另一个周期，因而在维护和开发之间并没有本质区别。</p><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>螺旋模型是风险驱动的，因此要求软件开发人员必须具有丰富的风险评估经验和这方面的专门知识，否则将出现真正的风险：当项目实际上正在走向灾难时，开发人员可能还以为一切正常。</p><h3 id="2-5喷泉模型"><a href="#2-5喷泉模型" class="headerlink" title="2.5喷泉模型"></a>2.5喷泉模型</h3><img src="/2022/05/18/software/image-20220603103357522.png" class="" title="image-20220603103357522"><p>喷泉模型是典型的面向对象生命周期模型。</p><p>“喷泉”一词体现了迭代和无间隙特性。图中代表不同阶段的圆圈相互重叠，这明确表示两个活动之间存在重叠。用面向对象方法开发软件时，在分析、设计和编码等项开发活动之间不存在明显的边界，而各阶段在表示方法上的一致性也保证了各项开发活动之间的无缝过度。途中一个阶段内的向下箭头代表该阶段中的迭代或求精。</p><h3 id="2-6统一过程"><a href="#2-6统一过程" class="headerlink" title="2.6统一过程"></a>2.6统一过程</h3><img src="/2022/05/18/software/image-20220603103602073.png" class="" title="image-20220603103602073"><h4 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h4><p>在统一过程中，有6个核心工作流。</p><p>① 业务建模工作流。用商业用例为商业过程建立文档。</p><p>② 需求工作流。目标是描述系统应该做什么，确保开发人员构建正确的系统。为此，需明确系统的功能需求和非功能需求（约束）。</p><p>③ 分析和设计工作流。其目标是说明如何做。结果是分析模型和设计模型。</p><p>④ 实现工作流。用分层的方式组织代码的结构，用构件的形式来实现类，对构件进行单元测试，将构件集成到可执行的系统中。</p><p>⑤ 测试工作流。验证对象之间的交互、是否所有的构件都集成了、是否正确实现了所有需求、查错并改正。</p><p>⑥ 部署工作流。制作软件的外部版本、软件打包、分发、为用户提供帮助和支持。</p><h4 id="阶段"><a href="#阶段" class="headerlink" title="阶段"></a>阶段</h4><p>统一过程有4个阶段，分别是初始阶段、细化阶段、构造阶段和移交阶段。</p><p>① 初始阶段。初始阶段主要关注项目计划和风险评估，其目的是确定是否值得开发目标信息系统。</p><p>② 细化阶段。细化阶段关心定义系统的总体框架，其目标是：细化初始需求（用况）、细化体系结构、监控风险并细化它们的优先级、细化业务案例以及制订项目管理计划。</p><p>③ 构造阶段。构造阶段是建立系统，构造信息系统的第1个具有操作质量的版本，以能够交付给客户进行b测试的版本结束，有时称为测试版本。</p><p>④ 移交阶段。移交阶段包含b测试时期，以发布完整的系统而终止，其目标是确保信息系统真正满足客户的需求。</p><img src="/2022/05/18/software/image-20220603103733823.png" class="" title="image-20220603103733823"><h3 id="2-7基于构件的开发模型"><a href="#2-7基于构件的开发模型" class="headerlink" title="2.7基于构件的开发模型"></a>2.7基于构件的开发模型</h3><p>强调使用可复用的软件“构件”来设计和构造基于计算机的系统的过程。</p><p>考虑的焦点是集成，而不是实现。</p><img src="/2022/05/18/software/image-20220603103810050.png" class="" title="image-20220603103810050"><p>不考虑构件的开发技术，基于构件的开发模型由以下步骤组成：</p><p>(1)对于该问题领域的基于构件的可用产品进行研究和评估。</p><p>(2)考虑构件集成的问题。</p><p>(3)设计软件架构以容纳这些构件。</p><p>(4)将构件集成到架构中。</p><p>(5)进行充分的测试以保证功能正常。</p><h3 id="2-8敏捷过程"><a href="#2-8敏捷过程" class="headerlink" title="2.8敏捷过程"></a>2.8敏捷过程</h3><p>2001年，Kent Beck等17名编程大师发表“敏捷软件开发”宣言：</p><p> 我们正在通过亲身实践以及帮助他人实践的方式来揭示更好的软件开发之路，通过这项工作，我们认为：</p><p>   个体和交互胜过过程和工具；</p><p>   可工作软件胜过宽泛的文档；</p><p>   客户合作胜过合同谈判；</p><p>   响应变化胜过遵循计划。 </p><p>任何一个敏捷过程都可以由所强调的3个关键假设识别出来，这3个假设可适用于大多数软件项目。</p><p>(1) 提前预测哪些需求是稳定的、哪些需求会变化非常困难。同样的，预测项目进行中客户优先级的变化也很困难。</p><p>(2) 对很多软件，设计和构建是交错进行的。事实上，两种活动应当顺序开展以保证通过构建实施来验证设计模型，而在通过构建验证之前很难估计应该设计到什么程度。</p><p>(3) 从制订计划的角度来看，分析、设计、构建和测试并不像我们所设想的那么容易预测。</p><h4 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h4><p>(1)我们最优先要做的是通过尽早、持续交付有价值的软件来使客户满意。</p><p>(2)即使在开发的后期，也欢迎需求变更。敏捷过程利用变更为客户创造竞争优势。</p><p>(3)经常交付可运行软件，交付的间隔可以从几个星期到几个月，交付的时间间隔越短越好。</p><p>(4)在整个项目开发期间，业务人员和开发人员必须天天都在一起工作。 </p><p>(5)围绕有积极性的个人构建项目。给他们提供所需的环境和支持，并且信任他们能够完成工作。</p><p>(6)在团队内部，最富有效果和效率的信息传递方法是面对面交谈。</p><p>(7)可运行软件是进度的首要度量标准。</p><p>(8)敏捷过程提倡可持续的开发速度。责任人、开发者和用户应该能够保持一种长期、稳定的开发速度。</p><p>(9)不断地关注优秀的技能和好的设计会增强敏捷能力。</p><p>(10)简单是必要的。</p><p>(11)好的架构、需求和设计出自于自组织团队。</p><p>(12)每隔一定时间，团队会反省如何才能更有效地工作，并相应调整自己的行为</p><h4 id="使用范围"><a href="#使用范围" class="headerlink" title="使用范围"></a>使用范围</h4><p>敏捷软件开发过程适合小型一般软件的开发</p><p>适合建造原型系统</p><p>适合开发需求不确定的易变的业务处理系统</p><p>适合负责任的专业用户能加入开发团队并一直在开发现场工作的软件项目（多数场合，这一点是困难的）。</p><p>用敏捷软件开发过程快速构建原型，进行人机界面设计将是十分有效的。</p><p>生命攸关的实时系统，如空中交通指挥控制系统，机载、弹载、星载、船载的导航和武器控制系统的关键软件采用敏捷软件开发过程是不适宜的。这些软件需求定义严格、开发责任分明、必须有严格的测试和标准的文档，对安全性和保密性有更严格的规定。</p><h4 id="极限编程（eXtreme-Programming，XP）"><a href="#极限编程（eXtreme-Programming，XP）" class="headerlink" title="极限编程（eXtreme Programming，XP）"></a>极限编程（eXtreme Programming，XP）</h4><p>使用最广泛的敏捷过程，最初由Kent Beck提出。XP包含了策划、设计、编码和测试4个框架活动的规则和实践。 </p><img src="/2022/05/18/software/image-20220603105423453.png" class="" title="image-20220603105423453"><h4 id="自适应软件开发"><a href="#自适应软件开发" class="headerlink" title="自适应软件开发"></a>自适应软件开发</h4><p>自适应软件开发（adaptive software development，ASD）是由Jim Highsmith提出的；</p><p>它可作为构建复杂软件和系统的一项技术，其基本概念着眼于人员合作和团队自组织。</p><img src="/2022/05/18/software/image-20220603105603747.png" class="" title="image-20220603105603747"><h1 id="Part2-结构化分析与设计方法"><a href="#Part2-结构化分析与设计方法" class="headerlink" title="Part2.结构化分析与设计方法"></a>Part2.结构化分析与设计方法</h1><h2 id="3-软件需求获取与结构化分析方法"><a href="#3-软件需求获取与结构化分析方法" class="headerlink" title="3.软件需求获取与结构化分析方法"></a>3.软件需求获取与结构化分析方法</h2><h3 id="3-1需求获取与需求分析阶段的任务"><a href="#3-1需求获取与需求分析阶段的任务" class="headerlink" title="3.1需求获取与需求分析阶段的任务"></a>3.1需求获取与需求分析阶段的任务</h3><p>需求获取的主要任务是与客户或用户沟通，了解系统或产品的目标是什么？客户或用户想要实现什么？系统和产品如何满足业务的要求，最终系统或产品如何用于日常工作？</p><p>获取并理解用户的需求是软件工程师所面对的最困难的任务之一。</p><p>导出需求变得如此困难的原因归为以下几个方面的问题：</p><p>系统的目标或范围问题；</p><p>需求不准确性问题 ；</p><p>需求的易变问题 ；</p><p>需求获取除了需要有专业的系统分析师，还需要通过有效的客户／开发者的合作才能成功。 </p><h4 id="1-需求获取的任务和原则"><a href="#1-需求获取的任务和原则" class="headerlink" title="1.需求获取的任务和原则"></a>1.需求获取的任务和原则</h4><p>需求获取的任务</p><p>(1) 发现和分析问题，并分析问题的原因/结果关系。</p><p>(2) 与用户进行各种方式的交流，并使用调查研究方法收集信息。</p><p>(3) 按照三个成分观察问题的不同侧面：即数据、过程和接口。</p><p>(4) 将获取的需求文档化，形式有用例、决策表、需求表等。</p><p>需求获取应遵循的原则</p><p>(1) 深入浅出的原则。就是说，需求获取要尽可能全面、细致。获取的需求是个全集，目标系统真正实现的是个子集。</p><p>(2) 以流程为主线的原则。在与用户交流的过程中，应该用流程将所有的内容串起来。如信息、组织结构、处理规则等。这样便于交流沟通。流程的描述既有宏观描述，也有微观描述。</p><h4 id="2-需求获取的过程"><a href="#2-需求获取的过程" class="headerlink" title="2.需求获取的过程"></a>2.需求获取的过程</h4><h5 id="开发高层的业务模型"><a href="#开发高层的业务模型" class="headerlink" title="开发高层的业务模型"></a>开发高层的业务模型</h5><h5 id="定义项目范围和高层需求"><a href="#定义项目范围和高层需求" class="headerlink" title="定义项目范围和高层需求"></a>定义项目范围和高层需求</h5><h5 id="识别用户类和用户代表"><a href="#识别用户类和用户代表" class="headerlink" title="识别用户类和用户代表"></a>识别用户类和用户代表</h5><p>系统的不同用户之间在很多方面存在差异，例如：</p><p>(1) 使用产品的频率；</p><p>(2) 用户在应用领域的经验和使用计算机系统的技能；</p><p>(3) 所用到的产品功能；</p><p>(4) 为支持业务过程所进行的工作；</p><p>(5) 访问权限和安全级别</p><h5 id="获取具体的需求"><a href="#获取具体的需求" class="headerlink" title="获取具体的需求"></a>获取具体的需求</h5><p>  确定了项目范围和高层需求，并确定了用户类及用户代表后，就需要获取更具体、完整和详细的需求。具体需求的来源可以来自以下几种典型的途径。</p><p> (1) 与用户进行交流。 </p><p> (2) 现有产品或竞争产品的描述文档。  </p><p> (3) 系统需求规格说明。</p><p> (4) 当前系统的问题报告和改进要求。</p><p> (5) 市场调查和用户问卷调查。</p><p> (6) 观察用户如何工作。   </p><h5 id="确定目标系统的业务工作流"><a href="#确定目标系统的业务工作流" class="headerlink" title="确定目标系统的业务工作流"></a>确定目标系统的业务工作流</h5><p>  具体到当前待开发的应用系统，确定系统的业务工作流和主要的业务规则，采取需求调研的方法获取所需的信息.</p><h5 id="需求整理与总结"><a href="#需求整理与总结" class="headerlink" title="需求整理与总结"></a>需求整理与总结</h5><p>必须对上面步骤取得的需求资料进行整理和总结，确定对软件系统的综合要求，即软件的需求。</p><p>并提出这些需求实现条件，以及需求应达到的标准。</p><p>这些需求包括功能需求、性能需求、环境需求、可靠性需求、安全保密要求、用户界面需求、资源使用需求、软件成本消耗与开发进度需求等。</p><h4 id="3-软件需求分析阶段的任务"><a href="#3-软件需求分析阶段的任务" class="headerlink" title="3.软件需求分析阶段的任务"></a>3.软件需求分析阶段的任务</h4><img src="/2022/05/18/software/image-20220603112747635.png" class="" title="image-20220603112747635"><p>可以把软件需求分析阶段的工作分为4个步骤，即获取需求、分析需求、定义需求和验证需求，如图所示。 </p><h5 id="需求获取"><a href="#需求获取" class="headerlink" title="需求获取"></a>需求获取</h5><p>  通过启发、引导从客户（或用户）那里得到的原始需求是他们的业务要求（needs），简称为N。</p><p>  这是分析之前获取的需求，其中可能存在一些实际问题，这些问题只有通过分析才能得到解决，直接把获取的需求作为软件设计阶段的依据将会导致严重的后果。 </p><h5 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h5><p>  认真研究获取的需求，必须考虑以下几方面：</p><p>  (1) 完整性：每项获取的需求都应给出清楚的描述，使得软件开发工作能够取得设计和实现该功能所需要的全部必要信息。</p><p>  (2) 正确性：获取的每项需求必须是准确无误的，并且需求描述无歧义性。</p><p>  (3) 合理性：各项需求之间、软件需求与系统需求之间应是协调一致的，不应存在矛盾和冲突。</p><p>  (4) 可行性：包括技术可行性 、经济可行性 、社会可行性 。</p><p>  (5) 充分性：获取的需求是否全面、周到。 </p><p>由于分析的过程会对获取的需求做部分调整，也即从获取的需求N中去掉了一些a，又补充了一些c，从而得到的是分析的需求R1（b+c）。</p><img src="/2022/05/18/software/image-20220603112918627.png" class="" title="image-20220603112918627"><h5 id="需求定义"><a href="#需求定义" class="headerlink" title="需求定义"></a>需求定义</h5><p>  将已经过分析的需求清晰、全面、系统、准确地描述成为正式的文档，这一步定义需求的工作就是编写需求规格说明。 </p><h5 id="需求验证"><a href="#需求验证" class="headerlink" title="需求验证"></a>需求验证</h5><p>  为了确保已定义的需求（需求规格说明）准确无误，并能为客户（或用户）理解和接受，需要对其进行严格的评审。 </p><h3 id="3-2结构化分析方法"><a href="#3-2结构化分析方法" class="headerlink" title="3.2结构化分析方法"></a>3.2结构化分析方法</h3><p>•结构化分析模型</p><p>  结构化分析方法是一种建模技术，它建立的分析模型如图所示。</p><img src="/2022/05/18/software/image-20220603113107619.png" class="" title="image-20220603113107619"><h4 id="1-功能建模（数据流图）"><a href="#1-功能建模（数据流图）" class="headerlink" title="1.功能建模（数据流图）"></a>1.功能建模（数据流图）</h4><h5 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h5><p>  功能建模的思想就是用抽象模型的概念，按照软件内部数据传递、变换的关系，自顶向下逐层分解，直到找到满足功能要求的所有可实现的软件为止。功能模型用数据流图来描述。</p><p>基本图形符号：（注意命名的词性）</p><img src="/2022/05/18/software/image-20220603113745154.png" class="" title="image-20220603113745154"><p>数据源或数据汇点表示图中要处理数据的输入来源或处理结果要送往何处，数据源或数据汇点不是目标系统的一部分，只是目标系统的外围环境中的实体部分，因此称为外部实体。实际问题中可能是组织、部门、人、相关的软件系统或硬件设备。</p><p>数据流表示数据沿箭头方向的流动。数据流可表示在加工之间被传送的有名数据，也可表示未命名数据；这些数据虽然没有命名，但因其所连接的是有名加工和有名数据存储，所以含义也是清楚的。</p><p>加工是对数据对象的处理或变换，加工的名字是动词短语，以表明所完成的加工。一个加工可能需要多个数据流，也可能产生多个数据流。</p><p>数据存储在数据流图中起保存数据的作用，可以是数据库文件或任何形式的数据组织。从数据存储中引出的数据流可理解为从数据存储读取数据或得到查询结果，指向数据存储的数据流理解为向数据存储写入数据。</p><p>多个数据流之间关系：</p><img src="/2022/05/18/software/image-20220603113825262.png" class="" title="image-20220603113825262"><h5 id="环境图"><a href="#环境图" class="headerlink" title="环境图"></a>环境图</h5><p>环境图（context diagram）也称为顶层数据流图（或0层数据流图），它仅包括一个数据处理过程，也就是要开发的目标系统。</p><p>环境图的作用是确定系统在其环境中的位置，通过确定系统的输入和输出与外部实体的关系确定其边界。</p><img src="/2022/05/18/software/image-20220603113853438.png" class="" title="image-20220603113853438"><img src="/2022/05/18/software/image-20220603113906285.png" class="" title="image-20220603113906285"><h5 id="数据流图的分层"><a href="#数据流图的分层" class="headerlink" title="数据流图的分层"></a>数据流图的分层</h5><p>对于稍微复杂一些的实际问题，在数据流图上常常出现十几个甚至几十个加工，这样的数据流图看起来不直观，不易理解，分层的数据流图能很好地解决这一问题。</p><p>按照系统的层次结构进行逐步分解，并以分层的数据流图反映这种结构关系，能清楚地表达和容易理解整个系统。 </p><img src="/2022/05/18/software/image-20220603113931039.png" class="" title="image-20220603113931039"><p>招生系统的S0分解为S1-S4：</p><img src="/2022/05/18/software/image-20220603114022687.png" class="" title="image-20220603114022687"><h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><p>银行储蓄系统的业务流程：</p><p>储户填写的存款单或取款单由业务员键入系统；</p><p>如果是存款则系统记录存款人姓名、住址（或电话号码）、身份证号码、存款类型、存款日期、到期日期、利率、密码（可选）等信息，并印出存单给储户；</p><p>如果是取款而且开户时留有密码，则系统首先核对储户密码，若密码正确或存款时未留密码，则系统计算利息并印出利息清单给储户。</p><p>要求画出分层的数据流图，并细化到2层数据流图。</p><p>答案</p><p>(1) 识别外部实体及输入输出数据流。</p><p>外部实体：储户、业务员。</p><p>输入数据：如果需要储户输入密码，储户才直接与系统进行交互。储户填写的存款或取款信息通过业务员键入系统，可以将存款及取款信息抽象为事务。</p><p>输出数据：存款单，利息清单。 </p><p>(2) 画出环境图（顶层数据流图） </p><img src="/2022/05/18/software/image-20220603114710718.png" class="" title="image-20220603114710718"><p>(3) 画出一层数据流图 </p><img src="/2022/05/18/software/image-20220603114722278.png" class="" title="image-20220603114722278"><p>对环境图中的银行储蓄系统进行分解，从大的方面分解为接收事务、处理存款、处理取款3部分，得到1层数据流图。</p><p>接收事务的主要功能是判断一个事务（输入数据流）的类型，其结果或者是存款业务，或者是取款业务。</p><p>存款信息需要使用外部文件或数据库的方式来存储 。</p><p>(4) 画出二层数据流图</p><p>  对一层图中的“处理存款”及“处理取款”进行进一步分解，得到二层数据流图，即处理存款的数据流图和处理取款的数据流图。 </p><img src="/2022/05/18/software/image-20220603114819410.png" class="" title="image-20220603114819410"><img src="/2022/05/18/software/image-20220603114824342.png" class="" title="image-20220603114824342"><h4 id="2-数据建模（ER图）"><a href="#2-数据建模（ER图）" class="headerlink" title="2.数据建模（ER图）"></a>2.数据建模（ER图）</h4><p>在结构化分析方法中，使用实体—关系建模技术来建立数据模型。</p><p>这种技术是在较高的抽象层次（概念层）上对数据库结构进行建模的流行技术。</p><p>实体—关系模型表示为可视化的实体—关系图（entity-relationship diagram，ERD），也称为ER图。</p><p>ER图中仅包含3种相互关联的元素：数据对象（实体）、描述数据对象的属性及数据对象彼此间相互连接的关系。 </p><h5 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h5><p>数据对象是目标系统所需要的复合信息的表示，所谓复合信息是具有若干不同属性的信息。在ER图中用矩形表示数据对象。</p><p>在实际问题中，数据对象（实体）可以是外部实体、事物、角色、行为或事件、组织单位、地点或结构等。  </p><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><p>属性定义数据对象的特征，如数据对象学生的学号、姓名、性别、专业等，课程的课程编号、课程名称、学分等。</p><p>在ER图中用椭圆或圆角矩形表示属性，并用无向边将属性与相关的数据对象连接在一起。</p><h5 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h5><p>不同数据对象的实例之间是有关联关系的，在ER图上用无向边表示。在无向边的两端应标识出关联实例的数量，也称为关联的重数。从关联重数的角度可以将关联分为３种。</p><p>(1) 一对一（1:1）关联</p><p>(2) 一对多（1:m）关联</p><p>(3) 多对多（m:n）关联</p><p>实例关联还有“必须”和“可选”之分。 </p><p>关联数量的表示</p><p>在ER图中用圆圈表示所关联的实例是可选的，隐含表示“0”，没有出现圆圈就意味着是必须的。出现在连线上的短竖线可以看成是“1”。 </p><img src="/2022/05/18/software/image-20220603115019362.png" class="" title="image-20220603115019362"><img src="/2022/05/18/software/image-20220603115023829.png" class="" title="image-20220603115023829"><h5 id="关系的属性"><a href="#关系的属性" class="headerlink" title="关系的属性"></a>关系的属性</h5><p>关系本身也可能有属性，这在多对多的关系中尤其常见，如学生和课程之间的关系可起名为“选课”，其属性应该有学期、成绩等。</p><p>关系属性的表示：在表示关系的无向边上再加一个菱形框，并在菱形框中标明关系的名字，关系的属性同样用椭圆形或圆角矩形表示，并用无向边将关系与其属性连接起来。  </p><img src="/2022/05/18/software/image-20220603115042845.png" class="" title="image-20220603115042845"><p>银行储蓄系统ER图：</p><img src="/2022/05/18/software/image-20220603115055590.png" class="" title="image-20220603115055590"><h4 id="3-行为建模（状态图）"><a href="#3-行为建模（状态图）" class="headerlink" title="3.行为建模（状态图）"></a>3.行为建模（状态图）</h4><p>没大看懂？什么事件？什么守卫表达式？</p><p>状态转换图（简称状态图）通过描绘系统的状态及引起系统状态转换的事件，来表示系统的行为。状态图中使用的主要符号如图所示。</p><img src="/2022/05/18/software/image-20220603115121625.png" class="" title="image-20220603115121625"><h5 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h5><p>状态是任何可以被观察到的系统行为模式，一个状态代表系统的一种行为模式，状态规定了系统对事件的响应方式。</p><p>状态可能有：初态（初始状态）、终态（最终状态）和中间态。</p><p>在一张状态图中只能有一个初态，而终态则可以有多个，也可以没有。 </p><h5 id="状态的表示"><a href="#状态的表示" class="headerlink" title="状态的表示"></a>状态的表示</h5><p>初态用实心圆表示，终态用牛眼图形表示，中间态用圆角矩形表示。</p><img src="/2022/05/18/software/image-20220603115158805.png" class="" title="image-20220603115158805"><h5 id="状态转换"><a href="#状态转换" class="headerlink" title="状态转换"></a>状态转换</h5><p>状态图中两个状态之间带箭头的连线称为状态转换。</p><p>状态的变迁通常是由事件触发的，在这种情况下应在表示状态转换的箭头线上标出触发转换的事件表达式。</p><p>如果在箭头线上未标明事件，则表示在源状态的内部活动执行完之后自动触发转换。</p><h5 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h5><p>事件是在某个特定时刻发生的事情，它是对引起系统做动作或从一个状态转换到另一个状态的外部事件的抽象。事件表达式的语法如下：</p><p>​    <strong>事件说明（守卫条件）/动作表达式</strong></p><p>(1) 事件说明的语法如下：</p><p>​    事件名（参数表）</p><p>(2) 守卫条件是一个布尔表达式。如果同时使用守卫条件和事件说明，则当且仅当事件发生且布尔表达式成立时，状态转换才发生。如果只有守卫条件没有事件说明，则只要守卫条件为真，状态转换就发生。</p><p>(3) 动作表达式是一个过程表达式，当状态转换开始时执行该表达式。</p><p>存款过程的状态图：</p><img src="/2022/05/18/software/image-20220603115739467.png" class="" title="image-20220603115739467"><p>取款过程的状态图：</p><img src="/2022/05/18/software/image-20220603120002763.png" class="" title="image-20220603120002763"><h4 id="4-数据字典"><a href="#4-数据字典" class="headerlink" title="4.数据字典"></a>4.数据字典</h4><p>数据字典以词条方式定义在数据模型、功能模型和行为模型中出现的数据对象及控制信息的特性，给出它们的准确定义，包括数据流、加工、数据文件、数据元素，以及数据源点、数据汇点等。 </p><p>数据字典成为把3种分析模型黏合在一起的“黏合剂”，是分析模型的“核心”。</p><h5 id="词条描述"><a href="#词条描述" class="headerlink" title="词条描述"></a>词条描述</h5><p>对于在数据流图中每一个被命名的图形元素均加以定义；</p><p>其内容包括图形元素的名字，图形元素的别名或编号，图形元素类别（如加工、数据流、数据文件、数据元素、数据源点或数据汇点等）、描述、定义、位置等。 </p><h6 id="数据流词条"><a href="#数据流词条" class="headerlink" title="数据流词条"></a>数据流词条</h6><p>数据流是数据结构在系统内传播的路径，数据流词条应包括以下几项内容。</p><p>①数据流名：要求与数据流图中该图形元素的名字一致。</p><p>②简述：简要介绍它产生的原因和结果。</p><p>③组成：数据流的数据结构。</p><p>④来源：数据流来自哪个加工或作为哪个数据源的外部实体。</p><p>⑤去向：数据流流向哪个加工或作为哪个数据汇点的外部实体。</p><p>⑥流通量：单位时间数据的流通量。</p><p>⑦峰值：流通量的极限值。</p><h6 id="数据元素词条"><a href="#数据元素词条" class="headerlink" title="数据元素词条"></a>数据元素词条</h6><p>数据流图中的每个数据结构都是由数据元素构成的，数据元素是数据处理中最小的、不可再分的单位，它直接反映事物的某一特征。</p><p>① 类型：数据元素分为数字型与文字型。数字型又分为离散值和连续值，文字的类型用编码类型和长度区分。</p><p>② 取值范围：离散值的取值或是枚举的（如3，17，21），或是介于上下界的一组数（如2..100）；连续值一般是有取值范围的实数集（如0.0..100.0）。对于文字型，文字的取值需加以定义。</p><p>③ 相关的数据元素及数据结构。 </p><h6 id="数据存储文件词条"><a href="#数据存储文件词条" class="headerlink" title="数据存储文件词条"></a>数据存储文件词条</h6><p>数据存储文件是数据保存的地方。一个数据存储文件词条应有以下几项内容。</p><p>① 文件名：要求与数据流图中该图形元素的名字一致。</p><p>② 简述：简要介绍存放的是什么数据。</p><p>③ 组成：文件的数据结构。</p><p>④ 输入：从哪些加工获取数据。</p><p>⑤ 输出：由哪些加工使用数据。</p><p>⑥ 存取方式：分为顺序、直接、关键码等不同存取方式。</p><p>⑦ 存取频率：单位时间的存取次数。</p><h6 id="加工词条"><a href="#加工词条" class="headerlink" title="加工词条"></a>加工词条</h6><p>加工可以使用诸如判定表、判定树、结构化语言等形式表达，主要描述如下。</p><p>① 加工名：要求与数据流图中该图形元素的名字一致。</p><p>② 编号：用以反映该加工的层次和父子关系。</p><p>③ 简述：加工逻辑及功能简述。</p><p>④ 输入：加工的输入数据流。</p><p>⑤ 输出：加工的输出数据流。</p><p>⑥ 加工逻辑：简述加工程序和加工顺序。</p><h6 id="数据源点及数据汇点词条"><a href="#数据源点及数据汇点词条" class="headerlink" title="数据源点及数据汇点词条"></a>数据源点及数据汇点词条</h6><p>对于一个数据处理系统来说，数据源点和数据汇点应比较少。 </p><p>① 名称：要求与数据流图中该外部实体的名字一致。</p><p>② 简述：简要描述是什么外部实体。</p><p>③ 有关数据流：该实体与系统交互时涉及哪些数据流。</p><p>④ 数目：该实体与系统交互的次数。</p><h5 id="数据结构描述"><a href="#数据结构描述" class="headerlink" title="数据结构描述"></a>数据结构描述</h5><p>在数据字典的编制中，分析员最常用的描述数据结构的方式有定义式、Warnier图等。</p><p>定义式。在数据流图中，数据流和数据文件都具有一定的数据结构，因此，必须以一种清晰、准确、无二义性的方式来描述数据结构。</p><p>Warnier图。Warnier图是表示数据结构的另一种图形工具，它用树形结构来描绘数据结构。</p><img src="/2022/05/18/software/image-20220603151231384.png" class="" title="image-20220603151231384"><p>存折的定义格式</p><p>存折＝户名＋所号＋账号＋开户日＋性质＋（印密）＋  1{存取行}50</p><p>所号＝“001”..“999”</p><p>户名＝2{字母}24</p><p>账号＝“00000000001”..“99999999999”</p><p>开户日＝年＋月＋日</p><p>性质＝“1”..“6”          </p><p>印密＝（“0”|“000001”..“999999”）  </p><p>存取行＝日期＋（摘要）＋支出＋存入＋余额＋操作＋复核</p><p>日期＝年＋月＋日</p><p>年＝“0001”..“9999”</p><p>月＝“01”..“12”</p><p>日＝“01”..“31”</p><p>Warnier图</p><img src="/2022/05/18/software/image-20220603151317289.png" class="" title="image-20220603151317289"><h4 id="5-加工规格说明"><a href="#5-加工规格说明" class="headerlink" title="5.加工规格说明"></a>5.加工规格说明</h4><p>在对数据流图的分解中，位于层次树最低层的加工也称为基本加工或原子加工，对于每一个基本加工都需要进一步说明，这称为加工规格说明。</p><p>在编写基本加工的规格说明时，主要目的是要表达“做什么”，而不是“怎样做”。</p><p>加工规格说明应满足如下的要求：</p><p>(1) 对数据流图的每一个基本加工，必须有一个加工规格说明。</p><p>(2) 加工规格说明必须描述基本加工如何把输入数据流变换为输出数据流的加工规则。</p><p>(3) 加工规格说明必须描述实现加工的策略而不是实现加工的细节。</p><p>(4) 加工规格说明中包含的信息应是充足的，完备的，有用的，没有重复的多余信息。</p><h5 id="决策表"><a href="#决策表" class="headerlink" title="决策表"></a>决策表</h5><p>决策表由4个部分组成：</p><p>左上部分是条件茬，在此区域列出了各种可能的单个条件；</p><p>左下部分是动作茬，在此区域列出了可能采取的单个动作；</p><p>右上部分是条件项，在此区域列出了针对各种条件的每一组条件取值的组合；</p><p>右下部分是动作项，这些动作项与条件项紧密相关，它指出了在条件项的各组取值的组合情况下应采取的动作。</p><p>建立决策表的步骤</p><p>(1) 列出与一个具体过程（或模块）有关的所有处理。</p><p>(2) 列出过程执行期间的所有条件（或所有判断）。</p><p>(3) 将特定条件取值组合与特定的处理相匹配，消去不可能发生的条件取值组合。</p><p>(4) 将右部每一纵列规定为一个处理规则，即对于某一条件取值组合将有什么动作。</p><img src="/2022/05/18/software/image-20220603151450854.png" class="" title="image-20220603151450854"><p>决策表的改进：如果表中有两条或更多的处理规则具有相同的动作，并且其条件项之间存在着某种关系，就可设法将它们合并。 </p><img src="/2022/05/18/software/image-20220603151514659.png" class="" title="image-20220603151514659"><h5 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h5><p>决策树（decision tree）也是用来表达加工逻辑的一种工具，有时侯它比决策表更直观。</p><p>检查订货单的决策树 </p><img src="/2022/05/18/software/image-20220603151600923.png" class="" title="image-20220603151600923"><h3 id="3-3系统需求规格说明"><a href="#3-3系统需求规格说明" class="headerlink" title="3.3系统需求规格说明"></a>3.3系统需求规格说明</h3><p>这三节看课本</p><h3 id="3-4需求评审"><a href="#3-4需求评审" class="headerlink" title="3.4需求评审"></a>3.4需求评审</h3><h3 id="3-5需求管理"><a href="#3-5需求管理" class="headerlink" title="3.5需求管理"></a>3.5需求管理</h3><h2 id="4-结构化设计方法"><a href="#4-结构化设计方法" class="headerlink" title="4.结构化设计方法"></a>4.结构化设计方法</h2><h3 id="4-1软件设计的概念及原则"><a href="#4-1软件设计的概念及原则" class="headerlink" title="4.1软件设计的概念及原则"></a>4.1软件设计的概念及原则</h3><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><p>设计是一项核心的工程活动。</p><p>“什么是设计？设计是你站在两个世界——技术世界和人类的目标世界——而你尝试将这两个世界结合在一起……”。</p><p>“设计良好的建筑应该展示出坚固、适用和令人赏心悦目”。</p><h4 id="原则-1"><a href="#原则-1" class="headerlink" title="原则"></a>原则</h4><h5 id="1-分而治之"><a href="#1-分而治之" class="headerlink" title="(1) 分而治之"></a>(1) 分而治之</h5><p>分而治之是人们解决大型复杂问题时通常采用的策略。将大型复杂的问题分解为许多容易解决的小问题，原来的问题也就容易解决了。</p><p>软件的体系结构设计、模块化设计都是分而治之策略的具体表现。</p><p>模块是构成软件的基本构件。模块化是将整体软件划分成独立命名且可以独立访问的模块，不同的模块通常具有不同的功能或指责，每个模块可独立地开发吗、测试，最后组装成完整的软件。</p><p>尽管模块分解可以简化要解决的问题，但模块分解并不是越小越好。</p><p>当模块数目增加时，每个模块的规模将减小，开发单个模块的成本确实减少了；但是，随着模块数目增加，模块之间关系的复杂程度也会增加，设计模块间接口所需要的工作量也将增加，如图所示。</p><img src="/2022/05/18/software/image-20220603155004206.png" class="" title="image-20220603155004206"><h5 id="2-模块独立性"><a href="#2-模块独立性" class="headerlink" title="(2) 模块独立性"></a>(2) 模块独立性</h5><p>定义: 是指软件系统中每个模块只涉及软件要求的具体的子功能, 而和软件系统中其它模块的接口是简单的。</p><p>有效的模块化使软件便于分工协作开发。</p><p>独立的模块比较容易测试和维护。</p><p>模块独立性的度量准则</p><p>内聚:是模块功能强度(一个模块内部各个元素彼此结合的紧密程度)的度量。</p><p>耦合:是模块之间的互相连接的紧密程度的度量。</p><p>模块独立性比较强的模块应是<strong>高内聚低耦合</strong>的模块。</p><h6 id="耦合"><a href="#耦合" class="headerlink" title="耦合"></a>耦合</h6><img src="/2022/05/18/software/image-20220603155242879.png" class="" title="image-20220603155242879"><h6 id="非直接耦合-Nondirect-Coupling"><a href="#非直接耦合-Nondirect-Coupling" class="headerlink" title="非直接耦合(Nondirect Coupling)"></a>非直接耦合(Nondirect Coupling)</h6><p>两个模块之间没有直接关系，它们之间的联系完全是通过主模块的控制和调用来实现的。</p><p>非直接耦合的模块独立性最强。</p><img src="/2022/05/18/software/image-20220603155419800.png" class="" title="image-20220603155419800"><h6 id="数据耦合-Data-Coupling"><a href="#数据耦合-Data-Coupling" class="headerlink" title="数据耦合 (Data Coupling)"></a>数据耦合 (Data Coupling)</h6><p>一个模块访问另一个模块时，彼此之间是通过简单数据参数 (不是控制参数、公共数据结构或外部变量) 来交换输入、输出信息的。也是较理想的耦合。</p><img src="/2022/05/18/software/image-20220603155527500.png" class="" title="image-20220603155527500"><h6 id="特征耦合-Stamp-Coupling"><a href="#特征耦合-Stamp-Coupling" class="headerlink" title="特征耦合 (Stamp Coupling)"></a>特征耦合 (Stamp Coupling)</h6><p>一组模块通过<strong>参数表</strong>传递记录信息，就是特征耦合。这个记录是某一数据结构的子结构，而不是简单变量。</p><h6 id="控制耦合-Control-Coupling"><a href="#控制耦合-Control-Coupling" class="headerlink" title="控制耦合 (Control Coupling)"></a>控制耦合 (Control Coupling)</h6><p>如果一个模块通过传送开关、标志、名字等控制信息，明显地控制选择另一模块的功能，就是控制耦合。</p><img src="/2022/05/18/software/image-20220603155642366.png" class="" title="image-20220603155642366"><h6 id="公共耦合（Common-Coupling）"><a href="#公共耦合（Common-Coupling）" class="headerlink" title="公共耦合（Common Coupling）"></a>公共耦合（Common Coupling）</h6><p>若一组模块都访问同一个公共数据环境，则它们之间的耦合就称为公共耦合。公共的数据环境可以是全局数据结构、共享的通信区、内存的公共覆盖区等。</p><p>公共数据区为全局变量/数组等</p><img src="/2022/05/18/software/image-20220603155707112.png" class="" title="image-20220603155707112"><h6 id="内容耦合-Content-Coupling"><a href="#内容耦合-Content-Coupling" class="headerlink" title="内容耦合 (Content Coupling)"></a>内容耦合 (Content Coupling)</h6><p>一个模块直接访问另一个模块的内部数据。</p><p>一个模块不通过正常入口转到另一模块内部。</p><p>两个模块有一部分程序代码重迭。(只可能出现在汇编语言中)。</p><p>一个模块有多个入口。</p><img src="/2022/05/18/software/image-20220603155804255.png" class="" title="image-20220603155804255"><p>设计原则</p><ul><li>尽量使用数据耦合</li><li>少用控制耦合</li><li>限制使用公共耦合（除非传递大量数据）</li><li>完全不用内容耦合</li></ul><p>实际上，两个模块之间的耦合不只是一种类型，而是多种类型的混合。这就要求设计人员进行分析、比较，逐步加以改进，以提高模块的独立性。</p><h6 id="内聚"><a href="#内聚" class="headerlink" title="内聚"></a>内聚</h6><img src="/2022/05/18/software/image-20220603155955925.png" class="" title="image-20220603155955925"><h6 id="偶然内聚（Coincidental-Cohesion）"><a href="#偶然内聚（Coincidental-Cohesion）" class="headerlink" title="偶然内聚（Coincidental Cohesion）"></a>偶然内聚（Coincidental Cohesion）</h6><p>当模块内各部分之间没有联系，或者即使有联系，这种联系也很松散，则称这种模块为偶然内聚模块，内聚程度最低。</p><p>缺点：</p><p> 1）内容不易理解，很难描述其功能。</p><p> 2）把完整的程序分割到多个模块中，在程序运行时会频繁地互相调用。</p><img src="/2022/05/18/software/image-20220603160108583.png" class="" title="image-20220603160108583"><h6 id="逻辑内聚（Logical-Cohesion）"><a href="#逻辑内聚（Logical-Cohesion）" class="headerlink" title="逻辑内聚（Logical Cohesion）"></a>逻辑内聚（Logical Cohesion）</h6><p>把几种相关的功能组合在一起，每次被调用时，由传送给模块的判定参数来确定该模块应执行哪个功能。</p><p>缺点</p><p> 1）不易修改，因包含多个功能</p><p> 2）需传递控制参数——控制耦合</p><p> 3）未用部分调入内存，影响效率</p><p>但是如果程序只是由一堆if或case和调用其他子程序的语句组成，这种逻辑内聚也是很好的。例如：事件处理器。</p><img src="/2022/05/18/software/image-20220603160127680.png" class="" title="image-20220603160127680"><h6 id="时间内聚（Classical-Cohesion）"><a href="#时间内聚（Classical-Cohesion）" class="headerlink" title="时间内聚（Classical Cohesion）"></a>时间内聚（Classical Cohesion）</h6><p>时间内聚模块大多为多功能模块，但模块的各个功能的执行与时间有关，通常要求所有功能必须在同一时间段内执行。</p><p>例如：</p><p>1.初始化模块和终止模块。</p><p>2.紧急故障处理模块：关闭文件、报警、保留现场必须无中断地同时处理</p><p>时间内聚模块比逻辑内聚模块的内聚程度又稍高一些。在一般情形下，各部分可以以任意的顺序执行，所以它的内部逻辑更简单。</p><h6 id="过程内聚（Procedural-Cohesion）"><a href="#过程内聚（Procedural-Cohesion）" class="headerlink" title="过程内聚（Procedural Cohesion）"></a>过程内聚（Procedural Cohesion）</h6><p>如果一个模块内的处理是相关的，而且必须以特定次序执行，则是过程内聚。</p><p>使用流程图做为工具设计程序时，把流程图中的某一部分划出组成模块，就得到过程内聚模块。<br> 例如，把流程图中的循环部分、判定部分、计算部分分成三个模块，这三个模块都是过程内聚模块。</p><p> 过程内聚仅包含完整功能的一部分。</p><h6 id="通信内聚（Communicational-Cohesion-亦称数据内聚"><a href="#通信内聚（Communicational-Cohesion-亦称数据内聚" class="headerlink" title="通信内聚（Communicational Cohesion) 亦称数据内聚"></a>通信内聚（Communicational Cohesion) 亦称数据内聚</h6><p>一个模块中所有处理元素都使用同一个输入数据和产生同一个输出数据。</p><p>例如：模块A:从文件file读取数据</p><p>​      由数据产生报表A</p><p>​      由数据产生报表B</p><h6 id="顺序内聚"><a href="#顺序内聚" class="headerlink" title="顺序内聚"></a>顺序内聚</h6><p>一个模块中的处理元素和同一功能密切相关，而且这些处理必须顺序执行，则称为顺序内聚。</p><p>根据数据流图划分模块时，通常得到顺序内聚的模块。</p><img src="/2022/05/18/software/image-20220603160607276.png" class="" title="image-20220603160607276"><h6 id="功能内聚-Functional-Cohesion"><a href="#功能内聚-Functional-Cohesion" class="headerlink" title="功能内聚 (Functional Cohesion)"></a>功能内聚 (Functional Cohesion)</h6><p>一个模块中各个部分都是完成某一具体功能必不可少的组成部分，或者说该模块中所有部分都是为了完成一项具体功能而协同工作，紧密联系，不可分割的。则称该模块为功能内聚模块。</p><p>优点：容易修改和维护</p><h5 id="3-提高抽象层次"><a href="#3-提高抽象层次" class="headerlink" title="(3) 提高抽象层次"></a>(3) 提高抽象层次</h5><p>抽象是指忽视一个主题中与当前目标无关的那些方面，以便更充分地注意与当前目标有关的方面。</p><p>当我们进行软件设计时，设计开始时应尽量提高软件的抽象层次，按抽象级别从高到低进行软件设计。</p><h5 id="4-复用性设计"><a href="#4-复用性设计" class="headerlink" title="(4) 复用性设计"></a>(4) 复用性设计</h5><p>复用是指同一事物不做修改或稍加修改就可以多次重复使用。将复用的思想用于软件开发，称为软件复用。</p><p>我们将软件的重用部分称为软构件。</p><p>也就是说，在构造新的软件系统时不必从零做起，可以直接使用已有的软构件即可组装（或加以合理修改）成新的系统。</p><h5 id="5-灵活性设计"><a href="#5-灵活性设计" class="headerlink" title="(5) 灵活性设计"></a>(5) 灵活性设计</h5><p>保证软件灵活性设计的关键是抽象。</p><p>面向对象系统中的类结构类似一座金字塔，越接近金字塔的顶端，抽象程度就越高。</p><p>“抽象”的反义词是“具体”。理想情况下，一个系统的任何代码、逻缉、概念在这个系统中都应该是唯一的，也就是说不存在重复的代码。</p><p>在设计中引入灵活性的方法有：</p><ol><li>降低耦合并提高内聚（易于提高替换能力）； </li><li>建立抽象（创建有多态操作的接口和父类）；</li><li>不要将代码写死（消除代码中的常数）； </li><li>抛出异常（由操作的调用者处理异常）；</li><li>使用并创建可复用的代码。</li></ol><h3 id="4-2结构化设计"><a href="#4-2结构化设计" class="headerlink" title="4.2结构化设计"></a>4.2结构化设计</h3><h4 id="结构化软件设计的任务"><a href="#结构化软件设计的任务" class="headerlink" title="结构化软件设计的任务"></a>结构化软件设计的任务</h4><p>从工程管理的角度，可以将软件设计分为概要设计阶段和详细设计阶段。</p><p>从技术的角度，传统的结构化方法将软件设计划分为<strong>体系结构设计、数据设计、接口设计和过程设计</strong>4部分；</p><p>面向对象方法则将软件设计划分为体系结构设计、类设计/数据设计、接口设计和构件级设计4部分。</p><img src="/2022/05/18/software/image-20220603161041687.png" class="" title="image-20220603161041687"><p>体系结构设计：体系结构设计定义软件的主要结构元素及其之间的关系。通常称为模块设计。</p><p>接口设计（内部、外部接口）：接口设计描述用户界面，软件和其他硬件设备、其他软件系统及使用人员的外部接口，以及各种构件之间的内部接口。</p><p>数据设计：传统方法主要根据需求阶段所建立的实体—关系图（ER图）来确定软件涉及的文件系统的结构及数据库的表结构。 </p><p>过程设计：过程设计的主要工作是确定软件各个组成部分内的算法及内部数据结构，并选定某种过程的表达形式来描述各种算法。</p><h4 id="结构化设计与结构化分析的关系"><a href="#结构化设计与结构化分析的关系" class="headerlink" title="结构化设计与结构化分析的关系"></a>结构化设计与结构化分析的关系</h4><img src="/2022/05/18/software/image-20220603161117041.png" class="" title="image-20220603161117041"><p>结构化设计方法的实施要点</p><p>(1) 研究、分析和审查数据流图。</p><p>(2) 根据数据流图决定问题的类型：变换型和事务型。针对两种不同的类型分别进行分析处理。</p><p>(3) 由数据流图推导出系统的初始结构图。</p><p>(4) 利用一些启发式原则来改进系统的初始结构图，直到得到符合要求的结构图为止。</p><p>(5) 根据分析模型中的实体关系图和数据字典进行数据设计，包括数据库设计或数据文件的设计。</p><p>(6) 在上面设计的基础上，并依据分析模型中的加工规格说明、状态转换图进行过程设计。</p><p>(7) 制定测试计划。</p><h4 id="模块结构及表示"><a href="#模块结构及表示" class="headerlink" title="模块结构及表示"></a>模块结构及表示</h4><p>一般通过功能划分过程来完成软件结构设计。功能划分过程从需求分析确立的目标系统的模型出发，对整个问题进行分割，使其每一部分用一个或几个软件模块加以解决，整个问题就解决了。</p><img src="/2022/05/18/software/image-20220603161953508.png" class="" title="image-20220603161953508"><h5 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h5><p>一个软件系统通常由很多模块组成，结构化程序设计中的函数和子程序都可称为模块，它是程序语句按逻辑关系建立起来的组合体。</p><p>模块用矩形框表示，并用模块的名字标记它。</p><img src="/2022/05/18/software/image-20220603162026214.png" class="" title="image-20220603162026214"><p>大模块还可以分解，不能分解的最小模块称为原子模块。如果一个软件系统的全部数据计算或处理都由原子模块完成，其他非原子模块仅执行控制或协调功能，这样的系统就是完全因子分解的系统。完全因子分解的系统被认为是最好的系统。但实际上大多数做不到。</p><h5 id="模块分类"><a href="#模块分类" class="headerlink" title="模块分类"></a>模块分类</h5><img src="/2022/05/18/software/image-20220603162404141.png" class="" title="image-20220603162404141"><h5 id="模块的结构"><a href="#模块的结构" class="headerlink" title="模块的结构"></a>模块的结构</h5><p>模块结构最普通的形式就是树状结构和网状结构，如图所示。</p><img src="/2022/05/18/software/image-20220603163158886.png" class="" title="image-20220603163158886"><h5 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h5><p>结构图（structure chart，SC）是精确表达模块结构的图形表示工具。</p><p>(1) 模块的调用关系和接口：在结构图中，两个模块之间用单向箭头连接。</p><p>(2) 模块间的信息传递：当一个模块调用另一个模块时，调用模块把数据或控制信息传送给被调用模块，以使被调用模块能够运行。 </p><p>模块间的调用关系和接口表示 </p><img src="/2022/05/18/software/image-20220603163259211.png" class="" title="image-20220603163259211"><p>(3) 条件调用和循环调用 ：<strong>当模块A有条件地调用另一个模块B时，在模块A的箭头尾部标以一个菱形符号</strong>；当一个模块<strong>A反复地调用</strong>模块C和模块D时，在调用箭头尾部则标以一个弧形符号。</p><img src="/2022/05/18/software/image-20220603163334550.png" class="" title="image-20220603163334550"><p>(4) 结构图的形态特征。在图中，上级模块调用下级模块，它们之间存在主从关系。相关概念：宽度、深度、扇入、扇出。</p><img src="/2022/05/18/software/image-20220603163405446.png" class="" title="image-20220603163405446"><p>深度: 表示软件结构中从顶层模块到最底层模块的层数</p><p>宽度: 是软件结构在同一层次上的模块总数的最大值.一般来说,宽度越大系统就越复杂.</p><p>扇出: 指一个模块直接控制的下属模块个数,经验表明,一个设计的好的典型系统的平均扇出通常是3或4个,太多或太少都不好.</p><p>扇入: 指一个模块的直接上属模块个数</p><h4 id="数据结构及表示"><a href="#数据结构及表示" class="headerlink" title="数据结构及表示"></a>数据结构及表示</h4><p>数据结构是数据的各个元素之间逻辑关系的一种表示。</p><p>数据结构设计应确定数据的组织、存取方式、相关程度，以及信息的不同处理方法。</p><p>数据结构的组织方法和复杂程度可以灵活多样，但典型的数据结构种类是有限的，它们是构成一些更复杂结构的基本构件块。</p><img src="/2022/05/18/software/image-20220603163518942.png" class="" title="image-20220603163518942"><h3 id="4-3体系结构设计"><a href="#4-3体系结构设计" class="headerlink" title="4.3体系结构设计"></a>4.3体系结构设计</h3><h4 id="基于数据流方法的设计过程"><a href="#基于数据流方法的设计过程" class="headerlink" title="基于数据流方法的设计过程"></a>基于数据流方法的设计过程</h4><p>基于数据流的设计方法也称为过程驱动的设计方法；</p><p>这种方法与软件需求分析阶段的结构化分析方法相衔接，可以很方便地将用数据流图表示的信息转换成程序结构的设计描述；</p><p>这种方法还能和编码阶段的“结构化程序设计方法”相适应，成为常用的结构化设计方法。</p><img src="/2022/05/18/software/image-20220603163639268.png" class="" title="image-20220603163639268"><h4 id="典型的数据流类型和系统结构"><a href="#典型的数据流类型和系统结构" class="headerlink" title="典型的数据流类型和系统结构"></a>典型的数据流类型和系统结构</h4><p>典型的数据流类型有变换型数据流和事务型数据流，数据流的类型不同，得到的系统结构也不同。</p><p>通常，一个系统中的所有数据流都可以认为是变换流，但是，当遇到有明显事务特性的数据流时，建议采用事务型映射方法进行设计。</p><h5 id="变换型数据流和变换型系统结构图"><a href="#变换型数据流和变换型系统结构图" class="headerlink" title="变换型数据流和变换型系统结构图"></a>变换型数据流和变换型系统结构图</h5><p>变换型数据处理问题的工作过程大致分为3步，即取得数据、变换数据和给出数据，如图所示。</p><img src="/2022/05/18/software/image-20220603163711094.png" class="" title="image-20220603163711094"><p>变换型系统的结构图由输入、中心变换和输出3部分组成。</p><img src="/2022/05/18/software/image-20220603163812405.png" class="" title="image-20220603163812405"><h5 id="事务型数据流和事务型系统结构图"><a href="#事务型数据流和事务型系统结构图" class="headerlink" title="事务型数据流和事务型系统结构图"></a>事务型数据流和事务型系统结构图</h5><p>通常接受一项事务，根据事务处理的特点和性质，选择分派一个适当的处理单元，然后给出结果。</p><p>完成选择分派任务的部分称为事务处理中心，或分派部件。</p><img src="/2022/05/18/software/image-20220603163959630.png" class="" title="image-20220603163959630"><p>结构图</p><img src="/2022/05/18/software/image-20220603164006927.png" class="" title="image-20220603164006927"><p>简化的事务型系统结构图</p><p>事务型系统的结构图可以有多种不同的形式，如有多层操作层或没有操作层。</p><p>如果调度模块并不复杂，可将其归入事务中心模块。</p><img src="/2022/05/18/software/image-20220603164021844.png" class="" title="image-20220603164021844"><h4 id="变换型映射方法"><a href="#变换型映射方法" class="headerlink" title="变换型映射方法"></a>变换型映射方法</h4><p>系统数据处理问题的处理流程总能表示为变换型数据流图，进一步可采用变换型映射方法建立系统的结构图。</p><p>也可能遇到明显的事务数据处理问题，这时可采用事务型映射方法。</p><p>变换分析方法的步骤</p><p>(1) 重画数据流图。在需求分析阶段得到的数据流图侧重于描述系统如何加工数据，而重画数据流图的出发点是描述系统中的数据是如何流动的。</p><p>(2)在数据流图上区分系统的逻辑输入、逻辑输出和中心变换部分。</p><img src="/2022/05/18/software/image-20220603164215622.png" class="" title="image-20220603164215622"><p>(3) 进行一级分解，设计系统模块结构的顶层和第一层。自顶向下设计的关键是找出系统树形结构图的根或顶层模块。</p><p>首先设计一个主模块，并用程序的名字为它命名，然后将它画在与中心变换相对应的位置上。</p><p>第1层设计：为每个逻辑输入设计一个输入模块，它的功能是为主模块提供数据；为每个逻辑输出设计一个输出模块，它的功能是将主模块提供的数据输出；为中心变换设计一个变换模块，它的功能是将逻辑输入转换成逻辑输出。 第一层模块与主模块之间传送的数据应与数据流图相对应，如图所示。</p><img src="/2022/05/18/software/image-20220603164338830.png" class="" title="image-20220603164338830"><p>(4) 进行二级分解，设计中、下层模块。</p><p>这一步工作是自顶向下，逐层细化，为每一个输入模块、输出模块、变换模块设计它们的从属模块。</p><p>设计下层模块的顺序是任意的。但一般是先设计输入模块的下层模块。</p><h4 id="事务型映射方法"><a href="#事务型映射方法" class="headerlink" title="事务型映射方法"></a>事务型映射方法</h4><p>事务分析也是从分析数据流图开始，自顶向下，逐步分解，建立系统的结构图。</p><img src="/2022/05/18/software/image-20220603164404468.png" class="" title="image-20220603164404468"><p>事务分析方法的步骤</p><p>(1) 识别事务源。利用数据流图和数据词典，从问题定义和需求分析的结果中，找出各种需要处理的事务。</p><p>(2) 规定适当的事务型结构。在确定了该数据流图具有事务型特征之后，根据模块划分理论，建立适当的事务型结构。</p><p>(3) 识别各种事务和它们定义的操作。</p><p>(4) 注意利用公用模块。</p><p>(5) 建立事务处理模块。对每一事务，或对联系密切的一组事务，建立一个事务处理模块。</p><p>(6) 对事务处理模块规定它们全部的下层操作模块。</p><p>(7) 对操作模块规定它们的全部细节模块。</p><p>大型的软件系统通常是变换型结构和事务型结构的混合结构，所以，我们通常利用以变换分析为主，事务分析为辅的方式进行软件结构设计。</p><p>混合结构的例子</p><img src="/2022/05/18/software/image-20220603164444157.png" class="" title="image-20220603164444157"><h4 id="软件模块结构的改进方法"><a href="#软件模块结构的改进方法" class="headerlink" title="软件模块结构的改进方法"></a>软件模块结构的改进方法</h4><h5 id="1-模块功能的完善化。"><a href="#1-模块功能的完善化。" class="headerlink" title="(1)模块功能的完善化。"></a>(1)模块功能的完善化。</h5><p>一个完整的功能模块，不仅能够完成指定的功能，而且还应当能够告诉使用者完成任务的状态，以及不能完成的原因。也就是说，一个完整的模块应当有以下几部分。</p><p>① 执行规定的功能的部分。</p><p>② 出错处理的部分。 当模块不能完成规定的功能时，必须回送出错标志，向它的调用者报告出现这种例外情况的原因。</p><p>③ 如果需要返回一系列数据给它的调用者，在完成数据加工或结束时，应当给它的调用者返回一个“结束标志”。</p><h5 id="2-消除重复功能，改善软件结构。"><a href="#2-消除重复功能，改善软件结构。" class="headerlink" title="(2) 消除重复功能，改善软件结构。"></a>(2) 消除重复功能，改善软件结构。</h5><p>① 完全相似。在结构上完全相似，可能只是在数据类型上不一致。此时可以采取完全合并的方法。图a</p><p>② 局部相似：此时，不可以把两者合并为一，如图(b)所示，因为这样在合并后的模块内部必须设置许多查询开关，如图(f)所示。 </p><img src="/2022/05/18/software/image-20220603164558998.png" class="" title="image-20220603164558998"><h5 id="3-模块的作用范围应在控制范围之内。"><a href="#3-模块的作用范围应在控制范围之内。" class="headerlink" title="(3) 模块的作用范围应在控制范围之内。"></a>(3) 模块的作用范围应在控制范围之内。</h5><p>模块的控制范围包括它本身及其所有的从属模块。</p><p>模块的作用范围是指模块内一个判定的作用范围，凡是受这个判定影响的所有模块都属于这个判定的作用范围。</p><p>如果一个判定的作用范围包含在这个判定所在模块的控制范围之内，则这种结构是简单的。 </p><img src="/2022/05/18/software/image-20220603164618732.png" class="" title="image-20220603164618732"><p>图(b)表明作用范围不在控制范围之内。模块G做出一个判定之后，若需要模块 C工作，则必须把信号回送给模块D，再由D把信号回送给模块B。图中加黑框表示判定的作用范围。</p><img src="/2022/05/18/software/image-20220603164655052.png" class="" title="image-20220603164655052"><p>图(c)虽然表明模块的作用范围是在控制范围之内，可是判定所在模块TOP所处层次太高，这样也需要经过不必要的信号传送，增加了数据的传送量。</p><img src="/2022/05/18/software/image-20220603164634972.png" class="" title="image-20220603164634972"><p>图(d) 表明作用范围在控制范围之内，只有一个判定分支有一个不必要的穿越，是一个较好的结构；</p><img src="/2022/05/18/software/image-20220603165055924.png" class="" title="image-20220603165055924"><p>图(e)所示为一个比较理想的结构。</p><img src="/2022/05/18/software/image-20220603165100837.png" class="" title="image-20220603165100837"><p>如果在设计过程中，发现作用范围不在控制范围内，可采用如下办法把作用范围移到控制范围之内。</p><p>① 将判定所在模块合并到父模块中，使判定处于较高层次。</p><p>② 将受判定影响的模块下移到控制范围内。</p><p>③ 将判定上移到层次中较高的位置。</p><h5 id="4-尽可能减少高扇出结构，随着深度增大扇入。"><a href="#4-尽可能减少高扇出结构，随着深度增大扇入。" class="headerlink" title="(4) 尽可能减少高扇出结构，随着深度增大扇入。"></a>(4) 尽可能减少高扇出结构，随着深度增大扇入。</h5><p>模块的扇出数是指模块调用子模块的个数。如果一个模块的扇出数过大，就意味着该模块过分复杂，需要协调和控制过多的下属模块。</p><p>出现这种情况是由于缺乏中间层次，所以应当适当增加中间层次的控制模块。如图所示。 </p><img src="/2022/05/18/software/image-20220603165146140.png" class="" title="image-20220603165146140"><p>一个模块的扇入数越大，则共享该模块的上级模块数目越多。扇入大，是有好处的。</p><p>但如果一个模块的扇入数太大，如超过8，而它又不是公用模块，说明该模块可能具有多个功能。</p><p>在这种情况下应当对它进一步分析并将其功能分解。</p><img src="/2022/05/18/software/image-20220603165213083.png" class="" title="image-20220603165213083"><h5 id="5-避免或减少使用病态连接。"><a href="#5-避免或减少使用病态连接。" class="headerlink" title="(5) 避免或减少使用病态连接。"></a>(5) 避免或减少使用病态连接。</h5><p>应限制使用如下3种病态连接。</p><img src="/2022/05/18/software/image-20220603165227117.png" class="" title="image-20220603165227117"><h5 id="6-模块的大小要适中。"><a href="#6-模块的大小要适中。" class="headerlink" title="(6) 模块的大小要适中。"></a>(6) 模块的大小要适中。</h5><p>模块的大小，可以用模块中所含语句的数量的多少来衡量。</p><p>通常规定其语句行数为50～100，保持在一页纸之内，最多不超过500行。 </p><h5 id="例-银行储蓄系统"><a href="#例-银行储蓄系统" class="headerlink" title="例 银行储蓄系统"></a>例 银行储蓄系统</h5><p>1.对银行储蓄系统的数据流图进行复查并精化，得到如图所示的数据流图。</p><img src="/2022/05/18/software/image-20220603165308254.png" class="" title="image-20220603165308254"><p>2.确定数据流图具有变换特性还是事务特性。通过对精化后的数据流图进行分析，可以看到整个系统是对存款及取款两种不同的事务进行处理，因此具有事务特性。</p><p>3.确定输入流和输出流的边界</p><img src="/2022/05/18/software/image-20220603165414332.png" class="" title="image-20220603165414332"><p>4.完成第一级分解。分解后的结构图如图所示。</p><img src="/2022/05/18/software/image-20220603165431148.png" class="" title="image-20220603165431148"><p>5.完成第二级分解。对上图中的“输入数据”、“输出数据”和“调度”模块进行分解，得到未经精化的输入结构、输出结构和事务结构，分别如图(a)、(b)和(c)所示。将上面的3部分合在一起，得到初始的软件结构，如图所示。</p><img src="/2022/05/18/software/image-20220603165515230.png" class="" title="image-20220603165515230"><img src="/2022/05/18/software/image-20220603165536301.png" class="" title="image-20220603165536301"><p>第6步：对软件结构进行精化。</p><p>(1) 由于调度模块下只有两种事务，因此，可以将调度模块合并到上级模块中，如图所示。</p><img src="/2022/05/18/software/image-20220603165711758.png" class="" title="image-20220603165711758"><p>(2) “检查密码”模块的作用范围不在其控制范围之内（即“输入密码”模块不在“检查密码”模块的控制范围之内），需对其进行调整，如图所示。</p><img src="/2022/05/18/software/image-20220603165827354.png" class="" title="image-20220603165827354"><p>(3) 提高模块的独立性，并对“输入事务”模块进行细化。也可以将“检查密码”功能合并到其上级模块中。</p><img src="/2022/05/18/software/image-20220603165855910.png" class="" title="image-20220603165855910"><h3 id="4-4接口设计"><a href="#4-4接口设计" class="headerlink" title="4.4接口设计"></a>4.4接口设计</h3><h4 id="接口设计概述"><a href="#接口设计概述" class="headerlink" title="接口设计概述"></a>接口设计概述</h4><p>接口设计的依据是数据流图中的自动化系统边界。</p><p>接口设计主要包括3个方面：</p><ol><li>模块或软件构件间的接口设计；</li><li>软件与其他软硬件系统之间的接口设计；</li><li>软件与人（用户）之间的交互设计。人机交互（用户）界面是人机交互的主要方式</li></ol><h4 id="人机交互界面"><a href="#人机交互界面" class="headerlink" title="人机交互界面"></a>人机交互界面</h4><p>在设计阶段，必须根据需求把交互细节加入到用户界面设计中，包括人机交互所必须的实际显示和输入。</p><p>人机交互界面是给用户使用的，为了设计好人机交互界面，设计者需要了解以下信息：</p><p>（１）用户界面应具有的特性？</p><p>（２）使用软件的用户是什么人？</p><p>（３）用户怎样学习与新的计算机系统进行交互？</p><p>（４）用户需要完成哪些工作？</p><h5 id="用户界面应具备的特性"><a href="#用户界面应具备的特性" class="headerlink" title="用户界面应具备的特性"></a>用户界面应具备的特性</h5><p>可使用性：是用户界面设计最重要的目标．包括使用简单、界面一致、拥有help帮助功能、快速的系统响应和低的系统成本、具有容错能力等。</p><p>灵活性：考虑到用户的特点、能力和知识水平，应该使用户接口满足不同用户的要求。因此，对不同的用户，应有不同的界面形式，但不同的界面形式不应影响任务的完成。</p><p>可靠性：用户界面的可靠性是指无故障使用的间隔时间。用户界面应能保证用户正确、可靠地使用系统，保证有关程序和数据的安全性。</p><h5 id="用户类型"><a href="#用户类型" class="headerlink" title="用户类型"></a>用户类型</h5><p>外行型：以前从未使用过计算机系统的用户。</p><p>初学型：尽管对新的系统不熟悉，但对计算机还有一些使用经验的用户。</p><p>熟练型：对一个系统有相当多的经验，能够熟练操作的用户。</p><p>专家型：这一类用户了解系统内部的构造，有关于系统工作机制的专业知识，具有维护和修改基本系统的能力。专家型需要为他们提供能够修改和扩充系统能力的复杂界面。</p><h5 id="界面设计类型"><a href="#界面设计类型" class="headerlink" title="界面设计类型"></a>界面设计类型</h5><img src="/2022/05/18/software/image-20220603170300997.png" class="" title="image-20220603170300997"><p>在选用界面形式的时候，应当考虑每种类型的优点和限制，可以从以下几个方面来考察：</p><p>(1) 使用的难易程度：对于没有经验的用户，该界面使用的难度有多大。</p><p>(2) 学习的难易程度：学习该界面的命令和功能的难度有多大。</p><p>(3) 操作速度：在完成一个指定操作时，该界面在操作步骤、击键和反应时间等方面效率有多高。</p><p>(4) 复杂程度：该界面提供了什么功能、能否用新的方式组合这些功能以增强界面的功能。</p><p>(5) 控制：人机交互时，是由计算机还是由人发起和控制对话。</p><p>(6) 开发的难易程度：该界面设计是否有难度、开发工作量有多大。</p><h5 id="设计详细的交互"><a href="#设计详细的交互" class="headerlink" title="设计详细的交互"></a>设计详细的交互</h5><p>人机交互的设计有若干准则，包括以下内容：</p><p>(1) 一致性。采用一致的术语、一致的步骤和一致的活动。</p><p>(2) 操作步骤少。使击键或点击鼠标的次数减到最少，甚至要减少做某些事所需的下拉菜单的距离。</p><p>(3) 不要“哑播放”。</p><p>(4) 提供Undo功能。</p><p>(5) 减少人脑的记忆负担。不应该要求人从一个窗口中记住某些信息，然后在另一个窗口中使用。</p><p>(6) 提高学习效率。为高级特性提供联机帮助，以便用户在需要时容易找到。</p><h3 id="4-5数据设计"><a href="#4-5数据设计" class="headerlink" title="4.5数据设计"></a>4.5数据设计</h3><h4 id="文件设计"><a href="#文件设计" class="headerlink" title="文件设计"></a>文件设计</h4><p>以下几种情况适合于选择文件存储。</p><p>(1) 数据量较大的非结构化数据，如多媒体信息。</p><p>(2) 数据量大，信息松散，如历史记录、档案文件等。</p><p>(3) 非关系层次化数据，如系统配置文件。</p><p>(4) 对数据的存取速度要求极高的情况。</p><p>(5) 临时存放的数据。</p><p>一般要根据文件的特性，来确定文件的组织方式。</p><p>(1) 顺序文件：这类文件分两种，一种是连续文件，另一种是串联文件。  </p><p>(2) 直接存取文件：可根据记录关键字的值，通过计算直接得到记录的存放地址。</p><p>(3) 索引顺序文件：其基本数据记录按顺序文件组织，记录排列顺序必须按关键字值升序或降序安排，且具有索引部分，索引部分也按同一关键字进行索引。 </p><p>(4) 分区文件：这类文件主要用于存放程序。它由若干称为成员的顺序组织的记录组和索引组成。每一个成员就是一个程序，由于各个程序的长度不同，所以各个成员的大小也不同，需要利用索引给出各个成员的程序名、开始存放位置和长度。 </p><p>(5) 虚拟存储文件：这是基于操作系统的请求页式存储管理功能而建立的索引顺序文件。 </p><h4 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h4><p>根据数据库的组织，可以将数据库分为网状数据库、层次数据库、关系数据库、面向对象数据库、文档数据库、多维数据库等。</p><p>关系数据库最成熟，应用也最广泛，一般情况下，大多数设计者都会选择关系数据库。</p><p>在结构化设计方法中，很容易将结构化分析阶段建立的实体—关系模型映射到关系数据库中。  </p><h5 id="数据对象实体的映射"><a href="#数据对象实体的映射" class="headerlink" title="数据对象实体的映射"></a>数据对象实体的映射</h5><p>一个数据对象（实体）可以映射为一个表或多个表，当分解为多个表时，可以采用横切和竖切的方法。</p><p>竖切常用于实例较少而属性很多的对象。通常将经常使用的属性放在主表中，而将其他一些次要的属性放到其他表中。</p><p>横切常常用于记录与时间相关的对象。往往在主表中只记录最近的对象，而将以前的记录转到对应的历史表中。</p><h5 id="关系的映射"><a href="#关系的映射" class="headerlink" title="关系的映射"></a>关系的映射</h5><p>一对一关系的映射：可以在两个表中都引入外键，进行双向导航。也可以将两个数据对象组合成一张单独的表。</p><p>一对多关系的映射：可以将关联中的“一”端毫无变化地映射到一张表，将关联中表示“多”的端上的数据对象映射到带有外键的另一张表，使外键满足关系引用的完整性。</p><p>多对多关系的映射：为了表示多对多关系，关系模型必须引入一个关联表，将两个数据实体之间的多对多关系转换成两个一对多关系。</p><h3 id="4-6过程设计"><a href="#4-6过程设计" class="headerlink" title="4.6过程设计"></a>4.6过程设计</h3><p>表达过程规格说明的工具称为过程描述工具，可以将过程描述工具分为以下3类。</p><p>(1) 图形工具：把过程的细节用图形方式描述出来，如程序流程图、N-S图、PAD图、决策树等。</p><p>(2) 表格工具：用一张表来表达过程的细节。这张表列出了各种可能的操作及其相应的条件，即描述了输入、处理和输出信息，如决策表。</p><p>(3) 语言工具：用某种类高级语言（称为伪代码）来描述过程的细节，如很多数据结构教材中使用类Pascal、类C语言来描述算法。</p><h4 id="结构化程序设计"><a href="#结构化程序设计" class="headerlink" title="结构化程序设计"></a>结构化程序设计</h4><p>最早由E. W. Dijkstra提出;建议从高级语言中取消GOTO语句；1966年，Bohm和Jacopini证明：只用三种基本的控制结构“顺序”、“选择”和“循环”就能实现任何单入口和单出口的没有“死循环”的程序。</p><p>概念：如果一个程序的代码块仅仅通过顺序、选择和循环这三种基本控制结构进行连接，并且每个代码块只有一个入口和一个出口，则称这个程序是结构化的。</p><p>结构程序设计的主要原则</p><p>(1)使用语言中的顺序、选择、重复等有限的基本控制结构表示程序逻辑。</p><p>(2)选用的控制结构只准许有一个入口和一个出口。</p><p>(3)程序语句组成容易识别的块（Block），每块只有一个入口和一个出口。</p><p>(4)复杂结构应该用基本控制结构进行组合嵌套来实现。</p><p>(5)语言中没有的控制结构，可用一段等价的程序段模拟， 但要求该程序段在整个系统中应前后一致。</p><p>(6) 严格控制GOTO语句，仅在下列情形才可使用：</p><p>用非结构化的程序设计语言去实现结构化的构造。</p><p>若不使用GOTO语句就会使程序功能模糊。</p><p>在某种可以改善而不是损害程序可读性的情况下。例如，在查找结束时，文件访问结束时，出现错误情况要从循环中转出时，使用布尔变量和条件结构来实现就不如用GOTO语句来得简洁易懂。</p><p>(7) 在程序设计过程中，尽量采用自顶向下(Top－Down)、逐步细化(Stepwise Refinement)的原则，由粗到细，一步步展开。</p><h4 id="程序流程图"><a href="#程序流程图" class="headerlink" title="程序流程图"></a>程序流程图</h4><p>程序流程图也称为程序框图，是软件开发者最熟悉的算法表达工具。</p><p>早期的流程图也存在一些缺点。特别是表示程序控制流程的箭头，使用的灵活性极大，程序员可以不受任何约束，随意转移控制，这将不符合结构化程序设计的思想。</p><p>为使用流程图描述结构化程序，必须对流程图加以限制。</p><p>程序流程图的基本控制结构</p><p>(1) 顺序型：几个连续的加工步骤依次排列构成。</p><p>(2) 选择型：由某个逻辑判断式的取值决定选择两个加工中的一个。</p><p>(3) 先判定（while）型循环：在循环控制条件成立时，重复执行特定的加工。</p><p>(4) 后判定（until）型循环：重复执行某些特定的加工，直至控制条件成立。</p><p>(5) 多情况（case）型选择：列举多种加工情况，根据控制变量的取值，选择执行其一。</p><p>基本控制结构</p><img src="/2022/05/18/software/image-20220603171046082.png" class="" title="image-20220603171046082"><img src="/2022/05/18/software/image-20220603171053365.png" class="" title="image-20220603171053365"><p>符号</p><img src="/2022/05/18/software/image-20220603171100021.png" class="" title="image-20220603171100021"><p>循环标准符号</p><img src="/2022/05/18/software/image-20220603171129259.png" class="" title="image-20220603171129259"><p>注释符号使用</p><img src="/2022/05/18/software/image-20220603171141332.png" class="" title="image-20220603171141332"><p>多选择判断</p><img src="/2022/05/18/software/image-20220603171235164.png" class="" title="image-20220603171235164"><h4 id="N-S图"><a href="#N-S图" class="headerlink" title="N-S图"></a>N-S图</h4><p>Nassi和Shneiderman 提出了一种符合结构化程序设计原则的图形描述工具，叫做盒图 （box-diagram），也叫做N-S图。</p><p>在N-S图中，为了表示5种基本控制结构，规定了5种图形构件。</p><img src="/2022/05/18/software/image-20220603171322961.png" class="" title="image-20220603171322961"><img src="/2022/05/18/software/image-20220603171326493.png" class="" title="image-20220603171326493"><h4 id="PAD图"><a href="#PAD图" class="headerlink" title="PAD图"></a>PAD图</h4><p>PAD（problem analysis diagram）是日本日立公司提出，由程序流程图演化来的，用结构化程序设计思想表现程序逻辑结构的图形工具。</p><p>PAD也设置了5种基本控制结构的图式，并允许递归使用。</p><img src="/2022/05/18/software/image-20220603171352726.png" class="" title="image-20220603171352726"><img src="/2022/05/18/software/image-20220603171357563.png" class="" title="image-20220603171357563"><h4 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h4><p>伪代码是一种介于自然语言和形式化语言之间的半形式化语言，是一种用于描述功能模块的算法设计和加工细节的语言，也称为程序设计语言（Program Design Language，PDL）。</p><p>伪码的语法规则分为“外语法”和“内语法”。</p><p>外语法应当符合一般程序设计语言常用语句的语法规则；</p><p>内语法可以用英语中一些简单的句子、短语和通用的数学符号来描述程序应执行的功能。</p><p>简单陈述句结构：避免复合语句。</p><p>判定结构：IF_THEN_ELSE或CASE_OF结构。</p><p>重复结构：WHILE_DO或REPEAT_UNTIL结构。</p><img src="/2022/05/18/software/image-20220603171513748.png" class="" title="image-20220603171513748"><p>(1) 有固定的关键字外语法，提供全部结构化控制结构、数据说明和模块特征。外语法的关键字是有限的词汇集，它们能对伪代码正文进行结构分割，使之变得易于理解。</p><p>(2) 内语法使用自然语言来描述处理特性，为开发者提供方便，提高可读性。</p><p>(3) 有数据说明机制，包括简单的（如标量和数组）与复杂的（如链表和层次结构）的数据结构。</p><p>(4) 有子程序定义与调用机制，用以表达各种方式的接口说明。</p><h4 id="自顶向下、逐步细化的设计过程"><a href="#自顶向下、逐步细化的设计过程" class="headerlink" title="自顶向下、逐步细化的设计过程"></a>自顶向下、逐步细化的设计过程</h4><p>主要包括两个方面：</p><p>一是将复杂问题的解法分解和细化成由若干个模块组成的层次结构；</p><p>二是将每个模块的功能逐步分解细化为一系列的处理。</p><p>在处理较大的复杂任务时，常采取“模块化”的方法，即在程序设计时不是将全部内容都放在同一个模块中，而是分成若干个模块，每个模块实现一个功能。</p><p>模块分解完成后，下一步的任务就是将每个模块的功能逐步分解细化为一系列的处理。</p><p>在概要设计阶段，我们已经采用自顶向下、逐步细化的方法，把复杂问题的解法分解和细化成了由许多功能模块组成的层次结构的软件系统。</p><p>在详细设计和编码阶段，我们还应当采取自顶向下、逐步求精的方法，把模块的功能逐步分解，细化为一系列具体的步骤，进而翻译成一系列用某种程序设计语言写成的程序。</p><p>自顶向下、逐步细化方法举例</p><p>用筛选法求100以内的素数。所谓的筛选法，就是从2到100中去掉2,3,5,7的倍数，剩下的就是100以内的素数。</p><p>1.首先按程序功能写出一个框架</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">main （） &#123; <br> 建立<span class="hljs-number">2</span>到<span class="hljs-number">100</span>的数组A[ ]，其中A[i]＝i；- - - - - <span class="hljs-number">1</span> <br> 建立<span class="hljs-number">2</span>到<span class="hljs-number">10</span>的素数表B[ ]，存放<span class="hljs-number">2</span>到<span class="hljs-number">10</span>以内的素数；- - <span class="hljs-number">2</span><br> 若A[i]＝i是B[ ]中任一数的倍数，则剔除A[i]； - - <span class="hljs-number">3</span> <br> 输出A[ ]中所有没有被剔除的数； - - - - - - - <span class="hljs-number">4</span> <br> &#125; <br></code></pre></td></tr></table></figure><p>2.上述框架中每一个加工语句都可进一步细化成一个循环语句 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">main （） &#123;<br>   <span class="hljs-comment">/*建立2到100的数组A[ ]，其中A[i]＝i*/</span>    - -  <span class="hljs-number">1</span><br>   <span class="hljs-keyword">for</span> （i = <span class="hljs-number">2</span>；i &lt;= <span class="hljs-number">100</span>；i++）A[i] = i；<br>   <span class="hljs-comment">/* 建立2到10的素数表B[ ]，存放2到10以内的素数*/</span>  - <span class="hljs-number">2</span><br>   B[<span class="hljs-number">1</span>] =<span class="hljs-number">2</span>；  B[<span class="hljs-number">2</span>] = <span class="hljs-number">3</span>；  B[<span class="hljs-number">3</span>] = <span class="hljs-number">5</span>；  B[<span class="hljs-number">4</span>] = <span class="hljs-number">7</span>；<br>   <span class="hljs-comment">/*若A[i]＝i是B[ ]中任一数的倍数，则剔除A[i]*/</span>  - - <span class="hljs-number">3</span><br>   <span class="hljs-keyword">for</span> （j = <span class="hljs-number">1</span>； j &lt;= <span class="hljs-number">4</span>； j++）<br>     检查A[ ]所有的数能否被B[j]整除并将能被整除的数从A[]中剔除； <br>   <span class="hljs-comment">/*输出A[ ]中所有没有被剔除的数*/</span>   - - - - - - - <span class="hljs-number">4</span><br>   <span class="hljs-keyword">for</span> （i = <span class="hljs-number">2</span>； i &lt;= <span class="hljs-number">100</span>； i++）<br>     若A[i]没有被剔除，则输出之<br> &#125;<br><br></code></pre></td></tr></table></figure><p>自顶向下、逐步求精的方法的优点 </p><p>(1) 自顶向下、逐步求精方法符合人们解决复杂问题的普遍规律。可提高软件开发的成功率和生产率。</p><p>(2) 用先全局后局部，先整体后细节，先抽象后具体的逐步求精的过程开发出来的程序具有清晰的层次结构，因此程序容易阅读和理解。</p><p>(3) 程序自顶向下、逐步细化，分解成树形结构。 在同一层的结点上做细化工作，相互之间没有关系，因此它们之间的细化工作相互独立。在任何一步发生错误，一般只影响它下层的结点，同一层的其他结点不受影响。 </p><p>(4) 程序清晰和模块化，使得在修改和重新设计一个软件时，可复用的代码量最大。</p><p>(5) 程序的逻辑结构清晰，有利于程序正确性证明。</p><p>(6) 每一步工作仅在上层结点的基础上做不多的设计扩展，便于检查。</p><p>(7) 有利于设计的分工和组织工作。</p><h3 id="4-7软件设计规格说明"><a href="#4-7软件设计规格说明" class="headerlink" title="4.7软件设计规格说明"></a>4.7软件设计规格说明</h3><p>国家标准GB/T 8567—2006《计算机软件文档编制规范》中有关软件总体设计的文档是《系统/子系统设计（结构设计）说明（SSDD）》， 描述了系统或子系统的系统级或子系统级设计与体系结构设计。 </p><h3 id="4-8软件设计评审"><a href="#4-8软件设计评审" class="headerlink" title="4.8软件设计评审"></a>4.8软件设计评审</h3><h1 id="Part3-面向对象分析与设计方法"><a href="#Part3-面向对象分析与设计方法" class="headerlink" title="Part3.面向对象分析与设计方法"></a>Part3.面向对象分析与设计方法</h1><h2 id="5-面向对象方法与UML"><a href="#5-面向对象方法与UML" class="headerlink" title="5.面向对象方法与UML"></a>5.面向对象方法与UML</h2><h3 id="5-1面向对象的概念与开发方法"><a href="#5-1面向对象的概念与开发方法" class="headerlink" title="5.1面向对象的概念与开发方法"></a>5.1面向对象的概念与开发方法</h3><p>面向对象的定义：面向对象＝对象＋类＋继承＋消息通信</p><p>如果一个系统是使用这样4个概念设计和实现的，则可认为这个系统是面向对象的。</p><h4 id="1-对象"><a href="#1-对象" class="headerlink" title="1.对象"></a>1.对象</h4><p>对象是包含现实世界物体特征的抽象实体，它反映了系统为之保存信息和（或）与它交互的能力。</p><p>例如，Student对象的数据可能有姓名、性别、出生日期、家庭住址、电话号码等，其操作可能是对这些数据值的赋值及更改。</p><img src="/2022/05/18/software/image-20220520095244946.png" class="" title="image-20220520095244946"><p>对象名有下列三种表示格式：</p><p>(1) 第一种格式是对象名在前，类名在后，中间用冒号连接。形如：</p><p>​      <u>对象名：类名</u></p><p>(2) 第二种格式形如：</p><p>​      <u>：类名</u></p><p> 这种格式用于尚未给对象命名的情况，注意，类名前的冒号不能省略。</p><p>(3) 第三种格式形如：</p><p>​      <u>对象名</u></p><p>对象有两个层次的概念：</p><p>(1) 现实生活中对象指的是客观世界的实体。可以是可见的有形对象，如人、学生、汽车、房屋等；也可以是抽象的逻辑对象，如银行帐号，生日。</p><p>(2) 程序中对象就是一组变量和相关方法的集合，其中变量表明对象的状态，方法表明对象所具有的行为。</p><p>可以将程序中的对象分为5类：物理对象，角色，事件，交互，规格说明。</p><ol><li><p><strong>物理对象</strong>（Physical Objects）── 物理对象是最易识别的对象，通常可以在问题领域的描述中找到，它们的属性可以标识和测量。</p><p>例如，大学课程注册系统中的学生对象；一个网络管理系统中各种网络物理资源对象（如开关、CPU和打印机）都是物理对象。</p></li><li><p><strong>角色</strong>（Roles）── 一个实体的角色也可以抽象成一个单独的对象。角色对象的操作是由角色提供的技能。</p><p>例如，一个退休教师同时扮演退休者和教师的角色。</p></li><li><p> <strong>事件</strong>（Events）── 一个事件是某种活动的一次“出现”。</p></li></ol><p>   例如“鼠标”事件。一个事件对象通常是一个数据实体，它管理“出现”的重要信息。事件对象的操作主要用于对数据的存取。</p><ol start="4"><li><p><strong>交互</strong>（Interactions）── 交互表示了在两个对象之间的关系，这种类型的对象类似于在数据库设计时所涉及的“关系”实体。当实体之间是多对多的关系时，利用交互对象可将其简化为两个一对多的关系。</p><p>例如，在大学课程注册系统中，学生和课程之间的关系是多对多的关系，可设置一个“选课”交互对象来简化它们之间的关系。</p></li><li><p><strong>规格说明</strong>（specification）规格说明对象表名组合某些实体时的要求。</p></li></ol><h4 id="2-类与封装"><a href="#2-类与封装" class="headerlink" title="2.类与封装"></a>2.类与封装</h4><p>类</p><p>可以将现实生活中的对象经过抽象，映射为程序中的对象。对象在程序中是通过一种抽象数据类型来描述的，这种抽象数据类型称为类（Class）。 </p><p>为了让计算机创建对象，必须先提供对象的定义，也就是先定义对象所属的类。例如，可以将学生对象所属的类定义为Student。类的图形表示如图所示。</p><img src="/2022/05/18/software/image-20220520100441732.png" class="" title="image-20220520100441732"><p>封装</p><p>面向对象的封装特性与其抽象特性密切相关。封装是一种信息隐蔽技术，就是利用抽象数据类型将数据和基于数据的操作封装在一起。用户只能看到对象的封装界面信息，对象的内部细节对用户是隐蔽的。</p><p>封装的定义是：</p><p>(1) 清楚的边界，所有对象的内部信息被限定在这个边界内；</p><p>(2) 接口，即对象向外界提供的方法，外界可以通过这些方法与对象进行交互；</p><p>(3) 受保护的内部实现，即软件对象功能的实现细节，实现细节不能从类外访问。</p><h4 id="3-继承"><a href="#3-继承" class="headerlink" title="3.继承"></a>3.继承</h4><p>继承是一种联结类的层次模型，为类的重用提供了方便，它提供了明确表述不同类之间共性的方法。</p><h4 id="4-多态"><a href="#4-多态" class="headerlink" title="4.多态"></a>4.多态</h4><p>根据为请求提供服务的对象不同可以得到不同的行为，这种现象称为多态。通过在子类中覆盖父类的方法实现多态。</p><h4 id="5-消息通信"><a href="#5-消息通信" class="headerlink" title="5.消息通信"></a>5.消息通信</h4><p>消息是一个对象与另一个对象的通信单元，是要求某个对象执行类中定义的某个操作的规格说明。</p><p>发送给一个对象的消息定义了一个方法名和一个参数表（可能是空的），并指定某一个对象。</p><p>一个对象接收到消息，则调用消息中指定的方法，并将形式参数与参数表中相应的值结合起来。</p><h4 id="6-面向对象软件开发方法"><a href="#6-面向对象软件开发方法" class="headerlink" title="6.面向对象软件开发方法"></a>6.面向对象软件开发方法</h4><p>方法的唯一性：即方法是对软件开发过程所有阶段进行综合考虑而得到的。</p><p>从生存期的一个阶段到下一个阶段的高度连续性，即生存期后一阶段的成果只是在前一阶段成果的补充和修改。</p><p>将面向对象分析(OOA)、面向对象设计(OOD)和面向对象程序设计(OOP)集成到生存期的相应阶段。</p><h5 id="Booch方法"><a href="#Booch方法" class="headerlink" title="Booch方法"></a>Booch方法</h5><p>包含“微开发过程”和“宏开发过程”两个过程。OOA 宏观开发过程如下：</p><p>标识类和对象；标识类和对象的语义；标识类和对象间的关系；进行一系列精化；实现类和对象。</p><h5 id="Rumbaugh方法"><a href="#Rumbaugh方法" class="headerlink" title="Rumbaugh方法"></a>Rumbaugh方法</h5><p> Rumbaugh和他的同事提出的对象模型化技术(OMT)用于分析、系统设计和对象级设计。分析活动建立三个模型：</p><p>对象模型(描述对象、类、层次和关系)；动态模型(描述对象和系统的行为)；功能模型(类似于高层的DFD，描述穿越系统的信息流)。</p><h5 id="Coad和Yourdon方法"><a href="#Coad和Yourdon方法" class="headerlink" title="Coad和Yourdon方法"></a>Coad和Yourdon方法</h5><p> Coad和Yourdon方法常常被认为是最容易学习的OOA方法。建模符号相当简单，其OOA过程如下：</p><p>(1) 使用“要找什么”准则标识对象；</p><p>(2) 定义对象之间的一般化/特殊化结构（又称为分类结构）；</p><p>(3) 定义对象之间的整体/部分结构（又称为组合结构）； </p><p>(4) 标识主题；</p><p>(5) 定义对象的属性及对象之间的实例连接；</p><p>(6) 定义服务及对象之间的消息连接。</p><h5 id="Jacobson方法"><a href="#Jacobson方法" class="headerlink" title="Jacobson方法"></a>Jacobson方法</h5><p>也称为OOSE(面向对象软件工程)，其特点是特别强调使用用例——用以描述用户和产品或系统间如何交互的场景。过程如下：</p><p>标识系统的用户和他们的整体责任；构造需求模型；构造分析模型 。</p><h3 id="5-2UML简介"><a href="#5-2UML简介" class="headerlink" title="5.2UML简介"></a>5.2UML简介</h3><p>统一建模语言(UML，Unified Modeling Language)；</p><p>它将Booch、Rumbaugh和Jacobson等各自独立的OOA和OOD方法中最优秀的特色组合成一个统一的方法。</p><h4 id="1-UML特点"><a href="#1-UML特点" class="headerlink" title="1.UML特点"></a>1.UML特点</h4><ol><li>统一标准</li><li>面向对象</li><li>可视化，表达能力强大</li><li>独立于过程</li><li>容易掌握使用</li><li>与编程语言的关系</li></ol><h4 id="2-UML基本模型"><a href="#2-UML基本模型" class="headerlink" title="2.UML基本模型"></a>2.UML基本模型</h4><p>UML符号为开发者或开发工具使用这些图形符号和文本语法为系统建模提供了标准。这些图形符号和文字所表达的是应用级的模型，在语义上它是UML元模型的实例。UML模型由事物、关系和图组成 。 </p><img src="/2022/05/18/software/image-20220520101945101.png" class="" title="image-20220520101945101"><h3 id="5-3UML事物"><a href="#5-3UML事物" class="headerlink" title="5.3UML事物"></a>5.3UML事物</h3><p>事物是对模型中最具代表性成分的抽象，在UML中，可以分为结构事物、行为事物、分组事物和注释事物4类。 </p><img src="/2022/05/18/software/image-20220520102017668.png" class="" title="image-20220520102017668"><h4 id="1-结构事物"><a href="#1-结构事物" class="headerlink" title="1.结构事物"></a>1.结构事物</h4><p>结构事物是UML模型的静态部分，主要用来描述概念的或物理的元素，包括类、主动类、接口、对象、用例、参与者、协作、构件和节点等。</p><ol><li><p>类（class）── 类用带有类名、属性和操作的矩形框来表示。</p></li><li><p>主动类（active class）── 主动类的实例应具有一个或多个进程或线程，能够启动控制活动。</p></li><li><p>接口（interface）── 描述了一个类或构件的一组外部可用的服务（操作）集。</p><p>接口定义的是一组操作的描述，而不是操作的实现。 一般将接口画成从实现它的类或构件引出的圆圈，接口体现了使用与实现分离的原则。</p></li><li><p>对象（object）── 对象是类的实例，其名字下边加下划线，对象的属性值需明确给出。</p></li><li><p>用例（use case）── 也称用况，用于表示系统想要实现的行为，即描述一组动作序列（即场景）。而系统执行这组动作后将产生一个对特定参与者有价值的结果。</p></li><li><p>参与者（actor）── 也称角色，是指与系统有信息交互关系的人、软件系统或硬件设备，在图形上用简化的小木头人表示。</p></li><li><p>协作（collaboration）── 用例仅描述要实现的行为，不描述这些行为的实现。这种实现用协作描述。</p><p>协作定义交互，描述一组角色实体和其他实体如何通过协同工作来完成一个功能或行为。类可以参与几个协作。</p></li><li><p>构件（component）── 也称组件，是系统中物理的、可替代的部件。它通常是描述一些逻辑元素的物理包。</p></li><li><p>节点（node）── 是在运行时存在的物理元素。它代表一种可计算的资源，通常具有一定的记忆能力和处理能力。</p></li></ol><h4 id="2-行为事物"><a href="#2-行为事物" class="headerlink" title="2.行为事物"></a>2.行为事物</h4><p>行为事物是UML模型的动态部分，包括两类：</p><ol><li><p>交互（interaction）── 交互由在特定的上下文环境中共同完成一定任务的一组对象之间传递的消息组成。如图所示。交互涉及的元素包括消息、动作序列（由一个消息所引起的行为）和链（对象间的连接）。</p><img src="/2022/05/18/software/image-20220520102433994.png" class="" title="image-20220520102433994"></li><li><p>状态机（state machine）── 描述了一个对象或一个交互在生存周期内响应事件所经历的状态序列，单个类或者一组类之间协作的行为都可以用状态机来描述。状态机涉及到状态、变迁和活动，其中状态用圆角矩形来表示。</p><img src="/2022/05/18/software/image-20220520102538708.png" class="" title="image-20220520102538708"></li></ol><h4 id="3-分组事物"><a href="#3-分组事物" class="headerlink" title="3.分组事物"></a>3.分组事物</h4><p>分组事物是UML模型的组织部分。它的作用是为了降低模型复杂性。</p><p>UML中的分组事物是包（package）。</p><p>包是把模型元素组织成组的机制，结构事物、行为事物甚至其他分组事物都可以放进包内。</p><img src="/2022/05/18/software/image-20220520102605149.png" class="" title="image-20220520102605149"><h4 id="4-注释事物"><a href="#4-注释事物" class="headerlink" title="4.注释事物"></a>4.注释事物</h4><p>注释事物是UML模型的解释部分，它们用来描述和标注模型的任何元素。</p><p>通常可以用注释修饰带有约束或者解释的图。</p><img src="/2022/05/18/software/image-20220520102629220.png" class="" title="image-20220520102629220"><h3 id="5-4UML关系"><a href="#5-4UML关系" class="headerlink" title="5.4UML关系"></a>5.4UML关系</h3><img src="/2022/05/18/software/image-20220520102638588.png" class="" title="image-20220520102638588"><h4 id="1-依赖关系"><a href="#1-依赖关系" class="headerlink" title="1.依赖关系"></a>1.依赖关系</h4><p>依赖(Dependency)是两个事物之间的语义关系，其中一个事物发生变化会影响到另一个事物的语义，它用一个虚线箭头表示。</p><p>虚线箭头的方向从源事物指向目标事物，表示源事物依赖于目标事物。</p><img src="/2022/05/18/software/image-20220520103017732.png" class="" title="image-20220520103017732">CourseSchedule依赖Course<img src="/2022/05/18/software/image-20220520103026022.png" class="" title="image-20220520103026022"><img src="/2022/05/18/software/image-20220520103154412.png" class="" title="image-20220520103154412"><h4 id="2-关联关系"><a href="#2-关联关系" class="headerlink" title="2.关联关系"></a>2.关联关系</h4><p>关联(association)是一种结构关系，它描述了两个或多个类的实例之间的连接关系，是一种<strong>特殊的依赖</strong>。</p><h5 id="普通关联"><a href="#普通关联" class="headerlink" title="普通关联"></a>普通关联</h5><p>普通关联是最常见的关联关系，只要类与类之间存在连接关系就可以用普通关联表示。普通关联又分为二元关联和多元关联。</p><p>二元关联描述两个类之间的关联，用两个类之间的一条直线来表示，直线上可写上关联名，并用实心三角指示关联名指的是哪一个方向。如果关联含义清晰的话可以不写。如图先生类和学徒类之间的关联，该关联表明一位先生教授多名学徒，这些学徒受教于一位先生。</p><img src="/2022/05/18/software/image-20220520103233355.png" class="" title="image-20220520103233355"><p>关联与两端的类连接的地方叫关联端点，在关联两端连接的类各自充当了某种角色，有关的信息（角色名、可见性、多重性等）可附加到各个端点上。</p><p>多重性（multiplicity）：多重性表明在一个关联的两端连接的类实例个数的对应关系，即一端的类的多少个实例对象可以与另一端的类的一个实例相关。如果图中没有明确标出关联的多重性，则默认的多重性为1</p><img src="/2022/05/18/software/image-20220520103903516.png" class="" title="image-20220520103903516"><p>角色：关联端点上还可以附加角色名，表示类的实例在这个关联中扮演的角色（驾驶员、运输车）。</p><img src="/2022/05/18/software/image-20220520104037278.png" class="" title="image-20220520104037278"><p>UML还允许一个类与它自身关联。航班与乘务组是多对多的关联，乘务长与乘务员是1对多的关联，乘务长与乘务员之间存在管理关系。</p><img src="/2022/05/18/software/image-20220520104039475.png" class="" title="image-20220520104039475"><h5 id="多元关联"><a href="#多元关联" class="headerlink" title="多元关联"></a>多元关联</h5><p>多元关联是指3个或3个以上类之间的关联。</p><p>多元关联由一个菱形，以及由菱形引出的通向各个相关类的直线组成，关联名可标在菱形的旁边，在关联的端点也可以标上多重性等信息。</p><p>图表示哪个程序员用哪种程序语言开发了哪个项目</p><img src="/2022/05/18/software/image-20220520104107005.png" class="" title="image-20220520104107005"><h5 id="限定关联"><a href="#限定关联" class="headerlink" title="限定关联"></a>限定关联</h5><p>限定关联通常用在一对多或多对多的关联关系中，可以把模型中的多重性从一对多变成一对一，或将多对多简化成多对一。</p><p>在类图中把限定词（qualifier）放在关联关系末端的一个小方框内。</p><p>例如,某操作系统中一个目录下有许多文件,一个文件仅属于一个目录,在一个目录内文件名确定了唯一的一个文件。利用限定词“文件名”表示了目录与文件之间的关系,这样就利用限定词把一对多关系简化成了一对一关系。注意,限定词“文件名”应该放在靠近目录的那一端。</p><img src="/2022/05/18/software/image-20220520104439375.png" class="" title="image-20220520104439375"><h5 id="关联类"><a href="#关联类" class="headerlink" title="关联类"></a>关联类</h5><p>在关联关系比较简单的情况下，关联关系的语义用关联关系的名字来概括。但在某些情况下，需要对关联关系的语义做详细的定义、存储和访问，为此可以建立关联类（association class），用来描述关联的属性。关联中的每个链与关联类的一个实例相联系。关联类通过一条虚线与关联连接。</p><p>如图是一个公司类与属下一个或多个员工之间的关联，通过关联类给出关联“job”的细节。</p><img src="/2022/05/18/software/image-20220520105405540.png" class="" title="image-20220520105405540"><h5 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h5><p>聚合（Aggregation）也称为聚集，是一种特殊的关联。它描述了整体和部分之间的结构关系。</p><p>两种特殊的聚合关系：共享聚合（shared aggregation）和复合聚合（composition aggregation）。</p><ol><li><p>如果在聚合关系中处于部分方的实例可同时参与多个处于整体方实例的构成，则该聚合称为共享聚合。 </p><img src="/2022/05/18/software/image-20220520105555283.png" class="" title="image-20220520105555283"></li><li><p>如果部分类完全隶属于整体类，部分类需要与整体类共存，一旦整体类不存在了，则部分类也会随之消失，或失去存在价值，则这种聚合称为复合聚合。 </p><img src="/2022/05/18/software/image-20220520105638179.png" class="" title="image-20220520105638179"></li></ol><h5 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h5><p>导航（navigability）是关联关系的一种特性，它通过在关联的一个端点上加箭头来表示导航的方向。导航主要在设计阶段使用，当关联具有双向可导航性时，可以省略指示导航方向的箭头，此时隐指双向可导航。</p><p>在图a所示的关联中，课程与学生之间是多对多的关系，这个关联的链由一组 (课程实例，学生实例）对组成的元组组成。如果想知道某门课程有哪些学生选修，或某个学生选修了哪些课程，就需遍历该链的所有元组。UML通过在关联端点加一个箭头来表示导航，导航能从该链的所有元组中得到给定的元组。</p><p>例如，图b给出的学生和课程之间的导航表明，当指定一门课程时，就能直接导航出选修这门课程的所有学生，不用遍历全部元组，但当指定一个学生时，不能直接导航出该学生选修的所有课程，只能通过遍历全部元组才能得到结果。这种导航是单向的。</p><p>同样，图c给出了学生到课程的（单向）导航，即当指定一个学生时就能直接导航出该学生所选的所有课程。</p><p>图d则表示学生与课程之间的导航是双向。</p><img src="/2022/05/18/software/image-20220520105749517.png" class="" title="image-20220520105749517"><h4 id="3-泛化关系"><a href="#3-泛化关系" class="headerlink" title="3.泛化关系"></a>3.泛化关系</h4><p>•泛化(generalization)关系就是一般类和特殊类之间的继承关系。</p><p>•在UML中，一般类亦称泛化类，特殊类亦称特化类。</p><p>•泛化针对类型而不针对实例，因为一个类可以继承另一个类，但一个对象不能继承另一个对象。</p><h5 id="普通泛化"><a href="#普通泛化" class="headerlink" title="普通泛化"></a>普通泛化</h5><p>普通泛化与前面讲过的继承基本相同。但在泛化关系中常遇到抽象类。一般称没有具体对象的类为抽象类。抽象类通常作为父类，用于描述其他类（子类）的公共属性和行为。</p><p>在图形上，抽象类的类名下附加一个标签值{abstract}，如图所示。下方的两个折角矩形是注释，分别说明了两个子类的drive操作功能。抽象类中的操作用于指定它的所有具体子类应具有的行为。这些操作在每个具体子类中有具体的实现。每一个具体子类可创建自己的实例。</p><img src="/2022/05/18/software/image-20220520111932137.png" class="" title="image-20220520111932137"><p>•普通泛化可以分为多重继承和单继承。多重继承是指一个子类可同时继承多个上层父类。</p><img src="/2022/05/18/software/image-20220520112446593.png" class="" title="image-20220520112446593"><h5 id="受限泛化"><a href="#受限泛化" class="headerlink" title="受限泛化"></a>受限泛化</h5><p>•受限泛化关系是指泛化具有约束条件。</p><p>一般有4种约束：交叠（overlapping）、不相交（disjoint）、完全（complete）和不完全（incomplate）</p><img src="/2022/05/18/software/image-20220520112530852.png" class="" title="image-20220520112530852"><h4 id="4-实现关系"><a href="#4-实现关系" class="headerlink" title="4.实现关系"></a>4.实现关系</h4><p>•实现(implement)是泛化关系和依赖关系的结合，也是类之间的语义关系，通常在以下两种情况出现实现关系：</p><p>(1)接口和实现它们的类或构件之间；</p><p>(2)用例和实现它们的协作之间。</p><p>图用TV类和Radio类来实现接口ElectrialEquipment中规定的所有动作的情形</p><img src="/2022/05/18/software/image-20220520112557588.png" class="" title="image-20220520112557588"><h3 id="5-5UML的图"><a href="#5-5UML的图" class="headerlink" title="5.5UML的图"></a>5.5UML的图</h3><p>这位更是重量级，分两大类：结构图、行为图</p><img src="/2022/05/18/software/image-20220520112721540.png" class="" title="image-20220520112721540"><h4 id="1-用例图"><a href="#1-用例图" class="headerlink" title="1.用例图"></a>1.用例图</h4><p>用例模型描述的是参与者(actor)所理解的系统功能。用例模型用于需求分析阶段，它的建立是系统开发者和用户反复讨论的结果，描述了开发者和用户对需求规格达成的共识。在UML中，一个用例模型由若干个用例图来描述，用例图的主要元素是用例和执行者。用例图是包括执行者、由系统边界（一个矩形）封闭的一组用例，执行者和用例之间的关联、用例间关系以及执行者的泛化的图。</p><img src="/2022/05/18/software/image-20220520151908896.png" class="" title="image-20220520151908896"><p> 用例之间可以有泛化、扩展、使用（包含）三种关系。</p><ol><li>泛化关系：用例泛化是指一个用例可以被特别列举为一个或多个子用例。</li><li>扩展关系：向一个用例中加入一些新的动作后构成了另一个用例，这两个用例之间的关系就是扩展关系，后者通过继承前者的一些行为得来，通常把后者称为扩展用例。</li><li>使用（包含）关系：当一个用例使用另一个用例时，这两个用例之间就构成了使用关系。当有一大块相似的动作存在于几个用例，又不想重复描述该动作，将重复的部分分离为一个用例，两用例间关系称为使用关系。</li></ol><img src="/2022/05/18/software/image-20220520153201507.png" class="" title="image-20220520153201507"><h4 id="2-类图"><a href="#2-类图" class="headerlink" title="2.类图"></a>2.类图</h4><p>类图描述类和类与类之间的静态关系，它是从静态角度表示系统的，因此类图属于一种静态模型。类图是构建其他图的基础，没有类图就没有状态图、协作图等其他图，也就无法表示系统其他方面的特性。   </p><p>类图显示了类（及其接口）、类的内部结构以及与其他类的联系。联系是指类元之间的联系，在类的建模中可以使用<strong>关联、聚合和泛化</strong>（继承）关系。</p><img src="/2022/05/18/software/image-20220520154357262.png" class="" title="image-20220520154357262"><img src="/2022/05/18/software/image-20220520154402767.png" class="" title="image-20220520154402767"><p>关联类是指表示其他类之间关联关系的类。当一个关联具有自己的属性并需要存储它们时，就需要用关联类建模。关联类用虚线连接在两个类之间的联系上。</p><img src="/2022/05/18/software/image-20220520154416726.png" class="" title="image-20220520154416726"><h4 id="3-顺序图和通信图"><a href="#3-顺序图和通信图" class="headerlink" title="3.顺序图和通信图"></a>3.顺序图和通信图</h4><img src="/2022/05/18/software/image-20220520160324655.png" class="" title="image-20220520160324655"><p>•通信图是顺序图的一种变化形式，用于描述相互协作的对象间的交互关系和链接关系。</p><img src="/2022/05/18/software/image-20220520160338774.png" class="" title="image-20220520160338774"><h4 id="4-状态图"><a href="#4-状态图" class="headerlink" title="4.状态图"></a>4.状态图</h4><p>状态图描述一个特定对象的所有可能的状态以及引起状态转换的事件。大多数面向对象技术都用状态图表示单个对象在其生命期中的行为。一个状态图包括一系列状态、事件以及状态之间的转移。</p><p>•所有对象都具有状态，状态是对象执行了一系列活动的结果。当某个事件发生后，对象的状态将发生变化。在状态图中定义的状态可能有：初态(初始状态)、终态(最终状态)、中间状态和复合状态。</p><p>•在一张状态图中只能有<strong>一个初态</strong>，而<strong>终态则可以有多个</strong>。</p><img src="/2022/05/18/software/image-20220520160444022.png" class="" title="image-20220520160444022"><p>中间状态用圆角矩形表示，可能包含三个部分，第一部分为状态的名称；第二部分为状态变量的名字和值，这部分是可选的；第三部分是活动表，这部分也是可选的。</p><img src="/2022/05/18/software/image-20220520160526541.png" class="" title="image-20220520160526541">中间状态<img src="/2022/05/18/software/image-20220520160633030.png" class="" title="image-20220520160633030">电梯的状态图(状态图没有终点)<img src="/2022/05/18/software/image-20220520160728415.png" class="" title="image-20220520160728415">带有事件说明的状态转换<h4 id="5-活动图"><a href="#5-活动图" class="headerlink" title="5.活动图"></a>5.活动图</h4><p>Ø活动图用来捕捉用例的活动，使用框图的方式显示动作及其结果。</p><p>Ø活动图是一个流图，描述了从活动到活动的流。</p><p>Ø它是另一种描述交互的方式，它描述采取何种动作，动作的结果是什么(动作状态改变)，何时发生(动作序列)，以及在何处发生(泳道)。 </p><img src="/2022/05/18/software/image-20220520161228352.png" class="" title="image-20220520161228352"><h4 id="6-构件图和部署图"><a href="#6-构件图和部署图" class="headerlink" title="6.构件图和部署图"></a>6.构件图和部署图</h4><p>Ø构件图描述软件构件及构件之间的依赖关系，显示代码的静态结构。</p><p>Ø构件是逻辑架构中定义的概念和功能(例如，类、对象及它们之间的关系)在物理架构中的实现。典型情况下，构件是开发环境中的实现文件。</p><p>软件构件可以是下述的任何一种构件。</p><p>•源构件：源构件仅在编译时才有意义。典型情况下，它是实现一个或多个类的源代码文件。</p><p>•二进制构件：典型情况下，二进制构件是对象代码，它是源构件的编译结果。</p><p>•可执行构件：可执行构件是一个可执行的程序文件，它是链接所有二进制构件所得到的结果。一个可执行构件代表在处理器(计算机)上运行的可执行单元。</p><img src="/2022/05/18/software/image-20220520161421245.png" class="" title="image-20220520161421245">画图系统的构件图<img src="/2022/05/18/software/image-20220520161432807.png" class="" title="image-20220520161432807">银行储蓄系统的构件图<p>•部署图描述处理器、设备和连接，它显示系统硬件的物理拓扑结构及在此结构上执行的软件。</p><p>•部署图可以显示计算节点的拓扑结构和通信路径、节点上运行的软件以及软件包含的逻辑单元。</p><img src="/2022/05/18/software/image-20220520161453359.png" class="" title="image-20220520161453359"><h4 id="？"><a href="#？" class="headerlink" title="？"></a>？</h4><p>•UML中有两种类型的交互图：顺序图和协作图。</p><p>•顺序图描述对象之间的动态交互关系，着重表现对象间消息传递的时间顺序。顺序图中的符号如下:  </p><img src="/2022/05/18/software/image-20220520160236079.png" class="" title="image-20220520160236079"><p>UML定义的三种消息：</p><p>•<strong>简单消息</strong>：表示简单的控制流，它只是表示控制从一个对象传给另一个对象，而没有描述通信的任何细节。</p><p>•<strong>同步消息</strong>：表示嵌套的控制流，操作的调用是一种典型的同步消息。调用者发出消息后必须等待消息返回，只有当处理消息的操作执行完毕后，调用者才可以继续执行自己的操作。</p><p><strong>异步消息</strong>：表示异步控制流，发送者发出消息后不用等待消息处理完就可以继续执行自己的操作。异步消息主要用于描述实时系统中的并发行为</p><img src="/2022/05/18/software/image-20220520160250925.png" class="" title="image-20220520160250925"><h3 id="5-6使用和扩展UML"><a href="#5-6使用和扩展UML" class="headerlink" title="5.6使用和扩展UML"></a>5.6使用和扩展UML</h3><p>使用UML的准则</p><p>不要试图使用所有的图形和符号</p><p>应该根据项目的特点，选用最适用的图形和符号。一般来说，应该优先选用简单的图形和符号，例如，用例、类、关联、属性和继承等概念是最常用的。</p><p>不要为每个事物都画一个模型</p><p>应该把精力集中于关键的领域。最好只画几张关键的图，经常使用并不断更新、修改这几张图。</p><p>应该分层次地画模型图</p><p>根据项目进展的不同阶段，用正确的观点画模型图。如果处于分析阶段，应该画概念层模型图；当开始着手进行软件设计时，应该画设计层模型图；当考察某个特定的实现方案时，则应画实现层模型图。</p><p>使用UML的最大危险是过早地陷入实现细节。为了避免这一危险，应该把重点放在概念层和说明层。 </p><p>模型应该具有协调性</p><p>模型必须在每个抽象层次内和不同的抽象层次之间协调</p><p>模型和模型元素的大小应该适中</p><p>过于复杂的模型和模型元素难于理解也难于使用，这样的模型和模型元素很难生存下去。如果要建模的问题相当复杂，则可以把该问题分解成若干个子问题，分别为每个子问题建模，每个子模型构成原模型中的一个包，以降低建模的难度和模型的复杂性。**</p><p>扩展UML的机制</p><p>•为避免使UML变得过于复杂，UML并没有吸收所有面向对象的建模技术和机制，而是设计了适当的扩展机制，使得它能很容易地适应某些特定的方法、机构或用户的需要。利用扩展机制，用户可以定义和使用自己的模型元素。</p><p>•扩展的基础是UML的模型元素，利用扩展机制可以给这些元素的变形加上新的语义。新语义可以有三种形式：重新定义，增加新语义或者对某种元素的使用增加一些限制。相应地，有下述三种扩展机制。</p><p><strong>构造型</strong> <strong>(stereotype)</strong></p><p>构造型是在一个已定义的模型元素的基础上构造的一种新的模型元素。构造型的信息内容和形式与已存在的基本模型元素相同，但是含义和使用不同。 </p><p><strong>标记值</strong> <strong>(tagged value)</strong></p><p>标记值可以用来存储元素的任意信息，对于存储项目管理信息尤其有用的，如元素的创建日期、开发状态、截止日期和测试状态。</p><p>标记值用字符串表示，字符串有标记名、等号和值。它们被规则地放置在大括弧内。 </p><p><strong>约束</strong> <strong>(constraint)</strong></p><p>约束是用文字表达式表示的语义限制。约束用大括弧内的字符串表达式表示。约束可以附加在表元素、依赖关系，或注释上。 </p><h2 id="6-面向对象分析"><a href="#6-面向对象分析" class="headerlink" title="6.面向对象分析"></a>6.面向对象分析</h2><h3 id="6-1面向对象分析概述"><a href="#6-1面向对象分析概述" class="headerlink" title="6.1面向对象分析概述"></a>6.1面向对象分析概述</h3><p>面向对象分析就是抽取和整理用户需求并建立问题域精确模型的过程。</p><h4 id="1-确定系统边界"><a href="#1-确定系统边界" class="headerlink" title="1.确定系统边界"></a>1.确定系统边界</h4><p>Ø系统边界是系统的所有内部成分与系统以外各种事物的分界线。系统只通过边界上有限数量的接口与外部的系统参与者（人员、组织、设备或外系统）进行交互。</p><img src="/2022/05/18/software/image-20220520213124618.png" class="" title="image-20220520213124618"><h4 id="2-三种模型"><a href="#2-三种模型" class="headerlink" title="2.三种模型"></a>2.三种模型</h4><p>Ø用例模型：用例和场景表示的功能模型；</p><p>Ø对象模型：用类和对象表示的静态模型；</p><p>Ø交互模型：由状态图和顺序图表示的动态模型。</p><p>用例模型从用户角度描述系统功能，是整个后续工作的基础，也是测试与验收的依据 ；对象模型是核心模型，解决任何问题，几乎都需要从客观世界实体及实体间相互联系中抽象出极有价值的对象模型；当问题涉及交互作用和时序时，交互模型是重要的。</p><h3 id="6-2建立用例模型"><a href="#6-2建立用例模型" class="headerlink" title="6.2建立用例模型"></a>6.2建立用例模型</h3><p>建立用例模型的过程</p><ol><li><p>确定业务参与者──标识目标系统将支持的不同类型的用户，可以是人、事件或其他系统。</p><p>通过关注系统的业务参与者，我们可以将重点放在如何使用系统，而不是如何构造系统上，并且有助于进一步明确系统的范围和边界。</p><p>当系统比较庞大和复杂时，要搞清楚系统的需求往往比较困难，通过明确参与者，可以针对参与者确定系统需求，有助于保证系统需求的完整性</p><p>从以下三个方面识别参与者：</p><p> 人员或组织：直接使用系统的人员或组织</p><p> 外部系统：所有与本系统交互的外部系统</p><p> 设备：所有与系统交互的设备</p><p>可通过以下资料来确定系统的参与者：</p><p>标识系统范围和边界的环境图；</p><p>现有系统（如果有的话）的文档和用户手册；</p><p>项目会议和研讨会的记录；</p><p>现有的需求文档、工作手册等。</p><img src="/2022/05/18/software/image-20220520213602061.png" class="" title="image-20220520213602061"><p>•环境图是分析参与者和发现潜在用例的极好来源，它不仅可以用在结构化分析方法中，也可以用于面向对象的分析方法中。</p><p>•通过环境图，可以确定系统的主要输入输出，通过提交和接收输入输出的各方确定潜在的用例。</p><p>•对用例的完整描述包括用例名称、执行者、前置条件、后置条件、一个主事件流、零到多个备选事件流。</p><p>•主事件流表示正常情况下执行者与系统之间的信息交互及动作序列，备选事件流则表示特殊情况或异常情况下的信息交互及动作序列。</p><p>•应给出每个用例的规格说明。</p><p>•用例图是若干个参与者和用例，以及它们间的关系构成的图形表示。</p><p>•每个系统通常都有一个总体视图（Global View of Actors and Use Cases），如果总体视图过于复杂，则可以创建多个用例图，每个用例图关注系统的某一方面。</p><p>•通常是围绕参与者创建用例图。 </p></li><li><p>确定业务需求用例──参与者需要系统提供的完整功能。</p></li><li><p>创建用例图──标识参与者与用例之间、用例与用例之间的关系。</p></li></ol><h3 id="6-3建立对象模型"><a href="#6-3建立对象模型" class="headerlink" title="6.3建立对象模型"></a>6.3建立对象模型</h3><h3 id="6-4建立动态模型"><a href="#6-4建立动态模型" class="headerlink" title="6.4建立动态模型"></a>6.4建立动态模型</h3><p>顺序图</p><p>通信图</p><p>状态图</p><h1 id="Part4-软件实现与测试"><a href="#Part4-软件实现与测试" class="headerlink" title="Part4.软件实现与测试"></a>Part4.软件实现与测试</h1><h1 id="Part5-软件维护与软件管理"><a href="#Part5-软件维护与软件管理" class="headerlink" title="Part5.软件维护与软件管理"></a>Part5.软件维护与软件管理</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Part1-软件工程概述&quot;&gt;&lt;a href=&quot;#Part1-软件工程概述&quot; class=&quot;headerlink&quot; title=&quot;Part1.软件工程概述&quot;&gt;&lt;/a&gt;Part1.软件工程概述&lt;/h1&gt;&lt;h2 id=&quot;1-软件与软件工程的概念&quot;&gt;&lt;a href=&quot;#1</summary>
      
    
    
    
    
    <category term="review" scheme="https://github.com/sterne012/sterne012.github.io/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>数据结构题集整理</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/05/13/DataStructuresTest/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/05/13/DataStructuresTest/</id>
    <published>2022-05-13T06:57:54.000Z</published>
    <updated>2022-05-14T10:29:06.085Z</updated>
    
    <content type="html"><![CDATA[<p>因为考试看不到练习的在线题集，所以放一下原题和代码</p><p><del>但是有一说一，因为blog没做目录，这篇翻起来应该相当痛苦（）</del>可恶，为什么时至今日我才发现目录能调出来</p><h1 id="1-tree"><a href="#1-tree" class="headerlink" title="1.tree"></a>1.tree</h1><h2 id="1-1-funx-二叉树的遍历"><a href="#1-1-funx-二叉树的遍历" class="headerlink" title="1-1(funx) 二叉树的遍历"></a>1-1(funx) 二叉树的遍历</h2><p>本题要求给定二叉树的4种遍历。</p><p>函数接口定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PostorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LevelorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>;<br></code></pre></td></tr></table></figure><p>其中<code>BinTree</code>结构定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span> *<span class="hljs-title">Position</span>;</span><br><span class="hljs-keyword">typedef</span> Position BinTree;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span>&#123;</span><br>    ElementType Data;<br>    BinTree Left;<br>    BinTree Right;<br>&#125;;<br></code></pre></td></tr></table></figure><p>要求4个函数分别按照访问顺序打印出结点的内容，格式为一个空格跟着一个字符。</p><p>裁判测试程序样例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> ElementType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span> *<span class="hljs-title">Position</span>;</span><br><span class="hljs-keyword">typedef</span> Position BinTree;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span>&#123;</span><br>    ElementType Data;<br>    BinTree Left;<br>    BinTree Right;<br>&#125;;<br><br><span class="hljs-function">BinTree <span class="hljs-title">CreatBinTree</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">/* 实现细节忽略 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PostorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LevelorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    BinTree BT = <span class="hljs-built_in">CreatBinTree</span>();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Inorder:&quot;</span>);    <span class="hljs-built_in">InorderTraversal</span>(BT);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Preorder:&quot;</span>);   <span class="hljs-built_in">PreorderTraversal</span>(BT);   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Postorder:&quot;</span>);  <span class="hljs-built_in">PostorderTraversal</span>(BT);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Levelorder:&quot;</span>); <span class="hljs-built_in">LevelorderTraversal</span>(BT); <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/* 你的代码将被嵌在这里 */</span><br></code></pre></td></tr></table></figure><p>输出样例（对于图中给出的树）：</p><img src="/2022/05/13/DataStructuresTest/45.jpg" class="" title="img"><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Inorder</span><span class="hljs-operator">:</span> <span class="hljs-built_in">D</span> <span class="hljs-variable">B</span> <span class="hljs-built_in">E</span> <span class="hljs-variable">F</span> <span class="hljs-variable">A</span> <span class="hljs-variable">G</span> <span class="hljs-variable">H</span> <span class="hljs-built_in">C</span> <span class="hljs-built_in">I</span><br><span class="hljs-variable">Preorder</span><span class="hljs-operator">:</span> <span class="hljs-variable">A</span> <span class="hljs-variable">B</span> <span class="hljs-built_in">D</span> <span class="hljs-variable">F</span> <span class="hljs-built_in">E</span> <span class="hljs-built_in">C</span> <span class="hljs-variable">G</span> <span class="hljs-variable">H</span> <span class="hljs-built_in">I</span><br><span class="hljs-variable">Postorder</span><span class="hljs-operator">:</span> <span class="hljs-built_in">D</span> <span class="hljs-built_in">E</span> <span class="hljs-variable">F</span> <span class="hljs-variable">B</span> <span class="hljs-variable">H</span> <span class="hljs-variable">G</span> <span class="hljs-built_in">I</span> <span class="hljs-built_in">C</span> <span class="hljs-variable">A</span><br><span class="hljs-variable">Levelorder</span><span class="hljs-operator">:</span> <span class="hljs-variable">A</span> <span class="hljs-variable">B</span> <span class="hljs-built_in">C</span> <span class="hljs-built_in">D</span> <span class="hljs-variable">F</span> <span class="hljs-variable">G</span> <span class="hljs-built_in">I</span> <span class="hljs-built_in">E</span> <span class="hljs-variable">H</span><br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c">BinTree q[<span class="hljs-number">10007</span>];<br><span class="hljs-keyword">int</span> front=<span class="hljs-number">0</span>,rear=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(BinTree x)</span></span>&#123;<br>    q[rear++]=x;<br>&#125;<br><span class="hljs-function">BinTree <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> q[front++];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(BT)&#123;<br>        InorderTraversal(BT-&gt;Left);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c&quot;</span>,BT-&gt;Data);<br>        InorderTraversal(BT-&gt;Right);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(BT)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c&quot;</span>,BT-&gt;Data);<br>        PreorderTraversal(BT-&gt;Left);<br>        PreorderTraversal(BT-&gt;Right);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PostorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(BT)&#123;<br>        PostorderTraversal(BT-&gt;Left);<br>        PostorderTraversal(BT-&gt;Right);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c&quot;</span>,BT-&gt;Data);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LevelorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(BT) &#123;<br>        push(BT);<br>        <span class="hljs-keyword">while</span> (front != rear) &#123;<br>            BinTree t = pop();<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c&quot;</span>, t-&gt;Data);<br>            <span class="hljs-keyword">if</span> (t-&gt;Left) push(t-&gt;Left);<br>            <span class="hljs-keyword">if</span> (t-&gt;Right) push(t-&gt;Right);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-1-Tree-Traversals-Again"><a href="#1-1-Tree-Traversals-Again" class="headerlink" title="1-1 Tree Traversals Again"></a>1-1 Tree Traversals Again</h2><p>An inorder binary tree traversal can be implemented in a non-recursive way with a stack. For example, suppose that when a 6-node binary tree (with the keys numbered from 1 to 6) is traversed, the stack operations are: push(1); push(2); push(3); pop(); pop(); push(4); pop(); pop(); push(5); push(6); pop(); pop(). Then a unique binary tree (shown in Figure 1) can be generated from this sequence of operations. Your task is to give the postorder traversal sequence of this tree.</p><img src="/2022/05/13/DataStructuresTest/30-16524268907273.jpg" class="" title="img"><p>Figure 1</p><p>Input Specification:</p><p>Each input file contains one test case. For each case, the first line contains a positive integer <em>N</em> (≤30) which is the total number of nodes in a tree (and hence the nodes are numbered from 1 to <em>N</em>). Then 2<em>N</em> lines follow, each describes a stack operation in the format: “Push X” where X is the index of the node being pushed onto the stack; or “Pop” meaning to pop one node from the stack.</p><p>Output Specification:</p><p>For each test case, print the postorder traversal sequence of the corresponding tree in one line. A solution is guaranteed to exist. All the numbers must be separated by exactly one space, and there must be no extra space at the end of the line.</p><p>Sample Input:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs in">6<br>Push 1<br>Push 2<br>Push 3<br>Pop<br>Pop<br>Push 4<br>Pop<br>Pop<br>Push 5<br>Push 6<br>Pop<br>Pop<br></code></pre></td></tr></table></figure><p>Sample Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">3 4 2 6 5 1<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> data;<br>    node *left, *right;<br>    <span class="hljs-keyword">bool</span> lisnull,risnull;<br>    <span class="hljs-built_in">node</span>()&#123;<br>        left= <span class="hljs-literal">nullptr</span>;<br>        right= <span class="hljs-literal">nullptr</span>;<br>        lisnull=<span class="hljs-literal">false</span>;<br>        risnull=<span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;node,*Tree;<br>stack&lt;Tree&gt; st;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateTree</span><span class="hljs-params">(Tree &amp;T)</span></span>&#123;<span class="hljs-comment">//非递归建树模版</span><br>    string s;<span class="hljs-keyword">int</span> x;<br>    cin&gt;&gt;s&gt;&gt;x;<br>    T-&gt;data=x;<br>    st.<span class="hljs-built_in">push</span>(T);<br>    <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>())&#123;<br>        cin&gt;&gt;s;<br>        <span class="hljs-keyword">if</span>(s==<span class="hljs-string">&quot;Push&quot;</span>)&#123;<br>            cin&gt;&gt;x;<br>            Tree temp=<span class="hljs-keyword">new</span> node;<br>            temp-&gt;data=x;<br>            Tree f=st.<span class="hljs-built_in">top</span>();<br>            <span class="hljs-keyword">if</span>(!f-&gt;lisnull) &#123;<br>                f-&gt;left=temp;<br>                f-&gt;lisnull=<span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!f-&gt;risnull) &#123;<br>                f-&gt;right=temp;<br>                f-&gt;risnull=<span class="hljs-literal">true</span>;<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            st.<span class="hljs-built_in">push</span>(temp);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s==<span class="hljs-string">&quot;Pop&quot;</span>)&#123;<br>            Tree p=st.<span class="hljs-built_in">top</span>();<br>            <span class="hljs-keyword">if</span>(!p-&gt;lisnull)&#123;<br>                p-&gt;left= <span class="hljs-literal">nullptr</span>;<br>                p-&gt;lisnull=<span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                p-&gt;right= <span class="hljs-literal">nullptr</span>;<br>                p-&gt;risnull=<span class="hljs-literal">true</span>;<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PostOrder</span><span class="hljs-params">(Tree T)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(T)&#123;<br>        <span class="hljs-built_in">PostOrder</span>(T-&gt;left);<br>        <span class="hljs-built_in">PostOrder</span>(T-&gt;right);<br>        cout&lt;&lt;T-&gt;data;<br>        <span class="hljs-keyword">if</span>(--n!=<span class="hljs-number">0</span>)&#123;cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;&#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    Tree T=<span class="hljs-keyword">new</span> node;<br>    <span class="hljs-built_in">CreateTree</span>(T);<br>    <span class="hljs-built_in">PostOrder</span>(T);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-2-还原二叉树"><a href="#1-2-还原二叉树" class="headerlink" title="1-2 还原二叉树"></a>1-2 还原二叉树</h2><p>给定一棵二叉树的先序遍历序列和中序遍历序列，要求计算该二叉树的高度。</p><p>输入格式:</p><p>输入首先给出正整数N（≤50），为树中结点总数。下面两行先后给出先序和中序遍历序列，均是长度为N的不包含重复英文字母（区别大小写）的字符串。</p><p>输出格式:</p><p>输出为一个整数，即该二叉树的高度。</p><p>输入样例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs in">9<br>ABDFGHIEC<br>FDHGIBEAC<br></code></pre></td></tr></table></figure><p>输出样例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">5<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> Elemtype;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTree</span>&#123;</span><br>    Elemtype data;<br>    BiTree *lchild,*rchild;<br>&#125;BiTree,*Tree;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">10007</span>;<br>Elemtype pre[maxn],in[maxn];<br><span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br><br><span class="hljs-function">Tree <span class="hljs-title">CreateTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pre_l,<span class="hljs-keyword">int</span> pre_r,<span class="hljs-keyword">int</span> in_l,<span class="hljs-keyword">int</span> in_r)</span></span>&#123;<span class="hljs-comment">//DLR LDR的范围</span><br>    <span class="hljs-keyword">auto</span> T=(Tree)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(BiTree));<br>    T-&gt;data=pre[pre_l];<br>    T-&gt;lchild= <span class="hljs-literal">nullptr</span>;<br>    T-&gt;rchild= <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">int</span> llen,rlen;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=in_l;i&lt;=in_r;i++)&#123;<br>        <span class="hljs-keyword">if</span>(in[i]==T-&gt;data)&#123;<br>            llen=i-in_l;<br>            rlen=in_r-i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(llen)&#123;<br>        T-&gt;lchild=<span class="hljs-built_in">CreateTree</span>(pre_l+<span class="hljs-number">1</span>,pre_l+llen,in_l,in_l+llen<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(rlen)&#123;<br>        T-&gt;rchild=<span class="hljs-built_in">CreateTree</span>(pre_r-rlen+<span class="hljs-number">1</span>,pre_r,in_r-rlen+<span class="hljs-number">1</span>,in_r);<br>    &#125;<br>    <span class="hljs-keyword">return</span> T;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getDepth</span><span class="hljs-params">(Tree T)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!T) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">getDepth</span>(T-&gt;lchild), <span class="hljs-built_in">getDepth</span>(T-&gt;rchild))+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n;cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;pre[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;in[i];<br>    &#125;<br><br>    Tree T= <span class="hljs-built_in">CreateTree</span>(<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,n);<br>    cout&lt;&lt;<span class="hljs-built_in">getDepth</span>(T)&lt;&lt;endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">7</span><br><span class="hljs-comment">ABCDEFG</span><br><span class="hljs-comment">CBEDAFG</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="前中后序遍历建树模板"><a href="#前中后序遍历建树模板" class="headerlink" title="*前中后序遍历建树模板"></a>*前中后序遍历建树模板</h2><p>啊，我想想放哪了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Tree <span class="hljs-title">CreateTree</span><span class="hljs-params">(<span class="hljs-keyword">char</span> in[],<span class="hljs-keyword">char</span> post[],<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    node *p=<span class="hljs-keyword">new</span> node;<br>    p-&gt;data=post[n<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(;i&lt;n&amp;&amp;(in[i]!=p-&gt;data);i++);<br>    p-&gt;l= <span class="hljs-built_in">CreateTree</span>(in,post,i);<br>    p-&gt;r= <span class="hljs-built_in">CreateTree</span>(in+<span class="hljs-number">1</span>+i,post+i,n-i<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><span class="hljs-function">Tree <span class="hljs-title">CreateTree2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pre1,<span class="hljs-keyword">int</span> pre2,<span class="hljs-keyword">int</span> in1,<span class="hljs-keyword">int</span> in2)</span></span>&#123;<br>    node *p=<span class="hljs-keyword">new</span> node;<br>    p-&gt;l= <span class="hljs-literal">nullptr</span>;p-&gt;r= <span class="hljs-literal">nullptr</span>;<br>    p-&gt;data=pre[pre1];<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(in[in1+i]!=p-&gt;data) i++;<br>    <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)<br>        p-&gt;l= <span class="hljs-built_in">CreateTree2</span>(pre1+<span class="hljs-number">1</span>,pre2+i,in1,in1+i<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">if</span>(in1+i&lt;in2)<br>        p-&gt;r= <span class="hljs-built_in">CreateTree2</span>(pre1+i+<span class="hljs-number">1</span>,pre2,in1+i+<span class="hljs-number">1</span>,in2);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-3-玩转二叉树"><a href="#1-3-玩转二叉树" class="headerlink" title="1-3 玩转二叉树"></a>1-3 玩转二叉树</h2><p>给定一棵二叉树的中序遍历和前序遍历，请你先将树做个镜面反转，再输出反转后的层序遍历的序列。所谓镜面反转，是指将所有非叶结点的左右孩子对换。这里假设键值都是互不相等的正整数。</p><p>输入格式：</p><p>输入第一行给出一个正整数<code>N</code>（≤30），是二叉树中结点的个数。第二行给出其中序遍历序列。第三行给出其前序遍历序列。数字间以空格分隔。</p><p>输出格式：</p><p>在一行中输出该树反转后的层序遍历的序列。数字间以1个空格分隔，行首尾不得有多余空格。</p><p>输入样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs in">7<br>1 2 3 4 5 6 7<br>4 1 3 2 6 5 7<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">4 6 1 7 5 3 2<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Elemtype;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTree</span>&#123;</span><br>    Elemtype data;<br>    BiTree *lchild,*rchild;<br>&#125;BiTree,*Tree;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">10007</span>;<br>Elemtype pre[maxn],in[maxn];<br><span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-function">Tree <span class="hljs-title">CreateTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pre_l,<span class="hljs-keyword">int</span> pre_r,<span class="hljs-keyword">int</span> in_l,<span class="hljs-keyword">int</span> in_r)</span></span>&#123;<span class="hljs-comment">//DLR LDR的范围 和上一题一样</span><br>    <span class="hljs-keyword">auto</span> T=(Tree)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(BiTree));<br>    T-&gt;data=pre[pre_l];<br>    T-&gt;lchild= <span class="hljs-literal">nullptr</span>;<br>    T-&gt;rchild= <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">int</span> llen,rlen;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=in_l;i&lt;=in_r;i++)&#123;<br>        <span class="hljs-keyword">if</span>(in[i]==T-&gt;data)&#123;<br>            llen=i-in_l;<br>            rlen=in_r-i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(llen)&#123;<br>        T-&gt;lchild=<span class="hljs-built_in">CreateTree</span>(pre_l+<span class="hljs-number">1</span>,pre_l+llen,in_l,in_l+llen<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(rlen)&#123;<br>        T-&gt;rchild=<span class="hljs-built_in">CreateTree</span>(pre_r-rlen+<span class="hljs-number">1</span>,pre_r,in_r-rlen+<span class="hljs-number">1</span>,in_r);<br>    &#125;<br>    <span class="hljs-keyword">return</span> T;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">reverse</span><span class="hljs-params">(Tree T)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(T)&#123;<br>        <span class="hljs-keyword">auto</span> temp=T-&gt;lchild;<br>        T-&gt;lchild=T-&gt;rchild;<br>        T-&gt;rchild=temp;<br>        <span class="hljs-built_in">reverse</span>(T-&gt;lchild);<br>        <span class="hljs-built_in">reverse</span>(T-&gt;rchild);<br>    &#125;<br>&#125;<br>Tree q[<span class="hljs-number">10007</span>];<br><span class="hljs-keyword">int</span> front=<span class="hljs-number">0</span>,rear=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(Tree x)</span></span>&#123;<br>    q[rear++]=x;<br>&#125;<br><span class="hljs-function">Tree <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> q[front++];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LevelorderTraversal</span><span class="hljs-params">( Tree BT )</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(BT) &#123;<br>        <span class="hljs-built_in">push</span>(BT);<br>        <span class="hljs-keyword">while</span> (front != rear) &#123;<br>            Tree t = <span class="hljs-built_in">pop</span>();<br>            cout&lt;&lt;t-&gt;data;<br>            <span class="hljs-keyword">if</span>(--n!=<span class="hljs-number">0</span>) cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>            <span class="hljs-keyword">if</span> (t-&gt;lchild) <span class="hljs-built_in">push</span>(t-&gt;lchild);<br>            <span class="hljs-keyword">if</span> (t-&gt;rchild) <span class="hljs-built_in">push</span>(t-&gt;rchild);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;in[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;pre[i];<br>    &#125;<br><br><br>    Tree T= <span class="hljs-built_in">CreateTree</span>(<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-built_in">reverse</span>(T);<br>    <span class="hljs-built_in">LevelorderTraversal</span>(T);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">7</span><br><span class="hljs-comment">ABCDEFG</span><br><span class="hljs-comment">CBEDAFG</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="1-4-小字辈"><a href="#1-4-小字辈" class="headerlink" title="1-4 小字辈"></a>1-4 小字辈</h2><p>本题给定一个庞大家族的家谱，要请你给出最小一辈的名单。</p><p>输入格式：</p><p>输入在第一行给出家族人口总数 N（不超过 100 000 的正整数） —— 简单起见，我们把家族成员从 1 到 N 编号。随后第二行给出 N 个编号，其中第 i 个编号对应第 i 位成员的父/母。家谱中辈分最高的老祖宗对应的父/母编号为 -1。一行中的数字间以空格分隔。</p><p>输出格式：</p><p>首先输出最小的辈分（老祖宗的辈分为 1，以下逐级递增）。然后在第二行按递增顺序输出辈分最小的成员的编号。编号间以一个空格分隔，行首尾不得有多余空格。</p><p>输入样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs in">9<br>2 6 5 5 -1 5 6 4 7<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs out">4<br>1 9<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1e5</span>+<span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> n,f,maxdep;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; vec[maxn];<br><span class="hljs-keyword">int</span> depth[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(depth,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(depth));<br>    queue&lt;<span class="hljs-keyword">int</span>&gt;que;<br>    que.<span class="hljs-built_in">push</span>(f);<br>    depth[f]=<span class="hljs-number">1</span>;<br>    maxdep=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-keyword">int</span> temp=que.<span class="hljs-built_in">front</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;vec[temp].<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-keyword">int</span> node=vec[temp][i];<br>            depth[node]=depth[temp]+<span class="hljs-number">1</span>;<br>            maxdep=depth[node];<br>            que.<span class="hljs-built_in">push</span>(node);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">int</span> y;cin&gt;&gt;y;<br>        <span class="hljs-keyword">if</span>(y==<span class="hljs-number">-1</span>) f=i;<span class="hljs-comment">//根节点=i</span><br>        vec[y].<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <span class="hljs-built_in">bfs</span>();<br>    cout&lt;&lt;maxdep&lt;&lt;endl;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(depth[i]==maxdep) &#123;<br>            <span class="hljs-keyword">if</span>(!cnt)&#123;<br>                cout&lt;&lt;i;<br>                cnt=<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;i;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-5-列出叶节点"><a href="#1-5-列出叶节点" class="headerlink" title="1-5 列出叶节点"></a>1-5 列出叶节点</h2><p>对于给定的二叉树，本题要求你按从上到下、从左到右的顺序输出其所有叶节点。</p><p>输入格式：</p><p>首先第一行给出一个正整数 <em>N</em>（≤10），为树中结点总数。树中的结点从 0 到 <em>N</em>−1 编号。随后 <em>N</em> 行，每行给出一个对应结点左右孩子的编号。如果某个孩子不存在，则在对应位置给出 “-“。编号间以 1 个空格分隔。</p><p>输出格式：</p><p>在一行中按规定顺序输出叶节点的编号。编号间以 1 个空格分隔，行首尾不得有多余空格。</p><p>输入样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs in">8<br>1 -<br>- -<br>0 -<br>2 7<br>- -<br>- -<br>5 -<br>4 6<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">4 1 5<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> left,right;<br>    <span class="hljs-keyword">int</span> f;<br>&#125;tree[<span class="hljs-number">107</span>];<br>vector&lt;<span class="hljs-keyword">int</span>&gt; ans;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">107</span>;i++)&#123;<br>        tree[i].left=<span class="hljs-number">-1</span>;<br>        tree[i].right=<span class="hljs-number">-1</span>;<br>        tree[i].f=<span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    queue&lt;<span class="hljs-keyword">int</span>&gt;que;<br>    que.<span class="hljs-built_in">push</span>(x);<br>    <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-keyword">int</span> temp=que.<span class="hljs-built_in">front</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">int</span> l=tree[temp].left,r=tree[temp].right;<br>        <span class="hljs-keyword">if</span>(l==<span class="hljs-number">-1</span>&amp;&amp;r==<span class="hljs-number">-1</span>)&#123;<br>            ans.<span class="hljs-built_in">push_back</span>(temp);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(l!=<span class="hljs-number">-1</span>)&#123;<br>            que.<span class="hljs-built_in">push</span>(l);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(r!=<span class="hljs-number">-1</span>)&#123;<br>            que.<span class="hljs-built_in">push</span>(r);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        string x,y;cin&gt;&gt;x&gt;&gt;y;<br>        <span class="hljs-keyword">if</span>(x!=<span class="hljs-string">&quot;-&quot;</span>)&#123;<br>            <span class="hljs-keyword">int</span> t=<span class="hljs-built_in">stoi</span>(x);<br>            tree[i].left=t;<br>            tree[t].f=i;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(y!=<span class="hljs-string">&quot;-&quot;</span>)&#123;<br>            <span class="hljs-keyword">int</span> t=<span class="hljs-built_in">stoi</span>(y);<br>            tree[i].right=t;<br>            tree[t].f=i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(tree[i].f==<span class="hljs-number">-1</span>)&#123;<br>            <span class="hljs-built_in">bfs</span>(i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;ans.<span class="hljs-built_in">size</span>();i++)&#123;<br>        <span class="hljs-keyword">if</span>(!i)cout&lt;&lt;ans[i];<br>        <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;ans[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-6-修理牧场"><a href="#1-6-修理牧场" class="headerlink" title="1-6 修理牧场"></a>1-6 修理牧场</h2><p>农夫要修理牧场的一段栅栏，他测量了栅栏，发现需要<em>N</em>块木头，每块木头长度为整数<em>L**i</em>个长度单位，于是他购买了一条很长的、能锯成<em>N</em>块的木头，即该木头的长度是<em>L**i</em>的总和。</p><p>但是农夫自己没有锯子，请人锯木的酬金跟这段木头的长度成正比。为简单起见，不妨就设酬金等于所锯木头的长度。例如，要将长度为20的木头锯成长度为8、7和5的三段，第一次锯木头花费20，将木头锯成12和8；第二次锯木头花费12，将长度为12的木头锯成7和5，总花费为32。如果第一次将木头锯成15和5，则第二次锯木头花费15，总花费为35（大于32）。</p><p>请编写程序帮助农夫计算将木头锯成<em>N</em>块的最少花费。</p><p>输入格式:</p><p>输入首先给出正整数<em>N</em>（≤104），表示要将木头锯成<em>N</em>块。第二行给出<em>N</em>个正整数（≤50），表示每段木块的长度。</p><p>输出格式:</p><p>输出一个整数，即将木头锯成<em>N</em>块的最少花费。</p><p>输入样例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs in">8<br>4 5 1 2 1 3 1 1<br></code></pre></td></tr></table></figure><p>输出样例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">49<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//huffman树所有非叶节点权值和</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">10007</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span> &#123;</span><br>    <span class="hljs-keyword">int</span> weight;<br>    <span class="hljs-keyword">int</span> pos;<br>    <span class="hljs-keyword">int</span> left,right;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> TreeNode &amp;a)<span class="hljs-keyword">const</span>&#123;<span class="hljs-comment">//使用优先队列，重载小于号，使优先队列变为按照weight值从小到大排序</span><br>        <span class="hljs-keyword">return</span> weight&gt;a.weight;<br>    &#125;<br>    <span class="hljs-built_in">TreeNode</span>() &#123;<span class="hljs-comment">//结构体构造函数</span><br>        weight = inf;<span class="hljs-comment">//将权的初始值置为</span><br>        pos=<span class="hljs-number">0</span>;<br>        left=right=<span class="hljs-number">-1</span>;<br>    &#125;;<br>&#125;;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> a[maxn];<br>TreeNode T[<span class="hljs-number">10</span>*maxn];<br><span class="hljs-function">ll <span class="hljs-title">Huffman</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[],<span class="hljs-keyword">int</span> n)</span></span>&#123;<span class="hljs-comment">//通过给定的权值建立哈夫曼树</span><br>    ll ans=<span class="hljs-number">0</span>;<br>    priority_queue&lt;TreeNode&gt; que;<span class="hljs-comment">//优先队列</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        TreeNode temp;<br>        temp.weight=a[i];<br>        temp.pos=i;<br>        T[i]=temp;<br>        que.<span class="hljs-built_in">push</span>(temp);<br>    &#125;<span class="hljs-comment">//构建结点,将结点存入数组中并存入队列</span><br>    <span class="hljs-keyword">int</span> cnt=n;<br>    <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-keyword">auto</span> n1=que.<span class="hljs-built_in">top</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">auto</span> n2=que.<span class="hljs-built_in">top</span>();<br>        que.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//取出最小的两个权值并将其从队列中删除</span><br>        TreeNode newNode;<span class="hljs-comment">//建n1和n2的父节点，下面是一些赋值操作</span><br>        newNode.weight=n1.weight+n2.weight;<span class="hljs-comment">//父节点权值等于n1和n2权值之和</span><br>        ans+=newNode.weight;<br>        newNode.pos=cnt;<span class="hljs-comment">//记录父节点的位置</span><br>        newNode.left=n1.pos;<span class="hljs-comment">//记录左孩子和右孩子在数组中的位置</span><br>        newNode.right=n2.pos;<br><span class="hljs-comment">//        T[n1.pos].parent=T[n2.pos].parent=newNode.pos;//记录左孩子和右孩子的父节点的位置</span><br>        T[cnt++]=newNode;<span class="hljs-comment">//将父节点存入数组T中</span><br>        <span class="hljs-keyword">if</span>(cnt==<span class="hljs-number">2</span>*n<span class="hljs-number">-1</span>) <span class="hljs-keyword">break</span>;<span class="hljs-comment">//已录入全部结点信息  N = 2*n0-1</span><br>        que.<span class="hljs-built_in">push</span>(newNode);<span class="hljs-comment">//将父节点存入队列，进行下一次循环，再取权值最小的两个节点进行连接</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;a[i];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>) cout&lt;&lt;<span class="hljs-number">0</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-built_in">Huffman</span>(a,n)&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-7-ZigZagging-on-a-Tree"><a href="#1-7-ZigZagging-on-a-Tree" class="headerlink" title="1-7 ZigZagging on a Tree"></a>1-7 ZigZagging on a Tree</h2><p>Suppose that all the keys in a binary tree are distinct positive integers. A unique binary tree can be determined by a given pair of postorder and inorder traversal sequences. And it is a simple standard routine to print the numbers in level-order. However, if you think the problem is too simple, then you are too naive. This time you are supposed to print the numbers in “zigzagging order” – that is, starting from the root, print the numbers level-by-level, alternating between left to right and right to left. For example, for the following tree you must output: 1 11 5 8 17 12 20 15.</p><img src="/2022/05/13/DataStructuresTest/337cbfb0-a7b2-4500-9664-318e9ffc870e.jpg" class="" title="zigzag.jpg"><p>Input Specification:</p><p>Each input file contains one test case. For each case, the first line gives a positive integer N (≤30), the total number of nodes in the binary tree. The second line gives the inorder sequence and the third line gives the postorder sequence. All the numbers in a line are separated by a space.</p><p>Output Specification:</p><p>For each test case, print the zigzagging sequence of the tree in a line. All the numbers in a line must be separated by exactly one space, and there must be no extra space at the end of the line.</p><p>Sample Input:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs in">8<br>12 11 20 17 1 15 8 5<br>12 20 17 11 15 8 5 1<br></code></pre></td></tr></table></figure><p>Sample Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">1 11 5 8 17 12 20 15<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">50</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    node *l,*r;<br>    <span class="hljs-keyword">int</span> data;<br>    <span class="hljs-keyword">int</span> depth;<br>    <span class="hljs-built_in">node</span>()&#123;<br>        l=r= <span class="hljs-literal">nullptr</span>;<br>        data=<span class="hljs-number">0</span>;<br>        depth=<span class="hljs-number">0</span>;<br>    &#125;<br>&#125;node,*Tree;<br><span class="hljs-keyword">int</span> in[maxn],post[maxn];<br><span class="hljs-function">Tree <span class="hljs-title">CreateTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> in[],<span class="hljs-keyword">int</span> post[],<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    node *p=<span class="hljs-keyword">new</span> node;<br>    p-&gt;data=post[n<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(;i&lt;n&amp;&amp;(in[i]!=p-&gt;data);i++);<br>    p-&gt;l= <span class="hljs-built_in">CreateTree</span>(in,post,i);<br>    p-&gt;r= <span class="hljs-built_in">CreateTree</span>(in+<span class="hljs-number">1</span>+i,post+i,n-i<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">point</span>&#123;</span><br>    <span class="hljs-keyword">int</span> data;<br>    <span class="hljs-keyword">int</span> depth;<br>    <span class="hljs-built_in">point</span>()&#123;&#125;<br>    <span class="hljs-built_in">point</span>(<span class="hljs-keyword">int</span> da,<span class="hljs-keyword">int</span> de)&#123;<br>        data=da;<br>        depth=de;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">int</span> depth[maxn];<br>vector&lt;point&gt; ans;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(depth,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(depth));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Zig</span><span class="hljs-params">(Tree T)</span></span>&#123;<span class="hljs-comment">//深度反转</span><br>    queue&lt;Tree&gt;que;<br>    T-&gt;depth=<span class="hljs-number">1</span>;<br>    que.<span class="hljs-built_in">push</span>(T);<br>    <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())&#123;<br>        Tree temp=que.<span class="hljs-built_in">front</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br>        ans.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">point</span>(temp-&gt;data,temp-&gt;depth));<br>        <span class="hljs-keyword">int</span> d=temp-&gt;depth;<br>        <span class="hljs-keyword">if</span>(temp-&gt;l) &#123;<br>            temp-&gt;l-&gt;depth=d+<span class="hljs-number">1</span>;<br>            que.<span class="hljs-built_in">push</span>(temp-&gt;l);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(temp-&gt;r)&#123;<br>            temp-&gt;r-&gt;depth=d+<span class="hljs-number">1</span>;<br>            que.<span class="hljs-built_in">push</span>(temp-&gt;r);<br>        &#125;<br>    &#125;<br>    stack&lt;<span class="hljs-keyword">int</span>&gt;st;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;ans.<span class="hljs-built_in">size</span>();i++)&#123;<br>        <span class="hljs-keyword">if</span>(ans[i].depth%<span class="hljs-number">2</span>)&#123;<br>            st.<span class="hljs-built_in">push</span>(ans[i].data);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>())&#123;<br>                <span class="hljs-keyword">if</span>(!cnt) &#123;<br>                    cout&lt;&lt;st.<span class="hljs-built_in">top</span>();<br>                    cnt++;<br>                &#125;<br>                <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;st.<span class="hljs-built_in">top</span>();<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;ans[i].data;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-keyword">if</span>(!cnt) &#123;<br>            cout&lt;&lt;st.<span class="hljs-built_in">top</span>();<br>            cnt++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;st.<span class="hljs-built_in">top</span>();<br>        &#125;<br>        st.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n;cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;in[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;post[i];<br>    &#125;<br><br>    Tree T= <span class="hljs-built_in">CreateTree</span>(in,post,n);<br>    <span class="hljs-built_in">Zig</span>(T);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="1-8-Path-of-Equal-Weight"><a href="#1-8-Path-of-Equal-Weight" class="headerlink" title="1-8 Path of Equal Weight"></a>1-8 Path of Equal Weight</h2><p>Given a non-empty tree with root <em>R</em>, and with weight $W_i$ assigned to each tree node $T_i$. The weight of a path from $R$ to $L$ is defined to be the sum of the weights of all the nodes along the path from <em>R</em> to any leaf node <em>L</em>.</p><p>Now given any weighted tree, you are supposed to find all the paths with their weights equal to a given number. For example, let’s consider the tree showed in the following figure: for each node, the upper number is the node ID which is a two-digit number, and the lower number is the weight of that node. Suppose that the given number is 24, then there exists 4 different paths which have the same given weight: {10 5 2 7}, {10 4 10}, {10 3 3 6 2} and {10 3 3 6 2}, which correspond to the red edges in the figure.</p><img src="/2022/05/13/DataStructuresTest/212.jpg" class="" title="img"><p>Input Specification:</p><p>Each input file contains one test case. Each case starts with a line containing 0&lt;<em>N</em>≤100, the number of nodes in a tree, <em>M</em> (&lt;<em>N</em>), the number of non-leaf nodes, and 0&lt;<em>S</em>&lt;230, the given weight number. The next line contains <em>N</em> positive numbers where <em>W**i</em> (&lt;1000) corresponds to the tree node <em>T**i</em>. Then <em>M</em> lines follow, each in the format:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ID K ID<span class="hljs-selector-attr">[1]</span> ID<span class="hljs-selector-attr">[2]</span> ... ID<span class="hljs-selector-attr">[K]</span><br></code></pre></td></tr></table></figure><p>where <code>ID</code> is a two-digit number representing a given non-leaf node, <code>K</code> is the number of its children, followed by a sequence of two-digit <code>ID</code>‘s of its children. For the sake of simplicity, let us fix the root ID to be <code>00</code>.</p><p>Output Specification:</p><p>For each test case, print all the paths with weight S in <strong>non-increasing</strong> order. Each path occupies a line with printed weights from the root to the leaf in order. All the numbers must be separated by a space with no extra space at the end of the line.</p><p>Note: sequence {<em>A</em>1,<em>A</em>2,⋯,<em>A**n</em>} is said to be <strong>greater than</strong> sequence {<em>B</em>1,<em>B</em>2,⋯,<em>B**m</em>} if there exists 1≤<em>k</em>&lt;*min*{*n*,*m*} such that *A<em><em>i</em>=<em>B**i</em> for <em>i</em>=1,⋯,<em>k</em>, and <em>A**k</em>+1&gt;*B**k</em>+1.</p><p>Sample Input:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs in">20 9 24<br>10 2 4 3 5 10 2 18 9 7 2 2 1 3 12 1 8 6 2 2<br>00 4 01 02 03 04<br>02 1 05<br>04 2 06 07<br>03 3 11 12 13<br>06 1 09<br>07 2 08 10<br>16 1 15<br>13 3 14 16 17<br>17 2 18 19<br></code></pre></td></tr></table></figure><p>Sample Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs out">10 5 2 7<br>10 4 10<br>10 3 3 6 2<br>10 3 3 6 2<br></code></pre></td></tr></table></figure><p>Special thanks to Zhang Yuan and Yang Han for their contribution to the judge’s data.</p><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//注：未知原因2个测试点不过</span><br><span class="hljs-comment">//max size N</span><br><span class="hljs-comment">//sorting children only is NOT correct</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">300</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">int</span> n,m;<br>ll s;<br>ll weight[maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> num;<br>    ll w;<br>    <span class="hljs-built_in">node</span>(<span class="hljs-keyword">int</span> n)&#123;<br>        num=n;<br>        w=<span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">order</span>&#123;</span><br>    <span class="hljs-keyword">int</span> arr[maxn],l;<br>    <span class="hljs-built_in">order</span>(ll a[],<span class="hljs-keyword">int</span> len)&#123;<br>        l=len;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>            arr[i]=a[i];<br>        &#125;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(order &amp;a,order &amp;b)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;a.l&amp;&amp;i&lt;b.l;i++)&#123;<br>        <span class="hljs-keyword">if</span>(a.arr[i]&gt;b.arr[i]) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>vector&lt;node&gt; T[maxn];<br>vector&lt;ll&gt; route[maxn];<br>vector&lt;order&gt; output;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,ll w)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!T[x].<span class="hljs-built_in">size</span>())&#123;<br>        <span class="hljs-keyword">if</span>(w==s)&#123;<br>            route[x].<span class="hljs-built_in">push_back</span>(weight[x]);<br>            ll arr[maxn];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;route[x].<span class="hljs-built_in">size</span>();i++)&#123;<br>                arr[i]=route[x][i];<br>            &#125;<br>            output.<span class="hljs-built_in">emplace_back</span>(arr,route[x].<span class="hljs-built_in">size</span>());<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;T[x].<span class="hljs-built_in">size</span>();i++)&#123;<br>        <span class="hljs-keyword">int</span> temp=T[x][i].num;<br>        T[x][i].w=w+weight[temp];<br>        route[temp]=route[x];<br>        route[temp].<span class="hljs-built_in">push_back</span>(weight[x]);<br>        <span class="hljs-built_in">dfs</span>(temp,w+weight[temp]);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;weight[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-keyword">int</span> num,mm;cin&gt;&gt;num&gt;&gt;mm;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;mm;j++)&#123;<br>            <span class="hljs-keyword">int</span> x;cin&gt;&gt;x;<br>            T[num].<span class="hljs-built_in">emplace_back</span>(x);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,weight[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">sort</span>(output.<span class="hljs-built_in">begin</span>(),output.<span class="hljs-built_in">end</span>(),cmp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;output.<span class="hljs-built_in">size</span>();i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;output[i].l;j++)&#123;<br>            cout&lt;&lt;output[i].arr[j];<br>            <span class="hljs-keyword">if</span>(j!=output[i].l<span class="hljs-number">-1</span>) cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>        cout&lt;&lt;endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-9-哈夫曼编码"><a href="#1-9-哈夫曼编码" class="headerlink" title="1-9 哈夫曼编码"></a>1-9 哈夫曼编码</h2><p>给定一段文字，如果我们统计出字母出现的频率，是可以根据哈夫曼算法给出一套编码，使得用此编码压缩原文可以得到最短的编码总长。然而哈夫曼编码并不是唯一的。例如对字符串”aaaxuaxz”，容易得到字母 ‘a’、’x’、’u’、’z’ 的出现频率对应为 4、2、1、1。我们可以设计编码 {‘a’=0, ‘x’=10, ‘u’=110, ‘z’=111}，也可以用另一套 {‘a’=1, ‘x’=01, ‘u’=001, ‘z’=000}，还可以用 {‘a’=0, ‘x’=11, ‘u’=100, ‘z’=101}，三套编码都可以把原文压缩到 14 个字节。但是 {‘a’=0, ‘x’=01, ‘u’=011, ‘z’=001} 就不是哈夫曼编码，因为用这套编码压缩得到 00001011001001 后，解码的结果不唯一，”aaaxuaxz” 和 “aazuaxax” 都可以对应解码的结果。本题就请你判断任一套编码是否哈夫曼编码。</p><p>输入格式：</p><p>首先第一行给出一个正整数 <em>N</em>（2≤<em>N</em>≤63），随后第二行给出 <em>N</em> 个不重复的字符及其出现频率，格式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">c<span class="hljs-selector-attr">[1]</span> f<span class="hljs-selector-attr">[1]</span> c<span class="hljs-selector-attr">[2]</span> f<span class="hljs-selector-attr">[2]</span> ... c<span class="hljs-selector-attr">[N]</span> f<span class="hljs-selector-attr">[N]</span><br></code></pre></td></tr></table></figure><p>其中<code>c[i]</code>是集合{‘0’ - ‘9’, ‘a’ - ‘z’, ‘A’ - ‘Z’, ‘_’}中的字符；<code>f[i]</code>是<code>c[i]</code>的出现频率，为不超过 1000 的整数。再下一行给出一个正整数 <em>M</em>（≤1000），随后是 <em>M</em> 套待检的编码。每套编码占 <em>N</em> 行，格式为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">c<span class="hljs-selector-attr">[i]</span> <span class="hljs-selector-tag">code</span><span class="hljs-selector-attr">[i]</span><br></code></pre></td></tr></table></figure><p>其中<code>c[i]</code>是第<code>i</code>个字符；<code>code[i]</code>是不超过63个’0’和’1’的非空字符串。</p><p>输出格式：</p><p>对每套待检编码，如果是正确的哈夫曼编码，就在一行中输出”Yes”，否则输出”No”。</p><p>注意：最优编码并不一定通过哈夫曼算法得到。任何能压缩到最优长度的前缀编码都应被判为正确。</p><p>输入样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs in">7<br>A 1 B 1 C 1 D 3 E 3 F 6 G 6<br>4<br>A 00000<br>B 00001<br>C 0001<br>D 001<br>E 01<br>F 10<br>G 11<br>A 01010<br>B 01011<br>C 0100<br>D 011<br>E 10<br>F 11<br>G 00<br>A 000<br>B 001<br>C 010<br>D 011<br>E 100<br>F 101<br>G 110<br>A 00000<br>B 00001<br>C 0001<br>D 001<br>E 00<br>F 10<br>G 11<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs out">Yes<br>Yes<br>No<br>No<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//注：我tm上学期就见过你了，抄的代码，爬</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> R register</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> L long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LL long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> I inline</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> U unsigned</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">I LL <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    R LL   x;<br>    R <span class="hljs-keyword">bool</span> f;<br>    R <span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">for</span>(f=<span class="hljs-number">0</span>;(c=<span class="hljs-built_in">getchar</span>())&lt;<span class="hljs-string">&#x27;0&#x27;</span>||c&gt;<span class="hljs-string">&#x27;9&#x27;</span>;f=c==<span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span>(x=c-<span class="hljs-string">&#x27;0&#x27;</span>;(c=<span class="hljs-built_in">getchar</span>())&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="hljs-string">&#x27;9&#x27;</span>;x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c-<span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">return</span> f?-x:x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 1000</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>*<span class="hljs-title">l</span>,*<span class="hljs-title">r</span>;</span><br>    <span class="hljs-keyword">int</span>        value;<br>    <span class="hljs-keyword">char</span>       code;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">const</span> node *a,<span class="hljs-keyword">const</span> node *b)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> a-&gt;value&gt;b-&gt;value;<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DataT</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span>  value;<br>    <span class="hljs-keyword">char</span> code;<br>&#125;;<br><br>DataT Data[MAXN];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getValue</span><span class="hljs-params">(<span class="hljs-keyword">char</span> code,<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>        <span class="hljs-keyword">if</span>(Data[i].code==code)<br>            <span class="hljs-keyword">return</span> Data[i].value;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">node*<span class="hljs-title">newNode</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    node*tmp=(node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(node));<br>    tmp-&gt;l=tmp-&gt;r=<span class="hljs-literal">NULL</span>;<br>    tmp-&gt;value=<span class="hljs-number">0</span>;<br>    tmp-&gt;code =<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> tmp;<br>&#125;<br><br><span class="hljs-keyword">bool</span> ERR_FLAG=<span class="hljs-literal">false</span>;<br><br><span class="hljs-function">node*<span class="hljs-title">addTree</span><span class="hljs-params">(node*rt,<span class="hljs-keyword">char</span> c,<span class="hljs-keyword">char</span> s[],<span class="hljs-keyword">int</span> Datan,<span class="hljs-keyword">int</span> sn,<span class="hljs-keyword">int</span> si)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(sn==si)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(rt!=<span class="hljs-literal">NULL</span>)<br>        &#123;<br>            ERR_FLAG=<span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">return</span> rt;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            node*tmp=<span class="hljs-built_in">newNode</span>();<br>            tmp-&gt;value=<span class="hljs-built_in">getValue</span>(c,Datan)*sn;<br>            <span class="hljs-keyword">return</span> tmp;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!rt)rt=<span class="hljs-built_in">newNode</span>();<br>    <span class="hljs-keyword">if</span>(s[si]==<span class="hljs-string">&#x27;0&#x27;</span>)<br>        rt-&gt;l=<span class="hljs-built_in">addTree</span>(rt-&gt;l,c,s,Datan,sn,si+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">else</span><br>        rt-&gt;r=<span class="hljs-built_in">addTree</span>(rt-&gt;r,c,s,Datan,sn,si+<span class="hljs-number">1</span>);<br>    rt-&gt;value=((rt-&gt;l)?(rt-&gt;l-&gt;value):<span class="hljs-number">0</span>)+((rt-&gt;r)?(rt-&gt;r-&gt;value):<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> rt;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ddfs</span><span class="hljs-params">(node *rt,<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(!rt)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(rt-&gt;l||rt-&gt;r)<br>        rt-&gt;value=<span class="hljs-built_in">ddfs</span>(rt-&gt;l,n+<span class="hljs-number">1</span>)+<span class="hljs-built_in">ddfs</span>(rt-&gt;r,n+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        rt-&gt;value*=n;<br>    &#125;<br>    <span class="hljs-keyword">return</span> rt-&gt;value;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getAns</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    priority_queue &lt;node*,vector&lt;node*&gt;,node&gt; q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>    &#123;<br>        node * tmp=<span class="hljs-built_in">newNode</span>();<br>        *tmp=(node)&#123;<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>,Data[i].value,Data[i].code&#125;;<br>        q.<span class="hljs-built_in">push</span>(tmp);<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span>)<br>    &#123;<br>        node* t1=q.<span class="hljs-built_in">top</span>();q.<span class="hljs-built_in">pop</span>();<br>        node* t2=q.<span class="hljs-built_in">top</span>();q.<span class="hljs-built_in">pop</span>();<br>        node * tmp=<span class="hljs-built_in">newNode</span>();<br>        tmp-&gt;l=t1;<br>        tmp-&gt;r=t2;<br>        tmp-&gt;value=t1-&gt;value+t2-&gt;value;<br>        q.<span class="hljs-built_in">push</span>(tmp);<br>    &#125;<br>    <span class="hljs-keyword">return</span>  <span class="hljs-built_in">ddfs</span>(q.<span class="hljs-built_in">top</span>(),<span class="hljs-number">0</span>);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//     freopen(&quot;7-1.in&quot;,&quot;r&quot;,stdin);</span><br><span class="hljs-comment">//  freopen(&quot;7-1.out&quot;,&quot;w&quot;,stdout);</span><br>    <span class="hljs-keyword">int</span>     n=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>    &#123;<br>        <span class="hljs-keyword">char</span> s[<span class="hljs-number">10</span>];<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%d&quot;</span>,s,&amp;Data[i].value);<br>        Data[i].code=s[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-built_in">getAns</span>(n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t=<span class="hljs-built_in">read</span>();t--;)<br>    &#123;<br>        ERR_FLAG=<span class="hljs-literal">false</span>;<br>        node    *rt=<span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i  =<span class="hljs-number">0</span>;i&lt;n;++i)<br>        &#123;<br>            <span class="hljs-keyword">char</span> c[<span class="hljs-number">10</span>],s[MAXN];<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s&quot;</span>,c,s);<br>            <span class="hljs-keyword">if</span>(!ERR_FLAG)<br>                rt=<span class="hljs-built_in">addTree</span>(rt,c[<span class="hljs-number">0</span>],s,n,<span class="hljs-built_in">strlen</span>(s),<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,(!ERR_FLAG&amp;&amp;(!rt||rt-&gt;value==ans))?<span class="hljs-string">&quot;Yes&quot;</span>:<span class="hljs-string">&quot;No&quot;</span>);<br>    &#125;<br>    <br>    <br><span class="hljs-comment">//     fclose(stdin);</span><br><span class="hljs-comment">//     fclose(stdout);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-sort"><a href="#2-sort" class="headerlink" title="2.sort"></a>2.sort</h1><h2 id="2-1-funx-Iterative-Mergesort"><a href="#2-1-funx-Iterative-Mergesort" class="headerlink" title="2-1(funx) Iterative Mergesort"></a>2-1(funx) Iterative Mergesort</h2><p>How would you implement mergesort without using recursion?</p><p>The idea of iterative mergesort is to start from N sorted sublists of length 1, and each time to merge a pair of adjacent sublists until one sorted list is obtained. You are supposed to implement the key function of merging.</p><p>Format of functions:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_pass</span><span class="hljs-params">( ElementType list[], ElementType sorted[], <span class="hljs-keyword">int</span> N, <span class="hljs-keyword">int</span> length )</span></span>;<br></code></pre></td></tr></table></figure><p>The function <code>merge_pass</code> performs one pass of the merge sort that merges adjacent pairs of sublists from <code>list</code> into <code>sorted</code>. <code>N</code> is the number of elements in the <code>list</code> and <code>length</code> is the length of the sublists.</p><p>Sample program of judge:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ElementType int</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 100</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_pass</span><span class="hljs-params">( ElementType list[], ElementType sorted[], <span class="hljs-keyword">int</span> N, <span class="hljs-keyword">int</span> length )</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">( ElementType list[], <span class="hljs-keyword">int</span> N )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;N; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, list[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span>  <span class="hljs-title">merge_sort</span><span class="hljs-params">( ElementType list[],  <span class="hljs-keyword">int</span> N )</span></span><br><span class="hljs-function"></span>&#123;<br>    ElementType extra[MAXN];  <span class="hljs-comment">/* the extra space required */</span><br>    <span class="hljs-keyword">int</span>  length = <span class="hljs-number">1</span>;  <span class="hljs-comment">/* current length of sublist being merged */</span><br>    <span class="hljs-keyword">while</span>( length &lt; N ) &#123; <br>        <span class="hljs-built_in">merge_pass</span>( list, extra, N, length ); <span class="hljs-comment">/* merge list into extra */</span><br>        <span class="hljs-built_in">output</span>( extra, N );<br>        length *= <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">merge_pass</span>( extra, list, N, length ); <span class="hljs-comment">/* merge extra back to list */</span><br>        <span class="hljs-built_in">output</span>( list, N );<br>        length *= <span class="hljs-number">2</span>;<br>    &#125;<br>&#125; <br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> N, i;<br>    ElementType A[MAXN];<br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;N);<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;N; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;A[i]);<br>    <span class="hljs-built_in">merge_sort</span>(A, N);<br>    <span class="hljs-built_in">output</span>(A, N);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* Your function will be put here */</span><br></code></pre></td></tr></table></figure><p>Sample Input:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs in">10<br>8 7 9 2 3 5 1 6 4 0<br></code></pre></td></tr></table></figure><p>Sample Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs out">7 8 2 9 3 5 1 6 0 4 <br>2 7 8 9 1 3 5 6 0 4 <br>1 2 3 5 6 7 8 9 0 4 <br>0 1 2 3 4 5 6 7 8 9 <br>0 1 2 3 4 5 6 7 8 9 <br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_pass</span><span class="hljs-params">( ElementType <span class="hljs-built_in">list</span>[], ElementType sorted[], <span class="hljs-keyword">int</span> N, <span class="hljs-keyword">int</span> length )</span></span>&#123;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;N&amp;&amp;i+length&lt;N;i+=length*<span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">int</span> p=i,q=i+length;<br>        <span class="hljs-keyword">while</span>(p&lt;i+length&amp;&amp;q&lt;i+length*<span class="hljs-number">2</span>&amp;&amp;q&lt;N)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>[p]&lt;<span class="hljs-built_in">list</span>[q]) sorted[cnt++]=<span class="hljs-built_in">list</span>[p++];<br>            <span class="hljs-keyword">else</span> sorted[cnt++]=<span class="hljs-built_in">list</span>[q++];<br>        &#125;<br>        <span class="hljs-keyword">while</span>(p&lt;i+length) sorted[cnt++]=<span class="hljs-built_in">list</span>[p++];<br>        <span class="hljs-keyword">while</span>(q&lt;i+length*<span class="hljs-number">2</span>&amp;&amp;q&lt;N) sorted[cnt++]=<span class="hljs-built_in">list</span>[q++];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(i+length&gt;=N)&#123;<br>        <span class="hljs-keyword">while</span>(i&lt;N) sorted[cnt++]=<span class="hljs-built_in">list</span>[i++];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-funx-The-Kth-Largest-in-BST"><a href="#2-2-funx-The-Kth-Largest-in-BST" class="headerlink" title="2-2(funx)  The Kth Largest in BST"></a>2-2(funx)  The Kth Largest in BST</h2><p>Given a binary search tree, you are supposed to find the node that contains the <em>K</em>-th largest key.</p><p>Format of function:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">BinTree <span class="hljs-title">KthLargest</span> <span class="hljs-params">( BinTree T, <span class="hljs-keyword">int</span> K )</span></span>;<br></code></pre></td></tr></table></figure><p>where <code>BinTree</code> is defined as the following:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span> *<span class="hljs-title">BinTree</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span>&#123;</span><br>    <span class="hljs-keyword">int</span> Key;<br>    BinTree Left;<br>    BinTree Right;<br>&#125;;<br></code></pre></td></tr></table></figure><p>The function <code>KthLargest</code> is supposed to return the pointer that points to the node that contains the <code>K</code>-th largest key in the binary search tree <code>T</code>.</p><p>Here <code>T</code> is not empty and all its keys are distinct positive integers. <code>K</code> is positive and is never more than the total number of nodes in the tree.</p><p>Sample program of judge:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span> *<span class="hljs-title">BinTree</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span>&#123;</span><br>    <span class="hljs-keyword">int</span> Key;<br>    BinTree Left;<br>    BinTree Right;<br>&#125;;<br><br><span class="hljs-function">BinTree <span class="hljs-title">BuildTree</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">/* details omitted */</span><br><span class="hljs-function">BinTree <span class="hljs-title">KthLargest</span> <span class="hljs-params">( BinTree T, <span class="hljs-keyword">int</span> K )</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    BinTree T, P;<br>    <span class="hljs-keyword">int</span> K;<br><br>    T = <span class="hljs-built_in">BuildTree</span>();<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;K);<br>    P = <span class="hljs-built_in">KthLargest</span>(T, K);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, P-&gt;Key);<br>    <span class="hljs-keyword">if</span> (P-&gt;Left) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, P-&gt;Left-&gt;Key);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NULL\n&quot;</span>);<br>    <span class="hljs-keyword">if</span> (P-&gt;Right) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, P-&gt;Right-&gt;Key);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NULL\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/* Your function will be put here */</span><br></code></pre></td></tr></table></figure><p>Sample Input: (for the following tree)</p><img src="/2022/05/13/DataStructuresTest/40d5c4bb-3046-48f3-84ab-0ec0c651edd2.jpg" class="" title="yes.jpg"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><p>Sample Output:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">5</span><br><span class="hljs-literal">NULL</span><br><span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//本质二叉树，RDL</span><br><span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br><span class="hljs-function">BinTree <span class="hljs-title">KthLargest</span> <span class="hljs-params">( BinTree T, <span class="hljs-keyword">int</span> K )</span></span>&#123;<br>    BinTree P,Q;<br>    <span class="hljs-keyword">if</span>(T)&#123;<br>        P=KthLargest(T-&gt;Right,K);<br>        <span class="hljs-keyword">if</span>(P) <span class="hljs-keyword">return</span> P;<span class="hljs-comment">//? 在递归层中返回了T&#x27;，要传回</span><br>        cnt++;<br>        <span class="hljs-keyword">if</span>(cnt==K)&#123;<br>            <span class="hljs-keyword">return</span> T;<br>        &#125;<br>        Q=KthLargest(T-&gt;Left,K);<br>        <span class="hljs-keyword">if</span>(Q) <span class="hljs-keyword">return</span> Q;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-funx-Rank-a-Linked-List-II"><a href="#2-3-funx-Rank-a-Linked-List-II" class="headerlink" title="2-3(funx) Rank a Linked List (II)"></a>2-3(funx) Rank a Linked List (II)</h2><p>A linked list of <em>n</em> nodes is stored in an array of <em>n</em> elements. Each element contains an integer <code>data</code> and a <code>next</code> pointer which is the array index of the next element. It is guaranteed that the given list is linear – that is, every node, except the first one, has a unique previous node; and every node, except the last one, has a unique next node.</p><p>You are supposed to write a function to number these nodes in reverse order, starting from the last node, by numbers from 1 to <em>n</em>. These numbers are called the <code>rank</code>s of the nodes.</p><p>Format of function:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Ranking</span><span class="hljs-params">( List A[], <span class="hljs-keyword">int</span> n )</span></span>;<br></code></pre></td></tr></table></figure><p>where <code>List</code> is defined as the following:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> data;<br>    <span class="hljs-keyword">int</span> next;<br>    <span class="hljs-keyword">int</span> rank;<br>&#125; List;<br></code></pre></td></tr></table></figure><p>Sample program of judge:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NIL -1 <span class="hljs-comment">//represents the NULL pointer</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> data;<br>    <span class="hljs-keyword">int</span> next;<br>    <span class="hljs-keyword">int</span> rank;<br>&#125; List;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Ranking</span><span class="hljs-params">( List A[], <span class="hljs-keyword">int</span> n )</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n, i;<br>    List *A;<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    A = (List *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(List)*n);<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;A[i].next);<br>    <span class="hljs-built_in">Ranking</span>(A, n);<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;n; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, A[i].rank);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* Your function will be put here */</span><br></code></pre></td></tr></table></figure><p>Sample Input:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs in">5<br>3 -1 0 1 2<br></code></pre></td></tr></table></figure><p>Sample Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">3 1 4 2 5 <br></code></pre></td></tr></table></figure><p>Hint:</p><p>The given linked list is stored as 4-&gt;2-&gt;0-&gt;3-&gt;1-&gt;NULL. Hence the 0th element is ranked 3 since it is the 3rd node counted from the last one in the list; the 1st element is ranked 1 since it is the last node in the list; and so on so forth.</p><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>100 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> vis[<span class="hljs-number">100007</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Ranking</span><span class="hljs-params">( List A[], <span class="hljs-keyword">int</span> n )</span></span>&#123;<br>    <span class="hljs-keyword">int</span> head;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(A[i].rank!=<span class="hljs-number">-1</span>)<br>            vis[A[i].next]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!vis[i]) &#123;<br>            head=i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> cnt=n;<br>    A[head].rank=cnt--;<br>    <span class="hljs-keyword">int</span> temp=A[head].next;<br>    <span class="hljs-keyword">while</span>(temp!=<span class="hljs-number">-1</span>)&#123;<br>        A[temp].rank=cnt--;<br>        temp=A[temp].next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-1-两个有序序列的中位数"><a href="#2-1-两个有序序列的中位数" class="headerlink" title="2-1 两个有序序列的中位数"></a>2-1 两个有序序列的中位数</h2><p>已知有两个等长的非降序序列S1, S2, 设计函数求S1与S2并集的中位数。有序序列<em>A</em>0,<em>A</em>1,⋯,<em>A**N</em>−1的中位数指<em>A</em>(<em>N</em>−1)/2的值,即第⌊(<em>N</em>+1)/2⌋个数（<em>A</em>0为第1个数）。</p><p>输入格式:</p><p>输入分三行。第一行给出序列的公共长度N（0&lt;N≤100000），随后每行输入一个序列的信息，即N个非降序排列的整数。数字用空格间隔。</p><p>输出格式:</p><p>在一行中输出两个输入序列的并集序列的中位数。</p><p>输入样例1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs in">5<br>1 3 5 7 9<br>2 3 4 5 6<br></code></pre></td></tr></table></figure><p>输出样例1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">4<br></code></pre></td></tr></table></figure><p>输入样例2:</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">6<br>-100 -10<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1<br>-50<span class="hljs-number"> 0 </span>2<span class="hljs-number"> 3 </span>4 5<br></code></pre></td></tr></table></figure><p>输出样例2:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>200 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">2e5</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n*<span class="hljs-number">2</span>;i++)&#123;<br>        cin&gt;&gt;a[i];<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(a+<span class="hljs-number">1</span>,a+n*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>    cout&lt;&lt;a[(n*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>]&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-词频统计"><a href="#2-2-词频统计" class="headerlink" title="2-2 词频统计"></a>2-2 词频统计</h2><p>请编写程序，对一段英文文本，统计其中所有不同单词的个数，以及词频最大的前10%的单词。</p><p>所谓“单词”，是指由不超过80个单词字符组成的连续字符串，但长度超过15的单词将只截取保留前15个单词字符。而合法的“单词字符”为大小写字母、数字和下划线，其它字符均认为是单词分隔符。</p><p>输入格式:</p><p>输入给出一段非空文本，最后以符号<code>#</code>结尾。输入保证存在至少10个不同的单词。</p><p>输出格式:</p><p>在第一行中输出文本中所有不同单词的个数。注意“单词”不区分英文大小写，例如“PAT”和“pat”被认为是同一个单词。</p><p>随后按照词频递减的顺序，按照<code>词频:单词</code>的格式输出词频最大的前10%的单词。若有并列，则按递增字典序输出。</p><p>输入样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs in">This is a test.<br><br>The word &quot;this&quot; is the word with the highest frequency.<br><br>Longlonglonglongword should be cut off, so is considered as the same as longlonglonglonee.  But this_8 is different than this, and this, and this...#<br>this line should be ignored.<br></code></pre></td></tr></table></figure><p>输出样例：</p><p>（注意：虽然单词<code>the</code>也出现了4次，但因为我们只要输出前10%（即23个单词中的前2个）单词，而按照字母序，<code>the</code>排第3位，所以不输出。）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs out">23<br>5:this<br>4:is<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>2000 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">100007</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mp</span>&#123;</span><br>    string s;<br>    <span class="hljs-keyword">int</span> n;<br>&#125;m[maxn];<br><span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;<span class="hljs-comment">//不同单词数</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(mp &amp;a,mp &amp;b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a.n==b.n) <span class="hljs-keyword">return</span> a.s&lt;b.s;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> a.n&gt;b.n;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(string &amp;s)</span></span>&#123;<br>    <span class="hljs-built_in">transform</span>(s.<span class="hljs-built_in">begin</span>(),s.<span class="hljs-built_in">end</span>(),s.<span class="hljs-built_in">begin</span>(),::tolower);<span class="hljs-comment">//全转小写</span><br>    <span class="hljs-keyword">bool</span> fl=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;num;i++)&#123;<br>        <span class="hljs-keyword">if</span>(m[i].s==s)&#123;<span class="hljs-comment">//也可以写成vector</span><br>            fl=<span class="hljs-literal">true</span>;<br>            m[i].n++;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!fl)&#123;<br>        m[num].s=s;<br>        m[num++].n=<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//    map&lt;string,int&gt;mp;</span><br>    <span class="hljs-keyword">char</span> c;<br>    string s=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<span class="hljs-comment">//单词长度</span><br>    <span class="hljs-keyword">bool</span> inword;<br>    inword=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">while</span>((c=<span class="hljs-built_in">getchar</span>())!=<span class="hljs-string">&#x27;#&#x27;</span>)&#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;#&#x27;</span>) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(!inword&amp;&amp;(<span class="hljs-built_in">isalpha</span>(c)|| <span class="hljs-built_in">isdigit</span>(c)||c==<span class="hljs-string">&#x27;_&#x27;</span>))&#123;<br>            inword=<span class="hljs-literal">true</span>;<br>            len++;<br>            <span class="hljs-keyword">if</span>(len&lt;=<span class="hljs-number">15</span>)&#123;<br>                s+=c;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(inword&amp;&amp;(<span class="hljs-built_in">isalpha</span>(c)|| <span class="hljs-built_in">isdigit</span>(c)||c==<span class="hljs-string">&#x27;_&#x27;</span>))&#123;<br>            len++;<br>            <span class="hljs-keyword">if</span>(len&lt;=<span class="hljs-number">15</span>) s+=c;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(inword&amp;&amp;!(<span class="hljs-built_in">isalpha</span>(c)|| <span class="hljs-built_in">isdigit</span>(c)||c==<span class="hljs-string">&#x27;_&#x27;</span>))&#123;<br>            <span class="hljs-built_in">find</span>(s);<br>            inword=<span class="hljs-literal">false</span>;<br>            len=<span class="hljs-number">0</span>;<br>            s=<span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;num&lt;&lt;endl;<br>    <span class="hljs-built_in">sort</span>(m,m+num,cmp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;(num/<span class="hljs-number">10</span>);i++)&#123;<br>        cout&lt;&lt;m[i].n&lt;&lt;<span class="hljs-string">&#x27;:&#x27;</span>&lt;&lt;m[i].s&lt;&lt;endl;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-符号配对"><a href="#2-3-符号配对" class="headerlink" title="2-3 符号配对"></a>2-3 符号配对</h2><p>请编写程序检查C语言源程序中下列符号是否配对：<code>/*</code>与<code>*/</code>、<code>(</code>与<code>)</code>、<code>[</code>与<code>]</code>、<code>&#123;</code>与<code>&#125;</code>。</p><p>输入格式:</p><p>输入为一个C语言源程序。当读到某一行中只有一个句点<code>.</code>和一个回车的时候，标志着输入结束。程序中需要检查配对的符号不超过100个。</p><p>输出格式:</p><p>首先，如果所有符号配对正确，则在第一行中输出<code>YES</code>，否则输出<code>NO</code>。然后在第二行中指出第一个不配对的符号：如果缺少左符号，则输出<code>?-右符号</code>；如果缺少右符号，则输出<code>左符号-?</code>。</p><p>输入样例1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs in">void test()<br>&#123;<br>    int i, A[10];<br>    for (i=0; i&lt;10; i++) &#123; /*/<br>        A[i] = i;<br>&#125;<br>.<br></code></pre></td></tr></table></figure><p>输出样例1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs out">NO<br>/*-?<br></code></pre></td></tr></table></figure><p>输入样例2：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, A[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++) <span class="hljs-comment">/**/</span><br>        A[i] = i;<br>&#125;]<br>.<br></code></pre></td></tr></table></figure><p>输出样例2：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby">NO<br><span class="hljs-string">?-</span>]<br></code></pre></td></tr></table></figure><p>输入样例3：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i<br>    <span class="hljs-keyword">double</span> A[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++) <span class="hljs-comment">/**/</span><br>        A[i] = <span class="hljs-number">0.1</span>*i;<br>&#125;<br>.<br></code></pre></td></tr></table></figure><p>输出样例3：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">YES</span><br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//抄的，自己写的在遇到/**/时候寄了</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>stack&lt;<span class="hljs-keyword">char</span>&gt; st;<br><span class="hljs-keyword">char</span> tmp[] = &#123;<span class="hljs-string">&#x27;)&#x27;</span>,<span class="hljs-string">&#x27;&#125;&#x27;</span>,<span class="hljs-string">&#x27;]&#x27;</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">(<span class="hljs-keyword">char</span> ch)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;&lt;&#x27;</span>)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;NO\n/*-?&quot;</span>&lt;&lt;endl;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;NO\n&quot;</span>&lt;&lt;ch&lt;&lt;<span class="hljs-string">&quot;-?&quot;</span>&lt;&lt;endl;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">match</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *c,<span class="hljs-keyword">int</span> len)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(++i&lt;len)&#123;<br>        <span class="hljs-keyword">if</span>(c[i]==<span class="hljs-string">&#x27;/&#x27;</span>)&#123;<br>            <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">if</span>(c[i + <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;*&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(c[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;*&#x27;</span>)&#123;<br>                st.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;&lt;&#x27;</span>);<br>                ++i;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">top</span>() == <span class="hljs-string">&#x27;&lt;&#x27;</span> &amp;&amp; c[i + <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;*&#x27;</span>)&#123;<br>                cout&lt;&lt;<span class="hljs-string">&quot;NO\n/*-?&quot;</span>&lt;&lt;endl;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c[i]==<span class="hljs-string">&#x27;*&#x27;</span>)&#123;<br>            <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>())&#123;<br>                <span class="hljs-keyword">if</span>(c[i+<span class="hljs-number">1</span>]!=<span class="hljs-string">&#x27;/&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    cout&lt;&lt;<span class="hljs-string">&quot;NO\n?-*/&quot;</span>&lt;&lt;endl;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">top</span>() == <span class="hljs-string">&#x27;&lt;&#x27;</span> &amp;&amp; c[i + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>                st.<span class="hljs-built_in">pop</span>();<br>                ++i;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">top</span>() != <span class="hljs-string">&#x27;&lt;&#x27;</span> &amp;&amp; c[i + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;/&#x27;</span>)&#123;<br>                <span class="hljs-built_in">output</span>(st.<span class="hljs-built_in">top</span>());<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c[i]==<span class="hljs-string">&#x27;(&#x27;</span>||c[i]==<span class="hljs-string">&#x27;&#123;&#x27;</span>||c[i]==<span class="hljs-string">&#x27;[&#x27;</span>)&#123;<br>            st.<span class="hljs-built_in">push</span>(c[i]);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c[i]==<span class="hljs-string">&#x27;)&#x27;</span>||c[i]==<span class="hljs-string">&#x27;&#125;&#x27;</span>||c[i]==<span class="hljs-string">&#x27;]&#x27;</span> )&#123;<br>            <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>())&#123;<br>                <span class="hljs-keyword">if</span>(c[i]==<span class="hljs-string">&#x27;&#125;&#x27;</span>) j=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c[i]==<span class="hljs-string">&#x27;]&#x27;</span>) j=<span class="hljs-number">2</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span>(c[i]==<span class="hljs-string">&#x27;)&#x27;</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">top</span>() == <span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br>                        st.<span class="hljs-built_in">pop</span>();<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-built_in">output</span>(st.<span class="hljs-built_in">top</span>());<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c[i]==<span class="hljs-string">&#x27;&#125;&#x27;</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">top</span>() == <span class="hljs-string">&#x27;&#123;&#x27;</span>)&#123;<br>                        st.<span class="hljs-built_in">pop</span>();<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-built_in">output</span>(st.<span class="hljs-built_in">top</span>());<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">top</span>() == <span class="hljs-string">&#x27;[&#x27;</span>)&#123;<br>                        st.<span class="hljs-built_in">pop</span>();<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-built_in">output</span>(st.<span class="hljs-built_in">top</span>());<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            cout&lt;&lt;<span class="hljs-string">&quot;NO\n?-&quot;</span>&lt;&lt;tmp[j]&lt;&lt;endl;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string str;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;str)&#123;<br>        <span class="hljs-keyword">char</span> *c = (<span class="hljs-keyword">char</span>*)str.<span class="hljs-built_in">data</span>();<br>        <span class="hljs-keyword">if</span>(c[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;.&#x27;</span>&amp;&amp;c[<span class="hljs-number">1</span>]==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">match</span>(c,str.<span class="hljs-built_in">length</span>()))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>())&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;endl;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">top</span>() == <span class="hljs-string">&#x27;&lt;&#x27;</span>) cout &lt;&lt; <span class="hljs-string">&quot;NO\n/*-?&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;NO\n&quot;</span> &lt;&lt; st.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">&quot;-?&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-4-列车调度"><a href="#2-4-列车调度" class="headerlink" title="2-4 列车调度"></a>2-4 列车调度</h2><p>火车站的列车调度铁轨的结构如下图所示。</p><img src="/2022/05/13/DataStructuresTest/188.jpg" class="" title="img"><p>两端分别是一条入口（Entrance）轨道和一条出口（Exit）轨道，它们之间有<code>N</code>条平行的轨道。每趟列车从入口可以选择任意一条轨道进入，最后从出口离开。在图中有9趟列车，在入口处按照{8，4，2，5，3，9，1，6，7}的顺序排队等待进入。如果要求它们必须按序号递减的顺序从出口离开，则至少需要多少条平行铁轨用于调度？</p><p>输入格式：</p><p>输入第一行给出一个整数<code>N</code> (2 ≤ <code>N</code> ≤105)，下一行给出从1到<code>N</code>的整数序号的一个重排列。数字间以空格分隔。</p><p>输出格式：</p><p>在一行中输出可以将输入的列车按序号递减的顺序调离所需要的最少的铁轨条数。</p><p>输入样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs in">9<br>8 4 2 5 3 9 1 6 7<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">4<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>300 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">2e5</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> a[maxn];<br>set&lt;<span class="hljs-keyword">int</span>&gt;st;<br><span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;a[i];<br>    &#125;<br>    st.<span class="hljs-built_in">insert</span>(a[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">int</span> temp=a[i];<br>        <span class="hljs-keyword">auto</span> iter= st.<span class="hljs-built_in">lower_bound</span>(temp);<br>        <span class="hljs-keyword">if</span>(iter==st.<span class="hljs-built_in">end</span>())&#123;<span class="hljs-comment">//全都比temp小</span><br>            st.<span class="hljs-built_in">insert</span>(temp);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            st.<span class="hljs-built_in">erase</span>(iter);<br>            st.<span class="hljs-built_in">insert</span>(temp);<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;st.<span class="hljs-built_in">size</span>()&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="upper-bound-amp-lower-bound"><a href="#upper-bound-amp-lower-bound" class="headerlink" title="upper_bound&amp;lower_bound"></a>upper_bound&amp;lower_bound</h2><p>lower_bound( begin,end,num)：从数组的begin位置到end-1位置二分查找第一个大于或等于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。</p><p>upper_bound( begin,end,num)：从数组的begin位置到end-1位置二分查找第一个大于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。</p><p>在从大到小的排序数组中，重载lower_bound()和upper_bound()</p><p>lower_bound( begin,end,num,greater<type>() ):从数组的begin位置到end-1位置二分查找第一个小于或等于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。</p><p>upper_bound( begin,end,num,greater<type>() ):从数组的begin位置到end-1位置二分查找第一个小于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。</p><p>greater<int>这样写就可以</p><h1 id="3-graph"><a href="#3-graph" class="headerlink" title="3.graph"></a>3.graph</h1><h2 id="3-1-funx-邻接表存储图的广度优先遍历"><a href="#3-1-funx-邻接表存储图的广度优先遍历" class="headerlink" title="3-1(funx) 邻接表存储图的广度优先遍历"></a>3-1(funx) 邻接表存储图的广度优先遍历</h2><p>试实现邻接表存储图的广度优先遍历。</p><p>函数接口定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFS</span> <span class="hljs-params">( LGraph Graph, Vertex S, <span class="hljs-keyword">void</span> (*Visit)(Vertex) )</span></span>;<br></code></pre></td></tr></table></figure><p>其中<code>LGraph</code>是邻接表存储的图，定义如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/* 邻接点的定义 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AdjVNode</span> *<span class="hljs-title">PtrToAdjVNode</span>;</span> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AdjVNode</span>&#123;</span><br>    Vertex AdjV;        <span class="hljs-comment">/* 邻接点下标 */</span><br>    PtrToAdjVNode Next; <span class="hljs-comment">/* 指向下一个邻接点的指针 */</span><br>&#125;;<br><br><span class="hljs-comment">/* 顶点表头结点的定义 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Vnode</span>&#123;</span><br>    PtrToAdjVNode FirstEdge; <span class="hljs-comment">/* 边表头指针 */</span><br>&#125; AdjList[MaxVertexNum];     <span class="hljs-comment">/* AdjList是邻接表类型 */</span><br><br><span class="hljs-comment">/* 图结点的定义 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span> *<span class="hljs-title">PtrToGNode</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span>&#123;</span>  <br>    <span class="hljs-keyword">int</span> Nv;     <span class="hljs-comment">/* 顶点数 */</span><br>    <span class="hljs-keyword">int</span> Ne;     <span class="hljs-comment">/* 边数   */</span><br>    AdjList G;  <span class="hljs-comment">/* 邻接表 */</span><br>&#125;;<br><span class="hljs-keyword">typedef</span> PtrToGNode LGraph; <span class="hljs-comment">/* 以邻接表方式存储的图类型 */</span><br></code></pre></td></tr></table></figure><p>函数<code>BFS</code>应从第<code>S</code>个顶点出发对邻接表存储的图<code>Graph</code>进行广度优先搜索，遍历时用裁判定义的函数<code>Visit</code>访问每个顶点。当访问邻接点时，要求按邻接表顺序访问。题目保证<code>S</code>是图中的合法顶点。</p><p>裁判测试程序样例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>&#125; <span class="hljs-keyword">bool</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxVertexNum 10   <span class="hljs-comment">/* 最大顶点数设为10 */</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Vertex;       <span class="hljs-comment">/* 用顶点下标表示顶点,为整型 */</span><br><br><span class="hljs-comment">/* 邻接点的定义 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AdjVNode</span> *<span class="hljs-title">PtrToAdjVNode</span>;</span> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AdjVNode</span>&#123;</span><br>    Vertex AdjV;        <span class="hljs-comment">/* 邻接点下标 */</span><br>    PtrToAdjVNode Next; <span class="hljs-comment">/* 指向下一个邻接点的指针 */</span><br>&#125;;<br><br><span class="hljs-comment">/* 顶点表头结点的定义 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Vnode</span>&#123;</span><br>    PtrToAdjVNode FirstEdge; <span class="hljs-comment">/* 边表头指针 */</span><br>&#125; AdjList[MaxVertexNum];     <span class="hljs-comment">/* AdjList是邻接表类型 */</span><br><br><span class="hljs-comment">/* 图结点的定义 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span> *<span class="hljs-title">PtrToGNode</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span>&#123;</span>  <br>    <span class="hljs-keyword">int</span> Nv;     <span class="hljs-comment">/* 顶点数 */</span><br>    <span class="hljs-keyword">int</span> Ne;     <span class="hljs-comment">/* 边数   */</span><br>    AdjList G;  <span class="hljs-comment">/* 邻接表 */</span><br>&#125;;<br><span class="hljs-keyword">typedef</span> PtrToGNode LGraph; <span class="hljs-comment">/* 以邻接表方式存储的图类型 */</span><br><br><span class="hljs-keyword">bool</span> Visited[MaxVertexNum]; <span class="hljs-comment">/* 顶点的访问标记 */</span><br><br><span class="hljs-function">LGraph <span class="hljs-title">CreateGraph</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">/* 创建图并且将Visited初始化为false；裁判实现，细节不表 */</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Visit</span><span class="hljs-params">( Vertex V )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>, V);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFS</span> <span class="hljs-params">( LGraph Graph, Vertex S, <span class="hljs-keyword">void</span> (*Visit)(Vertex) )</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    LGraph G;<br>    Vertex S;<br><br>    G = <span class="hljs-built_in">CreateGraph</span>();<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;S);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;BFS from %d:&quot;</span>, S);<br>    <span class="hljs-built_in">BFS</span>(G, S, Visit);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 你的代码将被嵌在这里 */</span><br></code></pre></td></tr></table></figure><p>输入样例：给定图如下</p><img src="/2022/05/13/DataStructuresTest/102.jpg" class="" title="img"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">BFS from 2: 2 0 3 5 4 1 6<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c">Vertex que[<span class="hljs-number">1007</span>];<span class="hljs-comment">//搓一个最tm简洁的队列</span><br><span class="hljs-keyword">int</span> fro=<span class="hljs-number">0</span>,rear=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> vis[MaxVertexNum];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(Vertex a)</span></span>&#123;<br>    que[rear++]=a;<br>&#125;<br><span class="hljs-function">Vertex <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> que[fro++];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFS</span> <span class="hljs-params">( LGraph Graph, Vertex S, <span class="hljs-keyword">void</span> (*Visit)(Vertex) )</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;MaxVertexNum;i++)&#123;<br>        vis[i]=<span class="hljs-number">0</span>;<br>    &#125;<br>    push(S);<br>    vis[S]=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">while</span>(fro!=rear)&#123;<br>        Vertex e;<br>        e=pop();<br>        Visit(e);<br>        <span class="hljs-keyword">for</span>(PtrToAdjVNode j=Graph-&gt;G[e].FirstEdge;j;j=j-&gt;Next)&#123;<br>            <span class="hljs-keyword">if</span>(!vis[j-&gt;AdjV])&#123;<br>                push(j-&gt;AdjV);<br>                vis[j-&gt;AdjV]=<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-2-funx-邻接矩阵表示及其遍历"><a href="#3-2-funx-邻接矩阵表示及其遍历" class="headerlink" title="3-2(funx) 邻接矩阵表示及其遍历"></a>3-2(funx) 邻接矩阵表示及其遍历</h2><p>本题要求编写函数创建无向图 G 的邻接矩阵存储表示，并求连通分量个数。例如，下图所示一个无向图 G 及其对应的邻接矩阵：</p><img src="/2022/05/13/DataStructuresTest/acef5783-fec5-44a1-903e-f042acba3d58.png" class="" title="gragh_smaller.png"><p>函数接口定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateMGraph</span><span class="hljs-params">(MGraph &amp;G)</span></span>; <span class="hljs-comment">/* 读入顶点数、边数，以及各条边，创建图 G 的邻接矩阵存储表示 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">countCC</span> <span class="hljs-params">(MGraph G)</span></span>;   <span class="hljs-comment">/* 已知无向图 G 采用邻接矩阵表示，函数值返回其连通分量个数 */</span><br></code></pre></td></tr></table></figure><p>已知无向图 G 采用邻接矩阵存储，相关类型定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxVertexNum 100     <span class="hljs-comment">/* 定义最大顶点数 */</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> VertexType;      <span class="hljs-comment">/* 顶点类型，以整型值编号表示（从 1 开始编号） */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-keyword">int</span> arcs[MaxVertexNum+<span class="hljs-number">1</span>][MaxVertexNum+<span class="hljs-number">1</span>]; <span class="hljs-comment">/* 邻接矩阵, 若顶点 i 与 顶点 j 有边相连则 arcs[i][j] 及 arcs[j][i] 均为 1 表示，无边则均为 0 */</span><br>    <span class="hljs-keyword">int</span> vexnum;  <span class="hljs-comment">/* 顶点数 */</span><br>    <span class="hljs-keyword">int</span> arcnum;  <span class="hljs-comment">/* 边数 */</span><br>&#125;MGraph;<br></code></pre></td></tr></table></figure><p>裁判测试程序样例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxVertexNum 100     <span class="hljs-comment">/* 定义最大顶点数 */</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> VertexType;      <span class="hljs-comment">/* 顶点类型，以整型值编号表示（从 1 开始编号） */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-keyword">int</span> arcs[MaxVertexNum + <span class="hljs-number">1</span>][MaxVertexNum + <span class="hljs-number">1</span>]; <span class="hljs-comment">/* 无向图的邻接矩阵, 若顶点 i 与 顶点 j 有边相连则 arcs[i][j] 及 arcs[j][i] 均为 1 表示，无边则均为 0 */</span><br>    <span class="hljs-keyword">int</span> vexnum;  <span class="hljs-comment">/* 顶点数 */</span><br>    <span class="hljs-keyword">int</span> arcnum;  <span class="hljs-comment">/* 边数 */</span><br>&#125;MGraph;<br><br><span class="hljs-keyword">int</span> visited[MaxVertexNum + <span class="hljs-number">1</span>];  <span class="hljs-comment">// 顶点是否被访问标志数组</span><br><br> <span class="hljs-comment">/* 邻接矩阵编号为 i 的顶点所关联的边存放在行 i 及列 i 中 */</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateMGraph</span><span class="hljs-params">(MGraph &amp;G)</span></span>; <span class="hljs-comment">/* 读入顶点数、边数，以及各条边，创建图 G 的邻接矩阵存储表示 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">countCC</span><span class="hljs-params">(MGraph G)</span></span>; <span class="hljs-comment">/* 已知无向图 G 采用邻接矩阵表示，函数值返回其连通分量个数 */</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    MGraph G;<br><br>    <span class="hljs-built_in">CreateMGraph</span>( G );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">countCC</span>( G ));<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 请在这里填写答案 */</span><br></code></pre></td></tr></table></figure><p>输入的第一行为两个整数，分别为图 G 的顶点数 vexnum（0 &lt;= vexnum &lt;= MaxVertexNum） 和边数 arcnum（&gt;= 0），接下来的 arcnum 行是每一条边信息，以关联的两个顶点 i 和 j 给出。<br>输出为图 G 的连通分量个数。题目保证输入数据正确，无冗余。</p><p>输入样例1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs in">4 2<br>1 2<br>4 3<br></code></pre></td></tr></table></figure><p>输出样例1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">2<br></code></pre></td></tr></table></figure><p>输入样例2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs in">4 6<br>1 2<br>1 3<br>1 4<br>2 3<br>2 4<br>3 4<br></code></pre></td></tr></table></figure><p>输出样例2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">1<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> que[<span class="hljs-number">1007</span>];<br><span class="hljs-keyword">int</span> fro=<span class="hljs-number">0</span>,rear=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>&#123;<br>    que[rear++]=a;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> que[fro++];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(MGraph&amp;G,<span class="hljs-keyword">int</span> a)</span></span>&#123;<br>    <span class="hljs-built_in">push</span>(a);<br>    visited[a]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(fro!=rear)&#123;<br>        <span class="hljs-keyword">int</span> b=<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=G.vexnum;i++)&#123;<br>            <span class="hljs-keyword">int</span> x=G.arcs[b][i];<br>            <span class="hljs-keyword">if</span>(x==<span class="hljs-number">1</span>&amp;&amp;!visited[i])&#123;<br>                visited[i]=<span class="hljs-number">1</span>;<br>                <span class="hljs-built_in">push</span>(i);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateMGraph</span><span class="hljs-params">(MGraph &amp;G)</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;G.vexnum,&amp;G.arcnum);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;G.arcnum;i++)&#123;<br>        <span class="hljs-keyword">int</span> x,y;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);<br>        G.arcs[x][y]=<span class="hljs-number">1</span>;<br>        G.arcs[y][x]=<span class="hljs-number">1</span>;<br>    &#125;<br>&#125; <span class="hljs-comment">/* 读入顶点数、边数，以及各条边，创建图 G 的邻接矩阵存储表示 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">countCC</span><span class="hljs-params">(MGraph G)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;MaxVertexNum+<span class="hljs-number">1</span>;i++)&#123;<br>        visited[i]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=G.vexnum;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!visited[i])&#123;<br>            cnt++;<br>            <span class="hljs-built_in">bfs</span>(G,i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125; <span class="hljs-comment">/* 已知无向图 G 采用邻接矩阵表示，函数值返回其连通分量个数 */</span><br><br></code></pre></td></tr></table></figure><h2 id="3-3-funx-Is-Topological-Order"><a href="#3-3-funx-Is-Topological-Order" class="headerlink" title="3-3(funx) Is Topological Order"></a>3-3(funx) Is Topological Order</h2><p>Write a program to test if a give sequence <code>Seq</code> is a topological order of a given graph <code>Graph</code>.</p><p>Format of functions:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsTopSeq</span><span class="hljs-params">( LGraph Graph, Vertex Seq[] )</span></span>;<br></code></pre></td></tr></table></figure><p>where <code>LGraph</code> is defined as the following:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AdjVNode</span> *<span class="hljs-title">PtrToAdjVNode</span>;</span> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AdjVNode</span>&#123;</span><br>    Vertex AdjV;<br>    PtrToAdjVNode Next;<br>&#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Vnode</span>&#123;</span><br>    PtrToAdjVNode FirstEdge;<br>&#125; AdjList[MaxVertexNum];<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span> *<span class="hljs-title">PtrToGNode</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span>&#123;</span>  <br>    <span class="hljs-keyword">int</span> Nv;<br>    <span class="hljs-keyword">int</span> Ne;<br>    AdjList G;<br>&#125;;<br><span class="hljs-keyword">typedef</span> PtrToGNode LGraph;<br></code></pre></td></tr></table></figure><p>The function <code>IsTopSeq</code> must return <code>true</code> if <code>Seq</code> does correspond to a topological order; otherwise return <code>false</code>.</p><p><strong>Note:</strong> Although the vertices are numbered from 1 to MaxVertexNum, they are <strong>indexed from 0</strong> in the LGraph structure.</p><p>Sample program of judge:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>&#125; <span class="hljs-keyword">bool</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxVertexNum 10  <span class="hljs-comment">/* maximum number of vertices */</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Vertex;      <span class="hljs-comment">/* vertices are numbered from 1 to MaxVertexNum */</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AdjVNode</span> *<span class="hljs-title">PtrToAdjVNode</span>;</span> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AdjVNode</span>&#123;</span><br>    Vertex AdjV;<br>    PtrToAdjVNode Next;<br>&#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Vnode</span>&#123;</span><br>    PtrToAdjVNode FirstEdge;<br>&#125; AdjList[MaxVertexNum];<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span> *<span class="hljs-title">PtrToGNode</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span>&#123;</span>  <br>    <span class="hljs-keyword">int</span> Nv;<br>    <span class="hljs-keyword">int</span> Ne;<br>    AdjList G;<br>&#125;;<br><span class="hljs-keyword">typedef</span> PtrToGNode LGraph;<br><br><span class="hljs-function">LGraph <span class="hljs-title">ReadG</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">/* details omitted */</span><br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsTopSeq</span><span class="hljs-params">( LGraph Graph, Vertex Seq[] )</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, j, N;<br>    Vertex Seq[MaxVertexNum];<br>    LGraph G = <span class="hljs-built_in">ReadG</span>();<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;N);<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;N; i++) &#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>; j&lt;G-&gt;Nv; j++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;Seq[j]);<br>        <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">IsTopSeq</span>(G, Seq)==<span class="hljs-literal">true</span> ) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;yes\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* Your function will be put here */</span><br></code></pre></td></tr></table></figure><p>Sample Input (for the graph shown in the figure):</p><img src="/2022/05/13/DataStructuresTest/5373e878-196d-45dd-a82f-555b1fea6929.JPG" class="" title="topord.JPG"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs in">6 8<br>1 2<br>1 3<br>5 2<br>5 4<br>2 3<br>2 6<br>3 4<br>6 4<br>5<br>1 5 2 3 6 4<br>5 1 2 6 3 4<br>5 1 2 3 6 4<br>5 2 1 6 3 4<br>1 2 3 4 5 6<br></code></pre></td></tr></table></figure><p>Sample Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs out">yes<br>yes<br>yes<br>no<br>no<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> in[MaxVertexNum];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsTopSeq</span><span class="hljs-params">( LGraph Graph, Vertex Seq[] )</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=MaxVertexNum;i++)&#123;<br>        in[i]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;Graph-&gt;Nv;i++)&#123;<br>        <span class="hljs-keyword">for</span>(PtrToAdjVNode j=Graph-&gt;G[i].FirstEdge;j;j=j-&gt;Next)&#123;<br>            in[j-&gt;AdjV]++;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//    for(int i=0;i&lt;Graph-&gt;Nv;i++)&#123;</span><br><span class="hljs-comment">//        printf(&quot;%d &quot;,in[i]);</span><br><span class="hljs-comment">//    &#125;</span><br>    <span class="hljs-keyword">bool</span> fl=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;Graph-&gt;Nv;i++)&#123;<br>        <span class="hljs-keyword">int</span> temp=Seq[i]<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span>(in[temp]==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">for</span>(PtrToAdjVNode j=Graph-&gt;G[temp].FirstEdge;j;j=j-&gt;Next)&#123;<br>                in[j-&gt;AdjV]--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            fl=<span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> fl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-1-畅通工程之最低成本建设问题"><a href="#3-1-畅通工程之最低成本建设问题" class="headerlink" title="3-1 畅通工程之最低成本建设问题"></a>3-1 畅通工程之最低成本建设问题</h2><p>某地区经过对城镇交通状况的调查，得到现有城镇间快速道路的统计数据，并提出“畅通工程”的目标：使整个地区任何两个城镇间都可以实现快速交通（但不一定有直接的快速道路相连，只要互相间接通过快速路可达即可）。现得到城镇道路统计表，表中列出了有可能建设成快速路的若干条道路的成本，求畅通工程需要的最低成本。</p><p>输入格式:</p><p>输入的第一行给出城镇数目<em>N</em> (1&lt;<em>N</em>≤1000)和候选道路数目<em>M</em>≤3<em>N</em>；随后的<em>M</em>行，每行给出3个正整数，分别是该条道路直接连通的两个城镇的编号（从1编号到<em>N</em>）以及该道路改建的预算成本。</p><p>输出格式:</p><p>输出畅通工程需要的最低成本。如果输入数据不足以保证畅通，则输出“Impossible”。</p><p>输入样例1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs in">6 15<br>1 2 5<br>1 3 3<br>1 4 7<br>1 5 4<br>1 6 2<br>2 3 4<br>2 4 6<br>2 5 2<br>2 6 6<br>3 4 6<br>3 5 1<br>3 6 1<br>4 5 10<br>4 6 8<br>5 6 3<br></code></pre></td></tr></table></figure><p>输出样例1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">12<br></code></pre></td></tr></table></figure><p>输入样例2:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>输出样例2:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Impossible</span><br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1007</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> u,v,w;<br>    <span class="hljs-built_in">node</span>(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> w):<span class="hljs-built_in">u</span>(u),<span class="hljs-built_in">v</span>(v),<span class="hljs-built_in">w</span>(w)&#123;&#125;;<br>&#125;;<br>vector&lt;node&gt; E;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node &amp;a,node &amp;b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a.w&lt;b.w;<br>&#125;<br><span class="hljs-keyword">int</span> f[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;maxn;i++)&#123;<br>        f[i]=i;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(f[a]==a) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> f[a]=<span class="hljs-built_in">find</span>(f[a]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> temp=<span class="hljs-built_in">find</span>(a);<br>    f[temp]=<span class="hljs-built_in">find</span>(b);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">find</span>(a)==<span class="hljs-built_in">find</span>(b);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">sort</span>(E.<span class="hljs-built_in">begin</span>(),E.<span class="hljs-built_in">end</span>(),cmp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">check</span>(E[i].u,E[i].v))&#123;<br>            <span class="hljs-built_in">merge</span>(E[i].u,E[i].v);<br>            cnt++;ans+=E[i].w;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(cnt&lt;n<span class="hljs-number">-1</span>) cout&lt;&lt;<span class="hljs-string">&quot;Impossible&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">else</span> cout&lt;&lt;ans&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-keyword">int</span> x,y,z;<br>        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;<br>        E.<span class="hljs-built_in">emplace_back</span>(x,y,z);<br>    &#125;<br>    <span class="hljs-built_in">kruskal</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-2-How-Long-Does-It-Take"><a href="#3-2-How-Long-Does-It-Take" class="headerlink" title="3-2 How Long Does It Take"></a>3-2 How Long Does It Take</h2><p>Given the relations of all the activities of a project, you are supposed to find the earliest completion time of the project.</p><p>Input Specification:</p><p>Each input file contains one test case. Each case starts with a line containing two positive integers <em>N</em> (≤100), the number of activity check points (hence it is assumed that the check points are numbered from 0 to <em>N</em>−1), and <em>M</em>, the number of activities. Then <em>M</em> lines follow, each gives the description of an activity. For the <code>i</code>-th activity, three non-negative numbers are given: <code>S[i]</code>, <code>E[i]</code>, and <code>L[i]</code>, where <code>S[i]</code> is the index of the starting check point, <code>E[i]</code> of the ending check point, and <code>L[i]</code> the lasting time of the activity. The numbers in a line are separated by a space.</p><p>Output Specification:</p><p>For each test case, if the scheduling is possible, print in a line its earliest completion time; or simply output “Impossible”.</p><p>Sample Input 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs in">9 12<br>0 1 6<br>0 2 4<br>0 3 5<br>1 4 1<br>2 4 1<br>3 5 2<br>5 4 0<br>4 6 9<br>4 7 7<br>5 7 4<br>6 8 2<br>7 8 4<br></code></pre></td></tr></table></figure><p>Sample Output 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">18<br></code></pre></td></tr></table></figure><p>Sample Input 2:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>Sample Output 2:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Impossible</span><br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">107</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> to,w;<br>    <span class="hljs-built_in">node</span>(<span class="hljs-keyword">int</span> to,<span class="hljs-keyword">int</span> w):<span class="hljs-built_in">to</span>(to),<span class="hljs-built_in">w</span>(w)&#123;&#125;;<br>&#125;;<br>vector&lt;node&gt; fro[maxn],to[maxn];<br><span class="hljs-keyword">int</span> in[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br>queue&lt;<span class="hljs-keyword">int</span>&gt;que;<br>vector&lt;<span class="hljs-keyword">int</span>&gt;tpo1,tpo2;<br><span class="hljs-keyword">int</span> ve[maxn],vl[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(ve,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(ve));<br>    <span class="hljs-built_in">memset</span>(vl,inf,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(vl));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tpo</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>,ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!in[i])&#123;<br>            que.<span class="hljs-built_in">push</span>(i);<br>            vis[i]=<span class="hljs-literal">true</span>;<br>            cnt++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-keyword">int</span> temp=que.<span class="hljs-built_in">front</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br>        tpo1.<span class="hljs-built_in">push_back</span>(temp);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;fro[temp].<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-keyword">int</span> t=fro[temp][i].to;<br>            ve[t]=<span class="hljs-built_in">max</span>(ve[t],ve[temp]+fro[temp][i].w);<br>            ans=(ans,ve[t]);<br>            in[t]--;<br>            <span class="hljs-keyword">if</span>(in[t]==<span class="hljs-number">0</span>&amp;&amp;!vis[t])&#123;<br>                que.<span class="hljs-built_in">push</span>(t);<br>                vis[t]=<span class="hljs-literal">true</span>;<br>                cnt++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(cnt!=n)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Impossible&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> cout&lt;&lt;ans;<br>&#125;<br><br><br><span class="hljs-comment">//void critical_path()&#123;</span><br><span class="hljs-comment">//    init();</span><br><span class="hljs-comment">//    int ans=0;</span><br><span class="hljs-comment">//    for(int i=0;i&lt;tpo1.size();i++)&#123;</span><br><span class="hljs-comment">//        int temp=tpo1[i];</span><br><span class="hljs-comment">//        for(int j=0;j&lt;fro[temp].size();j++)&#123;</span><br><span class="hljs-comment">//            if(ve[fro[temp][j].to]&lt;ve[temp]+fro[temp][j].w)&#123;</span><br><span class="hljs-comment">//                ve[fro[temp][j].to]=ve[temp]+fro[temp][j].w;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="hljs-comment">//        vl[i]=ve[i];</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//    for(int i=0;i&lt;tpo2.size();i++)&#123;</span><br><span class="hljs-comment">//        int temp=tpo2[i];</span><br><span class="hljs-comment">//        for(int j=0;j&lt;to[temp].size();j++)&#123;</span><br><span class="hljs-comment">//            if(vl[temp]-to[temp][j].w&lt;vl[to[temp][j].to])&#123;</span><br><span class="hljs-comment">//                vl[to[temp][j].to]=vl[temp]-to[temp][j].w;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="hljs-comment">//        for(int j=0;j&lt;fro[i].size();j++)&#123;</span><br><span class="hljs-comment">//            int e=ve[i];</span><br><span class="hljs-comment">//            int l=vl[fro[i][j].to]-fro[i][j].w;</span><br><span class="hljs-comment">//            if(e==l)&#123;//突然发现，也许我们的目的根本不是。。。</span><br><span class="hljs-comment">//                cout&lt;&lt;i&lt;&lt;&#x27; &#x27;&lt;&lt;fro[i][j].to&lt;&lt;&#x27; &#x27;&lt;&lt;fro[i][j].w&lt;&lt;endl;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-keyword">int</span> x,y,z;<br>        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;<br>        fro[x].<span class="hljs-built_in">emplace_back</span>(y,z);<br>        to[y].<span class="hljs-built_in">emplace_back</span>(x,z);<br>        in[y]++;<br>    &#125;<br>    <span class="hljs-built_in">tpo</span>();<br><span class="hljs-comment">//    critical_path();</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-3-Harry-Potter’s-Exam"><a href="#3-3-Harry-Potter’s-Exam" class="headerlink" title="3-3 Harry Potter’s Exam"></a>3-3 Harry Potter’s Exam</h2><p>In Professor McGonagall’s class of Transfiguration, Harry Potter is learning how to transform one object into another by some spells. He has learnt that, to turn a cat into a mouse one can say <code>docamo</code>! To reverse the effect, simply say <code>decamo</code>! Formally speaking, the transfiguration spell to transform between object A and object B is said to be <code>S</code> if there are two spells, <code>doS</code> and <code>deS</code>, to turn A into B and vice versa, respectively.</p><p>In some cases, short-cut spells are defined to make transfiguration easier. For example, suppose that the spell to transform a cat to a mouse is <code>docamo</code>, and that to transform a mouse into a fatmouse is <code>dofamo</code>, then to turn a cat into a fatmouse one may say <code>docamodofamo</code>! Or if a shot-cut spell is defined to be <code>cafam</code>, one may get the same effect by saying <code>docafam</code>!</p><p>Time is passing by quickly and the Final Exam is coming. By the end of the transfiguration exam, students will be requested to show Professor McGonagall several objects transformed from the initial objects they bring to the classroom. Each of them is allowed to bring 1 object only.</p><p>Now Harry is coming to you for help: he needs a program to select the object he must take to the exam, so that the maximum length of any spell he has to say will be minimized. For example, if cat, mouse, and fatmouse are the only three objects involved in the exam, then mouse is the one that Harry should take, since it will take a 6-letter spell to turn a mouse into either a cat or a fatmouse. Cat is not a good choice since it will take at least a 7-letter spell to turn it into a fatmouse. And for the same reason Harry must not take a fatmouse.</p><p>Input Specification:</p><p>Each input file contains one test case. For each case, the first line contains two positive integers <em>N</em> (≤100) and <em>M</em>, which are the total number of objects involved in the exam and the number of spells to be tested, respectively. For the sake of simplicity, the objects are numbered from 1 to <em>N</em>. Then <em>M</em> lines follow, each contains 3 integers, separated by a space: the numbers of two objects, and the length of the spell to transform between them.</p><p>Output Specification:</p><p>For each test case, print in one line the number of the object which Harry must take to the exam, and the maximum length of the spell he may have to say. The numbers must be separated by a space.</p><p>If it is impossible to complete all the transfigurations by taking one object only, simply output 0. If the solution is not unique, output the one with the smallest number.</p><p>Sample Input:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs in">6 11<br>3 4 70<br>1 2 1<br>5 4 50<br>2 6 50<br>5 6 60<br>1 3 70<br>4 6 60<br>3 6 80<br>5 1 100<br>2 4 60<br>5 2 80<br></code></pre></td></tr></table></figure><p>Sample Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">4 70<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//某天梯赛模拟，故copy</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">307</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">int</span> f[maxn][maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lenlen</span>&#123;</span><br>    <span class="hljs-keyword">int</span> point,len,fl;<br>&#125;len[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br>        len[i].fl=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;=n;j++)&#123;<br>            f[i][j]=inf;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(lenlen &amp;a,lenlen &amp;b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a.fl||b.fl)&#123;<br>        <span class="hljs-keyword">return</span> a.fl&lt;b.fl;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(a.len==b.len) <span class="hljs-keyword">return</span> a.point&lt;b.point;<br>    <span class="hljs-keyword">return</span> a.len&lt;b.len;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-keyword">int</span> x,y,z;<br>        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;<br>        f[x][y]=z;<br>        f[y][x]=z;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;=n;k++)&#123;<br>                <span class="hljs-keyword">if</span>(f[j][i]+f[i][k]&lt;f[j][k])&#123;<br>                    f[j][k]=f[j][i]+f[i][k];<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            <span class="hljs-keyword">if</span>(j!=i) &#123;<br>                len[i].point = i;<br>                <span class="hljs-keyword">if</span> (f[i][j] != inf) len[i].len = <span class="hljs-built_in">max</span>(len[i].len, f[i][j]);<br>                <span class="hljs-keyword">if</span> (f[i][j] == inf) len[i].fl = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(len+<span class="hljs-number">1</span>,len+<span class="hljs-number">1</span>+n,cmp);<br>    <span class="hljs-keyword">if</span>(len[<span class="hljs-number">1</span>].fl) cout&lt;&lt;<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        cout&lt;&lt;len[<span class="hljs-number">1</span>].point&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;len[<span class="hljs-number">1</span>].len;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;因为考试看不到练习的在线题集，所以放一下原题和代码&lt;/p&gt;
&lt;p&gt;&lt;del&gt;但是有一说一，因为blog没做目录，这篇翻起来应该相当痛苦（）&lt;/del&gt;可恶，为什么时至今日我才发现目录能调出来&lt;/p&gt;
&lt;h1 id=&quot;1-tree&quot;&gt;&lt;a href=&quot;#1-tree&quot; cla</summary>
      
    
    
    
    
    <category term="cpp" scheme="https://github.com/sterne012/sterne012.github.io/tags/cpp/"/>
    
    <category term="c" scheme="https://github.com/sterne012/sterne012.github.io/tags/c/"/>
    
    <category term="review" scheme="https://github.com/sterne012/sterne012.github.io/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-循环神经网络</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/05/13/deep-rnn/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/05/13/deep-rnn/</id>
    <published>2022-05-13T06:57:29.000Z</published>
    <updated>2022-05-13T07:00:39.436Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/05/13/deep-rnn/image-20220513145900239.png" class="" title="image-20220513145900239"><img src="/2022/05/13/deep-rnn/image-20220513145925130.png" class="" title="image-20220513145925130"><img src="/2022/05/13/deep-rnn/image-20220513145941266.png" class="" title="image-20220513145941266"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">在 IMDB 情感分类任务上训练双向 LSTM。</span><br><span class="hljs-string">Output after 4 epochs on CPU: ~0.8146. Time per epoch on CPU (Core i7): ~150s.</span><br><span class="hljs-string">在 CPU 上经过 4 个轮次后的输出：〜0.8146。 CPU（Core i7）上每个轮次的时间：〜150s。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-comment"># os.environ[&quot;CUDA_VISIBLE_DEVICES&quot;] = &quot;-1&quot;</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-keyword">import</span> ssl<br><span class="hljs-keyword">from</span> tensorflow.keras.preprocessing <span class="hljs-keyword">import</span> sequence<br><span class="hljs-keyword">from</span> tensorflow.keras.models <span class="hljs-keyword">import</span> Sequential<br><span class="hljs-keyword">from</span> tensorflow.keras.layers <span class="hljs-keyword">import</span> Dense, Dropout, Embedding<br><span class="hljs-keyword">from</span> tensorflow.keras.layers <span class="hljs-keyword">import</span> LSTM,Bidirectional<br><span class="hljs-keyword">from</span> tensorflow.keras.optimizers <span class="hljs-keyword">import</span> Adam,SGD<br><span class="hljs-keyword">from</span> tensorflow.keras.datasets <span class="hljs-keyword">import</span> imdb<br><span class="hljs-keyword">from</span> tensorflow.keras.utils <span class="hljs-keyword">import</span> plot_model<br><br>ssl._create_default_https_context = ssl._create_unverified_context<br>os.environ[<span class="hljs-string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="hljs-string">&#x27;2&#x27;</span><br>os.environ[<span class="hljs-string">&#x27;KMP_DUPLICATE_LIB_OK&#x27;</span>] = <span class="hljs-string">&quot;TRUE&quot;</span><br>np.set_printoptions(threshold=np.inf)<br><br><span class="hljs-keyword">if</span> <span class="hljs-number">1</span> == <span class="hljs-number">0</span>:<br>    gpus = tf.config.experimental.list_physical_devices(device_type=<span class="hljs-string">&#x27;GPU&#x27;</span>)<br>    <span class="hljs-keyword">for</span> gpu <span class="hljs-keyword">in</span> gpus:<br>        tf.config.experimental.set_memory_growth(gpu, <span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">1</span>==<span class="hljs-number">0</span>:<br>            tf.config.experimental.set_virtual_device_configuration(gpu, [<br>                tf.config.experimental.VirtualDeviceConfiguration(memory_limit=<span class="hljs-number">800</span>)])<br><span class="hljs-keyword">if</span> <span class="hljs-number">1</span>==<span class="hljs-number">1</span>:<br>    config = tf.compat.v1.ConfigProto()<br>    config.gpu_options.allow_growth = <span class="hljs-literal">True</span><br>    session =tf.compat.v1.InteractiveSession(config=config)<br><br><br><br><br><span class="hljs-keyword">import</span> pylab <span class="hljs-keyword">as</span> plt<br><br><br>max_features = <span class="hljs-number">20000</span><br><span class="hljs-comment"># 在此数量的单词之后剪切文本（取最常见的 max_features 个单词）</span><br>maxlen = <span class="hljs-number">80</span><br><span class="hljs-comment"># maxlen = 580</span><br>batch_size = <span class="hljs-number">32</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;maxlen %d batch size %d &quot;</span> % (maxlen,batch_size))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Loading data...&#x27;</span>)<br><span class="hljs-comment"># (x_train, y_train), (x_test, y_test) = imdb.load_data(&#x27;/home/ubuntu/work/DNNcourse2022/RNN/imdb.npz&#x27;,num_words=max_features)</span><br>(x_train, y_train), (x_test, y_test) = imdb.load_data(<span class="hljs-string">&#x27;./imdb.npz&#x27;</span>,num_words=max_features)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(x_train), <span class="hljs-string">&#x27;train sequences&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(x_test), <span class="hljs-string">&#x27;test sequences&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Pad sequences (samples x time)&#x27;</span>)<br>x_train = sequence.pad_sequences(x_train, maxlen=maxlen)<br>x_test = sequence.pad_sequences(x_test, maxlen=maxlen)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x_train shape:&#x27;</span>, x_train.shape)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x_test shape:&#x27;</span>, x_test.shape)<br>y_train = np.array(y_train)<br>y_test = np.array(y_test)<br><br>model = Sequential()<br>model.add(Embedding(max_features, <span class="hljs-number">128</span>, input_length=maxlen))<br>model.add(Bidirectional(LSTM(<span class="hljs-number">64</span>)))<br><br>model.add(Dropout(<span class="hljs-number">0.5</span>))<br>model.add(Dense(<span class="hljs-number">1</span>, activation=<span class="hljs-string">&#x27;sigmoid&#x27;</span>))<br><br><span class="hljs-comment"># 尝试使用不同的优化器和优化器配置</span><br>optimizer = Adam(<span class="hljs-number">1e-4</span>)<br><span class="hljs-comment"># model.compile(optimizer=&#x27;adam&#x27;, &#x27;binary_crossentropy&#x27;, metrics=[&#x27;accuracy&#x27;])</span><br>model.<span class="hljs-built_in">compile</span>(optimizer=optimizer, loss=<span class="hljs-string">&#x27;binary_crossentropy&#x27;</span>, metrics=[<span class="hljs-string">&#x27;accuracy&#x27;</span>])<br>model.summary()<br>plot_model(model,  to_file=<span class="hljs-string">&#x27;./Figs/test2.png&#x27;</span>,show_shapes=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># exit()</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Train...&#x27;</span>)<br><br>os.makedirs(<span class="hljs-string">&quot;logs&quot;</span>,exist_ok=<span class="hljs-number">1</span>==<span class="hljs-number">1</span>)<br>history=model.fit(x_train, y_train,<br>          batch_size=batch_size,<br>          epochs=<span class="hljs-number">20</span>,<br>          validation_data=(x_test, y_test) )<br><br>os.makedirs(<span class="hljs-string">&quot;Figs&quot;</span>,exist_ok=<span class="hljs-number">1</span>==<span class="hljs-number">1</span>)<br>plt.plot(history.history[<span class="hljs-string">&#x27;accuracy&#x27;</span>])<br>plt.plot(history.history[<span class="hljs-string">&#x27;val_accuracy&#x27;</span>])<br>plt.title(<span class="hljs-string">&#x27;Model accuracy&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Accuracy&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;Epoch&#x27;</span>)<br>plt.legend([<span class="hljs-string">&#x27;Train&#x27;</span>, <span class="hljs-string">&#x27;Test&#x27;</span>], loc=<span class="hljs-string">&#x27;upper left&#x27;</span>)<br>plt.savefig(<span class="hljs-string">&#x27;./Figs/test2_accuracy.png&#x27;</span>)<br>plt.show()<br><br><span class="hljs-comment"># 绘制训练 &amp; 验证的损失值</span><br>plt.plot(history.history[<span class="hljs-string">&#x27;loss&#x27;</span>])<br>plt.plot(history.history[<span class="hljs-string">&#x27;val_loss&#x27;</span>])<br>plt.title(<span class="hljs-string">&#x27;Model loss&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Loss&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;Epoch&#x27;</span>)<br>plt.legend([<span class="hljs-string">&#x27;Train&#x27;</span>, <span class="hljs-string">&#x27;Test&#x27;</span>], loc=<span class="hljs-string">&#x27;upper left&#x27;</span>)<br>plt.savefig(<span class="hljs-string">&#x27;./Figs/test2_loss.png&#x27;</span>)<br>plt.show()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/2022/05/13/deep-rnn/image-20220513145900239.png&quot; class=&quot;&quot; title=&quot;image-20220513145900239&quot;&gt;

&lt;img src=&quot;/2022/05/13/deep-rnn/image-</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
    <category term="deeplearning" scheme="https://github.com/sterne012/sterne012.github.io/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>Arcaea-从零开始的萌星生活</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/05/10/Arcaea2/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/05/10/Arcaea2/</id>
    <published>2022-05-10T07:55:18.000Z</published>
    <updated>2022-05-13T08:57:39.307Z</updated>
    
    <content type="html"><![CDATA[<p>记录自摘星以来的些许进步 </p><p>2022-05-10</p><img src="/2022/05/10/Arcaea2/CA07EBFF49B5515B7E762997B90686A7.png" class="" title="img"><p>2022-05-12</p><p>爽p！没想到后面稳住了没翻车</p><p>也是目前pm定数最高（（好菜，9+性了好几首</p><img src="/2022/05/10/Arcaea2/5EEE702598A483A9BD5C06228EC538B6.png" class="" title="img">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记录自摘星以来的些许进步 &lt;/p&gt;
&lt;p&gt;2022-05-10&lt;/p&gt;
&lt;img src=&quot;/2022/05/10/Arcaea2/CA07EBFF49B5515B7E762997B90686A7.png&quot; class=&quot;&quot; title=&quot;img&quot;&gt;

&lt;p&gt;2022-05</summary>
      
    
    
    
    
    <category term="games" scheme="https://github.com/sterne012/sterne012.github.io/tags/games/"/>
    
    <category term="Arc" scheme="https://github.com/sterne012/sterne012.github.io/tags/Arc/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-resnet</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/04/22/deep-resnet/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/04/22/deep-resnet/</id>
    <published>2022-04-22T08:09:41.000Z</published>
    <updated>2022-04-22T14:16:15.652Z</updated>
    
    <content type="html"><![CDATA[<p>这次用了jupyter</p><p>然后weights文件爆了（131万行后爆炸…）</p><img src="/2022/04/22/deep-resnet/image-20220422161143650.png" class="" title="image-20220422161143650"><p>曲线</p><img src="/2022/04/22/deep-resnet/image-20220422161158541.png" class="" title="image-20220422161158541"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> tensorflow.keras.layers <span class="hljs-keyword">import</span> Conv2D, BatchNormalization, Activation, MaxPool2D, Dropout, Flatten, Dense<br><span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> Model<br><span class="hljs-keyword">import</span> ssl<br><br>ssl._create_default_https_context = ssl._create_unverified_context<br>os.environ[<span class="hljs-string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="hljs-string">&#x27;2&#x27;</span><br>os.environ[<span class="hljs-string">&#x27;KMP_DUPLICATE_LIB_OK&#x27;</span>] = <span class="hljs-string">&quot;TRUE&quot;</span><br>np.set_printoptions(threshold=np.inf)<br><br>cifar10 = tf.keras.datasets.cifar10<br>(x_train, y_train), (x_test, y_test) = cifar10.load_data()<br>x_train, x_test = x_train / <span class="hljs-number">255.0</span>, x_test / <span class="hljs-number">255.0</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResnetBlock</span>(<span class="hljs-params">Model</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, filters, strides=<span class="hljs-number">1</span>, residual_path=<span class="hljs-literal">False</span></span>):</span><br>        <span class="hljs-built_in">super</span>(ResnetBlock, self).__init__()<br>        self.filters = filters<br>        self.strides = strides<br>        self.residual_path = residual_path<br><br>        self.c1 = Conv2D(filters, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), strides=strides, padding=<span class="hljs-string">&#x27;same&#x27;</span>, use_bias=<span class="hljs-literal">False</span>)<br>        self.b1 = BatchNormalization()<br>        self.a1 = Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)<br><br>        self.c2 = Conv2D(filters, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), strides=<span class="hljs-number">1</span>, padding=<span class="hljs-string">&#x27;same&#x27;</span>, use_bias=<span class="hljs-literal">False</span>)<br>        self.b2 = BatchNormalization()<br><br>        <span class="hljs-comment"># residual_path为True时，对输入进行下采样，即用1x1的卷积核做卷积操作，保证x能和F(x)维度相同，顺利相加</span><br>        <span class="hljs-keyword">if</span> residual_path:<br>            self.down_c1 = Conv2D(filters, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), strides=strides, padding=<span class="hljs-string">&#x27;same&#x27;</span>, use_bias=<span class="hljs-literal">False</span>)<br>            self.down_b1 = BatchNormalization()<br>        <br>        self.a2 = Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span>(<span class="hljs-params">self, inputs</span>):</span><br>        residual = inputs  <span class="hljs-comment"># residual等于输入值本身，即residual=x</span><br>        <span class="hljs-comment"># 将输入通过卷积、BN层、激活层，计算F(x)</span><br>        x = self.c1(inputs)<br>        x = self.b1(x)<br>        x = self.a1(x)<br><br>        x = self.c2(x)<br>        y = self.b2(x)<br><br>        <span class="hljs-keyword">if</span> self.residual_path:<br>            residual = self.down_c1(inputs)<br>            residual = self.down_b1(residual)<br><br>        out = self.a2(y + residual)  <span class="hljs-comment"># 最后输出的是两部分的和，即F(x)+x或F(x)+Wx,再过激活函数</span><br>        <span class="hljs-keyword">return</span> out<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResNet18</span>(<span class="hljs-params">Model</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, block_list, initial_filters=<span class="hljs-number">64</span></span>):</span>  <span class="hljs-comment"># block_list表示每个block有几个卷积层</span><br>        <span class="hljs-built_in">super</span>(ResNet18, self).__init__()<br>        self.num_blocks = <span class="hljs-built_in">len</span>(block_list)  <span class="hljs-comment"># 共有几个block</span><br>        self.block_list = block_list<br>        self.out_filters = initial_filters<br>        self.c1 = Conv2D(self.out_filters, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), strides=<span class="hljs-number">1</span>, padding=<span class="hljs-string">&#x27;same&#x27;</span>, use_bias=<span class="hljs-literal">False</span>)<br>        self.b1 = BatchNormalization()<br>        self.a1 = Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)<br>        self.blocks = tf.keras.models.Sequential()<br>        <span class="hljs-comment"># 构建ResNet网络结构</span><br>        <span class="hljs-keyword">for</span> block_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(block_list)):  <span class="hljs-comment"># 第几个resnet block</span><br>            <span class="hljs-keyword">for</span> layer_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(block_list[block_id]):  <span class="hljs-comment"># 第几个卷积层</span><br><br>                <span class="hljs-keyword">if</span> block_id != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> layer_id == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 对除第一个block以外的每个block的输入进行下采样</span><br>                    block = ResnetBlock(self.out_filters, strides=<span class="hljs-number">2</span>, residual_path=<span class="hljs-literal">True</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    block = ResnetBlock(self.out_filters, residual_path=<span class="hljs-literal">False</span>)<br>                self.blocks.add(block)  <span class="hljs-comment"># 将构建好的block加入resnet</span><br>            self.out_filters *= <span class="hljs-number">2</span>  <span class="hljs-comment"># 下一个block的卷积核数是上一个block的2倍</span><br>        self.p1 = tf.keras.layers.GlobalAveragePooling2D()<br>        self.f1 = tf.keras.layers.Dense(<span class="hljs-number">10</span>, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>, kernel_regularizer=tf.keras.regularizers.l2())<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span>(<span class="hljs-params">self, inputs</span>):</span><br>        x = self.c1(inputs)<br>        x = self.b1(x)<br>        x = self.a1(x)<br>        x = self.blocks(x)<br>        x = self.p1(x)<br>        y = self.f1(x)<br>        <span class="hljs-keyword">return</span> y<br><br><br>model = ResNet18([<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>])<br><br>model.<span class="hljs-built_in">compile</span>(optimizer=<span class="hljs-string">&#x27;adam&#x27;</span>,<br>              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="hljs-literal">False</span>),<br>              metrics=[<span class="hljs-string">&#x27;sparse_categorical_accuracy&#x27;</span>])<br><br>checkpoint_save_path = <span class="hljs-string">&quot;./checkpoint/ResNet18.ckpt&quot;</span><br><span class="hljs-keyword">if</span> os.path.exists(checkpoint_save_path + <span class="hljs-string">&#x27;.index&#x27;</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-------------load the model-----------------&#x27;</span>)<br>    model.load_weights(checkpoint_save_path)<br><br>cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_save_path,<br>                                                 save_weights_only=<span class="hljs-literal">True</span>,<br>                                                 save_best_only=<span class="hljs-literal">True</span>)<br><br>history = model.fit(x_train, y_train, batch_size=<span class="hljs-number">32</span>, epochs=<span class="hljs-number">5</span>, validation_data=(x_test, y_test), validation_freq=<span class="hljs-number">1</span>,<br>                    callbacks=[cp_callback])<br>model.summary()<br><br><span class="hljs-comment"># print(model.trainable_variables)</span><br>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./weights.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> model.trainable_variables:<br>    file.write(<span class="hljs-built_in">str</span>(v.name) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    file.write(<span class="hljs-built_in">str</span>(v.shape) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    file.write(<span class="hljs-built_in">str</span>(v.numpy()) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>file.close()<br><br><br><span class="hljs-comment"># 显示训练集和验证集的acc和loss曲线</span><br>acc = history.history[<span class="hljs-string">&#x27;sparse_categorical_accuracy&#x27;</span>]<br>val_acc = history.history[<span class="hljs-string">&#x27;val_sparse_categorical_accuracy&#x27;</span>]<br>loss = history.history[<span class="hljs-string">&#x27;loss&#x27;</span>]<br>val_loss = history.history[<span class="hljs-string">&#x27;val_loss&#x27;</span>]<br><br>plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br>plt.plot(acc, label=<span class="hljs-string">&#x27;Training Accuracy&#x27;</span>)<br>plt.plot(val_acc, label=<span class="hljs-string">&#x27;Validation Accuracy&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;Training and Validation Accuracy&#x27;</span>)<br>plt.legend()<br><br>plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br>plt.plot(loss, label=<span class="hljs-string">&#x27;Training Loss&#x27;</span>)<br>plt.plot(val_loss, label=<span class="hljs-string">&#x27;Validation Loss&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;Training and Validation Loss&#x27;</span>)<br>plt.legend()<br>plt.show()<br><br></code></pre></td></tr></table></figure><p>话说回来inception是什么算法 吗？</p><img src="/2022/04/22/deep-resnet/image-20220422184707986.png" class="" title="image-20220422184707986"><p>cnn_baseline的也存一下</p><img src="/2022/04/22/deep-resnet/image-20220422221614706.png" class="" title="image-20220422221614706">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这次用了jupyter&lt;/p&gt;
&lt;p&gt;然后weights文件爆了（131万行后爆炸…）&lt;/p&gt;
&lt;img src=&quot;/2022/04/22/deep-resnet/image-20220422161143650.png&quot; class=&quot;&quot; title=&quot;image-2022</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
    <category term="deeplearning" scheme="https://github.com/sterne012/sterne012.github.io/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>嘤语学习助手-数据库课设</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/04/21/tnndsql/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/04/21/tnndsql/</id>
    <published>2022-04-21T08:44:08.000Z</published>
    <updated>2022-05-31T01:49:34.395Z</updated>
    
    <content type="html"><![CDATA[<p>夏日重现的ed是真的耐听(然而播放器还是失效了，悲)</p><div class="aplayer-box" data-url='https://sterne012.github.io/pubilc/music/cadode - 回夏.mp3' data-name='回夏' data-artist='cadode' data-cover data-lrc data-lrcType='3' ></div><p>做完之后会放到gayhub上开源嗯。。</p><h1 id="1-数据库"><a href="#1-数据库" class="headerlink" title="1.数据库"></a>1.数据库</h1><h2 id="0-连接"><a href="#0-连接" class="headerlink" title="0.连接"></a>0.连接</h2><p>终于把sql server（以下sql均指sql server）修好了。。。</p><p>昨天弄了一下午，真的不想玩辣，觉得用mysql摆烂算了，然后发现mysql的触发器和tsql不会写，寄</p><p>前段时间需求分析差不多的时候发现它从我的电脑上直接消失（一个什么配置管理器），然后正确的修复方法应该不是重装，或者不只是重装，在sql安装程序-&gt;维护-&gt;修复的地方修一下之后我才看到TCP/IP端口重现天日。。然后SSL什么的报错，改了jdbc里面的一段话（改的是idea里面jdbc的）</p><blockquote><p><strong>D:\jdk\jre\lib\security</strong>下就会有这个<strong>java.security</strong></p></blockquote><p>直接在idea安装路径下搜java.security，记事本打开，搜jdk.tls，将3DES_EDE_CBC删除</p><p>我超，行了！</p><h2 id="1-导入数据"><a href="#1-导入数据" class="headerlink" title="1.导入数据"></a>1.导入数据</h2><p>使用unicode(utf-8)字符集才能正确导入音标，否则一片问号</p><p>xlsx文件用excel打开后另存为-&gt;用csv保存-&gt;工具-&gt;编码-&gt;选unicode(utf-8)！选utf-8不行</p><p>在datagrip中导入，选utf-8</p><p>然后终于开始写触发器了</p><h2 id="2-数据库代码"><a href="#2-数据库代码" class="headerlink" title="2.数据库代码"></a>2.数据库代码</h2><p>同时也是备份</p><p><del>什么嘛，我这不是挺能写的，不要停下来啊</del></p><p>把type属性去掉了，拼字符串那种事情不要啊</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database EN_learning;<br>use EN_learning;<br><span class="hljs-keyword">ALTER</span> DATABASE EN_learning <span class="hljs-keyword">COLLATE</span> Chinese_PRC_CI_AS<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> Admin<br>(<br>    admin_id <span class="hljs-type">char</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">primary</span> key,<br>    admin_passwd <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>)<br>)<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> users<br>(<br>    user_id <span class="hljs-type">char</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">primary</span> key,<br>    user_passwd <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>),<br>    user_name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>    user_date <span class="hljs-type">date</span> <span class="hljs-keyword">default</span>(getdate()),<span class="hljs-comment">--注册时间</span><br>    user_learn <span class="hljs-type">smallint</span> <span class="hljs-keyword">default</span>(<span class="hljs-number">0</span>)<br>)<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> en_list<br>(<br>    word      <span class="hljs-type">char</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">primary</span> key,<br>    symbol    nvarchar(max),<br>    trans     nvarchar(max),<br>    frequency <span class="hljs-type">int</span> <span class="hljs-keyword">default</span>(<span class="hljs-number">0</span>),<br>    img       image,<br>    vocal     image<br>)<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> motto<br>(<br>    sentence nvarchar(max),<br>    trans    nvarchar(max)<br>)<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> jp_list <span class="hljs-comment">--计划后续添加</span><br>(<br>    word        nvarchar(<span class="hljs-number">80</span>) <span class="hljs-keyword">primary</span> key ,<br>    symbol      nvarchar(<span class="hljs-number">80</span>),<br>    trans       nvarchar(max),<br>    frequency   <span class="hljs-type">int</span> <span class="hljs-keyword">default</span>(<span class="hljs-number">0</span>),<br>    img         image,<br>    vocal       image<br>)<br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">--用户------------------------------------------------------</span><br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">--创建用户后触发：生成一张用户的新表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> users_add <span class="hljs-keyword">on</span> users after <span class="hljs-keyword">insert</span> <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<br>            <span class="hljs-variable">@create</span>_table <span class="hljs-type">varchar</span>(<span class="hljs-number">300</span>),<br>            <span class="hljs-variable">@create</span>_view <span class="hljs-type">varchar</span>(<span class="hljs-number">300</span>),<br>            <span class="hljs-variable">@sel</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">300</span>)<br>    <span class="hljs-keyword">select</span> <span class="hljs-variable">@user</span>_id<span class="hljs-operator">=</span>user_id <span class="hljs-keyword">from</span> inserted<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@create</span>_table<span class="hljs-operator">=</span><span class="hljs-string">&#x27;create table user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><br>                      <span class="hljs-string">&#x27; (&#x27;</span> <span class="hljs-operator">+</span><br>    <span class="hljs-string">&#x27;</span><br><span class="hljs-string">        rank      smallint default(0),</span><br><span class="hljs-string">        word      char(40) primary key,</span><br><span class="hljs-string">        symbol    nvarchar(max),</span><br><span class="hljs-string">        trans     nvarchar(max),</span><br><span class="hljs-string">        add_date  date default(getdate()),</span><br><span class="hljs-string">        del_date  date</span><br><span class="hljs-string">    )&#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@create</span>_table)<br><br>    <span class="hljs-comment">--生词表（view）user_1001001001 默认按rank降序排序</span><br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select rank,word,symbol,trans,add_date&#x27;</span> <span class="hljs-operator">+</span><br>             <span class="hljs-string">&#x27; from user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; where rank&gt;=0&#x27;</span><br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@create</span>_view<span class="hljs-operator">=</span><span class="hljs-string">&#x27;create view user_1_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; as &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@sel</span><br>    <span class="hljs-keyword">exec</span> (<span class="hljs-variable">@create</span>_view)<br><br>    <span class="hljs-comment">--熟词表（view）</span><br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select word,symbol,trans,add_date,del_date&#x27;</span> <span class="hljs-operator">+</span><br>             <span class="hljs-string">&#x27; from user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; where rank&lt;0&#x27;</span><br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@create</span>_view<span class="hljs-operator">=</span><span class="hljs-string">&#x27;create view user_2_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; as &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@sel</span><br>    <span class="hljs-keyword">exec</span> (<span class="hljs-variable">@create</span>_view)<br>go<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(user_id, user_passwd, user_name) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>)<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(user_id, user_passwd, user_name) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;1001001002&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>,<span class="hljs-string">&#x27;test2&#x27;</span>)<br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--注销用户后触发：删除用户的表&amp;视图</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> users_del <span class="hljs-keyword">on</span> users after <span class="hljs-keyword">delete</span> <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@user</span>_id <span class="hljs-type">char</span>(<span class="hljs-number">10</span>),<br>            <span class="hljs-variable">@drop</span>_table <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>),<br>            <span class="hljs-variable">@drop</span>_view <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">select</span> <span class="hljs-variable">@user</span>_id<span class="hljs-operator">=</span>user_id <span class="hljs-keyword">from</span> deleted<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@drop</span>_table<span class="hljs-operator">=</span><span class="hljs-string">&#x27;drop table user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<br>    <span class="hljs-keyword">exec</span> (<span class="hljs-variable">@drop</span>_table)<br><br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@drop</span>_view<span class="hljs-operator">=</span><span class="hljs-string">&#x27;drop view user_1_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<br>    <span class="hljs-keyword">exec</span> (<span class="hljs-variable">@drop</span>_view)<br><br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@drop</span>_view<span class="hljs-operator">=</span><span class="hljs-string">&#x27;drop view user_2_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<br>    <span class="hljs-keyword">exec</span> (<span class="hljs-variable">@drop</span>_view)<br>go<br><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> user_id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1001001001&#x27;</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> user_id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1001001002&#x27;</span><br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">--词库-----------------------------------------------------</span><br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">--单词总量统计</span><br><span class="hljs-keyword">create</span> proc en_list_counter <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> en_list<br>go<br><br><span class="hljs-keyword">exec</span> en_list_counter<br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">--使用单词模糊查找，找到后词频+1</span><br><span class="hljs-keyword">create</span> proc EN_search <span class="hljs-variable">@word</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@word</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;%&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@word</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;%&#x27;</span><br>    <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> en_list <span class="hljs-keyword">where</span> word <span class="hljs-keyword">like</span> <span class="hljs-variable">@word</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@w</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>),<br>            <span class="hljs-variable">@frequency</span> <span class="hljs-type">int</span><br>    <span class="hljs-keyword">declare</span> csr <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span><br>    <span class="hljs-keyword">select</span> word,frequency <span class="hljs-keyword">from</span> en_list<br>    <span class="hljs-keyword">where</span> word <span class="hljs-keyword">like</span> <span class="hljs-variable">@word</span><br>    <span class="hljs-keyword">open</span> csr<br>    <span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> csr <span class="hljs-keyword">into</span> <span class="hljs-variable">@w</span>,<span class="hljs-variable">@frequency</span><br>    while @<span class="hljs-variable">@FETCH</span>_STATUS<span class="hljs-operator">=</span><span class="hljs-number">0</span><br>    <span class="hljs-keyword">begin</span><br>        update en_list <span class="hljs-keyword">set</span> frequency<span class="hljs-operator">=</span><span class="hljs-variable">@frequency</span><span class="hljs-operator">+</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-variable">@w</span><br>        <span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> csr <span class="hljs-keyword">into</span> <span class="hljs-variable">@w</span>,<span class="hljs-variable">@frequency</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">close</span> csr<br>    <span class="hljs-keyword">deallocate</span> csr<br>go<br><br><span class="hljs-keyword">exec</span> EN_search <span class="hljs-string">&#x27;cat&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--使用中文或词性模糊查找，找到后词频+1</span><br><span class="hljs-keyword">create</span> proc CH_search <span class="hljs-variable">@trans</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@w</span> <span class="hljs-type">char</span>(<span class="hljs-number">40</span>),<br>            <span class="hljs-variable">@frequency</span> <span class="hljs-type">int</span><br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@trans</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;%&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@trans</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;%&#x27;</span><br>    <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> en_list<br>    <span class="hljs-keyword">where</span> trans <span class="hljs-keyword">like</span> <span class="hljs-variable">@trans</span><br><br>    <span class="hljs-keyword">declare</span> csr <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span><br>        <span class="hljs-keyword">select</span> word,frequency <span class="hljs-keyword">from</span> en_list<br>        <span class="hljs-keyword">where</span> trans <span class="hljs-keyword">like</span> <span class="hljs-variable">@trans</span><br>        <span class="hljs-keyword">open</span> csr<br>        <span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> csr <span class="hljs-keyword">into</span> <span class="hljs-variable">@w</span>,<span class="hljs-variable">@frequency</span><br>        while @<span class="hljs-variable">@FETCH</span>_STATUS<span class="hljs-operator">=</span><span class="hljs-number">0</span><br>            <span class="hljs-keyword">begin</span><br>                update en_list <span class="hljs-keyword">set</span> frequency<span class="hljs-operator">=</span><span class="hljs-variable">@frequency</span><span class="hljs-operator">+</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-variable">@w</span><br>                <span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> csr <span class="hljs-keyword">into</span> <span class="hljs-variable">@w</span>,<span class="hljs-variable">@frequency</span><br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">close</span> csr<br>        <span class="hljs-keyword">deallocate</span> csr<br>go<br><br><span class="hljs-keyword">exec</span> CH_search <span class="hljs-string">&#x27;好&#x27;</span><br><span class="hljs-keyword">exec</span> CH_search <span class="hljs-string">&#x27;prep&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--词库中单词按词频排序，输出</span><br><span class="hljs-keyword">create</span> proc order_en_list_fre <span class="hljs-variable">@order</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">as</span><br>    if(<span class="hljs-variable">@order</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;ASC&#x27;</span>)<br>    <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> en_list<br>        <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> frequency <span class="hljs-keyword">asc</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> if(<span class="hljs-variable">@order</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;DESC&#x27;</span>)<br>    <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> en_list<br>        <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> frequency <span class="hljs-keyword">desc</span><br>    <span class="hljs-keyword">end</span><br>go<br><br><span class="hljs-keyword">exec</span> order_en_list_fre <span class="hljs-string">&#x27;ASC&#x27;</span><br><span class="hljs-keyword">exec</span> order_en_list_fre <span class="hljs-string">&#x27;DESC&#x27;</span><br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">--用户表-----------------------------------------------------</span><br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">--用户手动向生词表添加，一个一个加</span><br><span class="hljs-keyword">create</span> proc en_list_to_user <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<span class="hljs-variable">@word</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@ins</span> nvarchar(max)<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@ins</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;insert into user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27;(word,symbol,trans)&#x27;</span> <span class="hljs-operator">+</span><br>             <span class="hljs-string">&#x27;select word,symbol,trans from en_list where word=&#x27;&#x27;&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@word</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@ins</span>)<br>go<br><br><span class="hljs-keyword">exec</span> en_list_to_user <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-string">&#x27;accomplished&#x27;</span><br><br><span class="hljs-comment">------------------------------------------------------------------</span><br><span class="hljs-comment">--每日生成生词表（向其中添加一定数目的单词）</span><br><span class="hljs-keyword">create</span> proc day_en_word <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<span class="hljs-variable">@num</span> <span class="hljs-type">smallint</span>,<span class="hljs-variable">@val</span> <span class="hljs-type">smallint</span> <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@word</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>),<br>            <span class="hljs-variable">@csr</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">300</span>)<br>    if(<span class="hljs-variable">@val</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>)<span class="hljs-comment">--根据词库word正序选取（从字典序最小开始）</span><br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">set</span> <span class="hljs-variable">@csr</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;declare csr cursor for &#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;select top &#x27;</span><span class="hljs-operator">+</span><span class="hljs-keyword">convert</span>(<span class="hljs-type">char</span>,<span class="hljs-variable">@num</span>)<span class="hljs-operator">+</span><span class="hljs-string">&#x27; word from en_list &#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;where word not in(select word from user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27;)&#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;order by word asc&#x27;</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> if(<span class="hljs-variable">@val</span><span class="hljs-operator">=</span><span class="hljs-number">2</span>)<span class="hljs-comment">--根据word倒序选取（从字典序最大开始）</span><br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">set</span> <span class="hljs-variable">@csr</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;declare csr cursor for &#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;select top &#x27;</span><span class="hljs-operator">+</span><span class="hljs-keyword">convert</span>(<span class="hljs-type">char</span>,<span class="hljs-variable">@num</span>)<span class="hljs-operator">+</span><span class="hljs-string">&#x27; word from en_list &#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;where word not in(select word from user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27;)&#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;order by word desc&#x27;</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> if(<span class="hljs-variable">@val</span><span class="hljs-operator">=</span><span class="hljs-number">3</span>)<span class="hljs-comment">--根据词频选取，最大词频优先</span><br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">set</span> <span class="hljs-variable">@csr</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;declare csr cursor for &#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;select top &#x27;</span><span class="hljs-operator">+</span><span class="hljs-keyword">convert</span>(<span class="hljs-type">char</span>,<span class="hljs-variable">@num</span>)<span class="hljs-operator">+</span><span class="hljs-string">&#x27; word from en_list &#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;where word not in(select word from user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27;)&#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;order by frequency desc&#x27;</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> if(<span class="hljs-variable">@val</span><span class="hljs-operator">=</span><span class="hljs-number">4</span>)<span class="hljs-comment">--随机抽选</span><br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">set</span> <span class="hljs-variable">@csr</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;declare csr cursor for &#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;select top &#x27;</span><span class="hljs-operator">+</span><span class="hljs-keyword">convert</span>(<span class="hljs-type">char</span>,<span class="hljs-variable">@num</span>)<span class="hljs-operator">+</span><span class="hljs-string">&#x27; word from en_list &#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;where word not in(select word from user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27;)&#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;order by newid()&#x27;</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">exec</span> (<span class="hljs-variable">@csr</span>)<br>    <span class="hljs-keyword">open</span> csr<br>    <span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> csr <span class="hljs-keyword">into</span> <span class="hljs-variable">@word</span><br>    while @<span class="hljs-variable">@FETCH</span>_STATUS<span class="hljs-operator">=</span><span class="hljs-number">0</span><br>    <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">exec</span> en_list_to_user <span class="hljs-variable">@user</span>_id,<span class="hljs-variable">@word</span><br>        <span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> csr <span class="hljs-keyword">into</span> <span class="hljs-variable">@word</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">close</span> csr<br>    <span class="hljs-keyword">deallocate</span> csr<br>go<br><br><span class="hljs-keyword">exec</span> day_en_word <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span><br><span class="hljs-keyword">exec</span> day_en_word <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">4</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--增加某个单词rank，上限为10（在前端检测并提示）</span><br><span class="hljs-keyword">create</span> proc rank_up <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<span class="hljs-variable">@word</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@update</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@update</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;update user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; set rank=rank+1 where word=&#x27;&#x27;&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@word</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@update</span>)<br>go<br><br><span class="hljs-keyword">exec</span> rank_up <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-keyword">exec</span> rank_up <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-string">&#x27;above&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--降低某个单词rank，下限为0</span><br><span class="hljs-keyword">create</span> proc rank_down <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<span class="hljs-variable">@word</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@update</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@update</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;update user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; set rank=rank-1 where word=&#x27;&#x27;&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@word</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@update</span>)<br>go<br><span class="hljs-keyword">exec</span> rank_down <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--从生词表删除移到熟词表</span><br><span class="hljs-keyword">create</span> proc rank_move <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<span class="hljs-variable">@word</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@update</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@update</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;update user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; set rank=-1,del_date=getdate() where word=&#x27;&#x27;&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@word</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@update</span>)<br>go<br><span class="hljs-keyword">exec</span> rank_move <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-string">&#x27;accomplished&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--按rank排序</span><br><span class="hljs-keyword">create</span> proc order_user1_rank <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<span class="hljs-variable">@order</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@sel</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    if(<span class="hljs-variable">@order</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;ASC&#x27;</span>)<br>    <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select * from user_1_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; order by rank asc&#x27;</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> if(<span class="hljs-variable">@order</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;DESC&#x27;</span>)<br>    <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select * from user_1_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; order by rank desc&#x27;</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@sel</span>)<br>go<br><br><span class="hljs-keyword">exec</span> order_user1_rank <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-string">&#x27;desc&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--按添加时间排序，方便看今天新添加的</span><br><span class="hljs-keyword">create</span> proc order_user1_date <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<span class="hljs-variable">@order</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@sel</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    if(<span class="hljs-variable">@order</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;ASC&#x27;</span>)<br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select * from user_1_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; order by add_date asc&#x27;</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> if(<span class="hljs-variable">@order</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;DESC&#x27;</span>)<br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select * from user_1_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; order by add_date desc&#x27;</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@sel</span>)<br>go<br><br><span class="hljs-keyword">exec</span> order_user1_date <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-string">&#x27;desc&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--报表：今日掌握的单词</span><br><span class="hljs-keyword">create</span> proc day_learn <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">as</span><br>    update users <span class="hljs-keyword">set</span> user_learn<span class="hljs-operator">=</span>user_learn<span class="hljs-operator">+</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> user_id<span class="hljs-operator">=</span><span class="hljs-variable">@user</span>_id<br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@sel</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select word,symbol,trans from user_2_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; where del_date=convert(date,getdate())&#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@sel</span>)<br>go<br><br><span class="hljs-keyword">exec</span> day_learn <span class="hljs-string">&#x27;1001001001&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--根据已学单词随机生成测试题，每次10词（前提是熟词表中有这么多）</span><br><span class="hljs-comment">--底层实现为随机从熟词表中select10个单词，前端可以选择不显示单词或者释义之类的</span><br><span class="hljs-keyword">create</span> proc user_en_test <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@sel</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select top 10 word,symbol,trans from user_2_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><br>             <span class="hljs-string">&#x27; order by newid()&#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@sel</span>)<br>go<br><br><span class="hljs-keyword">exec</span> user_en_test  <span class="hljs-string">&#x27;1001001001&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--随机名言，用于各种界面</span><br><span class="hljs-keyword">create</span> proc day_motto <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> sentence,trans <span class="hljs-keyword">from</span> motto <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> newid()<br>go<br><br><span class="hljs-keyword">exec</span> day_motto<br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--图片&amp;音频导入</span><br>update en_list <span class="hljs-keyword">set</span> img<span class="hljs-operator">=</span>BulkColumn <span class="hljs-keyword">from</span> openrowset(bulk N<span class="hljs-string">&#x27;D:\#DownLoad\2.2\数据库\img\cat.png&#x27;</span>,single_blob) <span class="hljs-keyword">as</span> <span class="hljs-type">blob</span><br><span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-string">&#x27;cat&#x27;</span><br>update en_list <span class="hljs-keyword">set</span> img<span class="hljs-operator">=</span>BulkColumn <span class="hljs-keyword">from</span> openrowset(bulk N<span class="hljs-string">&#x27;D:\#DownLoad\2.2\数据库\img\dog.png&#x27;</span>,single_blob) <span class="hljs-keyword">as</span> <span class="hljs-type">blob</span><br><span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-string">&#x27;dog&#x27;</span><br>update en_list <span class="hljs-keyword">set</span> img<span class="hljs-operator">=</span>BulkColumn <span class="hljs-keyword">from</span> openrowset(bulk N<span class="hljs-string">&#x27;D:\#DownLoad\2.2\数据库\img\amphibian.png&#x27;</span>,single_blob) <span class="hljs-keyword">as</span> <span class="hljs-type">blob</span><br><span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-string">&#x27;amphibian&#x27;</span><br>update en_list <span class="hljs-keyword">set</span> img<span class="hljs-operator">=</span>BulkColumn <span class="hljs-keyword">from</span> openrowset(bulk N<span class="hljs-string">&#x27;D:\#DownLoad\2.2\数据库\img\aback.png&#x27;</span>,single_blob) <span class="hljs-keyword">as</span> <span class="hljs-type">blob</span><br><span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-string">&#x27;aback&#x27;</span><br><span class="hljs-keyword">exec</span> EN_search <span class="hljs-string">&#x27;amphibian&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br>update en_list <span class="hljs-keyword">set</span> vocal<span class="hljs-operator">=</span>BulkColumn <span class="hljs-keyword">from</span> openrowset(bulk N<span class="hljs-string">&#x27;D:\#DownLoad\2.2\数据库\vocal\aback.mp3&#x27;</span>,single_blob) <span class="hljs-keyword">as</span> <span class="hljs-type">blob</span><br><span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-string">&#x27;aback&#x27;</span><br>update en_list <span class="hljs-keyword">set</span> vocal<span class="hljs-operator">=</span>BulkColumn <span class="hljs-keyword">from</span> openrowset(bulk N<span class="hljs-string">&#x27;D:\#DownLoad\2.2\数据库\vocal\cat.mp3&#x27;</span>,single_blob) <span class="hljs-keyword">as</span> <span class="hljs-type">blob</span><br><span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-string">&#x27;cat&#x27;</span><br>update en_list <span class="hljs-keyword">set</span> vocal<span class="hljs-operator">=</span>BulkColumn <span class="hljs-keyword">from</span> openrowset(bulk N<span class="hljs-string">&#x27;D:\#DownLoad\2.2\数据库\vocal\dog.mp3&#x27;</span>,single_blob) <span class="hljs-keyword">as</span> <span class="hljs-type">blob</span><br><span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-string">&#x27;dog&#x27;</span><br>update en_list <span class="hljs-keyword">set</span> vocal<span class="hljs-operator">=</span>BulkColumn <span class="hljs-keyword">from</span> openrowset(bulk N<span class="hljs-string">&#x27;D:\#DownLoad\2.2\数据库\vocal\amphibian.mp3&#x27;</span>,single_blob) <span class="hljs-keyword">as</span> <span class="hljs-type">blob</span><br><span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-string">&#x27;amphibian&#x27;</span><br><span class="hljs-keyword">exec</span> EN_search <span class="hljs-string">&#x27;dog&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><br></code></pre></td></tr></table></figure><h3 id="新增："><a href="#新增：" class="headerlink" title="新增："></a>新增：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询前多少个单词</span><br><span class="hljs-keyword">create</span> proc order_en_list <span class="hljs-variable">@top</span> <span class="hljs-type">int</span> <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@sel</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select top &#x27;</span><span class="hljs-operator">+</span><span class="hljs-keyword">convert</span>(<span class="hljs-type">varchar</span>,<span class="hljs-variable">@top</span>)<span class="hljs-operator">+</span><span class="hljs-string">&#x27; * from en_list&#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@sel</span>)<br><br><span class="hljs-comment">--熟词表按照日期倒序显示</span><br><span class="hljs-keyword">create</span> proc order_user2_date <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@sel</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select * from user_2_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; order by del_date desc &#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@sel</span>)<br><br><span class="hljs-keyword">exec</span> order_user2_date <span class="hljs-string">&#x27;1001001001&#x27;</span><br><br><span class="hljs-comment">--熟词表移回生词表</span><br><span class="hljs-keyword">create</span> proc rank_re <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<span class="hljs-variable">@word</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@update</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@update</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;update user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; set rank=0,del_date=null where word=&#x27;&#x27;&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@word</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@update</span>)<br><br><span class="hljs-keyword">exec</span> rank_re <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="2-web"><a href="#2-web" class="headerlink" title="2.web"></a>2.web</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h2><ul><li><p>inStream parameter is null</p><p>druid.properties要复制两份放在resources和target/classes两个目录下</p></li><li><p>5月 07, 2022 3:30:50 下午 com.alibaba.druid.support.logging.JakartaCommonsLoggingImpl error<br>严重: testWhileIdle is true, validationQuery not set</p><p>5月 07, 2022 3:30:51 下午 com.alibaba.druid.support.logging.JakartaCommonsLoggingImpl info<br>信息: {dataSource-1} inited</p><p><a href="https://blog.csdn.net/qq_45954145/article/details/111073583">https://blog.csdn.net/qq_45954145/article/details/111073583</a></p></li><li><p> BeanUtils.populate(loginuser,map);</p></li></ul><p>  使用时前端的name要和后端user类对象名一样，否则调试时卡死</p><ul><li><p>实例化Servlet类异常</p><p>我真服了，真的，我改了一下包名（就是开头S统一成小写s结果找不到这个类。。。）</p></li><li><p>找不到jstl包</p><p>下载<code>jakarta-taglibs-standard-1.1.0</code>版本，将lib目录中两个jar都丢到项目lib目录</p></li><li><p>input找不到属性，属性值为空</p><p>不要设置input标签为disabled，设置为readonly就好</p></li></ul><h2 id="2-web代码-复制用"><a href="#2-web代码-复制用" class="headerlink" title="2.web代码(复制用)"></a>2.web代码(复制用)</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span> %&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span>%&gt;<br><br>&lt;%@ include file=<span class="hljs-string">&quot;bootstrap.jsp&quot;</span>%&gt;<br>&lt;title&gt;Login -EN Learning Assistant-&lt;/title&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;js/jquery.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;&lt;/script&gt;<br><br><br>&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;not empty user&#125;&quot;</span>&gt;&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;user_nav.jsp&quot;</span>%&gt;&lt;/c:<span class="hljs-keyword">if</span>&gt;<br>&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;not empty admin&#125;&quot;</span>&gt;&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;admin_nav.jsp&quot;</span>%&gt;&lt;/c:<span class="hljs-keyword">if</span>&gt;<br>&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;empty user &amp;&amp; not empty admin&#125;&quot;</span>&gt;&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;nav.jsp&quot;</span>%&gt;&lt;/c:<span class="hljs-keyword">if</span>&gt;<br><br><br>&lt;%@ include file=<span class="hljs-string">&quot;copyright.jsp&quot;</span>%&gt;<br></code></pre></td></tr></table></figure><h1 id="3-进度统计"><a href="#3-进度统计" class="headerlink" title="3.进度统计"></a>3.进度统计</h1><p>目前没做的功能：</p><ol><li><p>lib&amp;用户表的分页(lib完成，用户表不想做了)</p></li><li><p>点开始之后(完成)</p></li><li><p>查询功能(终于写对了)(导航栏的也写好了)</p></li><li><p>注册(什么校验都没有版（好看版）)</p></li><li><p>用户表里边一堆小按钮(完成)</p></li><li><p>打卡(完成，可能有一些bug)</p></li><li><p>单词测试（没做表单校验）</p></li><li><p>单词表的vocal和img(实际试了，估计是不支持动态的路径吧，不行)(？！行了好耶，用了百词斩的一些图)</p><p>突然想到办法去做这个，改成string类型存路径。输出之后放在img标签的src里就OK了；再简化一点甚至不用改底层，图片只要叫words.word.jpg就ok，好诶</p></li></ol><p>完善&amp;优化：</p><ol start="2"><li>打卡界面优化，打卡后的操作（完成）</li><li>单词测试（完成，但是校验写的比较简单）</li><li>单词的vocal</li><li>数据库备份咋整（哇哦）</li><li>我超你管理员还一点没写吧（蠕动）<ol><li>哼哼啊啊啊啊啊登录（ok）</li><li>个人信息（ok）</li><li>登出（ok）</li><li>单词修改（ok）</li><li>单词删除（ok）</li><li>单词添加（ok）</li><li>用户查看（ok）</li><li>用户修改（ko）</li><li>用户注销（ko）</li></ol></li><li>bug：用户从lib选取单词的时候没有校验？(好了)</li><li>motto的随机</li></ol><p>bug：</p><ol><li>管理员信息没做返回键</li><li>单词测试没有返回</li><li><img src="/2022/04/21/tnndsql/image-20220531094926485.png" class="" title="image-20220531094926485">怎么会是呢</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;夏日重现的ed是真的耐听(然而播放器还是失效了，悲)&lt;/p&gt;
&lt;div class=&quot;aplayer-box&quot; data-url=&#39;https://sterne012.github.io/pubilc/music/cadode - 回夏.mp3&#39; data-name=&#39;回夏</summary>
      
    
    
    
    
    <category term="sql" scheme="https://github.com/sterne012/sterne012.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>并行化编程练习</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/04/16/HPC/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/04/16/HPC/</id>
    <published>2022-04-16T03:41:52.000Z</published>
    <updated>2022-05-13T08:59:31.446Z</updated>
    
    <content type="html"><![CDATA[<p>HPC-高性能计算</p><p>说起高性能当然是atri了！</p><img src="/2022/04/16/HPC/image-20220416114456837.png" class="" title="image-20220416114456837"><img src="/2022/04/16/HPC/image-20220416114511405.png" class="" title="image-20220416114511405">robo真是太屑了（<p>不过真的好多刀，建议不玩呜呜</p><p>不扯了，正经点</p><p>由于学校server里的c版本比较低，所以大部分是用c语言写的</p><h1 id="mpi"><a href="#mpi" class="headerlink" title="mpi"></a>mpi</h1><p>这部分打到服务器上去了。。找时间把他们下回来qwq</p><h1 id="openmp"><a href="#openmp" class="headerlink" title="openmp"></a>openmp</h1><h2 id="常用编译指导语句"><a href="#常用编译指导语句" class="headerlink" title="常用编译指导语句"></a>常用编译指导语句</h2><ol><li><h3 id="并行域结构"><a href="#并行域结构" class="headerlink" title="并行域结构"></a>并行域结构</h3></li></ol><p>  parallel语句：创建线程组并行执行程序</p><ol start="2"><li><h3 id="共享任务结构"><a href="#共享任务结构" class="headerlink" title="共享任务结构"></a>共享任务结构</h3></li></ol><p>  for循环语句：将for循环分配给各线程并行执行</p><p>  sections语句：非迭代共享任务结构，将任务分配给各线程</p><p>  single语句：将代码段交由1个线程执行</p><ol start="3"><li><h3 id="同步与临界区"><a href="#同步与临界区" class="headerlink" title="同步与临界区"></a>同步与临界区</h3></li></ol><p>  barrier语句：实现线程组中所有线程同步</p><p>  ordered语句：位于循环内，按序串行执行</p><p>  critical语句：同一时刻只能有一个线程执行</p><p>  atomic语句：指定的存储单元被原子地更新</p><p>  master语句：代码段由主线程执行，其他线程忽略</p><p>•OpenMP程序在同一个共享内存空间上执行</p><p>•可以任意使用这个共享内存空间上的变量进行线程间的数据传递</p><p>•内存分布结构如图</p><p>•每一个线程的栈空间都是私有的</p><p>•全局变量以及程序代码都是全局共享</p><p>•动态分配的堆空间也是共享的</p><p>•通过threadprivate指出的数据结构在每一个线程中都会有一个副本 </p><p>•shared定义变量作用域是共享的</p><p>•private定义变量作用域是私有的 </p><img src="/2022/04/16/HPC/image-20220416115344365.png" class="" title="image-20220416115344365"><h2 id="1-hello-world并行化高性能版"><a href="#1-hello-world并行化高性能版" class="headerlink" title="1 hello world并行化高性能版"></a>1 hello world并行化高性能版</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel</span><br>   &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world\n&quot;</span>);<br>   &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-高性能算pi"><a href="#2-高性能算pi" class="headerlink" title="2 高性能算pi"></a>2 高性能算pi</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NUM_THREADS 16</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> num_steps=<span class="hljs-number">1000000000</span>;<br>    <span class="hljs-keyword">double</span> step;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">double</span> x,pi,sum=<span class="hljs-number">0.0</span>;<br>    step=<span class="hljs-number">1.0</span>/(<span class="hljs-keyword">double</span>) num_steps;<br>    omp_set_num_threads(NUM_THREADS);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for reduction(+:sum) private(x)</span><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;num_steps;i++)<br>&#123;<br>    x=(i+<span class="hljs-number">0.5</span>)*step;<br>    sum+=<span class="hljs-number">4.0</span>/(<span class="hljs-number">1.0</span>+x*x);<br>&#125;<br>    pi=step*sum;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Pi=%21.20f(%ld steps)\n&quot;</span>,pi,num_steps);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-私有变量的初始化和终结"><a href="#3-私有变量的初始化和终结" class="headerlink" title="3 私有变量的初始化和终结"></a>3 私有变量的初始化和终结</h2><p>private子句用于将一个或多个变量声明成线程私有的变量，变量声明成私有变量后，指定每个线程都有它自己的变量私有副本，其他线程无法访问私有副本。即使在并行区域外有同名的共享变量，共享变量在并行区域内不起任何作用，并且并行区域内不会操作到外面的共享变量。</p><p>private声明的私有变量不能继承同名变量的值，但实际情况中有时需要继承原有共享变量的值，OpenMP提供了firstprivate子句来实现这个功能。若上述程序使用firstprivate(k)，则并行区域内的私有变量k继承了外面共享变量k的值100作为初始值，并且在退出并行区域后，共享变量k的值保持为100未变。</p><p>有时在并行区域内的私有变量的值经过计算后，在退出并行区域时，需要将它的值赋给同名的共享变量，前面的private和firstprivate子句在退出并行区域时都没有将私有变量的最后取值赋给对应的共享变量，lastprivate子句就是用来实现在退出并行区域时将私有变量的值赋给共享变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> val=<span class="hljs-number">8</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for firstprivate(val) lastprivate(val)</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">2</span>;i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i=%d val=%d\n&quot;</span>,i,val);<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)<br>        val=<span class="hljs-number">10000</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i=%d val=%d\n&quot;</span>,i,val);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;val=%d\n&quot;</span>,val);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-循环嵌套"><a href="#4-循环嵌套" class="headerlink" title="4 循环嵌套"></a>4 循环嵌套</h2><p>在一个循环体内包涵另一个循环体，循环体产生嵌套</p><p>循环并行化编译指导语句可以加在任一循环之前，对应的最近的循环语句被并行化，其它部分不变</p><p>并行化作用于嵌套循环中的某一个循环，其他部分由执行到的线程负责执行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">30</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-keyword">int</span> i,j;<br>    <span class="hljs-keyword">int</span> a[maxn][maxn];<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;maxn;i++)&#123;<br>        a[<span class="hljs-number">0</span>][i]=<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;maxn; i++) &#123;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for</span><br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; maxn; j++) &#123;<br>            a[i][j] = <span class="hljs-number">2</span> * a[i - <span class="hljs-number">1</span>][j];<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a[%d][%d] = %d\n&quot;</span>, i, j, a[i][j]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>下面这个是并行化i的，但是运行时出现了一些问题？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">30</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-keyword">int</span> i,j;<br>    <span class="hljs-keyword">int</span> a[maxn][maxn];<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;maxn;i++)&#123;<br>        a[<span class="hljs-number">0</span>][i]=<span class="hljs-number">1</span>;<br>    &#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;maxn; i++) &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; maxn; j++) &#123;<br>            a[i][j] = <span class="hljs-number">2</span> * a[i - <span class="hljs-number">1</span>][j];<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a[%d][%d] = %d\n&quot;</span>, i, j, a[i][j]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-循环调度策略"><a href="#5-循环调度策略" class="headerlink" title="5 循环调度策略"></a>5 循环调度策略</h2><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>循环变量区域分为n等份，每个线程平分n份任务</p><p>适用：各个cpu性能差距不大</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">30</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for schedule(static, 2)</span><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;thread id = %d  value = %d\n&quot;</span>,omp_get_thread_num(),i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="dynamic"><a href="#dynamic" class="headerlink" title="dynamic"></a>dynamic</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">30</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for schedule(dynamic, 2)</span><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;thread id = %d  value = %d\n&quot;</span>,omp_get_thread_num(),i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="guided"><a href="#guided" class="headerlink" title="guided"></a>guided</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">30</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for schedule(guided, 80)</span><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">800</span>; ++i)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;thread id = %d  value = %d\n&quot;</span>,omp_get_thread_num(),i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>两个cpu，那么任务分配如下：</p><p>•第一个任务： [800/(2*2)] = 200</p><p>•第二个任务：第一个任务分了200，还有600，那么[600/(2*2)] = 150</p><p>•第三个任务：第二个任务分了150，还有450，那么[450/2*2)] = 113</p><p>•第四个人任务：第三个任务分了113，还有337，那么[337/(2*2)] = 85</p><p>•第五个任务：第四个任务分了85，还有252，那么[252/(2*2)] = 63, 小于声明的80，那么这里为80</p><p>•第六个任务：第五个任务分了80，还有172，根据声明，这里为80（因为会小于80）</p><p>•第七个任务：第六个任务分了80，还有92，根据声明，这里为80（因为会小于80）</p><p>•第八个任务：第七个任务分了80，还有12，根据声明，这里为12（因为不够80）</p><h3 id="runtime"><a href="#runtime" class="headerlink" title="runtime"></a>runtime</h3><p>schedule(runtime)</p><h2 id="6-规约reduction"><a href="#6-规约reduction" class="headerlink" title="6 规约reduction"></a>6 规约reduction</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">30</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> i;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for num_threads(10) private(i)</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">101</span>;i++)<br>        a=a+i;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a1=%d\n&quot;</span>,a);<br>    a=<span class="hljs-number">0</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for num_threads(10) private(i) reduction(+:a)</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">101</span>;i++)<br>        a=a+i;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a2=%d\n&quot;</span>,a);<br>    a=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">101</span>;i++)<br>        a=a+i;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a3=%d\n&quot;</span>,a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-section"><a href="#7-section" class="headerlink" title="7 section"></a>7 section</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">30</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a,b,c;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel sections</span><br>&#123;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp section</span><br>    a = <span class="hljs-number">1</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp section</span><br>    b = <span class="hljs-number">2</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp section</span><br>    c = <span class="hljs-number">3</span>;<br><br>&#125;<br>    <span class="hljs-keyword">int</span> d=a+b+c;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;d = %d&quot;</span>,d);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-互斥锁"><a href="#8-互斥锁" class="headerlink" title="8 互斥锁"></a>8 互斥锁</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;HPC-高性能计算&lt;/p&gt;
&lt;p&gt;说起高性能当然是atri了！&lt;/p&gt;
&lt;img src=&quot;/2022/04/16/HPC/image-20220416114456837.png&quot; class=&quot;&quot; title=&quot;image-20220416114456837&quot;&gt;&lt;img </summary>
      
    
    
    
    
    <category term="c" scheme="https://github.com/sterne012/sterne012.github.io/tags/c/"/>
    
    <category term="HPC" scheme="https://github.com/sterne012/sterne012.github.io/tags/HPC/"/>
    
  </entry>
  
  <entry>
    <title>常用网站整理</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/04/15/web/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/04/15/web/</id>
    <published>2022-04-15T13:49:55.000Z</published>
    <updated>2022-05-13T09:00:43.447Z</updated>
    
    <content type="html"><![CDATA[<p>凯尔希在看着你.jpg（图片与内容无关，只是开服到现在终于满了，留个纪念） </p><h1 id="啥都有"><a href="#啥都有" class="headerlink" title="啥都有"></a>啥都有</h1><h4 id="Gayhub-https-github-com-sterne012"><a href="#Gayhub-https-github-com-sterne012" class="headerlink" title="Gayhub https://github.com/sterne012"></a>Gayhub <a href="https://github.com/sterne012">https://github.com/sterne012</a></h4><h4 id="GPUserver-http-219-231-164-76"><a href="#GPUserver-http-219-231-164-76" class="headerlink" title="GPUserver http://219.231.164.76/"></a>GPUserver <a href="http://219.231.164.76/">http://219.231.164.76/</a></h4><p>学校里的gpu服务器，主要是python&amp;jupyter，深度学习可用</p><h4 id="Twitter-https-twitter-com-home"><a href="#Twitter-https-twitter-com-home" class="headerlink" title="Twitter https://twitter.com/home"></a>Twitter <a href="https://twitter.com/home">https://twitter.com/home</a></h4><p><del>来一次紧张刺激的壁外调查吧</del></p><h4 id="Arcaea查分器-https-redive-estertion-win-arcaea-probe"><a href="#Arcaea查分器-https-redive-estertion-win-arcaea-probe" class="headerlink" title="Arcaea查分器 https://redive.estertion.win/arcaea/probe/"></a>Arcaea查分器 <a href="https://redive.estertion.win/arcaea/probe/">https://redive.estertion.win/arcaea/probe/</a></h4><p><del>ptt-0.01</del></p><h4 id="pytorch-https-pytorch-apachecn-org"><a href="#pytorch-https-pytorch-apachecn-org" class="headerlink" title="pytorch https://pytorch.apachecn.org/#/"></a>pytorch <a href="https://pytorch.apachecn.org/#/">https://pytorch.apachecn.org/#/</a></h4><h1 id="OJ"><a href="#OJ" class="headerlink" title="OJ"></a>OJ</h1><h4 id="PTA-https-pintia-cn"><a href="#PTA-https-pintia-cn" class="headerlink" title="PTA https://pintia.cn/"></a>PTA <a href="https://pintia.cn/">https://pintia.cn/</a></h4><h4 id="vj-https-vjudge-net"><a href="#vj-https-vjudge-net" class="headerlink" title="vj https://vjudge.net/"></a>vj <a href="https://vjudge.net/">https://vjudge.net/</a></h4><h4 id="CF-https-codeforces-com"><a href="#CF-https-codeforces-com" class="headerlink" title="CF https://codeforces.com/"></a>CF <a href="https://codeforces.com/">https://codeforces.com/</a></h4><h4 id="洛谷-https-www-luogu-com-cn"><a href="#洛谷-https-www-luogu-com-cn" class="headerlink" title="洛谷 https://www.luogu.com.cn/"></a>洛谷 <a href="https://www.luogu.com.cn/">https://www.luogu.com.cn/</a></h4><h1 id="SRTP相关"><a href="#SRTP相关" class="headerlink" title="SRTP相关"></a>SRTP相关</h1><h4 id="NASA-ADS-https-ui-adsabs-harvard-edu"><a href="#NASA-ADS-https-ui-adsabs-harvard-edu" class="headerlink" title="NASA/ADS https://ui.adsabs.harvard.edu/"></a>NASA/ADS <a href="https://ui.adsabs.harvard.edu/">https://ui.adsabs.harvard.edu/</a></h4><h4 id="ARXIV-https-arxiv-org"><a href="#ARXIV-https-arxiv-org" class="headerlink" title="ARXIV https://arxiv.org/"></a>ARXIV <a href="https://arxiv.org/">https://arxiv.org/</a></h4><h4 id="巡天-数据源-https-archive-stsci-edu"><a href="#巡天-数据源-https-archive-stsci-edu" class="headerlink" title="巡天/数据源 https://archive.stsci.edu/"></a>巡天/数据源 <a href="https://archive.stsci.edu/">https://archive.stsci.edu/</a></h4><h4 id="SDSS-https-www-sdss-org"><a href="#SDSS-https-www-sdss-org" class="headerlink" title="SDSS https://www.sdss.org/"></a>SDSS <a href="https://www.sdss.org/">https://www.sdss.org/</a></h4><h4 id="变星分类-http-sunguoyou-lamost-org-bxfl-html"><a href="#变星分类-http-sunguoyou-lamost-org-bxfl-html" class="headerlink" title="变星分类 http://sunguoyou.lamost.org/bxfl.html"></a>变星分类 <a href="http://sunguoyou.lamost.org/bxfl.html">http://sunguoyou.lamost.org/bxfl.html</a></h4><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><h4 id="Bootstrap-https-www-bootcss-com"><a href="#Bootstrap-https-www-bootcss-com" class="headerlink" title="Bootstrap https://www.bootcss.com/"></a>Bootstrap <a href="https://www.bootcss.com/">https://www.bootcss.com/</a></h4><h4 id="live2d-https-www-fghrsh-net-post-123-html"><a href="#live2d-https-www-fghrsh-net-post-123-html" class="headerlink" title="live2d https://www.fghrsh.net/post/123.html"></a>live2d <a href="https://www.fghrsh.net/post/123.html">https://www.fghrsh.net/post/123.html</a></h4><h1 id="bot"><a href="#bot" class="headerlink" title="bot"></a>bot</h1><p>但总体而言都没研究懂</p><h4 id="nonebot-https-v2-nonebot-dev"><a href="#nonebot-https-v2-nonebot-dev" class="headerlink" title="nonebot https://v2.nonebot.dev/"></a>nonebot <a href="https://v2.nonebot.dev/">https://v2.nonebot.dev/</a></h4><h4 id="go-cqhttp-https-docs-go-cqhttp-org"><a href="#go-cqhttp-https-docs-go-cqhttp-org" class="headerlink" title="go-cqhttp https://docs.go-cqhttp.org/"></a>go-cqhttp <a href="https://docs.go-cqhttp.org/">https://docs.go-cqhttp.org/</a></h4>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;凯尔希在看着你.jpg（图片与内容无关，只是开服到现在终于满了，留个纪念） &lt;/p&gt;
&lt;h1 id=&quot;啥都有&quot;&gt;&lt;a href=&quot;#啥都有&quot; class=&quot;headerlink&quot; title=&quot;啥都有&quot;&gt;&lt;/a&gt;啥都有&lt;/h1&gt;&lt;h4 id=&quot;Gayhub-https-gi</summary>
      
    
    
    
    <category term="帮助文档" scheme="https://github.com/sterne012/sterne012.github.io/categories/%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>SRTP-时域变源证认与分类的机器学习研究</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/04/15/SRTP/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/04/15/SRTP/</id>
    <published>2022-04-15T13:38:46.000Z</published>
    <updated>2022-05-13T09:00:24.141Z</updated>
    
    <content type="html"><![CDATA[<p>纯干货（）这就是立项原文，仅供参考，严禁原文再次发表或使用</p><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p>时域天文学主要研究天体的各种性质如何随时间变化，这可能是由于天体本征性质发生改变，也可能源自其运动。分属时域天文领域的变星是光度随时间（周期）变化的恒星，其作为天体物理学中的重要研究对象，可应用于银河系和附近星系的结构和运动学示踪，星系化学演化示踪，研究恒星可变性也有助于我们理解恒星本身的演化和物理特性等，是许多领域的主要科学驱动力。随着科技进步，观测手段不断改进，在海量天体观测数据中对变源进行证认，仅凭目视分类法在时间和人力上都难以实现。藉由计算机领域的机器学习方法，对变星及其它变源（如系外行星凌星、活动星系核AGN等）进行特征提取并分类，是时域天文学前沿领域的重要课题，也是本项目的主要研究方向。本项目研究成果可应用于当前及未来时域巡天观测项目（如司天等）。</p><h2 id="研究综述"><a href="#研究综述" class="headerlink" title="研究综述"></a>研究综述</h2><p>至少归纳总结5个同类课题的研究观点/结论</p><ol><li><p>光变曲线特征提取</p><p>提取变星周期使用的方法为周期图，其核心思想为傅里叶变换，该方法同样适用于恒星星震信号、恒星自转信号的搜索。傅立叶变换是一种线性的积分变换，常用 来对信号进行时域到频域的处理，对光变数据的傅立叶分析就是一个从时域到频域的 变换．我们使用Lom-Scargle(L-S)周期图和Box Least Squares(BLS)周期图法，其中L-S周期图(Lomb-Scargle)算法能很好地检测和提 取不均匀采样时域中的周期性，并且在不同学科的时序分析中得到了广泛的应用，它允许对不均匀采样的数据进行傅里叶变换，从而可以直观地表征光变周期.在L-S算法中， 只有时间序列中t时刻为实测值时才对光变数据进行处理，如果序列yi(ti)由N个数据点构成，将角频率w&gt;0位变量的L-S周期频谱用Px来表示，则根据Lomb和Scargle的工作，可以按下式对Px进行计算：</p><img src="/2022/04/15/SRTP/image-20220419200514604.png" class="" title="image-20220419200514604"><p>另一种方法是BLS周期图，当凌星过程占行星轨道周期的比例较小时，BLS周期图 更加精确，对较长周期行星凌星使用BLS周期图法，利用该方法相较于L-S周期图可以找到更准确的信号峰值。（唐延柯、盖宁et al,2021,TESS空间卫星单扇区变星的周期性研究）</p></li><li><p>K-Means聚类方法属于迭代算法，根据分类个数随机生成相应个数的聚类中心，然后进入内循环，不断重复簇分配和移动聚类中心两个步骤，原则上靠近哪个聚类中心就被分为哪一类，可以用颜色区分标记，再移动聚类中心置属于该聚类中心的特征类的均值中心，簇分配和移动聚类中心的过程就是在不断地最小化代价函数。(Zafiirah Hosenie,Robert Lyon, Benjamin Stappers, Arrykrishna Mootoovaloo, 2019, Comparing Multi-class, Binary and Hierarchical Machine Learning Classification schemes for variable stars)</p></li><li><p>主成分分析方法（PCA）主要是通过数据压缩，或者说降维的方法来加速学习过程，通过数据可视化、均值归一化和特征规范化的方法使得均值为0，且数值在可比较的范围内，就此寻找低维平面，将数据投影使得数据到平面的距离的平方（投影误差）最短；独立成分分析方法（ICA）同样用于降维，但相较于PCA多了独立性。在不同样本重叠的时候，ICA的特征分离效果更显著，效率更高。(Suman Paul, Tanuka Chattopadhyay, 2022, Structural properties and classification of variable stars: A study through unsupervised machine learning techniques)</p></li><li><p>SOM算法将一个N维的数据集（由N个估计值或参数组成）还原成一个由mxn个单元组成的二维网格。这使得SOM成为可视化高维数据集中相关关系的有力工具。SOM优势在于，它不仅能够稳健地识别给定AGN数据集中的可变光曲线，而且也是研究多维空间中物理参数之间相关性的工具–例如AGN可变性与其宿主星系属性之间的联系。(Faisst et al, 2019, How to Find Variable Active Galactic Nuclei with Machine Learning)</p></li><li><p>关于 SOM 的训练，其输入参数有两个，分别是影响 Kohonen 层中像素调整速率的初始学习率$\alpha_0$和影响组大小的初始学习半径$\sigma_0$。对于一系列迭代，将每个输入的相位曲线与 Kohonen 层进行比较，并最小化像素元素和相位曲线之间的差异，找到层中的最佳匹配像素，然后按照以下表达式（Kohonen 层为二维的情况）更新每个像素：</p><img src="/2022/04/15/SRTP/image-20220420152120449.png" class="" title="image-20220420152120449"><p>其中：</p><ul><li>$m_{xy,k,new}$是相位曲线中元素$k$、坐标$x,y$处的像素值。</li><li>$d_{xy}$是该层中这个像素与最佳匹配像素的欧几里得距离。</li><li>$s_k$是所考虑的相位曲线的第$k$个元素。</li></ul><p>&emsp;&emsp;对每个相位曲线执行该操作后，$\alpha$和$\sigma$将按照以下公式更新：</p><img src="/2022/04/15/SRTP/image-20220420152137880.png" class="" title="image-20220420152137880"><p>其中：</p><ul><li>i 是当前迭代轮数。</li><li>r 是 Kohonen 层最大维度的大小。</li><li>$n_{iter}$是进行迭代的次数。</li></ul></li><li><p>Repeating this project with a dataset that is larger, more balanced between categories, and has a lower proportion of edge cases, is recommended.（T. N. Stenborg，2020，Machine Learning Classification of Candidate Variable Stars in Python）</p></li><li><p>Image classification was automated here via multinomial logistic regression. The six classes used were: pulsator, rotator, EA/EB type, EW type, unknown and junk. （T. N. Stenborg，2020，Machine Learning Classification of Candidate Variable Stars in Python）</p></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>Zafiirah Hosenie,Robert Lyon, Benjamin Stappers, Arrykrishna Mootoovaloo, 2019, Comparing Multi-class, Binary and Hierarchical Machine Learning Classification schemes for variable stars</li><li>Suman Paul, Tanuka Chattopadhyay, 2022, Structural properties and classification of variable stars: A study through unsupervised machine learning techniques</li><li>Xiaodian Chen1 , Shu Wang et al. 2020, The Zwicky Transient Facility Catalog of Periodic Variable Stars</li><li>T. N. Stenborg, 2020, Machine Learning Classification of Candidate Variable Stars in Python</li><li>Andreas L. Faisst, Abhishek Prakash, Peter L. Capak, and Bomee Lee, 2019, How to Find Variable Active Galactic Nuclei with Machine Learning</li><li>Joseph W. Richards, Dan L. Starr et al. 2011, ON MACHINE-LEARNED CLASSIFICATION OF VARIABLE STARS WITH SPARSE AND NOISY TIME-SERIES DATA</li><li>D. J. Armstrong, J. Kirk, K. W. F. Lam et al. 2016, K2 variable catalogue – II. Machine learning classification of variable stars and eclipsing binaries in K2 fields 0–4</li><li>Ilya N. Pashchenko, Kirill V. Sokolovsky, and Panagiotis Gavras, 2017, Machine learning search for variable stars</li><li>Jan van Roestel, Dmitry A. Duev, Ashish A. Mahabal et al. 2021, The ZTF Source Classification Project. I. Methods and Infrastructure</li><li>唐延柯,盖宁 et al. 2021, TESS空间卫星单扇区变星的周期性研究</li><li>王瑞, 2021, 深度学习在LAMOST光谱恒星参数测量中的应用</li></ol><h2 id="研究方案"><a href="#研究方案" class="headerlink" title="研究方案"></a>研究方案</h2><h3 id="研究内容"><a href="#研究内容" class="headerlink" title="研究内容"></a>研究内容</h3><p>本项目计划首先对变星数据进行数据获取和预处理，提取光变曲线主要特征，后使用DNN和SOM两种算法对变星分类，然后根据训练结果和测试结果进行超参数调优和优化器调整，预期得出准确率较高的分类结果。后期计划尝试其他无监督学习算法，与主要的两种算法进行对比；并尝试添加变星除光变曲线之外的其他观测特征进行Meta Learning训练。</p><h3 id="研究方法"><a href="#研究方法" class="headerlink" title="研究方法"></a>研究方法</h3><ol><li>收集整理相关变源时序测光数据，处理分析测光数据，提取数据光变特征信息；</li><li>将获取的测光数据进行分类，处理可能出现的不平衡的数据情况，组成训练集和测试集；</li><li>搭建深度神经网络DNN和自组织映射SOM 算法，对变源进行证认、分类测试；</li><li>分析证认分类效果，优化改进算法，研究相关优化器并对超参数等进行调整，提高算法分类的准确率；</li><li>测试其他相关算法，并与主要的两种算法效果进行对比，得出结论；</li><li>综合以上研究，给出适用于大样本变源自动证认与分类的普适性算法、程序。</li></ol><h3 id="进度安排"><a href="#进度安排" class="headerlink" title="进度安排"></a>进度安排</h3><p>计划将研究过程分为三个阶段：</p><ol><li>项目前期：学习时域天文学、机器学习相关内容，做好知识储备；获取相关天文观测数据，掌握从光变曲线中分析提取特征、消除噪声的方法，并进行数据集的初步处理；查阅相关文献，学习文章所涉及ML分类算法，进行迁移应用；</li><li>项目中期：确定训练集和测试集，并对可能存在数据不平衡情况进行处理；结合所学构建ML主体算法，进行超参数调优，优化器调试等，最终得到准确率较高的分类结果；进行其他ML算法的尝试，并与主体算法相对比，比较二者（或多者）的优劣；尝试添加变星除光变曲线之外的其他观测特征进行训练。</li><li>项目后期：完成上述工作后，对所得结果进行分析，并最终以论文的形式阐述研究结果，进行发表。</li></ol><h3 id="重点难点"><a href="#重点难点" class="headerlink" title="重点难点"></a>重点难点</h3><ol><li>不同于常规的机器学习项目，有关时域天文领域的数据具有其自身特点，难以将现有的、发展完备的算法直接应用到相关数据分析当中；</li><li>观测数据量大，难以直接使用原始光变曲线进行分析，可能需要依据变星特征提取重要光变信息作处理；</li><li>天文观测数据易受天气条件限制，同一类数据受不同噪声的影响呈现效果有所不同，易造成分类准确率下降；</li><li>对于某些变星，仅凭借光变曲线这一特征不足以对其进行正确分类，可能需要其他相关数据的配合；</li><li>目前的观测数据中，脉动变星、食变双星的观测数据量较多，而相比之下喷发变星、激变或爆发变星观测数据量较少，易导致数据集产生不平衡的问题，从而可能对分类的精确率和召回率产生影响；</li><li>特殊地，某些变星根据天文学的分类方式可以同时分属两个系统，对此类数据的分析处理存在一定困难。</li></ol><h3 id="创新之处"><a href="#创新之处" class="headerlink" title="创新之处"></a>创新之处</h3><ol><li>天文学传统的目视分类法难以满足目前迅速增长的观测数据量的支持，使用机器学习进行分类能大量减少目前目视证认变星的负担，代替人类完成分类工作；</li><li>机器学习在时域天文学的应用刚刚起步，发展前景广阔，本项目发掘有效的变星分类手段，为时域天文学领域发展做出贡献；</li><li>项目并不局限于一种分类方式，而是有监督、无监督学习均有涉及，通过多种算法的尝试得出最终结论。</li><li>本项目研究成果可应用于当前及未来时域巡天观测项目（如司天等）。</li></ol><h3 id="研究基础"><a href="#研究基础" class="headerlink" title="研究基础"></a>研究基础</h3><p>本项目有关的研究工作积累或相关课程经验积累</p><ol><li>项目成员对天文学有浓厚兴趣，已学习天文学新概论、基础天文学等课程内容，并阅读变星相关文献进行学习；</li><li>目前已有大量变源观测数据可供研究使用，如K2、TESS、ZTF等观测项目；</li><li>机器学习方面计算机专业成员已有相关课程（机器学习、深度学习等）提供理论支持，并拓展课外相关知识，主动学习；</li><li>指导老师认真负责，在天文学领域造诣颇深，为项目组成员提供切实有效课题知识指导。</li></ol><h2 id="指导老师意见"><a href="#指导老师意见" class="headerlink" title="指导老师意见"></a>指导老师意见</h2><p>本项目针对当前天文学与天体物理学研究的热门前沿领域之一的“时域天文学”，利用机器学习、人工智能AI等创新方法手段对变源进行自动证认与分类研究分析，可帮助解决大数据背景下的重要科学问题，也可进一步促进机器学习方法在天文学中应用，加强天文物理与计算机信息技术、数学统计等领域的交叉融合，此外其研究成果可应用于当前及未来时域巡天观测项目（如司天等），具有重要意义。强烈建议项目立项！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;纯干货（）这就是立项原文，仅供参考，严禁原文再次发表或使用&lt;/p&gt;
&lt;h2 id=&quot;项目简介&quot;&gt;&lt;a href=&quot;#项目简介&quot; class=&quot;headerlink&quot; title=&quot;项目简介&quot;&gt;&lt;/a&gt;项目简介&lt;/h2&gt;&lt;p&gt;时域天文学主要研究天体的各种性质如何随时间变化，这</summary>
      
    
    
    
    
    <category term="srtp" scheme="https://github.com/sterne012/sterne012.github.io/tags/srtp/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-优化器对比</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/04/15/deep-optimizer/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/04/15/deep-optimizer/</id>
    <published>2022-04-15T13:28:49.000Z</published>
    <updated>2022-04-15T14:26:31.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SGD"><a href="#SGD" class="headerlink" title="SGD"></a>SGD</h2><p>SGD全称Stochastic Gradient Descent，随机梯度下降，1847年提出。每次选择一个mini-batch，而不是全部样本，使用梯度下降来更新模型参数。它解决了随机小批量样本的问题，但仍然有自适应学习率、容易卡在梯度较小点等问题。</p><p>（lr=0.1  epoch=500  batch=32 sgdm momentum=0.1）下的图像</p><img src="/2022/04/15/deep-optimizer/image-20220415214125579.png" class="" title="image-20220415214125579"><img src="/2022/04/15/deep-optimizer/image-20220415214153593.png" class="" title="image-20220415214153593"><h2 id="SGDM"><a href="#SGDM" class="headerlink" title="SGDM"></a>SGDM</h2><p>在SGD的基础上添加动量参数momentum，相比SGD优势明显，加入动量后，参数更新就可以保持之前更新趋势，而不会卡在当前梯度较小的点了。</p><img src="/2022/04/15/deep-optimizer/image-20220415214311664.png" class="" title="image-20220415214311664"><img src="/2022/04/15/deep-optimizer/image-20220415214331433.png" class="" title="image-20220415214331433"><p>Adagrad</p><p>它利用迭代次数和累积梯度，对学习率进行自动衰减，2011年提出。从而使得刚开始迭代时，学习率较大，可以快速收敛。而后来则逐渐减小，精调参数，使得模型可以稳定找到最优点。</p><p>与SGD的区别在于，学习率除以 前t-1 迭代的梯度的平方和。故称为自适应梯度下降。</p><p>Adagrad有个致命问题，就是没有考虑迭代衰减。极端情况，如果刚开始的梯度特别大，而后面的比较小，则学习率基本不会变化了，也就谈不上自适应学习率了。这个问题在RMSProp中得到了修正。</p><img src="/2022/04/15/deep-optimizer/image-20220415214427346.png" class="" title="image-20220415214427346"><img src="/2022/04/15/deep-optimizer/image-20220415214440459.png" class="" title="image-20220415214440459"><h2 id="RMSprop"><a href="#RMSprop" class="headerlink" title="RMSprop"></a>RMSprop</h2><img src="/2022/04/15/deep-optimizer/image-20220415214511114.png" class="" title="image-20220415214511114"><img src="/2022/04/15/deep-optimizer/image-20220415214526011.png" class="" title="image-20220415214526011"><h2 id="Adam"><a href="#Adam" class="headerlink" title="Adam"></a>Adam</h2><p>Adam是SGDM和RMSProp的结合，它基本解决了之前提到的梯度下降的一系列问题，比如随机小样本、自适应学习率、容易卡在梯度较小点等问题。</p><img src="/2022/04/15/deep-optimizer/image-20220415214544714.png" class="" title="image-20220415214544714"><img src="/2022/04/15/deep-optimizer/image-20220415214557602.png" class="" title="image-20220415214557602"><p>代码运行上没有遇到太多问题，在绘制图像时使用keras.Callback.History()中返回的数值进行绘制，使用的损失函数为交叉熵损失函数，具体图像如下：</p><p>不过感觉epoch=500的情况下训练时间相当长（GPU加速有装，但可能没成功调用？这一块有待研究）</p><p>分析数据，Rmsprop算法一定程度上出现了过拟合的问题，Rmsprop的测试集loss曲线几乎一直在保持上升态势；</p><p>而Adam算法得到的训练效果并不好，准确率仅有约66%，而且测试集的loss相当高。</p><p>总体而言，对于minst数据集，sgd、sgdm、adagrad优化器的优化效果是不错的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-keyword">import</span> tensorflow.keras<br><span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> optimizers<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> os<br><br>os.environ[<span class="hljs-string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="hljs-string">&#x27;2&#x27;</span><br>os.environ[<span class="hljs-string">&quot;KMP_DUPLICATE_LIB_OK&quot;</span>] = <span class="hljs-string">&quot;TRUE&quot;</span><br><br>mnist = tf.keras.datasets.mnist<br>(x_train, y_train), (x_test, y_test) = mnist.load_data()<br><span class="hljs-comment"># (x_train, y_train), (x_test, y_test) = load_data(path=&#x27;mnist.npz&#x27;)</span><br>x_train, x_test = x_train / <span class="hljs-number">255.0</span>, x_test / <span class="hljs-number">255.0</span><br><br>model = tf.keras.models.Sequential([<br>    tf.keras.layers.Flatten(),<br>    tf.keras.layers.Dense(<span class="hljs-number">128</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>    tf.keras.layers.Dense(<span class="hljs-number">10</span>, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>)<br>])<br><br><span class="hljs-comment">#主要通过修改compile中optimizer来尝试各种优化器</span><br>model.<span class="hljs-built_in">compile</span>(optimizer=optimizers.Adam(learning_rate=<span class="hljs-number">0.1</span>),<br>              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="hljs-literal">False</span>),<br>              metrics=[<span class="hljs-string">&#x27;sparse_categorical_accuracy&#x27;</span>])<br>start = datetime.datetime.now()<br>hist = model.fit(x_train, y_train, batch_size=<span class="hljs-number">32</span>, epochs=<span class="hljs-number">500</span>, validation_data=(x_test, y_test), validation_freq=<span class="hljs-number">1</span>)<br>end = datetime.datetime.now()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;time:&#x27;</span>+<span class="hljs-built_in">str</span>(end-start))<br><br>model.summary()<br><br>plt.figure()<br><br>acc = hist.history[<span class="hljs-string">&#x27;sparse_categorical_accuracy&#x27;</span>]<br>val_acc = hist.history[<span class="hljs-string">&#x27;val_sparse_categorical_accuracy&#x27;</span>]<br>loss = hist.history[<span class="hljs-string">&#x27;loss&#x27;</span>]<br>val_loss = hist.history[<span class="hljs-string">&#x27;val_loss&#x27;</span>]<br><br>epochs = <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(loss))<br><br>plt.plot(epochs, acc, label=<span class="hljs-string">&#x27;Training acc&#x27;</span>)  <span class="hljs-comment"># &#x27;bo&#x27;为画蓝色圆点，不连线</span><br>plt.plot(epochs, val_acc, label=<span class="hljs-string">&#x27;Validation acc&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;Training and validation accuracy&#x27;</span>)<br>plt.legend()  <span class="hljs-comment"># 绘制图例，默认在右上角</span><br><br>plt.figure()<br><br>plt.plot(epochs, loss, label=<span class="hljs-string">&#x27;Training loss&#x27;</span>)<br>plt.plot(epochs, val_loss, label=<span class="hljs-string">&#x27;Validation loss&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;Training and validation loss&#x27;</span>)<br>plt.legend()<br><br>plt.show()<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SGD&quot;&gt;&lt;a href=&quot;#SGD&quot; class=&quot;headerlink&quot; title=&quot;SGD&quot;&gt;&lt;/a&gt;SGD&lt;/h2&gt;&lt;p&gt;SGD全称Stochastic Gradient Descent，随机梯度下降，1847年提出。每次选择一个mini-batch，而</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
    <category term="deeplearning" scheme="https://github.com/sterne012/sterne012.github.io/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-手写数字识别</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/03/23/deep-digit-reco/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/03/23/deep-digit-reco/</id>
    <published>2022-03-23T06:46:28.000Z</published>
    <updated>2022-03-23T06:47:34.757Z</updated>
    
    <content type="html"><![CDATA[<p>简单贴一下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> layers, optimizers, datasets, Sequential<br><span class="hljs-keyword">from</span> tensorflow.keras.layers <span class="hljs-keyword">import</span> Dense, Dropout, Activation<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">from</span> tensorflow.python.keras.optimizer_v2.gradient_descent <span class="hljs-keyword">import</span> SGD<br><span class="hljs-keyword">from</span> tensorflow.python.keras.utils <span class="hljs-keyword">import</span> np_utils<br><br>os.environ[<span class="hljs-string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="hljs-string">&#x27;2&#x27;</span><br>os.environ[<span class="hljs-string">&quot;KMP_DUPLICATE_LIB_OK&quot;</span>] = <span class="hljs-string">&quot;TRUE&quot;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_data</span>(<span class="hljs-params">path</span>):</span><br>    f = np.load(path)<br>    x_train, y_train = f[<span class="hljs-string">&#x27;x_train&#x27;</span>], f[<span class="hljs-string">&#x27;y_train&#x27;</span>]<br>    x_test, y_test = f[<span class="hljs-string">&#x27;x_test&#x27;</span>], f[<span class="hljs-string">&#x27;y_test&#x27;</span>]<br>    f.close()<br>    x_train = x_train.reshape(x_train.shape[<span class="hljs-number">0</span>], <span class="hljs-number">28</span> * <span class="hljs-number">28</span>)<br>    x_test = x_test.reshape(x_test.shape[<span class="hljs-number">0</span>], <span class="hljs-number">28</span> * <span class="hljs-number">28</span>)<br>    x_train = x_train.astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>    x_test = x_test.astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>    y_train = np_utils.to_categorical(y_train, <span class="hljs-number">10</span>)<br>    y_test = np_utils.to_categorical(y_test, <span class="hljs-number">10</span>)<br>    x_train = x_train / <span class="hljs-number">255</span><br>    x_test = x_test / <span class="hljs-number">255</span><br>    <span class="hljs-keyword">return</span> (x_train, y_train), (x_test, y_test)<br><br><br>(x_train, y_train), (x_test, y_test) = load_data(path=<span class="hljs-string">&#x27;mnist.npz&#x27;</span>)<br><br><span class="hljs-comment"># 输出少量测试集结果</span><br><span class="hljs-comment"># print(x_train.shape)</span><br><span class="hljs-comment"># print(x_train[0])</span><br><span class="hljs-comment"># print(y_train.shape)</span><br><span class="hljs-comment"># print(y_train[0])</span><br><span class="hljs-comment"># plt.Figure()</span><br><span class="hljs-comment"># for i in range(10):</span><br><span class="hljs-comment">#     im = x_train[i].reshape(28, 28)</span><br><span class="hljs-comment">#     plt.imshow(im, &#x27;gray&#x27;)</span><br><span class="hljs-comment">#     print(y_train[i])</span><br><span class="hljs-comment">#     plt.pause(0.5)</span><br><span class="hljs-comment"># plt.show()</span><br><br>model = Sequential()<br>model.add(Dense(input_dim=<span class="hljs-number">28</span> * <span class="hljs-number">28</span>, units=<span class="hljs-number">500</span>, activation=<span class="hljs-string">&#x27;sigmoid&#x27;</span>))<br>model.add(Dense(units=<span class="hljs-number">500</span>, activation=<span class="hljs-string">&#x27;sigmoid&#x27;</span>))<br>model.add(Dense(units=<span class="hljs-number">500</span>, activation=<span class="hljs-string">&#x27;sigmoid&#x27;</span>))<br>model.add(Dense(units=<span class="hljs-number">10</span>, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>))<br><br>model.<span class="hljs-built_in">compile</span>(loss=<span class="hljs-string">&#x27;categorical_crossentropy&#x27;</span>, optimizer=SGD(lr=<span class="hljs-number">0.1</span>), metrics=[<span class="hljs-string">&#x27;accuracy&#x27;</span>])<br><br>model.fit(x_train, y_train, batch_size=<span class="hljs-number">100</span>, epochs=<span class="hljs-number">20</span>)<br><br>result = model.evaluate(x_test, y_test)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nTest loss:&#x27;</span>, result[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nTest Accuracy:&#x27;</span>, result[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;简单贴一下代码&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
    <category term="deeplearning" scheme="https://github.com/sterne012/sterne012.github.io/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>Arcaea-从零开始的玩蛇生活</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/03/22/Arcaea/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/03/22/Arcaea/</id>
    <published>2022-03-22T08:00:00.000Z</published>
    <updated>2022-05-13T08:57:32.433Z</updated>
    
    <content type="html"><![CDATA[<p>ARCAEA——这是一款促进人类进化的出张模拟器。</p><p><del>暴论：mush是纵连模拟器，lanota倒打模拟器，ADOFAI音押模拟器，arc出张模拟器，phi要素过多</del></p><p>欢迎萌新多多入坑，大佬多多暴打</p><hr><h2 id="2021-6-18-入坑"><a href="#2021-6-18-入坑" class="headerlink" title="2021/6/18 入坑"></a>2021/6/18 入坑</h2><p>第一个fr，同时这首也是先前打phi萌新时期的练手谱</p><img src="/2022/03/22/Arcaea/577F99608F8237EDB8A2A9B2FEF510DA.png" class="" title="img"><hr><h2 id="2021-8-12-10-0"><a href="#2021-8-12-10-0" class="headerlink" title="2021/8/12 10.0"></a>2021/8/12 10.0</h2><p>经过一个考试月+军训的折磨之后终于10.0</p><img src="/2022/03/22/Arcaea/6D9DE46978DB36666E9BD2959D02DEF9.png" class="" title="img"><hr><p>2021/8/30</p><p>第一个p的8</p><img src="/2022/03/22/Arcaea/57C1AF723391D8EC8B1F692676F2B19C.png" class="" title="img"><p>当时的我仍未理解这个游戏到底该怎么玩</p><hr><h2 id="2021-11-24-11-0"><a href="#2021-11-24-11-0" class="headerlink" title="2021/11/24 11.0"></a>2021/11/24 11.0</h2><p>本文原标题：arcaea红框纪念</p><p>所以这里格外长</p><p>不愧是我 </p><img src="/2022/03/22/Arcaea/9A9326969C9F34F7F56C1111D854AD06.jpg" class="" title="img"><img src="/2022/03/22/Arcaea/3E4EACE455AF0B5E2F9D8AE953A4775F.jpg" class="" title="img"><img src="/2022/03/22/Arcaea/8D55AF670FE801E48BF4C3669F03C411.jpg" class="" title="img"><img src="/2022/03/22/Arcaea/image-20211124150310139.png" class="" title="image-20211124150310139"><p>红框时间2021-11-23-16:00左右</p><p>我音游龄算长了，大概小学就在玩，大概从乐动时代（都没什么人听说过的音游）到少量节奏大师、诺亚瓶子、cy2、喵赛克、phigros/musedash、Arcaea的历程，时间跨度还是挺大的，不过arc真的是一上来就让我感觉这个音游挺难，也可能是因为phi打习惯了吧，换手接蛇，按不到键等等…</p><p>不过当初想玩主要是因为phi瓶颈很久了（2.0的rks14.4左右），想玩Arc提提准度，于是六七月份左右开始玩</p><p>这个美术风格真的好棒，Seirra老师很早就有所听闻了，Arc也像cy2一样很有自己的风格。</p><p>然后经历了9-11月的躺平之后我们社团办了个音游挑战赛在结识各路神仙之后就开始尝试红</p><p>挑战赛冠军说他当时红只用了25天，我直接进行亿个您的喊并祝他早日制霸</p><p>最主要还是要靠多练，每天都打打一定有进步这是真的</p><p>再就有个明确的目标吧，比如我就是想红，（然后现在红了又躺平了）于是就比较有动力去推一些难曲</p><p>作为一个4k gamer，也许个人差和二指比较大，毕竟四指主要是靠协调然后弥补那些自己二指底力不够的操作</p><p>还有一个很好用的软件叫音乐游戏训练（界面一看就是机翻hh），ios商店有，安卓不太清楚，可以把自己的录像放进去调倍速拆谱用，图上Vindication有一段3+3+3双押就是拆出来才打会的，但是感觉蛇不太好拆，就纯靠多练吧</p><p>虽然没人问过我但是我调成English纯因为中文页面那个字体太丑了233 英文真的很好康</p><p>phi的近况是比赛的时候收了一个然后直接进决赛了233 不过打了arc之后准度确实有提升，但是底力永远都不是一蹴而就的，还有很多15我都是靠糊</p><p>下一步继续练双押，然后多推一推九级上位曲吧？暂时没有什么目标了，摘星离我还有挺遥远的距离</p><p>突然发现这个还挺有的写（水），可能以后想说点什么还会有吧~诶嘿</p><hr><p>嘿嘿 好看捏（轻微剧透？</p><img src="/2022/03/22/Arcaea/33C28A3BB3C874D387572693CE4FDF38.png" class="" title="img"><img src="/2022/03/22/Arcaea/AC838C3A0A7C8B5ED2B27CA32A33458B.png" class="" title="img"><img src="/2022/03/22/Arcaea/F77ECE19347A6D21F602C9C7A9AED981.png" class="" title="img"><p>arcahv解锁时候忘了调中文然后。。。悲叹自己的英语水平太差了</p><hr><h2 id="2021-12-29-11-4"><a href="#2021-12-29-11-4" class="headerlink" title="2021/12/29 11.4"></a>2021/12/29 11.4</h2><p>学了一天（概率论+课程论文）后的底力爆发之夜11.39-11.43</p><img src="/2022/03/22/Arcaea/F37611351E7CAAAC9D62F84AE01D1FF7.png" class="" title="img"><img src="/2022/03/22/Arcaea/F2D98DD3274ABD548C63E917A74526C6.png" class="" title="img"><p>我的评价是，ej交互难个球，难的是天地散打（</p><p>后将vt推上986w再加0.01</p><hr><p>2021/1/1</p><p>元旦觉醒了光</p><img src="/2022/03/22/Arcaea/4DAAB4806E15DC38976B5A0C4E4DCB70.png" class="" title="img"><p>细看背景是p歌列表（）以一堆7-8和少量水9为主</p><hr><h2 id="2021-1-16-11-5"><a href="#2021-1-16-11-5" class="headerlink" title="2021/1/16 11.5"></a>2021/1/16 11.5</h2><p>如今打算把这一篇当作玩arc的记录ww</p><p>11.50了，很艰难，短时间内必不可能摘星</p><img src="/2022/03/22/Arcaea/B2BD4BE67B24A5F4AB5242F53F1717C2.png" class="" title="img"><p>这首在b30里凑了个数然后终于11.5了……</p><p>抛开众多的小二连三连不提，本身配置并不难，但真的好吃爆发力，这种我是拆不成交互就只能硬抗了。。</p><p>并且11.5多由9+曲目堆积而成，10里面打得好的就变石（会了真的简单）、魔女（第一个上ex+的10，但癖了），会一点点的mirzam（暴far，总之打不好）、xanatos（尾杀寄）、黑魔王（同尾杀寄）、vh（还是尾杀寄）、vt（底力爆发时打上best1后至今一直到不了当时水平），嫖了里红（很有代表性的位移天地交互不会）以及上面的felis</p><p>欢迎各位大爹加好友多多暴打我OOOOOOOOOrz</p><img src="/2022/03/22/Arcaea/6D481B9BB81AF9C1BAEC27CF1990328C.jpg" class="" title="6D481B9BB81AF9C1BAEC27CF1990328C"><hr><p>2022/2/17</p><p>升天</p><p>梦 幻 联 动</p><p>这个游戏也去玩了下…然后第一周目使我明白我只想做个咸鱼我不想要那么多粉，后面开始刷成就狂魔然后逐渐失去本心了，不过有些结局那确实相当有意思ww</p><p>然后看过花花直播发现确实有连播30d的可能，于是刷出了近900w粉的结局…</p><img src="/2022/03/22/Arcaea/881719DA24446994B53B9C22C49B9815.png" class="" title="img"><p>然后发现爆小p户后来又小推了一下</p><hr><p>2022/2/26</p><p>来学校，练了四五天vt一点进步都没然后打了把vh手感起飞</p><img src="/2022/03/22/Arcaea/0091A3BCABECCB6BEC18C3C846868797.png" class="" title="img"><hr><h2 id="2022-3-2-11-6"><a href="#2022-3-2-11-6" class="headerlink" title="2022/3/2 11.6"></a>2022/3/2 11.6</h2><p>谢谢新出background的random随机到xanatos，虽然我不理解为什么就990</p><img src="/2022/03/22/Arcaea/EB48515E6A67EF23905A2D1ABDD0A106.png" class="" title="img"><p>看到群里巨佬爆鲨体罚，然后再次被体罚打爆</p><p><del>这就是寄点突然飞升的原因吗？</del></p><p>天地交互可能略微的好了那么一点点点吧..应该说谢谢vt和ac（ac练了一下午，现在970-&gt;11.5爽嫖状态）</p><img src="/2022/03/22/Arcaea/478B0BD9373FE15C501332FB01DEF50C.png" class="" title="img"><p>几乎全在推10的上升到11.6了。。</p><p>整体上没有11.5时候那么着急的想去提一提ptt什么的了，这大概就目前的水平，底力耗尽了牡蛎牡蛎</p><p>后面怎么办捏</p><p>首先周年庆全曲一下，但是支线包齐了，ether drop+55</p><p>黑魔王尾杀好了一些，慢速看一下中间4双押4交互段，练练后边</p><p>剩下的随缘吧，想打啥打啥</p><p>另外红枪真的听着好塑料啊</p><img src="/2022/03/22/Arcaea/FD5BE1A3A52A93BC908BD54422D7510E.png" class="" title="img"><p>另外新background好看！期待很久啦</p><img src="/2022/03/22/Arcaea/B51B1661FB54F8594534CF0704AB2247.png" class="" title="img"><p>关于我查了个分然后群友针对牛奶和vh谁是10.0最上吵起来后打三把牛奶上ex+并推分这件事</p><p>每 天 一 杯 奶，强 壮 音 游 人</p><p>里红除了天地位移交互的读不懂之外其他打的基本没什么毛病（不过印象中这把当时板子非常不顺滑还漏蛇（</p><img src="/2022/03/22/Arcaea/8FC96AF697B62B97C1DA253347B1E6BF.png" class="" title="img"><p>你倒是p啊！p！</p><p>打歌方差很大，这个状态好的时候几乎不失误，状态差的时候撑死986</p><img src="/2022/03/22/Arcaea/485F623C1246E7918AC033B242FDD9E7.png" class="" title="img"><h2 id="2022-3-22-11-7"><a href="#2022-3-22-11-7" class="headerlink" title="2022/3/22 11.7"></a>2022/3/22 11.7</h2><p>历经20d ptt+0.1</p><p>谢谢衔尾蛇。。虽然我感觉我还是没打明白，第一个单曲定数12.0了耶</p><img src="/2022/03/22/Arcaea/0B468E376885FFE8F21409279112AEE3.png" class="" title="img"><p>地板已经萌新线了淦。。。通常这个时候大佬差不多都已经摘了吧（</p><p>首先是终于把病女给解了</p><p>但是提不动（估计是因为越级），卡在965上不去了T T</p><img src="/2022/03/22/Arcaea/67160F55CD2D7234200BC3117F21AC98.png" class="" title="img"><p>红枪以来第二个从头far到尾，节奏怪难的，而且减速段打不好</p><img src="/2022/03/22/Arcaea/140A2A33F9397B538E29E0AD985E1631.png" class="" title="img"><p>掌握了一首自己很喜欢听的歌多是一件美事啊~</p><p>lfdy真的很上头，但是蛇也是相当容易漏，开头漏蛇重灾区，中段那一堆更是给我整不会了</p><img src="/2022/03/22/Arcaea/7E104C93C7B1BBB05B38D8BA595549D2.png" class="" title="img"><img src="/2022/03/22/Arcaea/A6F2A4715972B9D96D674C0E969DFA8E.png" class="" title="img"><p>恋歌2已经鲨疯，所以为什么你的恋歌1还是打的稀烂？</p><img src="/2022/03/22/Arcaea/651F9585B481C1C63B1052248B57E73C.png" class="" title="img"><p>反手依旧打的不太好</p><img src="/2022/03/22/Arcaea/C262159C2AE8E29F09767A906A9D5E91.png" class="" title="img"><p>哈哈，不过就是b30里面又多了一个性了的歌罢了，哈哈</p><img src="/2022/03/22/Arcaea/E3EFCC69A2EF02206106532943952D4E.png" class="" title="img"><h2 id="2022-4-12-11-8"><a href="#2022-4-12-11-8" class="headerlink" title="2022/4/12 11.8"></a>2022/4/12 11.8</h2><p>《镜像为什么是神》</p><p>这我才意识到vt真的癖得有些严重</p><img src="/2022/03/22/Arcaea/DAB7E723B2CF8BC62D348860A486E315.png" class="" title="img"><p>可莉max，没有休息段（后来发现中间还是有一点的），才发现曲名真实的反映了没有休息段的铺面（）</p><p>USAO佬的xp还是一向让人难以捉摸（这不加？？这不加？）</p><img src="/2022/03/22/Arcaea/FEADDC611AA41F946D2828D29392C685.png" class="" title="img"><p>只能说到目前为止都不太上手的绿魔王qwq<img src="/2022/03/22/Arcaea/D57DA5FF607740E754C9618CE40C889E.png" class="" title="img"></p><p>爬梯子随手打了一下，我超（</p><p>但是当时打又没觉得自己打的很好。。中间五个hold加蛇那还是漏，意料之外了</p><img src="/2022/03/22/Arcaea/694874285BBDDBAE6305E0B3576A14A0.png" class="" title="img"><hr><p>又推了一下绿魔王和翡翠鸡，截止4/14是11.84</p><p>绿魔王逐渐的能看得懂双押段了，但肯定还是有漏，后面没感觉到太多难点？但是准度不是很好，还能提（</p><p>翡翠鸡emm，有高速版的类似恋歌的交互，打打就全成far了，不太稳（不过感觉和起手有很大关系）</p><hr><p>《镜像为什么是神 2》</p><img src="/2022/03/22/Arcaea/E013742644D126BF7A2B393832AD7D4E.png" class="" title="img"><p>然后补一下11.8的b30，前几天查分器坏了（我超 r10居然快摘了）</p><p>感慨一下最大瓶颈就在11.4-11.6附近…怪不得11.5叫萌新线，之前能几乎全靠9+，之后必须得推10。。现在感觉打起来比以前顺畅好多了，虽说摘星还有一段距离吧，但是也对ptt没有特别高的追求，一点点练的话肯定会感觉有提升的</p><p>目前也没有非常明确的推哪一首的目标…要说非常喜欢哪首的话当然是overwhelm，然后RG应该也能提，然后病女。。还是不想动它了（悲）真的嫖不动；说起寄点应该也能推，但是最近一直手感不佳，放置了</p><p>还有求里红那种天地交互的练习方法？慢一点的就打的来（比如红枪和寄点）一快就很难打（黑魔王中间有一个也是这样的也是经常的far和lost）</p><img src="/2022/03/22/Arcaea/C06BA0D6ABF39FED6F46C489E7344074.jpg" class="" title="img"><img src="/2022/03/22/Arcaea/0051577B019217A7872917F23244AB6F.png" class="" title="img"><img src="/2022/03/22/Arcaea/89A888C383AB5731D75A2C53E7985FDC.png" class="" title="img"><p>GDP！起飞！</p><p>就是中间那段和结尾突然很有感觉，左右分别打不同的节奏，然后就突然的打了995</p><img src="/2022/03/22/Arcaea/42B2AF1C56E69304FA23FC2A73791535.png" class="" title="img"><img src="/2022/03/22/Arcaea/99BC2C6A3E1E5436CC0DF6D5A776758C.png" class="" title="img"><p>上面这两个是4月22日的</p><h2 id="2022-5-4-11-9"><a href="#2022-5-4-11-9" class="headerlink" title="2022/5/4 11.9"></a>2022/5/4 11.9</h2><p>隔了十多天才推上去这最后0.01</p><p>我甚至都觉得这会是新的一个瓶颈了，11.89</p><p>先不说想要摘星的心情，光是想上11.9，的热情，就慢慢被现实打垮，几乎所有10都推过试过但是没什么提升，要么停留在原来分数附近，要么甚至大不如前</p><p>然后今天早晨随口在群里问了问，说推rg，我看了看我976的rg，打了一遍，我不理解</p><p>遂去慢速练了几遍，虽说我是真的不想练的，打歌就是要随心所欲！放飞自我！</p><p>但是</p><p>但是</p><p>但是</p><p>？！</p><img src="/2022/03/22/Arcaea/A33A7EFD31CDB05D1A6B374A0615750F.png" class="" title="img"><p>我更不理解了</p><p>但是好诶</p><p>那么下一次记录，会是什么时候呢</p><p>会是20天之后吗</p><p>我不敢想</p><p>但终有一天</p><p>我会到达那个地方</p><p><del>不 要 停 下 来 啊，打 音 游 的 大 姐 姐</del></p><img src="/2022/03/22/Arcaea/F04915FA6B71A9D5CA7AF4AEFF21A3FA.png" class="" title="img"><p>榨出来了！！！好耶</p><p>对立好好看，<del>超市我超市我，</del>这个眼神真是绝了ww挺符合现在我的状态（伞对立和猫对立做得到吗？）</p><img src="/2022/03/22/Arcaea/908815E2EAF9FCC9F349B4DC2CD82550.png" class="" title="img"><p>开头狂far，后面打的倒还好，看上次成绩971w就，每次开头寄了就退出，这次好歹没退然后上分了（</p><img src="/2022/03/22/Arcaea/8CA86F2CCDB9C0BB5526B42FF67D8A27.png" class="" title="img"><img src="/2022/03/22/Arcaea/8FFCAEE0BDEEAB75F420A436C2FA8D0B.png" class="" title="img"><p>本来只是突然想到大爹的b30里面有994w的寄点，算出来好像有12.4多，就感觉我这天花板不够啊，是不是应该有一个ex+的10+，然后随手一打…..好耶！</p><img src="/2022/03/22/Arcaea/37DD558ACBA013C9163B4B83F4BDA3E0.png" class="" title="img"><p>感觉慢速看一下体罚和骨折光是有机会的</p><p>那就用骨折光摘吧！</p><p>5月9日，顶级折磨</p><p>虽然+0.02很美好，但是11.998</p><img src="/2022/03/22/Arcaea/B8D2EC6AFDF96A2042FAA9C930EA27AE.png" class="" title="img"><img src="/2022/03/22/Arcaea/42BDC846F037DB615EF50E89AFAD9A01.png" class="" title="img"><p>这衔尾蛇打到最后觉得应该都结束了，摘星什么的大概也就这样了，然后出来一看</p><p>KEEP</p><p>淦，差0.002，然后试了好多首都丝毫不动，打体罚打了好几次985w，逐渐状态非常不好，看来今天是没希望了</p><p>想开点，单日很大突破了，这三首还有LC ex+，烈华还是刚刚学会的</p><img src="/2022/03/22/Arcaea/CBB6ADEE8325E1F43E8985751468A35F.png" class="" title="img"><h2 id="2022-5-10-12-0-摘星！"><a href="#2022-5-10-12-0-摘星！" class="headerlink" title="2022/5/10 12.0 摘星！"></a>2022/5/10 12.0 摘星！</h2><p>前情提要</p><img src="/2022/03/22/Arcaea/image-20220510155147642.png" class="" title="image-20220510155147642"><p>对立，我爱你，拉格兰，对不起</p><p>终于动辣！！！！！感觉就像过了十几天一样</p><img src="/2022/03/22/Arcaea/CA07EBFF49B5515B7E762997B90686A7.png" class="" title="img"><img src="/2022/03/22/Arcaea/B904B3886915A027714370A617F7935E.jpg" class="" title="img"><p>所以严格来说瓶颈是10.5和11.5附近吗（</p><img src="/2022/03/22/Arcaea/image-20220510155429672.png" class="" title="image-20220510155429672"><p>接下来休息，然后练习基础的9，推8的PM</p><p>再开一篇更新捏</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ARCAEA——这是一款促进人类进化的出张模拟器。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;暴论：mush是纵连模拟器，lanota倒打模拟器，ADOFAI音押模拟器，arc出张模拟器，phi要素过多&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;欢迎萌新多多入坑，大佬多多暴打&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id</summary>
      
    
    
    
    
    <category term="games" scheme="https://github.com/sterne012/sterne012.github.io/tags/games/"/>
    
    <category term="Arc" scheme="https://github.com/sterne012/sterne012.github.io/tags/Arc/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-逻辑回归</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/03/20/deep-logistic-regression/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/03/20/deep-logistic-regression/</id>
    <published>2022-03-20T13:04:33.000Z</published>
    <updated>2022-03-20T13:18:32.296Z</updated>
    
    <content type="html"><![CDATA[<p>在linear regression基础上修改了loss和gradient函数，添加了sigmoid函数，添加了测试集结果输出，acc、精确率、召回率计算、ROC曲线绘制、auc计算等</p><p>实验过程：（遇到各种问题后解决的过程）</p><p>1.修改线性回归为逻辑回归，主要是增加sigmoid函数、修改了梯度下降的公式，逻辑回归主体迭代过程不变</p><p>2.刚开始运行时初始值还是用了上次线性回归的数据，即w=1，b=60，然后得到了曲线方向完全相反的结果，运行测试集发现loss大概在21左右，感觉误差过大后根据测试集loss输出和预测结果的整体loss调整之后将b逐步调小，b=5左右得到比较好的训练结果。</p><p>在这之中又发现了过拟合的问题，具体如下：</p><p>根据绘制的counter图知，梯度下降的最优结果区间大致在这里：</p><img src="/2022/03/20/deep-logistic-regression/image-20220320211244928.png" class="" title="image-20220320211244928"><p>但如果进一步增大迭代次数，训练集的loss进一步减小，但测试集的loss开始上升，为避免过拟合最终选择初始值w=1，b=5，iter=10000，learningrate=0.001</p><p>3.接下来的问题和一个报错有关：</p><img src="/2022/03/20/deep-logistic-regression/image-20220320211704979.png" class="" title="image-20220320211704979"><p>简单来说就是log（0）-&gt;无穷的情况，询问老师后增加一个小正数可以解决，随后完善loss函数，这也是第二个问题中图片右上全部是白色的原因</p><img src="/2022/03/20/deep-logistic-regression/image-20220320211716098.png" class="" title="image-20220320211716098"><p>至此，逻辑回归主体部分已经完成，开始着手绘制roc曲线</p><p>4.绘制roc曲线调用sklearn的roc_courve函数，计算auc调用auc函数，在调用roc_courve函数时遇到了一点小问题，在先前计算precision和recall时，提前将y_pred进行了四舍五入的处理，导致roc曲线只有一个拐点，查阅资料后发现了这个问题，并修改测试集输出函数如下：</p><img src="/2022/03/20/deep-logistic-regression/image-20220320211729712.png" class="" title="image-20220320211729712">roc曲线问题<img src="/2022/03/20/deep-logistic-regression/image-20220320211734594.png" class="" title="image-20220320211734594">修改后的函数<p>5.最后的运行结果：Acc=0.800，precision=0.8333，recall=0.8333，auc=0.9583，图上是更详细的结果</p><img src="/2022/03/20/deep-logistic-regression/clip_image002.jpg" class="" title="img"><p>画图：</p><img src="/2022/03/20/deep-logistic-regression/image-20220320211813733.png" class="" title="image-20220320211813733"><img src="/2022/03/20/deep-logistic-regression/image-20220320211818580.png" class="" title="image-20220320211818580"><img src="/2022/03/20/deep-logistic-regression/image-20220320211823629.png" class="" title="image-20220320211823629"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> roc_curve, auc<br><br><br><br>xdata = [<span class="hljs-number">8.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">9.</span>, <span class="hljs-number">7.</span>, <span class="hljs-number">16.</span>, <span class="hljs-number">05.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">10.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">6.</span>]<br>ydata = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br><br>xtest = [<span class="hljs-number">5.</span>, <span class="hljs-number">4.5</span>, <span class="hljs-number">9.8</span>, <span class="hljs-number">8.</span>, <span class="hljs-number">22.</span>, <span class="hljs-number">17.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">19.</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>]<br>ytest = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br>plt.cla()<br><br>w_init = <span class="hljs-number">1.</span><br>b_init = <span class="hljs-number">5.</span><br><br>w_change = [w_init]<br>b_change = [b_init]<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sigmoid</span>(<span class="hljs-params">x</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1.</span> / (<span class="hljs-number">1.</span> + np.exp(-x))<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loss</span>(<span class="hljs-params">w, b</span>):</span><br>    res = <span class="hljs-number">0</span><br>    exp = <span class="hljs-number">1e-8</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(xdata)):<br>        y_pred = sigmoid(w * xdata[i] + b)<br>        res += - (<span class="hljs-number">1</span> - ydata[i]) * np.log(<span class="hljs-number">1</span> - y_pred+exp)-ydata[i] * np.log(y_pred+exp)<br>    <span class="hljs-keyword">return</span> res / <span class="hljs-built_in">len</span>(xdata)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">grad</span>(<span class="hljs-params">w, b</span>):</span><br>    w_grad = <span class="hljs-number">0</span><br>    b_grad = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(xdata)):<br>        y_pred = sigmoid(w * xdata[i] + b)<br>        w_grad += -(ydata[i] - y_pred) * xdata[i]<br>        b_grad += -(ydata[i] - y_pred)<br>    <span class="hljs-keyword">return</span> w_grad, b_grad<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">logistic_regression</span>(<span class="hljs-params">w_pred, b_pred, lr=<span class="hljs-number">0.001</span>, <span class="hljs-built_in">iter</span>=<span class="hljs-number">10000</span></span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">iter</span>):<br>        gradf = grad(w=w_pred, b=b_pred)<br>        w_pred = <span class="hljs-built_in">float</span>(w_pred - learning_rate * gradf[<span class="hljs-number">0</span>])<br>        b_pred = <span class="hljs-built_in">float</span>(b_pred - learning_rate * gradf[<span class="hljs-number">1</span>])<br>        w_change.append(w_pred)<br>        b_change.append(b_pred)<br>    <span class="hljs-keyword">return</span> w_pred, b_pred<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_set</span>(<span class="hljs-params">xtest, ytest, w, b</span>):</span><br>    ytest_pred = []<br>    tp = fp = tn = fn = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(xtest)):<br>        y_pred = sigmoid(w * xtest[i] + b)<br>        ytest_pred.append(y_pred)<br>        <span class="hljs-keyword">if</span> y_pred &gt; <span class="hljs-number">0.5</span>:<br>            y_pred = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            y_pred = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> ytest[i] == y_pred &amp; y_pred == <span class="hljs-number">1</span>:<br>            tp += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> ytest[i] == y_pred &amp; y_pred == <span class="hljs-number">0</span>:<br>            tn += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> ytest[i] != y_pred &amp; y_pred == <span class="hljs-number">1</span>:<br>            fp += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> ytest[i] != y_pred &amp; y_pred == <span class="hljs-number">0</span>:<br>            fn += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> ytest_pred, tp, fp, tn, fn<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_loss</span>(<span class="hljs-params">w, b</span>):</span><br>    res = <span class="hljs-number">0</span><br>    exp = <span class="hljs-number">1e-8</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(xtest)):<br>        y_pred = sigmoid(w * xtest[i] + b)<br>        res += - (<span class="hljs-number">1</span> - ytest[i]) * np.log(<span class="hljs-number">1</span> - y_pred+exp)-ytest[i] * np.log(y_pred+exp)<br>    <span class="hljs-keyword">return</span> res / <span class="hljs-built_in">len</span>(xtest)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;data set:&quot;</span>)<br><span class="hljs-built_in">print</span>(xdata)<br><span class="hljs-built_in">print</span>(ydata)<br>plt.figure(<span class="hljs-number">1</span>)<br>plt.scatter(xdata, ydata,label=<span class="hljs-string">&quot;training set&quot;</span>)<br>plt.title(<span class="hljs-string">&quot;output&quot;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;x&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;y&quot;</span>)<br><br><span class="hljs-comment"># 测试集</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;test set:&quot;</span>)<br><span class="hljs-built_in">print</span>(xtest)<br><span class="hljs-built_in">print</span>(ytest)<br>plt.scatter(xtest, ytest, marker=<span class="hljs-string">&#x27;v&#x27;</span>,label=<span class="hljs-string">&quot;test set&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;initial input:&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;w = &quot;</span> + <span class="hljs-built_in">str</span>(w_init))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b = &quot;</span> + <span class="hljs-built_in">str</span>(b_init))<br><br>learning_rate = <span class="hljs-number">0.001</span><br><span class="hljs-built_in">iter</span> = <span class="hljs-number">10000</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Logistic Regression: learning_rate = &quot;</span> + <span class="hljs-built_in">str</span>(learning_rate) + <span class="hljs-string">&quot;,iteration = &quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">iter</span>))<br>w_pred, b_pred = logistic_regression(w_pred=w_init, b_pred=b_init, lr=learning_rate, <span class="hljs-built_in">iter</span>=<span class="hljs-built_in">iter</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;result: w_pred = &quot;</span> + <span class="hljs-built_in">str</span>(w_pred) + <span class="hljs-string">&quot;, b_pred = &quot;</span> + <span class="hljs-built_in">str</span>(b_pred))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;loss = &quot;</span>+<span class="hljs-built_in">str</span>(loss(w_pred,b_pred)))<br>x = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">40</span>, <span class="hljs-number">0.1</span>)<br>y = sigmoid(w_pred * x + b_pred)<br>plt.plot(x, y)<br>plt.legend()<br>plt.show()<br><br><span class="hljs-comment"># ROC曲线</span><br>plt.figure(<span class="hljs-number">2</span>)<br>ytest_pred, tp, fp, tn, fn = test_set(xtest, ytest, w_pred, b_pred)<br>acc = <span class="hljs-built_in">float</span>(tp + tn) / <span class="hljs-built_in">float</span>(<span class="hljs-built_in">len</span>(xtest))<br>precision = <span class="hljs-built_in">float</span>(tp) / <span class="hljs-built_in">float</span>(tp + fp)<br>recall = <span class="hljs-built_in">float</span>(tp) / <span class="hljs-built_in">float</span>(tp + fn)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;y_pred:&quot;</span>)<br><span class="hljs-built_in">print</span>(ytest_pred)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;test loss = &quot;</span>+<span class="hljs-built_in">str</span>(test_loss(w_pred,b_pred)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;tp = &quot;</span>+<span class="hljs-built_in">str</span>(tp)+<span class="hljs-string">&quot; fp = &quot;</span>+<span class="hljs-built_in">str</span>(fp)+<span class="hljs-string">&quot; tn = &quot;</span>+<span class="hljs-built_in">str</span>(tn)+<span class="hljs-string">&quot; fn = &quot;</span>+<span class="hljs-built_in">str</span>(fn))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;acc = &quot;</span> + <span class="hljs-built_in">str</span>(acc))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;precision = &quot;</span> + <span class="hljs-built_in">str</span>(precision))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;recall = &quot;</span> + <span class="hljs-built_in">str</span>(recall))<br><br>fpr, tpr, thresholds = roc_curve(ytest, ytest_pred,pos_label=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;fpr = &quot;</span>+<span class="hljs-built_in">str</span>(fpr))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;tpr = &quot;</span>+<span class="hljs-built_in">str</span>(tpr))<br>roc_auc = auc(fpr, tpr)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;auc = &quot;</span>+<span class="hljs-built_in">str</span>(roc_auc))<br>plt.plot(fpr, tpr, <span class="hljs-string">&#x27;k--&#x27;</span>, label=<span class="hljs-string">&#x27;ROC (area = &#123;0:.2f&#125;)&#x27;</span>.<span class="hljs-built_in">format</span>(roc_auc), lw=<span class="hljs-number">2</span>)<br>plt.xlabel(<span class="hljs-string">&quot;FPR&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;TPR&quot;</span>)<br>plt.show()<br><br><br><br><span class="hljs-comment"># counter图</span><br>plt.figure(<span class="hljs-number">3</span>)<br>x = np.arange(-<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0.1</span>)<br>y = np.arange(-<span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">0.2</span>)<br><span class="hljs-comment"># 对x,y网格化，得到X,Y</span><br>X, Y = np.meshgrid(x, y)<br><span class="hljs-comment"># 等高线</span><br>Z = loss(X, Y)<br>fig, ax = plt.subplots(figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">8</span>), dpi=<span class="hljs-number">100</span>)<br><span class="hljs-comment"># 画contour图</span><br>CS = ax.contourf(X, Y, Z, <span class="hljs-number">100</span>)<br><span class="hljs-comment"># 画轮廓线</span><br>CS = ax.contour(X, Y, Z, <span class="hljs-number">100</span>, colors=<span class="hljs-string">&#x27;white&#x27;</span>)<br><br>plt.scatter(w_change, b_change)<br>plt.title(<span class="hljs-string">&quot;predict change&quot;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;w_change&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;b_change&quot;</span>)<br>plt.tight_layout()<br>plt.show()<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在linear regression基础上修改了loss和gradient函数，添加了sigmoid函数，添加了测试集结果输出，acc、精确率、召回率计算、ROC曲线绘制、auc计算等&lt;/p&gt;
&lt;p&gt;实验过程：（遇到各种问题后解决的过程）&lt;/p&gt;
&lt;p&gt;1.修改线性回归为逻</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
    <category term="deeplearning" scheme="https://github.com/sterne012/sterne012.github.io/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-线性回归</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/03/20/deep-linear-regression/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/03/20/deep-linear-regression/</id>
    <published>2022-03-20T13:04:20.000Z</published>
    <updated>2022-03-20T13:10:20.236Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>xdata = [<span class="hljs-number">8.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">9.</span>, <span class="hljs-number">7.</span>, <span class="hljs-number">16.</span>, <span class="hljs-number">05.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">10.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">6.</span>]<br>ydata = [<span class="hljs-number">30.</span>, <span class="hljs-number">21.</span>, <span class="hljs-number">35.</span>, <span class="hljs-number">27.</span>, <span class="hljs-number">42.</span>, <span class="hljs-number">24.</span>, <span class="hljs-number">10.</span>, <span class="hljs-number">38.</span>, <span class="hljs-number">22.</span>, <span class="hljs-number">25.</span>]<br>plt.cla()<br><br>w_init = <span class="hljs-number">2.</span><br>b_init = <span class="hljs-number">60.</span><br><br>w_change = [w_init]<br>b_change = [b_init]<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">grad</span>(<span class="hljs-params">w, b</span>):</span><br>    w_grad = <span class="hljs-number">0</span><br>    b_grad = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(xdata)):<br>        y_pred = w * xdata[i] + b<br>        w_grad += <span class="hljs-built_in">float</span>(<span class="hljs-number">2</span> * (ydata[i] - y_pred) * (-xdata[i]))<br>        b_grad += <span class="hljs-built_in">float</span>(<span class="hljs-number">2</span> * (ydata[i] - y_pred) * (-<span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">return</span> w_grad, b_grad<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loss</span>(<span class="hljs-params">w, b</span>):</span><br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(xdata)):<br>        y_pred = w * xdata[i] + b<br>        res += <span class="hljs-built_in">pow</span>(ydata[i] - y_pred, <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> res/<span class="hljs-number">10</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gradient_descent</span>(<span class="hljs-params">w_pred, b_pred, learning_rate=<span class="hljs-number">0.001</span>, <span class="hljs-built_in">iter</span>=<span class="hljs-number">10000</span></span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">iter</span>):<br>        lossf = loss(w=w_pred, b=b_pred)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;range &quot;</span> + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&quot;: loss = &quot;</span> + <span class="hljs-built_in">str</span>(lossf))<br>        gradf = grad(w=w_pred, b=b_pred)<br>        w_pred = <span class="hljs-built_in">float</span>(w_pred - learning_rate * gradf[<span class="hljs-number">0</span>])<br>        b_pred = <span class="hljs-built_in">float</span>(b_pred - learning_rate * gradf[<span class="hljs-number">1</span>])<br>        w_change.append(w_pred)<br>        b_change.append(b_pred)<br>    <span class="hljs-keyword">return</span> w_pred, b_pred<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;data set:&quot;</span>)<br><span class="hljs-built_in">print</span>(xdata)<br><span class="hljs-built_in">print</span>(ydata)<br>plt.figure(<span class="hljs-number">1</span>)<br>plt.scatter(xdata, ydata)<br>plt.title(<span class="hljs-string">&quot;output&quot;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;xdata&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;ydata&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;initial input:&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;w = &quot;</span> + <span class="hljs-built_in">str</span>(w_init))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b = &quot;</span> + <span class="hljs-built_in">str</span>(b_init))<br><br>learning_rate = <span class="hljs-number">0.001</span><br><span class="hljs-built_in">iter</span> = <span class="hljs-number">10000</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Linear Regression: learning_rate = &quot;</span> + <span class="hljs-built_in">str</span>(learning_rate) + <span class="hljs-string">&quot;,iteration = &quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">iter</span>))<br>res = gradient_descent(w_pred=w_init, b_pred=b_init, learning_rate=learning_rate, <span class="hljs-built_in">iter</span>=<span class="hljs-built_in">iter</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;result: w_pred = &quot;</span> + <span class="hljs-built_in">str</span>(res[<span class="hljs-number">0</span>]) + <span class="hljs-string">&quot;, b_pred = &quot;</span> + <span class="hljs-built_in">str</span>(res[<span class="hljs-number">1</span>]))<br>x = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>)<br>y = res[<span class="hljs-number">0</span>] * x + res[<span class="hljs-number">1</span>]<br>plt.plot(x, y)<br>plt.show()<br><br><span class="hljs-comment">#counter图</span><br>plt.figure(<span class="hljs-number">2</span>)<br>x = np.arange(-<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">0.2</span>)<br>y = np.arange(-<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">1</span>)<br><span class="hljs-comment">#对x,y网格化，得到X,Y</span><br>X,Y = np.meshgrid(x,y)<br><span class="hljs-comment"># 等高线</span><br>Z = loss(X, Y)<br>fig, ax = plt.subplots(figsize=(<span class="hljs-number">8</span>,<span class="hljs-number">8</span>),dpi=<span class="hljs-number">100</span>)<br><span class="hljs-comment"># 画contour图</span><br>CS = ax.contourf(X, Y, Z, <span class="hljs-number">100</span>)<br><span class="hljs-comment"># 画轮廓线</span><br>CS = ax.contour(X, Y, Z, <span class="hljs-number">100</span>, colors=<span class="hljs-string">&#x27;white&#x27;</span>)<br><br>plt.scatter(w_change,b_change)<br>plt.title(<span class="hljs-string">&quot;predict change&quot;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;w_change&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;b_change&quot;</span>)<br>plt.tight_layout()<br>plt.show()<br></code></pre></td></tr></table></figure><img src="/2022/03/20/deep-linear-regression/image-20220320210953425.png" class="" title="image-20220320210953425"><img src="/2022/03/20/deep-linear-regression/image-20220320211003005.png" class="" title="image-20220320211003005">]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
    <category term="deeplearning" scheme="https://github.com/sterne012/sterne012.github.io/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>滴答清单，沉浸式出发！</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/03/16/dida/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/03/16/dida/</id>
    <published>2022-03-16T08:05:31.000Z</published>
    <updated>2022-04-15T14:13:56.862Z</updated>
    
    <content type="html"><![CDATA[<p>强力安利，我挖个坑放在这.jpg</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;强力安利，我挖个坑放在这.jpg&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="recommends" scheme="https://github.com/sterne012/sterne012.github.io/tags/recommends/"/>
    
  </entry>
  
  <entry>
    <title>修 网 大 胜 利</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/03/09/fixmysshkey/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/03/09/fixmysshkey/</id>
    <published>2022-03-09T07:32:21.000Z</published>
    <updated>2022-05-13T08:59:25.310Z</updated>
    
    <content type="html"><![CDATA[<p>简而言之，开学之后突然发现上传不了，在3/9即arc5th周年的这天修网1h后终于复活</p><p>原因大概是寒假时候换了梯子</p><p>首先换sshkey</p><p><code>ssh-keygen -t rsa -C &quot;youremail&quot;</code></p><p>在<code>C:\Users\用户名\.ssh</code>下的<code>id_rsa.pub</code>中内容到settings-keys-add deploy key，新建，勾选可修改</p><p>然后git运行</p><p><code>ssh -T git@github.com</code></p><p>这才真正开始修网</p><h3 id="1-ssh-Could-not-resolve-hostname-github-com-Name-or-service-not-known"><a href="#1-ssh-Could-not-resolve-hostname-github-com-Name-or-service-not-known" class="headerlink" title="1.ssh: Could not resolve hostname github.com: Name or service not known"></a>1.<code>ssh: Could not resolve hostname github.com: Name or service not known</code></h3><p>ping github.com发现ping命令用不了，然后去搜添加环境变量（也许是装什么东西的时候不小心删了吧）</p><p>装好ping之后<del>发现请求超时</del>挂梯子连得到github的ip</p><p>用管理员权限运行任意文本编辑软件修改<code>C:\Windows\System32\drivers\etc</code>目录下的hosts，在最后一行添加</p><p><code>xxx.xxx.xxx.xxx github.com</code>（就是ping到ip）</p><p>这算第一步弄完，再次尝试<code>ssh -T git@github.com</code></p><h3 id="2-ssh-connect-to-host-github-com-port-22-Connection-timed-out"><a href="#2-ssh-connect-to-host-github-com-port-22-Connection-timed-out" class="headerlink" title="2.ssh: connect to host github.com port 22: Connection timed out"></a>2.<code>ssh: connect to host github.com port 22: Connection timed out</code></h3><p>在<code>C:\Users\用户名\.ssh</code>下添加<code>config</code>文件（没有后缀名）</p><p>内容：</p><p>Host github.com<br>User git<br>Hostname ssh.github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_rsa<br>Port 443</p><p>（意思应该是使用443端口什么的）</p><p>尝试<code>ssh -T git@github.com</code>，提示有一个修改什么的没截图，yes回车</p><p>然后就行了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;简而言之，开学之后突然发现上传不了，在3/9即arc5th周年的这天修网1h后终于复活&lt;/p&gt;
&lt;p&gt;原因大概是寒假时候换了梯子&lt;/p&gt;
&lt;p&gt;首先换sshkey&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ssh-keygen -t rsa -C &amp;quot;youremail&amp;quot;</summary>
      
    
    
    
    <category term="帮助文档" scheme="https://github.com/sterne012/sterne012.github.io/categories/%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="hexo" scheme="https://github.com/sterne012/sterne012.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>cifar100电脑跑不动啊不中用啊</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/01/17/py-cifar100-train/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/01/17/py-cifar100-train/</id>
    <published>2022-01-17T08:58:39.000Z</published>
    <updated>2022-04-15T14:14:09.983Z</updated>
    
    <content type="html"><![CDATA[<p>速寄了，cpu使用率拉满跑了30min还不到一半</p><p>我不理解代码但我大受震撼</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> layers, optimizers, datasets, Sequential<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> ssl<br>ssl._create_default_https_context = ssl._create_unverified_context<br><span class="hljs-comment"># 忽略ssl认证否则下载数据集报错</span><br><br>os.environ[<span class="hljs-string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-comment"># 用于忽略级别 2 及以下的消息（级别 1 是提示，级别 2 是警告，级别 3 是错误）。</span><br>tf.random.set_seed(<span class="hljs-number">2345</span>)<br><br>conv_layers = [  <span class="hljs-comment"># 5 units: conv+max pooling</span><br>    <span class="hljs-comment"># unit1</span><br>    <span class="hljs-comment"># padding=&quot;same&quot; 输入和输出的图像大小相同</span><br>    layers.Conv2D(<span class="hljs-number">64</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),  <span class="hljs-comment"># 创建一个卷积层</span><br>    layers.Conv2D(<span class="hljs-number">64</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.MaxPool2D(pool_size=[<span class="hljs-number">2</span>, <span class="hljs-number">2</span>], strides=<span class="hljs-number">2</span>, padding=<span class="hljs-string">&quot;same&quot;</span>), <span class="hljs-comment"># max pooling</span><br><br>    <span class="hljs-comment"># unit2</span><br>    layers.Conv2D(<span class="hljs-number">128</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.Conv2D(<span class="hljs-number">128</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.MaxPool2D(pool_size=[<span class="hljs-number">2</span>, <span class="hljs-number">2</span>], strides=<span class="hljs-number">2</span>, padding=<span class="hljs-string">&quot;same&quot;</span>),<br><br>    <span class="hljs-comment"># unit3</span><br>    layers.Conv2D(<span class="hljs-number">256</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.Conv2D(<span class="hljs-number">256</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.MaxPool2D(pool_size=[<span class="hljs-number">2</span>, <span class="hljs-number">2</span>], strides=<span class="hljs-number">2</span>, padding=<span class="hljs-string">&quot;same&quot;</span>),<br><br>    <span class="hljs-comment"># unit4</span><br>    layers.Conv2D(<span class="hljs-number">512</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.Conv2D(<span class="hljs-number">512</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.MaxPool2D(pool_size=[<span class="hljs-number">2</span>, <span class="hljs-number">2</span>], strides=<span class="hljs-number">2</span>, padding=<span class="hljs-string">&quot;same&quot;</span>),<br><br>    <span class="hljs-comment"># unit5</span><br>    layers.Conv2D(<span class="hljs-number">512</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.Conv2D(<span class="hljs-number">512</span>, kernel_size=[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], padding=<span class="hljs-string">&quot;same&quot;</span>, activation=tf.nn.relu),<br>    layers.MaxPool2D(pool_size=[<span class="hljs-number">2</span>, <span class="hljs-number">2</span>], strides=<span class="hljs-number">2</span>, padding=<span class="hljs-string">&quot;same&quot;</span>),<br>]<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">preprocess</span>(<span class="hljs-params">x, y</span>):</span><br>    <span class="hljs-comment"># 预处理，x转换到0-1的范围(?)</span><br>    x = tf.cast(x, dtype=tf.float32) / <span class="hljs-number">255.</span><br>    y = tf.cast(y, dtype=tf.int32)<br>    <span class="hljs-keyword">return</span> x, y<br><br><br>(x, y), (x_test, y_test) = datasets.cifar100.load_data()<br>y = tf.squeeze(y, axis=<span class="hljs-number">1</span>)<br>y_test = tf.squeeze(y_test, axis=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(x.shape, y.shape, x_test.shape, y_test.shape)<br><br>train_db = tf.data.Dataset.from_tensor_slices((x, y))<br>train_db = train_db.shuffle(<span class="hljs-number">1000</span>).<span class="hljs-built_in">map</span>(preprocess).batch(<span class="hljs-number">64</span>)<br><br>test_db = tf.data.Dataset.from_tensor_slices((x_test, y_test))<br>test_db = test_db.<span class="hljs-built_in">map</span>(preprocess).batch(<span class="hljs-number">64</span>)<br><br>sample = <span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(train_db))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sample:&#x27;</span>, sample[<span class="hljs-number">0</span>].shape, sample[<span class="hljs-number">1</span>].shape,<br>      tf.reduce_min(sample[<span class="hljs-number">0</span>]), tf.reduce_max(sample[<span class="hljs-number">0</span>]))<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-comment"># Convolution</span><br>    <span class="hljs-comment"># [b, 32, 32, 3] -&gt; [b, 1, 1, 512]</span><br>    conv_net = Sequential(conv_layers)<br>    conv_net.build(input_shape=[<span class="hljs-literal">None</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">3</span>])<br>    <span class="hljs-comment"># x = tf.random.normal([4, 32, 32, 3])</span><br>    <span class="hljs-comment"># out = conv_net(x)</span><br>    <span class="hljs-comment"># print(out.shape)</span><br><br>    <span class="hljs-comment"># Full connection</span><br>    fc_net = Sequential([<br>        layers.Dense(<span class="hljs-number">256</span>, activation=tf.nn.relu),<br>        layers.Dense(<span class="hljs-number">128</span>, activation=tf.nn.relu),<br>        layers.Dense(<span class="hljs-number">100</span>, activation=<span class="hljs-literal">None</span>),<br>    ])<br><br>    conv_net.build(input_shape=[<span class="hljs-literal">None</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">3</span>])<br>    fc_net.build(input_shape=[<span class="hljs-literal">None</span>, <span class="hljs-number">512</span>])<br><br>    <span class="hljs-comment"># 优化器  learning rate=0.0001</span><br>    optimizer = optimizers.Adam(learning_rate=<span class="hljs-number">1e-4</span>)<br><br>    <span class="hljs-comment"># list合并 [a,b]+[c,d]=[a,b,c,d]</span><br>    variables = conv_net.trainable_variables + fc_net.trainable_variables<br><br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>        <span class="hljs-keyword">for</span> step, (x, y) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_db):<br>            <span class="hljs-keyword">with</span> tf.GradientTape() <span class="hljs-keyword">as</span> tape:<br>                out = conv_net(x)<br>                <span class="hljs-comment"># squeeze/flatten =&gt; [b,512]</span><br>                out = tf.reshape(out, [-<span class="hljs-number">1</span>, <span class="hljs-number">512</span>])<br>                <span class="hljs-comment"># [b,512] =&gt; [b,100]</span><br>                logits = fc_net(out)<br>                <span class="hljs-comment"># [b] =&gt; [b,100]</span><br>                y_onehot = tf.one_hot(y, depth=<span class="hljs-number">100</span>)<br>                <span class="hljs-comment"># compute loss</span><br>                loss = tf.keras.losses.categorical_crossentropy(y_onehot, logits, from_logits=<span class="hljs-literal">True</span>)<br>                <span class="hljs-comment"># avg loss</span><br>                loss = tf.reduce_mean(loss)<br><br>            grads = tape.gradient(loss, variables)<br>            optimizer.apply_gradients(<span class="hljs-built_in">zip</span>(grads, variables))<br><br>            <span class="hljs-keyword">if</span> step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(epoch, step, <span class="hljs-string">&#x27;loss:&#x27;</span>, <span class="hljs-built_in">float</span>(loss))<br><br>        <span class="hljs-comment"># test</span><br>        total_num = <span class="hljs-number">0</span><br>        total_correct = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> test_db:<br>            out = conv_net(x)<br>            out = tf.reshape(out, [-<span class="hljs-number">1</span>, <span class="hljs-number">512</span>])<br>            logits = fc_net(out)<br>            prob = tf.nn.softmax(logits, axis=<span class="hljs-number">1</span>)<br>            pred = tf.argmax(prob, axis=<span class="hljs-number">1</span>)<br>            pred = tf.cast(pred, dtype=tf.int32)<br><br>            correct = tf.cast(tf.equal(pred, y), dtype=tf.int32)<br>            correct = tf.reduce_sum(correct)<br><br>            total_num += x.shape[<span class="hljs-number">0</span>]<br>            total_correct += <span class="hljs-built_in">int</span>(correct)<br><br>        acc = total_correct / total_num<br>        <span class="hljs-built_in">print</span>(epoch, <span class="hljs-string">&#x27;acc:&#x27;</span>, acc)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;速寄了，cpu使用率拉满跑了30min还不到一半&lt;/p&gt;
&lt;p&gt;我不理解代码但我大受震撼&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
    <category term="deeplearning" scheme="https://github.com/sterne012/sterne012.github.io/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>Hacking to The CS Homework</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/01/05/DSpta/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/01/05/DSpta/</id>
    <published>2022-01-05T07:08:19.000Z</published>
    <updated>2022-01-05T11:01:02.416Z</updated>
    
    <content type="html"><![CDATA[<p> 淦，错好多</p><blockquote><p>稀疏矩阵采用三元组存储的时候，一般需要一个行逻辑链接的顺序表，用以指出每一行的第一个非零元素在三元组中的位置。用这个顺序表的主要目的是为了___。</p><p>(2分)</p><p>A.节省存储空间</p><p>B.更清晰表示每行元素所在位置</p><p>C.更清晰表示每列元素所在位置</p><p>D.加快算法运行效率</p></blockquote><p><strong>指出每一行的第一个非零元素在三元组中的位置</strong></p><p>这个不是矩阵转置用的那个吗 加快运行D</p><p>（当时选了B）（甚至我记得以前还选过A）</p><blockquote><p>Given the result of the 2nd run of a sorting method as { 11, 12, 13, 7, 8, 9, 23, 4, 5 }. Then among the following methods, this method has to be:</p><p>(1分)</p><p>A.bubble sort</p><p>B.selection sort</p><p>C.insertion sort</p><p>D.merge sort</p></blockquote><p>（错选D）merge是归并吧？</p><blockquote><p>To sort 10 elements by simple selection sort, the worst-case number of swaps is:</p><p>(1分)</p><p>A.9</p><p>B.36</p><p>C.45</p><p>D.100</p></blockquote><p>（错选C）</p><blockquote><p>将序列{ 2, 12, 16, 88, 5, 10, 34 }排序。若前2趟排序的结果如下：</p><ul><li>第1趟排序后：2, 12, 16, 10, 5, 34, 88</li><li>第2趟排序后：2, 5, 10, 12, 16, 34, 88</li></ul><p>则可能的排序算法是：</p><p>(1分)</p><p>A.冒泡排序</p><p>B.快速排序</p><p>C.归并排序</p><p>D.插入排序</p></blockquote><p>（错选A）完了这不是冒泡？</p><blockquote><p>数据序列{ 3, 1, 4, 11, 9, 16, 7, 28 }只能是下列哪种排序算法的两趟排序结果？</p><p>(1分)</p><p>A.冒泡排序</p><p>B.快速排序</p><p>C.插入排序</p><p>D.堆排序</p></blockquote><p>（错选D）完了</p><blockquote><p>无向连通图边数一定大于顶点个数减1。</p><p>(1分)</p><p>T</p><p>F</p></blockquote><p>（错选T）寄</p><blockquote><p>如果从有向图 <em>G</em> 的每一点均能通过深度优先搜索遍历到所有其它顶点，那么该图一定不存在拓扑序列。</p><p>(2分)</p><p>T</p><p>F</p></blockquote><p>（错选F）啊啊啊啊</p><blockquote><p>在用邻接表表示有<em>N</em>个结点<em>E</em>条边的图时，深度优先遍历算法的时间复杂度为：</p><p>(2分)</p><p>A.<em>O</em>(<em>N</em>)</p><p>B.</p><p>O*(<em>N</em>+<em>E</em>)</p><p>C.</p><p><em>O</em>(<em>N</em>2)</p><p>D.<em>O</em>(<em>N</em>2×<em>E</em>)</p></blockquote><p>（错选C）</p><blockquote><p>试利用Floyed算法，求下图所示有向图的各对顶点之间的最短路径。下列选项哪个给出了正确的最短路径长度矩阵和最短路径矩阵？</p><img src="/2022/01/05/DSpta/51cc76b9-d3b6-4ec6-bdf7-cfb542755b8b.JPG" class="" title="51cc76b9-d3b6-4ec6-bdf7-cfb542755b8b"><img src="/2022/01/05/DSpta/image-20220105190051921.png" class="" title="image-20220105190051921"></blockquote><p>（错选D）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 淦，错好多&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;稀疏矩阵采用三元组存储的时候，一般需要一个行逻辑链接的顺序表，用以指出每一行的第一个非零元素在三元组中的位置。用这个顺序表的主要目的是为了___。&lt;/p&gt;
&lt;p&gt;(2分)&lt;/p&gt;
&lt;p&gt;A.节省存储空间&lt;/p&gt;
&lt;p&gt;B</summary>
      
    
    
    
    
    <category term="c" scheme="https://github.com/sterne012/sterne012.github.io/tags/c/"/>
    
    <category term="review" scheme="https://github.com/sterne012/sterne012.github.io/tags/review/"/>
    
  </entry>
  
</feed>
