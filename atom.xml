<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome -Sterne&#39;s Blog-</title>
  
  <subtitle>And in that light, I find deliverance——</subtitle>
  <link href="https://github.com/sterne012/sterne012.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/sterne012/sterne012.github.io/"/>
  <updated>2023-03-20T07:27:58.554Z</updated>
  <id>https://github.com/sterne012/sterne012.github.io/</id>
  
  <author>
    <name>sterne</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数字图像处理课设</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/12/09/ImageProcCode/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/12/09/ImageProcCode/</id>
    <published>2022-12-09T07:55:02.000Z</published>
    <updated>2023-03-20T07:27:58.554Z</updated>
    
    <content type="html"><![CDATA[<p> 数字图像的课设部分代码吧算是，用来往word报告里复制粘贴的</p><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><h2 id="1-1图像显示"><a href="#1-1图像显示" class="headerlink" title="1.1图像显示"></a>1.1图像显示</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">from</span> im.to_label <span class="hljs-keyword">import</span> to_label<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_show</span>(<span class="hljs-params">label,path</span>):</span><br>    img = cv2.imread(path)<br><br>    to_label(label,img)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># to_label是一个输出图像到qt界面label的函数，多次使用，后面不再描述</span><br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">from</span> PyQt5.QtGui <span class="hljs-keyword">import</span> QImage, QPixmap<br><span class="hljs-keyword">from</span> PyQt5 <span class="hljs-keyword">import</span> QtCore<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">to_label</span>(<span class="hljs-params">label,nimg</span>):</span><br>    <span class="hljs-comment"># 显示到label</span><br>    height, width, channel = nimg.shape<br>    bytesPerLine = <span class="hljs-number">3</span> * width<br>    cv2.cvtColor(nimg, cv2.COLOR_BGR2RGB, nimg)<br>    <span class="hljs-comment"># print(img.data)</span><br>    QImg = QImage(nimg.data, width, height, bytesPerLine, QImage.Format_RGB888)<br>    pixmap = QPixmap.fromImage(QImg)<br>    label.setGeometry(QtCore.QRect(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, width, height))<br>    label.setPixmap(pixmap)<br></code></pre></td></tr></table></figure><img src="/2022/12/09/ImageProcCode/image-20221209172751726.png" class="" title="image-20221209172751726"><h2 id="2图像属性"><a href="#2图像属性" class="headerlink" title="2图像属性"></a>2图像属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_properties</span>(<span class="hljs-params">path</span>):</span><br>    img = cv2.imread(path)<br>    <span class="hljs-keyword">return</span> path, img.shape, img.size, img.dtype<br></code></pre></td></tr></table></figure><img src="/2022/12/09/ImageProcCode/image-20221209172802982.png" class="" title="image-20221209172802982"><h2 id="3图像灰度化"><a href="#3图像灰度化" class="headerlink" title="3图像灰度化"></a>3图像灰度化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">from</span> im.save_file <span class="hljs-keyword">import</span> save_file<br><span class="hljs-keyword">from</span> im.to_label <span class="hljs-keyword">import</span> to_label_gray<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_graying</span>(<span class="hljs-params">label,path</span>):</span><br>    img = cv2.imread(path)<br>    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br><br>    to_label_gray(label,img)<br>    <span class="hljs-keyword">return</span> save_file(img,path,<span class="hljs-string">&#x27;graying&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># to_label_gray是一个输出灰度图像到qt界面label的函数，多次使用，后面不再描述</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">to_label_gray</span>(<span class="hljs-params">label,nimg</span>):</span><br>    <span class="hljs-comment"># 显示到label</span><br>    height, width = nimg.shape<br>    <span class="hljs-comment"># bytesPerComponent = 1</span><br>    bytesPerLine = width<br>    <span class="hljs-comment"># cv2.cvtColor(img, cv2.COLOR_GRAY2RGB, img)</span><br>    QImg = QImage(nimg.data, width, height, bytesPerLine, QImage.Format_Grayscale8)<br>    pixmap = QPixmap.fromImage(QImg)<br>    label.setGeometry(QtCore.QRect(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, width, height))<br>    label.setPixmap(pixmap)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># save_file函数，根据操作名称添加一个后缀并保存</span><br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save_file</span>(<span class="hljs-params">nimg, path, sub_name</span>):</span><br>    <span class="hljs-comment"># 根据路径读图片名称</span><br>    full_name = path[path.rfind(<span class="hljs-string">&#x27;\\&#x27;</span>) + <span class="hljs-number">1</span>:]<br>    name = full_name[<span class="hljs-number">0</span>:full_name.find(<span class="hljs-string">&#x27;.&#x27;</span>)]<br>    suffix = full_name[full_name.rfind(<span class="hljs-string">&#x27;.&#x27;</span>):]<br>    <span class="hljs-comment"># 名称格式：图像原名+操作名sub_name+格式</span><br>    path = os.getcwd() + <span class="hljs-string">&#x27;\\image\\&#x27;</span> + name + <span class="hljs-string">&#x27;_&#x27;</span> + sub_name + suffix<br>    cv2.imwrite(path, nimg)<br><br>    <span class="hljs-keyword">return</span> path<br></code></pre></td></tr></table></figure><img src="/2022/12/09/ImageProcCode/image-20221209172827647.png" class="" title="image-20221209172827647"><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><h2 id="2-1移动"><a href="#2-1移动" class="headerlink" title="2.1移动"></a>2.1移动</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">from</span> im.save_file <span class="hljs-keyword">import</span> save_file<br><span class="hljs-keyword">from</span> im.to_label <span class="hljs-keyword">import</span> to_label<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_move</span>(<span class="hljs-params">label, path, dx=<span class="hljs-number">0</span>, dy=<span class="hljs-number">0</span>, expand=<span class="hljs-number">0</span></span>):</span><br>    img = cv2.imread(path)<br><br>    <span class="hljs-keyword">if</span> expand == <span class="hljs-number">0</span>:<br>        height, width, channels = img.shape<br>    <span class="hljs-keyword">else</span>:<br>        height, width, channels = img.shape<br>        height = height + dy<br>        width = width + dx<br><br>    nimg = np.ones((height, width, channels), np.uint8) * <span class="hljs-number">255</span><br>    <span class="hljs-keyword">for</span> ni <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>        <span class="hljs-keyword">for</span> nj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>            i = ni - dx<br>            j = nj - dy<br>            <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt;= i &lt; width <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> &lt;= j &lt; height:<br>                nimg[nj, ni] = img[j, i]  <span class="hljs-comment"># ?坐标</span><br><br>    path = save_file(nimg,path,<span class="hljs-string">&#x27;moved&#x27;</span>)<br><br>    to_label(label,nimg)<br><br>    <span class="hljs-keyword">return</span> path<br></code></pre></td></tr></table></figure><h2 id="2-2缩小"><a href="#2-2缩小" class="headerlink" title="2.2缩小"></a>2.2缩小</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># qt窗口中判断使用放大/缩小的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">accept</span>(<span class="hljs-params">self</span>):</span><br>        x = <span class="hljs-built_in">float</span>(self.lineEdit.text())<br>        y = <span class="hljs-built_in">float</span>(self.lineEdit_2.text())<br>        <span class="hljs-comment"># 处理不合法数值（非负）</span><br>        <span class="hljs-keyword">if</span> x &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> y &gt;= <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">if</span> x &gt;= <span class="hljs-number">100</span> <span class="hljs-keyword">and</span> y &gt;= <span class="hljs-number">100</span>:<br>                expand = <span class="hljs-number">1</span>  <span class="hljs-comment"># 放大</span><br>                self.signal_re.emit(x, y, expand)<br>                self.close()<br>            <span class="hljs-keyword">elif</span> x &lt;= <span class="hljs-number">100</span> <span class="hljs-keyword">and</span> y &lt;= <span class="hljs-number">100</span>:<br>                expand = <span class="hljs-number">0</span>  <span class="hljs-comment"># 缩小or不变</span><br>                self.signal_re.emit(x, y, expand)<br>                self.close()<br>            <span class="hljs-keyword">else</span>:<br>                QMessageBox.warning(QWidget(), <span class="hljs-string">&#x27;warning&#x27;</span>, <span class="hljs-string">&#x27;不支持同时放大和缩小...&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            QMessageBox.warning(QWidget(), <span class="hljs-string">&#x27;warning&#x27;</span>, <span class="hljs-string">&#x27;数值不合法！&#x27;</span>)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">from</span> im.save_file <span class="hljs-keyword">import</span> save_file<br><span class="hljs-keyword">from</span> im.to_label <span class="hljs-keyword">import</span> to_label<br><br><br><span class="hljs-comment"># kx ky缩放倍数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_shrink</span>(<span class="hljs-params">label, path, kx, ky</span>):</span><br>    img = cv2.imread(path)<br>    height, width, channels = img.shape<br>    kx = <span class="hljs-built_in">float</span>(kx / <span class="hljs-number">100</span>)<br>    ky = <span class="hljs-built_in">float</span>(ky / <span class="hljs-number">100</span>)<br>    x = <span class="hljs-built_in">round</span>(width * kx)<br>    y = <span class="hljs-built_in">round</span>(height * ky)<br>    nimg = np.zeros((y, x, channels), np.uint8)<br><br>    <span class="hljs-keyword">for</span> ni <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(x):<br>        <span class="hljs-keyword">for</span> nj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(y):<br>            i = <span class="hljs-built_in">round</span>(ni * <span class="hljs-built_in">float</span>(<span class="hljs-number">1</span> / kx))<br>            j = <span class="hljs-built_in">round</span>(nj * <span class="hljs-built_in">float</span>(<span class="hljs-number">1</span> / ky))<br>            nimg[nj, ni] = img[j, i]<br><br>    path = save_file(nimg,path,<span class="hljs-string">&#x27;shrink&#x27;</span>)<br><br>    to_label(nimg,label)<br><br>    <span class="hljs-comment"># 当前的属性要变化</span><br>    <span class="hljs-keyword">return</span> path<br></code></pre></td></tr></table></figure><h2 id="2-3放大"><a href="#2-3放大" class="headerlink" title="2.3放大"></a>2.3放大</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">from</span> im.save_file <span class="hljs-keyword">import</span> save_file<br><span class="hljs-keyword">from</span> im.to_label <span class="hljs-keyword">import</span> to_label<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_magnify</span>(<span class="hljs-params">label, path, kx, ky</span>):</span><br>    img = cv2.imread(path)<br>    height, width, channels = img.shape<br>    kx = <span class="hljs-built_in">float</span>(kx / <span class="hljs-number">100</span>)<br>    ky = <span class="hljs-built_in">float</span>(ky / <span class="hljs-number">100</span>)<br>    x = <span class="hljs-built_in">round</span>(width * kx)<br>    y = <span class="hljs-built_in">round</span>(height * ky)<br>    nimg = np.zeros((y, x, channels), np.uint8)<br><br>    temp = np.zeros((height, width), <span class="hljs-built_in">list</span>)  <span class="hljs-comment"># 存第一次被赋值的点坐标</span><br>    ttemp = np.zeros((y, x), <span class="hljs-built_in">int</span>)  <span class="hljs-comment"># 存新图中这个点是否访问</span><br>    lastx = -<span class="hljs-number">1</span><br>    <span class="hljs-comment"># 划分子块</span><br>    <span class="hljs-keyword">for</span> ni <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(x):<br>        lasty = -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> nj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(y):<br>            i = <span class="hljs-built_in">round</span>(ni / kx)<br>            j = <span class="hljs-built_in">round</span>(nj / ky)<br>            <span class="hljs-keyword">if</span> i &gt;= width: i = width - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> j &gt;= height: j = height - <span class="hljs-number">1</span><br>            <span class="hljs-comment"># 不是最后一行、最后一列</span><br>            <span class="hljs-keyword">if</span> i != width - <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> j != height - <span class="hljs-number">1</span>:<br>                <span class="hljs-comment"># 都是左上角的，是ij的第一次变化</span><br>                <span class="hljs-keyword">if</span> temp[j, i] == <span class="hljs-number">0</span>:<br>                    nimg[nj, ni] = img[j, i]<br>                    temp[j, i] = [nj, ni]<br>                    ttemp[nj, ni] = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 最后一行而非最后一列</span><br>                <span class="hljs-keyword">if</span> i == width - <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> j != height - <span class="hljs-number">1</span> \<br>                        <span class="hljs-keyword">and</span> ni == x - <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> nj != y - <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">if</span> lasty != j:<br>                        nimg[nj, ni] = img[j, i]<br>                        lasty = j<br>                        temp[j, i] = [nj, ni]<br>                        ttemp[nj, ni] = <span class="hljs-number">1</span><br><br>                <span class="hljs-comment"># 最后一列而非最后一行</span><br>                <span class="hljs-keyword">if</span> i != width - <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> j == height - <span class="hljs-number">1</span> \<br>                        <span class="hljs-keyword">and</span> ni != x - <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> nj == y - <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">if</span> lastx != i:<br>                        nimg[nj, ni] = img[j, i]<br>                        lastx = i<br>                        temp[j, i] = [nj, ni]<br>                        ttemp[nj, ni] = <span class="hljs-number">1</span><br><br>                <span class="hljs-comment"># 最后一个像素</span><br>                <span class="hljs-keyword">if</span> i == width - <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> j == height - <span class="hljs-number">1</span> \<br>                        <span class="hljs-keyword">and</span> ni == x - <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> nj == y - <span class="hljs-number">1</span>:<br>                    nimg[nj, ni] = img[j, i]<br>                    temp[j, i] = [nj, ni]<br>                    ttemp[nj, ni] = <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># 所有填充像素所在列</span><br>    <span class="hljs-keyword">for</span> ni <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(x):<br>        <span class="hljs-keyword">if</span> ttemp[<span class="hljs-number">0</span>, ni] != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">for</span> nj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(y):<br>                <span class="hljs-keyword">if</span> ttemp[nj, ni] == <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">if</span> nj == <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> ni == <span class="hljs-number">94</span>:<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;check&#x27;</span>)<br>                    ttemp[nj, ni] = <span class="hljs-number">1</span><br>                    i = <span class="hljs-built_in">round</span>(ni / kx)<br>                    j = <span class="hljs-built_in">round</span>(nj / ky)<br>                    <span class="hljs-keyword">if</span> i &gt;= width: i = width - <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">if</span> j &gt;= height: j = height - <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">if</span> j != height - <span class="hljs-number">1</span>:<br>                        a = temp[j, i]<br>                        b = temp[j + <span class="hljs-number">1</span>, i]<br>                    <span class="hljs-keyword">else</span>:<br>                        a = temp[j - <span class="hljs-number">1</span>, i]<br>                        b = temp[j, i]<br>                    k = <span class="hljs-built_in">float</span>((nj - a[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>) / (b[<span class="hljs-number">0</span>] - a[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>))<br>                    nimg[nj, ni] = (<span class="hljs-number">1</span> - k) * nimg[a[<span class="hljs-number">0</span>], a[<span class="hljs-number">1</span>]] + k * (nimg[b[<span class="hljs-number">0</span>], b[<span class="hljs-number">1</span>]])<br><br>    <span class="hljs-comment"># 行</span><br>    <span class="hljs-keyword">for</span> nj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(y):<br>        <span class="hljs-keyword">for</span> ni <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(x):<br>            <span class="hljs-keyword">if</span> ttemp[nj, ni] == <span class="hljs-number">0</span>:<br>                ttemp[nj, ni] = <span class="hljs-number">1</span><br>                i = <span class="hljs-built_in">round</span>(ni / kx)<br>                j = <span class="hljs-built_in">round</span>(nj / ky)<br>                <span class="hljs-keyword">if</span> i &gt;= width: i = width - <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> j &gt;= height: j = height - <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> i != width - <span class="hljs-number">1</span>:<br>                    a = temp[j, i]<br>                    b = temp[j, i + <span class="hljs-number">1</span>]<br>                <span class="hljs-keyword">else</span>:<br>                    a = temp[j, i - <span class="hljs-number">1</span>]<br>                    b = temp[j, i]<br>                k = <span class="hljs-built_in">float</span>((ni - a[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>) / (b[<span class="hljs-number">1</span>] - a[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>))<br>                nimg[nj, ni] = (<span class="hljs-number">1</span> - k) * nimg[a[<span class="hljs-number">0</span>], a[<span class="hljs-number">1</span>]] + k * nimg[b[<span class="hljs-number">0</span>], b[<span class="hljs-number">1</span>]]<br><br>    path = save_file(nimg,path,<span class="hljs-string">&#x27;magnify&#x27;</span>)<br><br>    to_label(label,nimg)<br><br>    <span class="hljs-comment"># 当前的属性要变化</span><br>    <span class="hljs-keyword">return</span> path<br></code></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><h2 id="3-1灰度直方图"><a href="#3-1灰度直方图" class="headerlink" title="3.1灰度直方图"></a>3.1灰度直方图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">from</span> im.to_label <span class="hljs-keyword">import</span> to_label<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_histogram_gray</span>(<span class="hljs-params">label, path, suffix_name=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>    img = cv2.imread(path)<br>    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br><br>    img_b = cv2.calcHist([img], [<span class="hljs-number">0</span>], <span class="hljs-literal">None</span>, [<span class="hljs-number">256</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">255</span>])  <span class="hljs-comment"># B分量灰度图的直方图</span><br><br>    plt.clf()<br>    x = np.arange(<span class="hljs-number">256</span>)<br>    img_his = img_b.flatten()<br>    plt.bar(x, img_his)<br><br>    full_name = path[path.rfind(<span class="hljs-string">&#x27;\\&#x27;</span>) + <span class="hljs-number">1</span>:]<br>    name = full_name[<span class="hljs-number">0</span>:full_name.find(<span class="hljs-string">&#x27;.&#x27;</span>)]<br>    suffix = full_name[full_name.rfind(<span class="hljs-string">&#x27;.&#x27;</span>):]<br>    npath = os.getcwd() + <span class="hljs-string">&#x27;\\image\\&#x27;</span> + name + suffix_name + suffix<br>    plt.savefig(npath)<br><br>    <span class="hljs-comment"># 读灰度直方图</span><br>    nimg = cv2.imread(npath)<br>    to_label(label,nimg)<br><br>    <span class="hljs-keyword">return</span> path<br></code></pre></td></tr></table></figure><h2 id="3-2均衡化"><a href="#3-2均衡化" class="headerlink" title="3.2均衡化"></a>3.2均衡化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><br><span class="hljs-keyword">from</span> im.save_file <span class="hljs-keyword">import</span> save_file<br><span class="hljs-keyword">from</span> im.to_label <span class="hljs-keyword">import</span> to_label_gray<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_equalize</span>(<span class="hljs-params">label, path</span>):</span><br>    img = cv2.imread(path)<br>    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br>    <span class="hljs-comment"># 必须要是灰度才能均衡化</span><br>    nimg = cv2.equalizeHist(gray)<br><br>    to_label_gray(label,nimg)<br><br>    <span class="hljs-keyword">return</span> save_file(nimg,path,<span class="hljs-string">&#x27;equalize&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><h2 id="椒盐噪声"><a href="#椒盐噪声" class="headerlink" title="椒盐噪声"></a>椒盐噪声</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> im.save_file <span class="hljs-keyword">import</span> save_file<br><span class="hljs-keyword">from</span> im.to_label <span class="hljs-keyword">import</span> to_label<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_saltnoise</span>(<span class="hljs-params">label, path, n=<span class="hljs-number">2000</span></span>):</span><br>    img = cv2.imread(path)<br><br>    height, width, channel = img.shape<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        x = np.random.randint(<span class="hljs-number">1</span>, width)<br>        y = np.random.randint(<span class="hljs-number">1</span>, height)<br>        <span class="hljs-keyword">if</span> np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>) == <span class="hljs-number">0</span>:<br>            img[x, y] = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">else</span>:<br>            img[x, y] = <span class="hljs-number">255</span><br><br>    path = save_file(img,path,<span class="hljs-string">&#x27;saltnoise&#x27;</span>)<br>    to_label(label,img)<br><br>    <span class="hljs-keyword">return</span> path<br></code></pre></td></tr></table></figure><h2 id="高斯噪声"><a href="#高斯噪声" class="headerlink" title="高斯噪声"></a>高斯噪声</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_gaussnoise</span>(<span class="hljs-params">label, path, mu=<span class="hljs-number">0</span>, sigma=<span class="hljs-number">0.1</span></span>):</span><br>    img = cv2.imread(path)<br><br>    img = np.array(img / <span class="hljs-number">255</span>, <span class="hljs-built_in">float</span>)<br>    noise = np.random.normal(mu, sigma, img.shape)<br>    img = img + noise<br><br>    nimg = np.clip(img,-<span class="hljs-number">1.0</span>,<span class="hljs-number">1.0</span>) <br>    nimg = <span class="hljs-built_in">abs</span>(nimg*<span class="hljs-number">255</span>).astype(np.uint8)<br><br>    path = save_file(nimg,path,<span class="hljs-string">&#x27;gaussnoise&#x27;</span>)<br>    to_label(label,nimg)<br><br>    <span class="hljs-keyword">return</span> path<br></code></pre></td></tr></table></figure><h2 id="均值滤波"><a href="#均值滤波" class="headerlink" title="均值滤波"></a>均值滤波</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_meanfilter</span>(<span class="hljs-params">label, path</span>):</span><br>    img = cv2.imread(path)<br>    nimg = cv2.blur(img, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>))<br><br>    path = save_file(nimg, path, <span class="hljs-string">&#x27;meanfiltering&#x27;</span>)<br>    to_label(label,nimg)<br>    <br>    <span class="hljs-keyword">return</span> path<br></code></pre></td></tr></table></figure><h2 id="中值滤波"><a href="#中值滤波" class="headerlink" title="中值滤波"></a>中值滤波</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_medianfilter</span>(<span class="hljs-params">label,path</span>):</span><br>    img = cv2.imread(path)<br>    nimg = cv2.medianBlur(img, <span class="hljs-number">3</span>)<br><br>    path = save_file(nimg, path, <span class="hljs-string">&#x27;medianfiltering&#x27;</span>)<br>    to_label(label,nimg)<br><br>    <span class="hljs-keyword">return</span> path<br></code></pre></td></tr></table></figure><h2 id="高斯滤波"><a href="#高斯滤波" class="headerlink" title="高斯滤波"></a>高斯滤波</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_gaussfilter</span>(<span class="hljs-params">label,path</span>):</span><br>    img = cv2.imread(path)<br>    nimg = cv2.GaussianBlur(img, (<span class="hljs-number">3</span>,<span class="hljs-number">3</span>),<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br><br>    path = save_file(nimg, path, <span class="hljs-string">&#x27;gaussfiltering&#x27;</span>)<br>    to_label(label,nimg)<br><br>    <span class="hljs-keyword">return</span> path<br></code></pre></td></tr></table></figure><h1 id="5"><a href="#5" class="headerlink" title="5"></a>5</h1><h2 id="normal"><a href="#normal" class="headerlink" title="normal"></a>normal</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">from</span> im.save_file <span class="hljs-keyword">import</span> save_file<br><span class="hljs-keyword">from</span> im.to_label <span class="hljs-keyword">import</span> to_label_gray<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_sharpen</span>(<span class="hljs-params">label, path</span>):</span><br>    img = cv2.imread(path)<br>    height, width, channels = img.shape<br>    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br><br>    nimg = np.zeros((height, width, channels), np.uint8)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>            nimg[j, i] = np.sqrt((img[j, i] - img[j, i - <span class="hljs-number">1</span>]) ** <span class="hljs-number">2</span> + (img[j, i] - img[j - <span class="hljs-number">1</span>, i]) ** <span class="hljs-number">2</span>).astype(np.uint8)<br><br>    path = save_file(nimg, path, <span class="hljs-string">&#x27;sharpen4&#x27;</span>)<br>    to_label_gray(label, nimg)<br><br>    <span class="hljs-keyword">return</span> path<br></code></pre></td></tr></table></figure><h2 id="roberts"><a href="#roberts" class="headerlink" title="roberts"></a>roberts</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_sharpen_roberts</span>(<span class="hljs-params">label, path</span>):</span><br>    img = cv2.imread(path)<br>    nimg = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br><br>    <span class="hljs-comment"># 2. Roberts算子</span><br>    kernelx = np.array([[-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]], dtype=<span class="hljs-built_in">int</span>)<br>    kernely = np.array([[<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]], dtype=<span class="hljs-built_in">int</span>)<br>    <span class="hljs-comment"># 3. 卷积操作</span><br>    x = cv2.filter2D(nimg, cv2.CV_16S, kernelx)<br>    y = cv2.filter2D(nimg, cv2.CV_16S, kernely)<br>    <span class="hljs-comment"># 4. 数据格式转换 知识盲区</span><br>    absX = cv2.convertScaleAbs(x)<br>    absY = cv2.convertScaleAbs(y)<br>    nimg = cv2.addWeighted(absX, <span class="hljs-number">0.5</span>, absY, <span class="hljs-number">0.5</span>, <span class="hljs-number">0</span>)<br><br>    path = save_file(nimg, path, <span class="hljs-string">&#x27;sharpenroberts&#x27;</span>)<br>    to_label_gray(label, nimg)<br><br>    <span class="hljs-keyword">return</span> path<br></code></pre></td></tr></table></figure><h2 id="sobel"><a href="#sobel" class="headerlink" title="sobel"></a>sobel</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_sharpen_sobel</span>(<span class="hljs-params">label, path</span>):</span><br>    img = cv2.imread(path)<br>    nimg = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br><br>    kernelx = np.array([[-<span class="hljs-number">1</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]], dtype=<span class="hljs-built_in">int</span>)<br>    kernely = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">2</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>]], dtype=<span class="hljs-built_in">int</span>)<br>    x = cv2.filter2D(nimg, cv2.CV_16S, kernelx)<br>    y = cv2.filter2D(nimg, cv2.CV_16S, kernely)<br>    absX = cv2.convertScaleAbs(x)<br>    absY = cv2.convertScaleAbs(y)<br>    nimg = cv2.addWeighted(absX, <span class="hljs-number">0.5</span>, absY, <span class="hljs-number">0.5</span>, <span class="hljs-number">0</span>)<br><br>    path = save_file(nimg, path, <span class="hljs-string">&#x27;sharpensobel&#x27;</span>)<br>    to_label_gray(label, nimg)<br><br>    <span class="hljs-keyword">return</span> path<br></code></pre></td></tr></table></figure><h2 id="prewitt"><a href="#prewitt" class="headerlink" title="prewitt"></a>prewitt</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_sharpen_prewitt</span>(<span class="hljs-params">label, path</span>):</span><br>    img = cv2.imread(path)<br>    nimg = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br><br>    kernelx = np.array([[-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]], dtype=<span class="hljs-built_in">int</span>)<br>    kernely = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>]], dtype=<span class="hljs-built_in">int</span>)<br>    x = cv2.filter2D(nimg, cv2.CV_16S, kernelx)<br>    y = cv2.filter2D(nimg, cv2.CV_16S, kernely)<br>    absX = cv2.convertScaleAbs(x)<br>    absY = cv2.convertScaleAbs(y)<br>    nimg = cv2.addWeighted(absX, <span class="hljs-number">0.5</span>, absY, <span class="hljs-number">0.5</span>, <span class="hljs-number">0</span>)<br><br>    path = save_file(nimg, path, <span class="hljs-string">&#x27;sharpenprewitt&#x27;</span>)<br>    to_label_gray(label, nimg)<br><br>    <span class="hljs-keyword">return</span> path<br></code></pre></td></tr></table></figure><h2 id="krisch"><a href="#krisch" class="headerlink" title="krisch"></a>krisch</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_sharpen_krisch</span>(<span class="hljs-params">label, path</span>):</span><br>    img = cv2.imread(path)<br>    nimg = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br>    height, width, channels = img.shape<br>    filtered_list = np.zeros((<span class="hljs-number">8</span>, height, width))<br>    kernel = [np.array([[<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>], [-<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">3</span>], [-<span class="hljs-number">3</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">3</span>]]), np.array([[-<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>], [-<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>], [-<span class="hljs-number">3</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">3</span>]]),<br>              np.array([[-<span class="hljs-number">3</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">5</span>], [-<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>], [-<span class="hljs-number">3</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">5</span>]]), np.array([[-<span class="hljs-number">3</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">3</span>], [-<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>], [-<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>]]),<br>              np.array([[-<span class="hljs-number">3</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">3</span>], [-<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">3</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>]]), np.array([[-<span class="hljs-number">3</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">3</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">3</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">3</span>]]),<br>              np.array([[<span class="hljs-number">5</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">3</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">3</span>], [<span class="hljs-number">5</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">3</span>]]), np.array([[<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">3</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">3</span>], [-<span class="hljs-number">3</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">3</span>]])]<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        out = cv2.filter2D(nimg, cv2.CV_16S, kernel[i])<br>        filtered_list[i] = out<br><br>    final = np.<span class="hljs-built_in">max</span>(filtered_list, axis=<span class="hljs-number">0</span>)  <span class="hljs-comment"># 取八个方向中的最大值，也就是取第0维的最大值作为图像该点，滤波之后的新的像素值</span><br>    final[np.where(final &gt;= <span class="hljs-number">255</span>)] = <span class="hljs-number">255</span>  <span class="hljs-comment"># 令像素值大于255的点等于255</span><br>    final[np.where(final &lt; <span class="hljs-number">255</span>)] = <span class="hljs-number">0</span>  <span class="hljs-comment"># 令像素值小于255的点等于0</span><br>    final = final.astype(np.uint8)<br><br>    path = save_file(final, path, <span class="hljs-string">&#x27;sharpenkrisch&#x27;</span>)<br>    to_label_gray(label, final)<br><br>    <span class="hljs-keyword">return</span> path<br><br></code></pre></td></tr></table></figure><h2 id="laplacian"><a href="#laplacian" class="headerlink" title="laplacian"></a>laplacian</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_sharpen_laplacian</span>(<span class="hljs-params">label, path</span>):</span><br>    img = cv2.imread(path)<br>    nimg = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br>    nimg = cv2.Laplacian(nimg, cv2.CV_16S, ksize=<span class="hljs-number">3</span>)<br>    nimg = cv2.convertScaleAbs(nimg)<br><br>    path = save_file(nimg, path, <span class="hljs-string">&#x27;sharpenlaplacian&#x27;</span>)<br>    to_label_gray(label, nimg)<br><br>    <span class="hljs-keyword">return</span> path<br></code></pre></td></tr></table></figure><h2 id="canny"><a href="#canny" class="headerlink" title="canny"></a>canny</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Canny算子</span><br><span class="hljs-comment"># Canny方法不容易受噪声干扰，能够检测到真正的弱边缘。</span><br><span class="hljs-comment"># 优点在于，使用两种不同的阈值分别检测强边缘和弱边缘，并且当弱边缘和强边缘相连时，才将弱边缘包含在输出图像中。</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_sharpen_canny</span>(<span class="hljs-params">label,path</span>):</span><br>    img = cv2.imread(path)<br>    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br>    <span class="hljs-comment"># 高斯滤波降噪</span><br>    gaussian = cv2.GaussianBlur(img, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), <span class="hljs-number">0</span>)<br>    <span class="hljs-comment"># Canny算子</span><br>    nimg = cv2.Canny(gaussian, <span class="hljs-number">50</span>, <span class="hljs-number">180</span>)<br><br>    path = save_file(nimg, path, <span class="hljs-string">&#x27;sharpencanny&#x27;</span>)<br>    to_label_gray(label, nimg)<br><br>    <span class="hljs-keyword">return</span> path<br></code></pre></td></tr></table></figure><h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># LOG算子</span><br><span class="hljs-comment"># 根据图像的信噪比来求检测边缘的最优滤波器。</span><br><span class="hljs-comment"># 该算法首先对图像做高斯滤波，然后再求其拉普拉斯（ Laplacian ）二阶导数，</span><br><span class="hljs-comment"># 根据二阶导数的过零点来检测图像的边界，即通过检测滤波结果的零交叉（ Zero crossings ）来获得图像或物体的边缘。</span><br><span class="hljs-comment"># LOG 算子实际上是把 Gauss 滤波和 Laplacian 滤波结合了起来，先平滑掉噪声，再进行边缘检测。</span><br><span class="hljs-comment"># LOG 算子与视觉生理中的数学模型相似，因此在图像处理领域中得到了广泛的应用。</span><br><span class="hljs-comment"># 它具有抗干扰能力强，边界定位精度高，边缘连续性好，能有效提取对比度弱的边界等特点。</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_sharpen_log</span>(<span class="hljs-params">label,path</span>):</span><br>    img = cv2.imread(path)<br>    nimg = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br>    <span class="hljs-comment"># 先通过高斯滤波降噪</span><br>    gaussian = cv2.GaussianBlur(nimg, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), <span class="hljs-number">0</span>)<br>    <span class="hljs-comment"># 再通过拉普拉斯算子做边缘检测</span><br>    dst = cv2.Laplacian(gaussian, cv2.CV_16S, ksize=<span class="hljs-number">3</span>)<br>    log = cv2.convertScaleAbs(dst)<br><br>    path = save_file(log, path, <span class="hljs-string">&#x27;sharpenlog&#x27;</span>)<br>    to_label_gray(label, log)<br><br>    <span class="hljs-keyword">return</span> path<br></code></pre></td></tr></table></figure><h1 id="6"><a href="#6" class="headerlink" title="6"></a>6</h1><h2 id="固定阈值分割"><a href="#固定阈值分割" class="headerlink" title="固定阈值分割"></a>固定阈值分割</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_threshold</span>(<span class="hljs-params">label, path, ret</span>):</span><br>    img = cv2.imread(path)<br>    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br>    ret, nimg = cv2.threshold(img, ret, <span class="hljs-number">255</span>, cv2.THRESH_BINARY)<br><br>    to_label_gray(label,nimg)<br>    <span class="hljs-keyword">return</span> save_file(nimg,path,<span class="hljs-string">&#x27;threshold&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="迭代阈值分割"><a href="#迭代阈值分割" class="headerlink" title="迭代阈值分割"></a>迭代阈值分割</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_threshold_iter</span>(<span class="hljs-params">label,path</span>):</span><br>    img = cv2.imread(path)<br>    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br><br>    <span class="hljs-built_in">iter</span> = img.mean()<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        t0 = img[img &lt; <span class="hljs-built_in">iter</span>].mean()  <span class="hljs-comment"># 背景平均灰度值</span><br>        t1 = img[img &gt;= <span class="hljs-built_in">iter</span>].mean()  <span class="hljs-comment"># 前景平均灰度值</span><br>        t = (t0 + t1) / <span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">iter</span> == t:  <span class="hljs-comment"># 可适当放宽条件， abs(T - t) &lt; 1</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-built_in">iter</span> = t<br>    <span class="hljs-built_in">iter</span> = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">iter</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Best Threshold = <span class="hljs-subst">&#123;<span class="hljs-built_in">iter</span>&#125;</span>&quot;</span>)<br>    ret, nimg = cv2.threshold(img, <span class="hljs-built_in">iter</span>, <span class="hljs-number">255</span>, cv2.THRESH_BINARY)<br><br>    to_label_gray(label,nimg)<br>    save_file(nimg, path, <span class="hljs-string">&#x27;threiter&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">iter</span><br></code></pre></td></tr></table></figure><h2 id="空间阈值分割"><a href="#空间阈值分割" class="headerlink" title="空间阈值分割"></a>空间阈值分割</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_threshold_adapt</span>(<span class="hljs-params">label, path</span>):</span><br>    img = cv2.imread(path)<br>    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br>    nimg = cv2.adaptiveThreshold(img, <span class="hljs-number">255</span>, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>)<br><br>    to_label_gray(label,nimg)<br>    save_file(nimg, path, <span class="hljs-string">&#x27;threadapt&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="区域生长"><a href="#区域生长" class="headerlink" title="区域生长"></a>区域生长</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">from</span> im.save_file <span class="hljs-keyword">import</span> save_file<br><span class="hljs-keyword">from</span> im.to_label <span class="hljs-keyword">import</span> to_label, to_label_gray<br><br><br><span class="hljs-comment"># 求两个点的差值</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getGrayDiff</span>(<span class="hljs-params">image, currentPoint, tmpPoint</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(image[currentPoint[<span class="hljs-number">0</span>], currentPoint[<span class="hljs-number">1</span>]]) - <span class="hljs-built_in">int</span>(image[tmpPoint[<span class="hljs-number">0</span>], tmpPoint[<span class="hljs-number">1</span>]]))<br><br><br><span class="hljs-comment"># 区域生长算法</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">regional_growth</span>(<span class="hljs-params">gray, seeds, threshold=<span class="hljs-number">5</span></span>):</span><br>    <span class="hljs-comment"># 每次区域生长的时候的像素之间的八个邻接点</span><br>    connects = [(-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>), (-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), (-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)]<br>    threshold = threshold  <span class="hljs-comment"># 生长时候的相似性阈值，默认即灰度级不相差超过15以内的都算为相同</span><br>    height, weight = gray.shape<br>    seedMark = np.zeros(gray.shape)<br>    seedList = []<br>    <span class="hljs-keyword">for</span> seed <span class="hljs-keyword">in</span> seeds:<br>        <span class="hljs-keyword">if</span> gray.shape[<span class="hljs-number">0</span>] &gt; seed[<span class="hljs-number">0</span>] &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> gray.shape[<span class="hljs-number">1</span>] &gt; seed[<span class="hljs-number">1</span>] &gt; <span class="hljs-number">0</span>:<br>            seedList.append(seed)  <span class="hljs-comment"># 将添加到的列表中</span><br>    <span class="hljs-comment"># print(seedList)</span><br>    label = <span class="hljs-number">1</span>  <span class="hljs-comment"># 标记点的flag</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(seedList) &gt; <span class="hljs-number">0</span>:  <span class="hljs-comment"># 如果列表里还存在点</span><br>        currentPoint = seedList.pop(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 将最前面的那个抛出</span><br>        seedMark[currentPoint[<span class="hljs-number">0</span>], currentPoint[<span class="hljs-number">1</span>]] = label  <span class="hljs-comment"># 将对应位置的点标志为1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):  <span class="hljs-comment"># 对这个点周围的8个点一次进行相似性判断</span><br>            tmpX = currentPoint[<span class="hljs-number">0</span>] + connects[i][<span class="hljs-number">0</span>]<br>            tmpY = currentPoint[<span class="hljs-number">1</span>] + connects[i][<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">if</span> tmpX &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> tmpY &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> tmpX &gt;= height <span class="hljs-keyword">or</span> tmpY &gt;= weight:  <span class="hljs-comment"># 如果超出限定的阈值范围</span><br>                <span class="hljs-keyword">continue</span>  <span class="hljs-comment"># 跳过并继续</span><br>            grayDiff = getGrayDiff(gray, currentPoint, (tmpX, tmpY))  <span class="hljs-comment"># 计算此点与像素点的灰度级之差</span><br>            <span class="hljs-keyword">if</span> grayDiff &lt; threshold <span class="hljs-keyword">and</span> seedMark[tmpX, tmpY] == <span class="hljs-number">0</span>:<br>                seedMark[tmpX, tmpY] = label<br>                seedList.append((tmpX, tmpY))<br>    <span class="hljs-keyword">return</span> seedMark<br><br><br><span class="hljs-comment"># 初始种子选择</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">originalSeed</span>(<span class="hljs-params">gray</span>):</span><br>    ret, img1 = cv2.threshold(gray, <span class="hljs-number">127</span>, <span class="hljs-number">255</span>, cv2.THRESH_BINARY)  <span class="hljs-comment"># 二值图，种子区域(不同划分可获得不同种子)</span><br>    retval, labels, stats, centroids = cv2.connectedComponentsWithStats(img1)  <span class="hljs-comment"># 进行连通域操作，取其质点</span><br>    centroids = centroids.astype(<span class="hljs-built_in">int</span>)  <span class="hljs-comment"># 转化为整数</span><br>    <span class="hljs-comment"># seed = []</span><br>    <span class="hljs-comment"># for i  in range(img1.shape[0]):</span><br>    <span class="hljs-comment">#     for j in range(img1.shape[1]):</span><br>    <span class="hljs-comment">#         if(img1[i,j] == 255):</span><br>    <span class="hljs-comment">#             seed.append([i,j])</span><br><br>    <span class="hljs-keyword">return</span> centroids<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_seedgrowth</span>(<span class="hljs-params">label,path</span>):</span><br>    img = cv2.imread(path)<br>    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br>    seed = originalSeed(img)<br>    nimg = regional_growth(img, seed)<br>    nimg = nimg.astype(np.uint8)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(img.shape[<span class="hljs-number">0</span>]):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(img.shape[<span class="hljs-number">1</span>]):<br>            <span class="hljs-keyword">if</span> nimg[j,i] == <span class="hljs-number">0</span>:<br>                nimg[j,i] = <span class="hljs-number">255</span><br><br>    to_label_gray(label,nimg)<br>    save_file(nimg,path,<span class="hljs-string">&#x27;seedgrowth&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="7"><a href="#7" class="headerlink" title="7"></a>7</h1><h2 id="erode"><a href="#erode" class="headerlink" title="erode"></a>erode</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><br><span class="hljs-keyword">from</span> im.save_file <span class="hljs-keyword">import</span> save_file<br><span class="hljs-keyword">from</span> im.to_label <span class="hljs-keyword">import</span> to_label<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_erode</span>(<span class="hljs-params">label, path</span>):</span><br>    img = cv2.imread(path)<br>    nimg = cv2.erode(img, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), iterations=<span class="hljs-number">1</span>)<br><br>    path = save_file(nimg, path, <span class="hljs-string">&#x27;erode&#x27;</span>)<br>    to_label(label, nimg)<br>    <span class="hljs-keyword">return</span> path<br></code></pre></td></tr></table></figure><h2 id="dilate"><a href="#dilate" class="headerlink" title="dilate"></a>dilate</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">im_dilate</span>(<span class="hljs-params">label, path</span>):</span><br>    img = cv2.imread(path)<br>    nimg = cv2.dilate(img, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), iterations=<span class="hljs-number">1</span>)<br><br>    path = save_file(nimg, path, <span class="hljs-string">&#x27;erode&#x27;</span>)<br>    to_label(label, nimg)<br>    <span class="hljs-keyword">return</span> path<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 数字图像的课设部分代码吧算是，用来往word报告里复制粘贴的&lt;/p&gt;
&lt;h1 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1&quot;&gt;&lt;/a&gt;1&lt;/h1&gt;&lt;h2 id=&quot;1-1图像显示&quot;&gt;&lt;a href=&quot;#1-1图像显示&quot; cl</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
    <category term="pyqt" scheme="https://github.com/sterne012/sterne012.github.io/tags/pyqt/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/11/30/ImageProc/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/11/30/ImageProc/</id>
    <published>2022-11-30T07:55:02.000Z</published>
    <updated>2023-03-20T07:27:01.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter1-绪论"><a href="#Chapter1-绪论" class="headerlink" title="Chapter1.绪论"></a>Chapter1.绪论</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>数字图像处理（Digital Image Processing）：指借用数字计算机处理数字图像。</p><p>数字图像：用一个数字阵列来表示的图像。数字图像是图像的数值表示，像素是最小单位。数字图像是相对于模拟图像（？）来说的</p><p>图像：图像是对客观存在物体的一种相似性的生动模仿与描述，是一种直观化的描述、写真或模拟。简言之，是客观世界的仿真。</p><h2 id="图像的分类"><a href="#图像的分类" class="headerlink" title="图像的分类"></a>图像的分类</h2><p>按照图像的实际客观存在分</p><ol><li>物理图像：指物质或能量的实际分布。<ul><li>可见图像：人眼可见的图像，包括光学图像，人工生成的图像，照片、绘画</li><li>不可见的物理图像：可测的物理特征量的空间分布所构成的图像。通过可视化手段将其改造成肉眼可识别的图像。如人口密度图、压力图等。</li></ul></li><li>虚拟图像：采用数学方法，将概念形成的物体（非实物）进行表示的图像。虚拟图像是利用数学模型生成的图像。关键问题：能否具有真实图像的真实感。</li></ol><p>按图像空间坐标和幅度（亮度和色彩）的连续性分</p><ol><li>模拟图像：空间坐标和幅度都连续变化的图像。I=F(x,y)</li><li>数字图像：空间坐标和幅度都用离散的数字（一般是整数）表示的图像。数字阵列来表示图像，每个数字都表示图像的一个像素。对每个像素点的颜色、亮度的数字化描述，就可得到在计算机上处理的数字图像。</li></ol><img src="/2022/11/30/ImageProc/image-20221130165412955.png" class="" title="image-20221130165412955"><h2 id="数字图像的描述"><a href="#数字图像的描述" class="headerlink" title="数字图像的描述"></a>数字图像的描述</h2><p>I=F(x,y)</p><p>x,y是空间坐标，幅值f称为该点图像的强度或灰度。</p><p>可以用矩阵/向量/数组描述。</p><h2 id="矩阵坐标系、直角坐标系"><a href="#矩阵坐标系、直角坐标系" class="headerlink" title="矩阵坐标系、直角坐标系"></a>矩阵坐标系、直角坐标系</h2><img src="/2022/11/30/ImageProc/image-20221130170449712.png" class="" title="image-20221130170449712"><p>a：矩阵坐标系，常用于屏幕显示</p><p>b：直角坐标系，常用于图像计算</p><h2 id="图像处理分类"><a href="#图像处理分类" class="headerlink" title="图像处理分类"></a>图像处理分类</h2><ol><li><p>模拟图像处理</p><p>利用光学、电子学对模拟图像进行处理。优点：处理速度快、信息容量大、经济</p></li><li><p>数字图像处理</p><p>利用数字化技术对数字图像进行处理的过程和方法。优点：精度高、处理方便、重复性好</p></li></ol><p>补充：数字图像处理、计算机视觉、计算机图形学关系</p><p> 计算机视觉：计算机视觉的目的是发展出能够理解自然景物的系统。在机器人领域中，计算机视觉为机器人提供眼睛的功能。</p><p> 计算机图形学：用计算机将由概念所表示的物体（不是实物）图像进行处理和显示。侧重于根据给定的物体描述模型、光照及想象中的摄像机的成像几何，生成一幅图像</p><h2 id="图像处理方法"><a href="#图像处理方法" class="headerlink" title="图像处理方法"></a>图像处理方法</h2><h3 id="空域法"><a href="#空域法" class="headerlink" title="空域法"></a>空域法</h3><p>处理点阵的方法，又可分为</p><ul><li>邻域处理法<ul><li>梯度运算（一阶微分算子）</li><li>拉普拉斯算子运算（二阶微分）</li><li>平滑算子运算</li><li>卷积运算</li></ul></li><li>点处理法<ul><li>灰度处理</li><li>面积、周长、体积、重心运算（？）</li></ul></li></ul><h3 id="变换域法"><a href="#变换域法" class="headerlink" title="变换域法"></a>变换域法</h3><p>首先对图像进行正交变换，得到变换域系数阵列，然后再进行各种处理，处理后再反变换到空间域，得到处理结果</p><ul><li>滤波</li><li>数据压缩</li><li>特征提取</li></ul><h1 id="Chapter2-图像处理基础"><a href="#Chapter2-图像处理基础" class="headerlink" title="Chapter2.图像处理基础"></a>Chapter2.图像处理基础</h1><h2 id="2-1视觉感知"><a href="#2-1视觉感知" class="headerlink" title="2.1视觉感知"></a>2.1视觉感知</h2><p>眼睛构造；晶状体成像；</p><p>人的视觉模型：低通滤波-log-高通滤波</p><p>视觉特性：二者说明感觉亮度不是一维简单函数</p><ul><li>同时对比度：相对的明暗强度感受</li><li>mach带效应：在明暗变化部位附近，暗区/亮区存在一条更暗/亮的条带</li></ul><p>$$<br>S=KlnI+K_0<br>$$</p><p>人的感觉量与刺激量的对数成正比，在光弱时对变化敏感，在光强时对变化不敏感。</p><p>视觉时间特性：视觉暂留效应、形状感觉、错视</p><h2 id="2-2色度学基础"><a href="#2-2色度学基础" class="headerlink" title="2.2色度学基础"></a>2.2色度学基础</h2><p>RGB模型：三维空间中的一个点表示颜色</p><img src="/2022/11/30/ImageProc/image-20221202145928763.png" class="" title="image-20221202145928763"><img src="/2022/11/30/ImageProc/image-20221202145952850.png" class="" title="image-20221202145952850"><p>玩不腻是吧</p><p>HSI：色调、饱和度、强度模型</p><img src="/2022/11/30/ImageProc/image-20221202150035781.png" class="" title="image-20221202150035781"><h2 id="2-3图像的数字化"><a href="#2-3图像的数字化" class="headerlink" title="2.3图像的数字化"></a>2.3图像的数字化</h2><h3 id="1采样"><a href="#1采样" class="headerlink" title="1采样"></a>1采样</h3><p>将在时间和空间上连续的图像转化成离散的采样点集（即像素）的操作</p><p>静止图像，分别沿垂直+水平采样；运动图像（时间域连续），需现在时间轴上采样，再进行静止图像类似操作。</p><p>采样两个参数：采样间隔，采样孔径</p><p>香农采样定理（一维采样定理）：采样的频率&gt;=原始频率的两倍，就可以完全精确地复原原来的连续信息</p><p>均匀采样：等间隔采样</p><p>非均匀采样：根据图像细节的丰富程度改变采样间距</p><h3 id="2量化"><a href="#2量化" class="headerlink" title="2量化"></a>2量化</h3><p>将像素灰度转换为离散的整数值的过程。</p><p>一般用0-255表示256个灰度级</p><p>一般使用等间隔矩形网络采样，对幅度进行等间隔量化。</p><p>均匀量化</p><p>非均匀量化：对像素出现频度少的部分量化间隔取大，频度大的部分量化间隔取小。</p><h3 id="3块状和假轮廓现象"><a href="#3块状和假轮廓现象" class="headerlink" title="3块状和假轮廓现象"></a>3块状和假轮廓现象</h3><ul><li><p>对一幅图像，当量化级数<em>Q</em>一定时，采样点数越多，图像质量越好；当采样点数减少时，图上的块状效应就逐渐明显。</p><img src="/2022/11/30/ImageProc/image-20221202152221624.png" class="" title="image-20221202152221624"></li><li><p>当图像的采样点数一定时量化级数越多，图像质量越好；当量化级数越少时，图像质量越差，量化级数最小的极端情况就是二值图像， 图像出现假轮廓。如下图所示</p><img src="/2022/11/30/ImageProc/image-20221202152310504.png" class="" title="image-20221202152310504"><p>256色-64-32-16-4-2二值图像</p></li></ul><p>（1）对缓变的图像，应该细量化，粗采样，以避免假轮廓。</p><p>（2）对细节丰富的图像，应细采样，粗量化，以避免模糊（混叠）。</p><h2 id="2-4数字图像的数值描述"><a href="#2-4数字图像的数值描述" class="headerlink" title="2.4数字图像的数值描述"></a>2.4数字图像的数值描述</h2><p>有点乱</p><p>编程方便，使用矩阵坐标系定义图像的坐标。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>黑白图像/二值图像</li><li>灰度图像</li><li>彩色图像</li></ul><h3 id="图像质量"><a href="#图像质量" class="headerlink" title="图像质量"></a>图像质量</h3><ul><li>层次：表示灰度级的数量，层次越多视觉效果越好</li><li>对比度：亮度（灰度，明暗变化）的局部变化，画面黑、白的反差/渐变层次，比值越大层次越多图像越丰富。对比度=最大亮度/最小亮度</li><li>清晰度：相关因素有亮度、对比度、主题内容大小、细微层次、颜色饱和度</li></ul><h2 id="2-5数字图像的数据结构"><a href="#2-5数字图像的数据结构" class="headerlink" title="2.5数字图像的数据结构"></a>2.5数字图像的数据结构</h2><p>二维数组、组合方式、比特面、分层结构、树状结构</p><h2 id="2-6像素间的基本关系"><a href="#2-6像素间的基本关系" class="headerlink" title="2.6像素间的基本关系"></a>2.6像素间的基本关系</h2><p>4邻域、对角邻域、8邻域</p><h3 id="像素连通性"><a href="#像素连通性" class="headerlink" title="像素连通性"></a>像素连通性</h3><p>定义V是用于定义邻接性的灰度值集合，存在三种类型的邻接性：</p><p>(1)4邻接:如果q在N4(p)集中,具有V中数值的两个像素p和q是4邻接的.</p><p>(2)8邻接:如果q在N8(p)集中,具有V中数值的两个像素p和q是8邻接的.</p><p>(3)m邻接(混合邻接):如果</p><p>   (i)q在N4(p)中 或</p><p>   (ii)q在ND(p)中且集合N4(p)∩N4(q)没有V值的像素.</p><p>m邻接可以消除8邻接所带来的二义性，实质是当同时存在4邻接和8邻接时，优先采用4邻接。</p><h3 id="像素通路"><a href="#像素通路" class="headerlink" title="像素通路"></a>像素通路</h3><p>像素点<em>p</em>(<em>x</em>, <em>y</em>)到像素点<em>q</em>(<em>s</em>, <em>t</em>)的通路(path):</p><p>特定的像素序列(<em>x</em>0,<em>y</em>0),(<em>x</em>1,<em>y</em>1),…,(<em>xn</em>,<em>yn</em>),其中(<em>x</em>0,<em>y</em>0)=<em>p</em>(<em>x</em>,<em>y</em>), (<em>xn</em>,<em>yn</em>)=<em>q</em>(<em>s</em>,<em>t</em>), 且像素(<em>xi</em>, <em>yi</em>)和(<em>xi</em>-1, <em>yi</em>-1) (对于1≤<em>i</em>≤<em>n</em>)是邻接的.</p><p><em>n</em>是通路的长度。</p><p>若(<em>x</em>0, <em>y</em>0)=(<em>xn</em>, <em>yn</em>),则通路是闭合通路。</p><img src="/2022/11/30/ImageProc/image-20221202154814811.png" class="" title="image-20221202154814811"><h2 id="2-7数字图像处理的基本方法"><a href="#2-7数字图像处理的基本方法" class="headerlink" title="2.7数字图像处理的基本方法"></a>2.7数字图像处理的基本方法</h2><p>1局部运算</p><ul><li>点运算</li><li>邻域运算</li></ul><p>2迭代运算</p><p>3位置不变处理和位置可变处理</p><p>4窗口运算和模版运算：窗口划定了一个矩形区域，模板是一个特定形状区域</p><p>5帧运算：在两幅或多幅图像间进行运算产生一幅新图像的处理。</p><h1 id="Chapter3-位图图像基础"><a href="#Chapter3-位图图像基础" class="headerlink" title="Chapter3.位图图像基础"></a>Chapter3.位图图像基础</h1><h2 id="3-1位图文件"><a href="#3-1位图文件" class="headerlink" title="3.1位图文件"></a>3.1位图文件</h2><h3 id="数字图像类型"><a href="#数字图像类型" class="headerlink" title="数字图像类型"></a>数字图像类型</h3><h4 id="矢量图"><a href="#矢量图" class="headerlink" title="矢量图"></a>矢量图</h4><p>是用一系列绘图指令来表示一幅图，如AutoCAD中的绘图语句。这种方法的本质是用数学(更准确地说是几何学)公式描述一幅图像。图像中每一个形状都是一个完整的公式，称为一个对象。对象是一个封闭的整体，所以图像上对象的变化都不会影响到图像中的其他对象。实质就是用数学公式描述的图像就是矢量图。</p><p>矢量图的特点：</p><p>  矢量图的两个优点：</p><p>一是它的文件数据量很小；</p><p>二是<strong>图像质量与分辨率无关</strong>，不会失真，这意味着无论将图像放大或缩小了多少次，图像总是以显示设备允许的最大清晰度显示。</p><p>  矢量图有一个明显的缺点，就是不易制作色调丰富或色彩变化太多的图像，而且绘出来的图像不是很逼真，同时也不易在不同的软件间交换文件。</p><p>在Corel Draw和Adobe Illustrator中生成的图像均为矢量图 。</p><h4 id="位图-BMP位图"><a href="#位图-BMP位图" class="headerlink" title="位图-BMP位图"></a>位图-BMP位图</h4><p>是由像素点构成一幅图像，每个像素点具有颜色属性和位置属性。放大会产生失真</p><p>Windows把位图分为两类：设备无关位图DIB，设备相关位图DDB</p><p>DDB位图没有调色板，其数据结构与设备有关的，显示的颜色依赖硬件；DIB位图自带颜色信息即调色板。</p><p>线画稿：黑白2色，0,1</p><p>灰度图像：0-255</p><p>索引颜色图像：使用预先定义的调色板色表的图像，最多只能显示256色</p><p>真彩色图像：RGB 24bit</p><h2 id="3-2位图文件结构"><a href="#3-2位图文件结构" class="headerlink" title="3.2位图文件结构"></a>3.2位图文件结构</h2><p>位图文件=文件头+位图信息（=位图信息头+调色板）+位图像素数据</p><p>位图文件头作用：是设定图像文件类型，大小等。</p><p>位图信息作用：所记录的值用于分配内存，设置调色板信息，读取像素值等。</p><img src="/2022/11/30/ImageProc/image-20221202160748873.png" class="" title="image-20221202160748873"><p>位图文件头：14B</p><img src="/2022/11/30/ImageProc/image-20221202161501334.png" class="" title="image-20221202161501334"><p>位图信息头：40B</p><img src="/2022/11/30/ImageProc/image-20221202161653920.png" class="" title="image-20221202161653920"><p>调色板：一个数组，对需要调色板的位图文件而言的，如果是真彩色图像，则位图信息头后面直接是位图数据。</p><p>位图数据：在DIB中，图像的<strong>底行是文件的第一行</strong>，图像的<strong>顶行是文件的最后一行</strong>。</p><ul><li> 对于用到调色板的位图，图像数据就是该像素颜色在调色板中的索引值。</li><li> 对于真彩色图像，图像数据就是实际的R、 G、 B值。图像数据中每3个字节表示一个像素，每个字节表示一个RGB分量</li><li> 对于2色位图，用1位就可以表示该像素的颜色（一般0表示黑， 1表示白），所以一个字节可以表示8个像素。</li><li> 对于16色位图，用4位可以表示一个像素的颜色，所以一个字节可以表示2个像素。</li><li> 对于256色位图，一个字节刚好可以表示1个像素。</li></ul><img src="/2022/11/30/ImageProc/image-20221202162152753.png" class="" title="image-20221202162152753"><p>还要倒读？！</p><p>小端方式存储数据，低地址存放低位数据</p><p>如0x1756实际存储是(small address)56 17(big add)</p><img src="/2022/11/30/ImageProc/image-20221202162740177.png" class="" title="image-20221202162740177"><img src="/2022/11/30/ImageProc/D9E3DBE91C926806BE7E4B8427FB91DD.png" class="" title="img"><p>后面的不会考吧不会吧不写了</p><h1 id="Chapter4-图像的几何变换"><a href="#Chapter4-图像的几何变换" class="headerlink" title="Chapter4.图像的几何变换"></a>Chapter4.图像的几何变换</h1><h2 id="4-1几何变换基础"><a href="#4-1几何变换基础" class="headerlink" title="4.1几何变换基础"></a>4.1几何变换基础</h2><p>1 图像的几何变换：是指用数学建模的方法来描述图像的位置，大小，形状等变换的方法，也就是通过数学建模实现对数字图像进行几何变换处理。</p><p>2 几何变换内容：图像的空间平移、比例缩放、旋转、仿射变换和图像插值。</p><p>3 几何变换实质：改变像素的空间位置或估算新空间位置上的像素值。</p><p>齐次坐标什么的</p><p>所谓齐次坐标表示法就是用N+1维向量表示N维向量。线性代数</p><h2 id="4-2图像的位置变换"><a href="#4-2图像的位置变换" class="headerlink" title="4.2图像的位置变换"></a>4.2图像的位置变换</h2><h3 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h3><p>平移原理：在图像平移是将一幅图像中所有的点都按照指定的平移量在水平、垂直方向移动，平移后的图像与原图像相同。</p><img src="/2022/11/30/ImageProc/image-20221202202600583.png" class="" title="image-20221202202600583"><img src="/2022/11/30/ImageProc/image-20221202203011029.png" class="" title="image-20221202203011029"><p>平移的直角坐标公式：图像的平移用到的是中学学过的直角坐标系的平移变换公式：    </p><img src="/2022/11/30/ImageProc/image-20221203100111747.png" class="" title="image-20221203100111747"><p>平移的逆变换：对变换矩阵求逆，可以得到逆变换 </p><img src="/2022/11/30/ImageProc/image-20221203100122516.png" class="" title="image-20221203100122516"><p>逆变换作用：平移后的图像上的每一点通过逆变换在原图像中找到对应的点，则平移后的图象中每个象素的颜色利用逆变换确定。按照逆变换公式得到的(<em>x</em>0,<em>y</em>0)不在原图中该怎么办？即逆变换往往得到的点不在原图中。 通常的做法是，把该点的RGB值统一设成(0,0,0)或者(255,255,255)。</p><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><p>镜像分为水平镜像和垂直镜像。</p><p>水平镜像：以图像的垂直中轴线为中心交换图像的左右 两部分。设图像高度为Height，宽度为Width，原图中的(x0,y0)经过水平镜像后，坐标将变成（Width-x0,y0）。</p><img src="/2022/11/30/ImageProc/image-20221202205021669.png" class="" title="image-20221202205021669"><p>垂直镜像：以图像的水平中轴线为中心交换图像的上下两部分。点（x0,y0）经过垂直镜像后，坐标将变成为（x0,Height-y0）</p><img src="/2022/11/30/ImageProc/image-20221202205042731.png" class="" title="image-20221202205042731"><img src="/2022/11/30/ImageProc/image-20221202204810249.png" class="" title="image-20221202204810249"><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><p>图像的旋转是指以图像中的<strong>某一点</strong>（一般是中心点）为原点以逆时针或顺时针的方向旋转一定的角度。旋转后，图像的大小一般会改变。</p><h4 id="直角坐标系图像旋转"><a href="#直角坐标系图像旋转" class="headerlink" title="直角坐标系图像旋转"></a>直角坐标系图像旋转</h4><img src="/2022/11/30/ImageProc/image-20221203093351466.png" class="" title="image-20221203093351466"><p>这个计算公式计算出的值为小数，而坐标值为正整数。</p><p>这个计算公式计算的结果值所在范围与原来的值所在的范围不同。</p><p>因此需要前期处理 ：扩大画布，取整处理（解决小数问题），平移处理（解决负数问题）</p><p>注意theta是逆时针转角</p><p>一些问题：小数，负数，图像转飞，空洞</p><img src="/2022/11/30/ImageProc/image-20221203093950723.png" class="" title="image-20221203093950723"><img src="/2022/11/30/ImageProc/image-20221203093959994.png" class="" title="image-20221203093959994"><img src="/2022/11/30/ImageProc/image-20221203094009267.png" class="" title="image-20221203094009267"><p>图像旋转之后，像素排列的两个问题：</p><p>1）像素的排列不是完全按照原有的相邻关系。这是因为相邻像素之间只能有8个方向方向不够细腻。即转飞</p><p>2）会出现许多的空洞点。即出现空白点</p><p>这个最好算一下捏</p><img src="/2022/11/30/ImageProc/image-20221203094433237.png" class="" title="image-20221203094433237"><img src="/2022/11/30/ImageProc/image-20221203094607509.png" class="" title="image-20221203094607509"><p>图像旋转出现的两个问题的 本质 都是因为像素值的填充是不连续的离散不连续造成。</p><p>因此可以采用插值填充的方法来解决。   </p><p>插值填充法：临近插值法，均值插值法。</p><p>临近插值法：就是将判断为空穴位置上的像素值用其相邻行（或列）的像素值来填充。</p><p>均值插值法：是将空穴像素周围像素值的均值填充。</p><h4 id="极坐标旋转"><a href="#极坐标旋转" class="headerlink" title="极坐标旋转"></a>极坐标旋转</h4><p>利用极坐标中的角度，直接做旋转，然后再转换为对应的直角坐标</p><p>先转换为极坐标-极坐标旋转-逆变换为直角坐标</p><img src="/2022/11/30/ImageProc/image-20221203095041008.png" class="" title="image-20221203095041008"><img src="/2022/11/30/ImageProc/image-20221203095045907.png" class="" title="image-20221203095045907"><img src="/2022/11/30/ImageProc/image-20221203095103364.png" class="" title="image-20221203095103364"><p>先将横纵坐标代入直角转极坐标公式算出p和theta，旋转后只改变theta，p不变</p><img src="/2022/11/30/ImageProc/image-20221203095912063.png" class="" title="image-20221203095912063"><h4 id="反变换旋转"><a href="#反变换旋转" class="headerlink" title="反变换旋转"></a>反变换旋转</h4><p>没有空穴，但是仍存在转飞</p><p>基本原理：就是从新图像的像素点坐标反过来求其所对应的原图像的像素点的坐标。</p><img src="/2022/11/30/ImageProc/image-20221203100209329.png" class="" title="image-20221203100209329"><p>步骤：先确定画布大小-确定新图像坐标-计算出对应的原图像坐标。</p><ol><li><p>确定原图旋转30°后的画布大小，这点我们可从坐标旋转公式计算得到。x[-1,2],y[1,4]。因此，变换后的画布大小是4×4</p></li><li><p>规范前的新图像的坐标x’  y’</p></li></ol><img src="/2022/11/30/ImageProc/image-20221203100449130.png" class="" title="image-20221203100449130"><ol start="3"><li>根据反变换公式，得到其对应的原图像F的行,列坐标:新图像中像素（0，2）对应的原图像中像素（1，2）.因为把像素（0，2）代入反变换公式得到：四舍五入</li></ol><p>​         x=2*sin30=1</p><p>​         y=1.732=2</p><img src="/2022/11/30/ImageProc/image-20221203100635423.png" class="" title="image-20221203100635423"><ol start="4"><li>旋转后新图像为</li></ol><p>G=0  0  f13  0</p><p>   f11 f12 f13  f23</p><p>​    0  f21 f22  f33</p><p>​    0  f31 f32  0</p><p>可以看出，新图像G(0.2)像素点放的是原图像F(1，2)像素点，反变换法没有空穴，因此不需要后续的插值处理。</p><h2 id="4-3图像的形状变换"><a href="#4-3图像的形状变换" class="headerlink" title="4.3图像的形状变换"></a>4.3图像的形状变换</h2><h3 id="图像缩小"><a href="#图像缩小" class="headerlink" title="图像缩小"></a>图像缩小</h3><p>分为按比例缩小和不按比例缩小两种。图像缩小之后，因为承载的信息量小了，所以画布可相应缩小</p><p>图像缩小：实际上就是对原有的多个数据进行挑选或处理。</p><p>原理：获得期望缩小尺寸的数据，并且尽量保持原有的特征不丢失。</p><p>方法：最简单的方法就是等间隔地选取数据。相当于采样 </p><img src="/2022/11/30/ImageProc/image-20221203101257496.png" class="" title="image-20221203101257496"><p>反变换思想：</p><img src="/2022/11/30/ImageProc/68646DC046C22A4FB591364787036A09.png" class="" title="img"><h3 id="放大"><a href="#放大" class="headerlink" title="放大"></a>放大</h3><p>图像放大算法关键：在于对未知像素使用何种插值方式。</p><p>放大原理：如果需要将原图像放大k倍，则将原图像中的每个像素值，填在新图像中对应的k*k大小的子块中。</p><img src="/2022/11/30/ImageProc/image-20221203102324216.png" class="" title="image-20221203102324216"><h4 id="普通放大"><a href="#普通放大" class="headerlink" title="普通放大"></a>普通放大</h4><p>设原图像大小为M<em>N,放大为k1M</em>k2N，<strong>（k1&gt;1，k2&gt;1）</strong>。算法步骤如下：</p><ol><li><p>设旧图像是F(i,j)， i=1,2,…,M, j=1,2,…,N。新图像是I(x,y), x=1,2,…,k1M, y=1,2,…,k2N。</p></li><li><p>I(x,y)=F(c1<em>x, c2</em>y), 新图的点与原图的点的对应计算，都是要找在原图中的对应位置。原图相当于是新图缩小c1=1/k1     c2=1/k2</p></li></ol><h4 id="最邻近点插值"><a href="#最邻近点插值" class="headerlink" title="最邻近点插值"></a>最邻近点插值</h4><p>最邻近点插值算法是最简单也是速度最快的一种算法，其做法是将放大后未知的像素点P，將其位置换算到原始影像上，与原始的邻近的4周像素点A,B,C,D做比较，令P点的像素值等于最靠近的邻近点像素值即可。如上图中的P点，由于最接近D点，所以就直接取P=D</p><p>这种方法会带来明显的失真。在A, B中点处的像素值会突然出现一个跳跃，这就是出现马赛克和锯齿等明显走样的原因。最临近插值法唯一的优点就是速度快。</p><img src="/2022/11/30/ImageProc/image-20221203102844840.png" class="" title="image-20221203102844840"><h4 id="双线性插值"><a href="#双线性插值" class="headerlink" title="双线性插值"></a>双线性插值</h4><img src="/2022/11/30/ImageProc/image-20221203102948346.png" class="" title="image-20221203102948346"><ol><li>假设A图像的灰度级变化在纵向方向上是<strong>线性变化</strong>的，这样根据直线方程或者几何比例关系就能够求得(a,y/4)和(a+1,y/4)坐标处的灰度级A(a,y/4)和A’(a+1,y/4)。</li><li>再假设在((a,y/4),A(a,y/4))和(a+1,y/4),A’(a+1,y/4)这两点所确定的直线上，灰度级仍然是线性变化的。求出直线方程，于是就可以求得(x/4,y/4)处的灰度级A(x/4,y/4)。</li></ol><p>算法</p><ol><li><p>先按照基于像素放大原理就是最邻近像素点法的图像放大方法，确定每一个原图像的像素在新图像中对应的子块。对新图像中每一个子块，仅对其一个像素进行填充。在每个子块中选取一个填充像素的方法如下：</p><p> 对右下角的子块，选取子块中右下角的像素；</p><p> 对末列、非末行子块，选取子块中的右上角像素；</p><p> 对末行、非末列子块，选取子块中的左下角像素；</p><p> 对剩余的子块，选取子块中的左上角像素。</p><img src="/2022/11/30/ImageProc/image-20221203105205370.png" class="" title="image-20221203105205370"><img src="/2022/11/30/ImageProc/image-20221203105200644.png" class="" title="image-20221203105200644"></li><li><p>计算已填充像素所在列中的其他像素的值，根据该像素上方与下方已填充的像素值，双线性插值方法得到</p><img src="/2022/11/30/ImageProc/image-20221203105533650.png" class="" title="image-20221203105533650"></li><li><p>对剩余像素的值，可以利用该像素的左方与右方的已填充像素的值，通过线性插值方法计算得到。 </p><img src="/2022/11/30/ImageProc/image-20221203105633794.png" class="" title="image-20221203105633794"></li></ol><h2 id="4-4图像错切"><a href="#4-4图像错切" class="headerlink" title="4.4图像错切"></a>4.4图像错切</h2><p>错切：图像的错切变换实际上是平面景物在投影平面上的非垂直投影效果。错切变换也称为剪切、错位或错移变换。</p><p>原理：保持图像上各点的某一坐标值不变，而另一坐标值进行线性变换。坐标不变的轴称为依赖轴，变换的轴称为方向轴。</p><p>因为绝大多数图像都是三维物体在二维平面上的投影得到的，所以需要研究图像的错切现象。</p><p>沿x轴关于y的错切：变换前和变换后y值坐标保持不变，而x坐标依赖于初始坐标值(x,y)及参数c的值呈线性变化。</p><img src="/2022/11/30/ImageProc/image-20221203105805173.png" class="" title="image-20221203105805173"><img src="/2022/11/30/ImageProc/image-20221203110030978.png" class="" title="image-20221203110030978"><p>沿y轴关于x错切同理。变换前和变换后x值坐标保持不变，而y坐标与初始坐标值（x,y）及参数b有关。</p><img src="/2022/11/30/ImageProc/image-20221203110134896.png" class="" title="image-20221203110134896"><img src="/2022/11/30/ImageProc/image-20221203110143323.png" class="" title="image-20221203110143323"><p>错切之后原图像的像素排列方向发生改变。与旋转不同的是，x方向与y方向独立变化。</p><img src="/2022/11/30/ImageProc/image-20221203110211986.png" class="" title="image-20221203110211986"><h2 id="4-5三维图像的投影变换"><a href="#4-5三维图像的投影变换" class="headerlink" title="4.5三维图像的投影变换"></a>4.5三维图像的投影变换</h2><p>似乎比较复杂然后没有细讲？ppt干干净净</p><img src="/2022/11/30/ImageProc/image-20221203110245059.png" class="" title="image-20221203110245059"><h1 id="Chapter5-图像的灰度变换"><a href="#Chapter5-图像的灰度变换" class="headerlink" title="Chapter5.图像的灰度变换"></a>Chapter5.图像的灰度变换</h1><h2 id="5-1图像增强处理技术"><a href="#5-1图像增强处理技术" class="headerlink" title="5.1图像增强处理技术"></a>5.1图像增强处理技术</h2><p>是指按特定的需要突出一幅图像中的某些信息。同时，削弱或去除某些不需要的信息的处理方法。</p><p>图像在传输或处理过程中会引入噪声或使图像变模糊，从而降低了图像质量，甚至淹没了特征，给分析带来困难，因此要增强特征，进行处理。</p><p>在图像增强的过程中，没有新信息的增加，只是通过压制一部分信息，从而突出另一部分信息。也就是说，增强处理并不能增强原始图像的信息，其结果只能增强某种信息的辨识能力，而这种处理有可能损失一些其他信息。</p><p>分类：</p><ol><li>频域处理方法，基础是卷积定理，采用修改图像傅立叶变换的方法实现对图像的增强。常用的方法，低通滤波，高频提升滤波、同态滤波等。</li><li>空域处理方法，直接对图像中的像素灰度进行处理，基本上是以灰度映射变换为基础。所用的映射变换取决于增强的目的。包括灰度变换、直方图修正，平滑和锐化处理、彩色增强等。</li></ol><h2 id="5-2灰度变换"><a href="#5-2灰度变换" class="headerlink" title="5.2灰度变换"></a>5.2灰度变换</h2><h3 id="灰度直方图"><a href="#灰度直方图" class="headerlink" title="灰度直方图"></a>灰度直方图</h3><p>概念：灰度直方图是灰度级的函数，是对图像中灰度级分布的统计。反映的是一幅图像中各灰度级像素出项的频率。灰度直方图就是频率同灰度级的关系图。</p><p>形式：横坐标表示<strong>灰度级</strong>，纵坐标表示图像中对应<strong>某灰度级所出现的像素个数</strong>，也可以是某一灰度值的像素数占全图像素数的百分比，即灰度级的频率（也是直方图归一化）。</p><p>功能：它是图像的一个重要特征，反映了图像<strong>灰度分布</strong>的情况。灰度直方图是最简单且最有用的工具。</p><img src="/2022/11/30/ImageProc/image-20221203112315615.png" class="" title="image-20221203112315615"><p>性质：</p><ul><li><p>灰度直方图只能反映图像的灰度分布，而不能反映图像像素的位置，即丢失了像素的<strong>位置</strong>信息。</p></li><li><p>一幅图像对应唯一的灰度直方图，反之不成立。不同的图像可对应相同的直方图，下图给出了一个不同的图像具有相同直方图的例子。同样也是丢失位置信息</p><img src="/2022/11/30/ImageProc/image-20221203112418137.png" class="" title="image-20221203112418137"></li><li><p>一幅图像分成多个区域，多个区域的直方图之和即为原图像的直方图。</p></li></ul><h3 id="对比度计算"><a href="#对比度计算" class="headerlink" title="对比度计算"></a>对比度计算</h3><p>亮度（灰度，明暗变化）的局部变化，画面黑、白的反差/渐变层次，比值越大层次越多图像越丰富。</p><p>对比度=最大亮度/最小亮度，计算公式：（？？）相邻像素：可选4邻域，8邻域两种</p><img src="/2022/11/30/ImageProc/image-20221203113051738.png" class="" title="image-20221203113051738"><p>计算例：中心像素灰度值与周围4近邻像素灰度值之差的平方之和，除以以上平方项的个数。</p><img src="/2022/11/30/ImageProc/image-20221203113234560.png" class="" title="image-20221203113234560"><p>从(1,1)点开始，范围之外的坐标点不进行计算；因此第一项只有下面的(2,1)，右边的(1,2)两点</p><h3 id="线性灰度变换"><a href="#线性灰度变换" class="headerlink" title="线性灰度变换"></a>线性灰度变换</h3><img src="/2022/11/30/ImageProc/image-20221203113953945.png" class="" title="image-20221203113953945"><p>线性变换：正比和反比</p><p>非线性：对数、幂</p><p>在曝光不足或过度的情况下，图像灰度可能会局限在一个很小的范围内。这时就形成一个模糊不清，似乎没有灰度层次的图像。采用线性变换对图像每一个像素灰度做线性拉伸，可有效地改善图像视觉效果。</p><img src="/2022/11/30/ImageProc/image-20221203114439459.png" class="" title="image-20221203114439459"><h4 id="分段线性变换"><a href="#分段线性变换" class="headerlink" title="分段线性变换"></a>分段线性变换</h4><p>1扩展感兴趣的，牺牲其他</p><p>对于感兴趣的[a,b]区间，采用斜率大于1的线性变换来进行扩展，而把其他区间用a或b来表示。变换函数是</p><img src="/2022/11/30/ImageProc/image-20221203114542984.png" class="" title="image-20221203114542984"><p>2扩展感兴趣的，压缩其他</p><p>在扩展感兴趣的[a,b]区间的同时，为了保留其他区间的灰度层次，也可以采用其它区间压缩的方法，既有扩有压，变换函数为</p><img src="/2022/11/30/ImageProc/image-20221203114559242.png" class="" title="image-20221203114559242"><img src="/2022/11/30/ImageProc/image-20221203114603972.png" class="" title="image-20221203114603972"><p>一些应用：</p><h5 id="对比度线性展宽（拉伸）"><a href="#对比度线性展宽（拉伸）" class="headerlink" title="对比度线性展宽（拉伸）"></a>对比度线性展宽（拉伸）</h5><p>目的：通过将亮暗差异（即对比度）扩大，来把人所关心的部分强调出来。</p><p>原理：进行像素点对点的，灰度级的线性影射。该影射关系通过调整参数，来实现对亮暗差异的扩大。</p><p>对比度展宽的特性：处理前后的图像量化级数相同，即处理前后图像的灰度分布范围都是[0，255]，但处理后的图像的表现效果要优于处理前的图像。</p><p>进行对比度展宽，只能通过抑制非重要信息的对比度来腾出空间给重要信息进行对比图展宽。</p><p>对比度线性展宽原理：实际就是图像灰度值的线性映射。进行像素点对点的，灰度级的影射。</p><p>对比度线性展宽处理方法：按照下面的公式进行点对点的映射</p><img src="/2022/11/30/ImageProc/image-20221203115638585.png" class="" title="image-20221203115638585"><p>对比度展宽（拉伸）例图。</p><p>(a)变换函数的形式(b)低对比度图像</p><p>(c)对比度展宽（拉伸）的结果(d)门限化的结果</p><img src="/2022/11/30/ImageProc/image-20221203161717799.png" class="" title="image-20221203161717799"><h5 id="灰窗级"><a href="#灰窗级" class="headerlink" title="灰窗级"></a>灰窗级</h5><p>当256个灰度级所表示的亮暗范围内的信息量太大，没办法很好地表述时，通过开窗的方式，只把窗内的灰度级展宽，而把窗外的灰度级完全抑制掉。</p><p>什么是灰窗级?就是通过映射关系，把灰度值落在一定范围内的目标进行对比度增强。也就是只显示指定灰度范围内的信息。</p><p>灰窗级实际上是线性对比度展宽的一种特殊形式。</p><img src="ImageProc/image-20221203161923980.png" alt="image-20221203161923980" style="zoom: 67%;" /><h5 id="灰窗级切片（灰度切割）"><a href="#灰窗级切片（灰度切割）" class="headerlink" title="灰窗级切片（灰度切割）"></a>灰窗级切片（灰度切割）</h5><p>1 什么是灰窗级切片?</p><p>  是指将所需检测的目标与画面中其他的部分分离开，目标部分置为白（黑），而非目标部分置为黑（白）。这样就把需要的目标突显出来，消除背景细节。</p><p>2 灰窗级切片有什么用？</p><p>  在图像处理中，经常要对某个目标物的形状、边界、截面面积以及体积进行测量，从而得到该目标物功能方面的重要信息。如，医学中要对人体器官和组织进行精确测量。</p><p><img src="ImageProc/image-20221203162316469.png" alt="image-20221203162316469" style="zoom:50%;" /><img src="ImageProc/image-20221203162233579.png" alt="image-20221203162233579" style="zoom:50%;" /></p><h5 id="线性动态范围调整（效果同灰窗级）"><a href="#线性动态范围调整（效果同灰窗级）" class="headerlink" title="线性动态范围调整（效果同灰窗级）"></a>线性动态范围调整（效果同灰窗级）</h5><p>动态范围：是指图像中从暗到亮的变化范围。变换后图像的0-255并不是原图像的0-255</p><p>动态范围对人视觉的影响：由于人眼所可以分辨的灰度的变化范围是有限的，所以当动态范围太大时，很高的亮度值把暗区的信号都掩盖了。</p><p>动态范围调整思路：通过动态范围的压缩可以将所关心部分的灰度级的变化范围扩大。</p><p>动态范围调整方法分为以下两种：</p><p>1）线性动态范围调整</p><p>2）非线性动态范围调整</p><p>线性动态范围调整的基本思路：通过把原图中“不太黑”的像素也变成黑，把原图中“不太白”的相素也变成白的方式，来压缩动态范围，使新的图像中，关心部分的对比度可以展宽。</p><p>如下图所示，将原来[0,255]范围内的亮暗变化，压缩到[a,b]范围内。再将[a,b]范围内的灰度值扩张到[0,255]。</p><img src="/2022/11/30/ImageProc/image-20221203162545318.png" class="" title="image-20221203162545318"><img src="/2022/11/30/ImageProc/image-20221203163112941.png" class="" title="image-20221203163112941"><h3 id="非线性灰度变换"><a href="#非线性灰度变换" class="headerlink" title="非线性灰度变换"></a>非线性灰度变换</h3><h4 id="对数变换"><a href="#对数变换" class="headerlink" title="对数变换"></a>对数变换</h4><img src="/2022/11/30/ImageProc/image-20221203163200300.png" class="" title="image-20221203163200300"><p>其中 lambda是调节常数。用于调节变换后的灰度值，使其符合实际要求。</p><p>对数变换的作用是扩展图像的低灰度范围，同时压缩高灰度范围。</p><img src="/2022/11/30/ImageProc/image-20221203163618169.png" class="" title="image-20221203163618169"><h4 id="幂次变换"><a href="#幂次变换" class="headerlink" title="幂次变换"></a>幂次变换</h4><p>和对数变换的效果相反，指数变换使得高灰度范围扩展，压缩低灰度范围</p><img src="/2022/11/30/ImageProc/image-20221203163753051.png" class="" title="image-20221203163753051"><p>其中c和gamma为常数。 gamma值的选择对于变换函数的特性有很大影响，如下图示。</p><img src="/2022/11/30/ImageProc/image-20221203163833322.png" class="" title="image-20221203163833322"><img src="/2022/11/30/ImageProc/image-20221203163838970.png" class="" title="image-20221203163838970"><p>应用：γ校正</p><p>几乎所有的CRT显示设备、摄像胶片、许多电子照相机的光电转换特性都是非线性的。所以，如果不进行校正处理的话，将无法得到好的图像效果。</p><p>l光电传感器的输入输出特性：这些非线性部件的输出与输入之间的关系可以用一个幂函数来表示，形式为：设CCD的输入（入射光强度）为L，输出（电流强度）为I，则有：</p><img src="ImageProc/image-20221203164055132.png" alt="image-20221203164055132" style="zoom:50%;" /><p>1.在显示之前通过幂次变换将图像进行修正。</p><img src="ImageProc/image-20221203164129879.png" alt="image-20221203164129879" style="zoom:50%;" /><p>通常CCD的γ值在0.4 ~ 0.8之间，γ值越小，画面的效果越差。根据画面对比度的观察与分析，可以大致得到该设备的γ值（或依据设备的参考γ值）</p><img src="/2022/11/30/ImageProc/image-20221203164539689.png" class="" title="image-20221203164539689"><p>2.对输入信息进行γ校正</p><img src="ImageProc/image-20221203164801845.png" alt="image-20221203164801845" style="zoom:50%;" /><img src="/2022/11/30/ImageProc/image-20221203164813596.png" class="" title="image-20221203164813596"><h3 id="代数运算"><a href="#代数运算" class="headerlink" title="代数运算"></a>代数运算</h3><p>算术运算常用于灰度图像。逻辑运算用于二值图像。</p><p>加，减，乘，除</p><p>与或非，异或</p><h4 id="加法运算"><a href="#加法运算" class="headerlink" title="加法运算"></a>加法运算</h4><p>C(x,y) = A(x,y) + B(x,y)</p><ul><li><p>去除叠加性噪声</p><p>假设噪声h(x,y)均值为0，且互不相关</p><p>N个图像的均值定义为：</p><p>g(x,y) = 1/N(g0(x,y)+g1(x,y)+…+ gN(x,y))</p><p>期望值E(g(x,y)) = f(x,y)</p><p>上述图像均值将降低噪声的影响</p><img src="/2022/11/30/ImageProc/image-20221203165152842.png" class="" title="image-20221203165152842"></li><li><p>生成图像叠加效果</p><p>g(x,y) = αf(x,y) + βh(x,y)</p><p>其中α+β= 1</p><p>可以得到各种图像合成的效果，也可以用于</p><p>两张图片的衔接</p><img src="/2022/11/30/ImageProc/image-20221203165325281.png" class="" title="image-20221203165325281"></li></ul><h4 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h4><ul><li>显示两幅图像的差异，检测同一场景两幅图像之间的变化。如：视频中镜头边界的检测</li><li>去除不需要的叠加性图案，扣绿幕</li><li>图像分割：如分割运动的车辆，减法去掉静止部分，剩余的是运动元素和噪声</li></ul><h4 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h4><ul><li><p>图像的局部显示</p></li><li><p>用二值蒙版图像与原图像做乘法</p><img src="ImageProc/image-20221203165812170.png" alt="image-20221203165812170" style="zoom:50%;" /></li></ul><h4 id="非"><a href="#非" class="headerlink" title="非"></a>非</h4><ul><li><p>获得一个阴图像</p><img src="ImageProc/image-20221203170304940.png" alt="image-20221203170304940" style="zoom:50%;" /></li><li><p>获得一个子图像的补图像</p><img src="ImageProc/image-20221203170312458.png" alt="image-20221203170312458" style="zoom:50%;" /></li></ul><h4 id="与"><a href="#与" class="headerlink" title="与"></a>与</h4><ul><li><p>求两个子图像的相交子图</p><img src="/2022/11/30/ImageProc/image-20221203170356465.png" class="" title="image-20221203170356465"><p>黑色是1，与之后白色变黑</p></li><li><p>模板运算：提取感兴趣的子图像</p><img src="ImageProc/image-20221203170439012.png" alt="image-20221203170439012" style="zoom:50%;" /></li></ul><h4 id="或"><a href="#或" class="headerlink" title="或"></a>或</h4><ul><li><p>合并子图像（应该没有这个黑边吧？）</p><img src="/2022/11/30/ImageProc/image-20221203170743465.png" class="" title="image-20221203170743465"></li><li><p>v模板运算：提取感兴趣的子图像</p><img src="/2022/11/30/ImageProc/image-20221203170814231.png" class="" title="image-20221203170814231"></li></ul><h4 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h4><ul><li><p>获得相交子图像,即获得相交区域。</p><img src="/2022/11/30/ImageProc/image-20221203170840520.png" class="" title="image-20221203170840520"></li></ul><h2 id="5-3直方图均衡化"><a href="#5-3直方图均衡化" class="headerlink" title="5.3直方图均衡化"></a>5.3直方图均衡化</h2><h4 id="均衡化"><a href="#均衡化" class="headerlink" title="均衡化"></a>均衡化</h4><p>1 为什么要进行直方图均衡化</p><p>我们可通过对直方图的调整，使得图像数据信息量增大，这样也就使画面更清晰。</p><p>2 直方图均衡化原理</p><p>是将原图像通过某种变换，得到一幅灰度直方图为<strong>均匀分布</strong>的新图像的方法。设图像均衡化处后，图像的直方图是平直的，即各灰度级具有相同的出现频数(大体相同)，那么由于灰度级具有均匀的概率分布，图像看起来就更清晰了</p><p>算法：</p><ol><li><p>确定灰度级，得到灰度级的概率分布</p><img src="/2022/11/30/ImageProc/image-20221203172618093.png" class="" title="image-20221203172618093"></li><li><p>根据概率分布得到累计的概率</p><img src="/2022/11/30/ImageProc/image-20221203172626177.png" class="" title="image-20221203172626177"></li><li><p>统一灰度级，获得一个到新图的映射关系</p><img src="/2022/11/30/ImageProc/image-20221203172701627.png" class="" title="image-20221203172701627"><p>式中：L是灰度级的总数目，<em>pr</em>(<em>ri</em>)是取第i级灰度值的概率，<em>ni</em>是图像中出现第i级灰度的次数，<em>n</em>是图像中像素总数。</p><p>（？）统一灰度级： 这里只对图像取8个等间隔的灰度级， 变换后的值也只能选择最靠近的一个灰度级的值。因此，以1/7为量化单位进行舍入计算，得到 </p><p>上面的s0=0.19≈0.142857（1/7），s1=0.44≈0.428571，s2=0.65≈0.714285，s3=0.81≈0.857142，s4=0.89≈0.857142，后面都约等于1了</p><p>0.19*7=1.33</p><img src="/2022/11/30/ImageProc/image-20221203172343929.png" class="" title="image-20221203172343929"><p>​    由上述数值可见，新图像将只有5个不同的灰度级别，可以重新定义如下一组符号</p><img src="ImageProc/image-20221203172401111.png" alt="image-20221203172401111" style="zoom:50%;" /><img src="/2022/11/30/ImageProc/image-20221203172427544.png" class="" title="image-20221203172427544"></li></ol><img src="/2022/11/30/ImageProc/image-20221203173136032.png" class="" title="image-20221203173136032"><ol><li>由于数字图像是离散的，因此直方图均衡化并不能产生具有理想均衡直方图的图像，但可以得到一幅灰度分布更为均匀的图像。</li><li>变换后一些灰度级合并，因此灰度级减少。</li><li>原始象含有象素数多的几个灰级间隔被拉大了，压缩的只是象素数少的几个灰度级，实际视觉能够接收的信息量大大地增强了，增加了图象的反差和图象的可视粒度。 </li></ol><p>ppt还有一个0-9范围的示例，再看一下，共10个灰度级为什么乘9啊？</p><p>还有一个练习题</p><img src="/2022/11/30/ImageProc/image-20221203173919347.png" class="" title="image-20221203173919347"><h4 id="规定化（匹配化）"><a href="#规定化（匹配化）" class="headerlink" title="规定化（匹配化）"></a>规定化（匹配化）</h4><p>引入：在某些情况下，并不一定需要具有均匀直方图的图像，有时需要具有特定的直方图的图像，以便能够增强图像中某些灰度级。</p><p>直方图规定化是使原图像灰度直方图变成规定形状的直方图从而达到对图像作修正的增强方法。  </p><img src="/2022/11/30/ImageProc/image-20221203175501840.png" class="" title="image-20221203175501840"><img src="/2022/11/30/ImageProc/image-20221203175523339.png" class="" title="image-20221203175523339"><h2 id="5-4彩色增强技术"><a href="#5-4彩色增强技术" class="headerlink" title="5.4彩色增强技术"></a>5.4彩色增强技术</h2><p>1 为什么引入彩色增强技术？</p><p>由于人眼分辨不同彩色的能力比分别不同的灰度级的能力强，因此，把人眼无法区别的灰度变化，施以不同的彩色来提高识别率，这便是伪彩色增强的基本依据。</p><p>2 彩色增强技术原理</p><p>​    彩色增强技术是利用人眼的视觉特性，将灰度图像变成彩色图像或改变彩色图像已有彩色的分布，改善图形的可分辨性。彩色增强方法可分为伪彩色增强和假彩色增强两类。</p><p>3 什么是伪彩色增强技术？</p><p>   伪彩色技术就是将灰度图像的各个不同灰度级按照线性或非线性的映射方法变换成不同的颜色，得到一幅彩色图像的增强技术。使原图像细节更容易辨认，目标更容易识别。</p><p>4 伪彩色增强的方法？</p><p>方法有：密度分割法、灰度变换彩色法、频率域伪彩色增强</p><h3 id="密度分割法"><a href="#密度分割法" class="headerlink" title="密度分割法"></a>密度分割法</h3><p>基本思想：将灰度图像中的灰度级从0（黑）到M分成N个区间，Ii(i=1,2,…,N),给每个区间Ii指定一种彩色Ci，这样，便可以把一幅灰度图像变成一副伪彩色图像。</p><p>  特点：该方法简单直观</p><p>  缺点：变换出的彩色数目有限</p><h3 id="灰度变换彩色法"><a href="#灰度变换彩色法" class="headerlink" title="灰度变换彩色法"></a>灰度变换彩色法</h3><p>基本思想：根据色度学原理，将图像f(x,y)的灰度范围分段，经过红，绿，蓝三种不同变换TR(.),TG(.),TB(.),变成三基色分量TR(x,y),TG(x,y),TB(x,y),然后用它们分别控制彩色显示器的红、绿、蓝电子枪，便可以在彩色显示器的屏幕上合成一幅彩色图像</p><h3 id="频率域伪彩色增强"><a href="#频率域伪彩色增强" class="headerlink" title="频率域伪彩色增强"></a>频率域伪彩色增强</h3><p>1 把黑白图像经过傅立叶变换到频率域，在频域内用三个不同传递特性的滤波器分离成三个独立分量；</p><p>2 对它们进行逆傅立叶变换，得到三种代表不同频率分量的单色图像；</p><p>3 最后将它们作为三基色分量分别加到彩色显示器的红、绿、蓝显示通道，得到一幅彩色图像。</p><h3 id="伪彩色增强"><a href="#伪彩色增强" class="headerlink" title="伪彩色增强"></a>伪彩色增强</h3><p>假彩色增强是对一幅自然彩色图像或是同一景物的多光谱图像，通过映射函数变换成新的三基色分量，彩色合成使感兴趣的目标呈现与原图像不同的，奇异的颜色。其目的是将一种彩色变成另一种彩色，或把多光谱图像变成彩色图像。</p><h2 id="5-5图像同态滤波"><a href="#5-5图像同态滤波" class="headerlink" title="5.5图像同态滤波"></a>5.5图像同态滤波</h2><p>消除不均匀照度的影响, 增强图象细节。</p><p>在实际应用中，我们常常会遇到这样一类图像，它们的灰度级动态范围很大，即黑的部分很黑，白的部分很白，而我们感兴趣的图中某一部分物体灰度级范围又很小，分不清物体的灰度层次和细节。用一般的灰度线性变换是不行的，因为扩展灰度级虽可以提高物体图像的反差，但会使动态范围变大。而压缩灰度级，虽可以减少动态范围，但物体灰度层次和细节就会更看不清。只要使用合适的滤波特性函数，可以既使图像灰度动态范围压缩又能让感兴趣的物体图像灰度级扩展，从而使图像清晰，这就是所谓图像的同态增晰。进行同态增晰处理的系统称为同态系统。</p><p>   同态系统是服从广义叠加原理的各类非线性系统。对同态系统信号处理，特别适合处理两类信号，一类是乘法组合信号，如图像同态增晰:另一类是褶积组合信号，如语音信号处理、地震信号处理等、。</p><p>一般情况下，图像是物体对照明光的反射(除本身能发光的物体外)。自然景物的图像是由两个分量乘积所组成，即照明度图型和反射度图型，或称照明函数和反射函数。照明函数描述景物的照明，可以认为与景物无关:反射函数包含景物细节，也可认为与照明无关。</p><p>若物体受到照度明暗不匀的时候，图象上对应照度暗的部分，其细节就较难辨别。同态滤波的目的：消除不均匀照度的影响而又不损失图象细节。</p><p>同态滤波的理论依据：</p><ul><li><p>图象的灰度由照射分量和反射分量合成。</p></li><li><p>反射分量反映图象内容，随图象细节不同在空间上作快速变化。</p></li><li><p>照射分量在空间上通常均具有缓慢变化的性质。</p></li><li><p>反射分量的频谱落在空间高频区域，照射分量的频谱落在空间低频区域。</p><p> 照明函数（低频域）描述的照明度图型分量虽然变换缓慢，但变化幅度大，使图像灰度动态范围很宽，数宇化占用很多比特数，包含信息量少——压缩</p><p> 反射函数（高频域）描述的景物区，尤其是阴影区，灰度变化很小，层次不清，细节不明，这真是人们感兴趣的——扩展</p></li></ul><img src="/2022/11/30/ImageProc/image-20221203180415736.png" class="" title="image-20221203180415736"><p>同态滤波特性曲线</p><img src="/2022/11/30/ImageProc/image-20221203180423694.png" class="" title="image-20221203180423694"><h1 id="Chapter6-图像噪声的抑制"><a href="#Chapter6-图像噪声的抑制" class="headerlink" title="Chapter6.图像噪声的抑制"></a>Chapter6.图像噪声的抑制</h1><h2 id="6-1噪声"><a href="#6-1噪声" class="headerlink" title="6.1噪声"></a>6.1噪声</h2><p>1.1 什么是噪声？</p><p>我们说，噪声就是一些不可预测的随机信号，通常概率统计方法对其进行分析。噪声对图像处理十分重要，它影响图像处理的输入、采集、处理、输出的各个环节。</p><p>1.2 噪声的来源？</p><p>数字图像的噪声主要来源于图像的获取（数字化过程）和传输过程。</p><p>图像采集设备本身的问题：图像传感器受各种因素的影响，如获取中的环境条件和传感器元器件自身的质量等。</p><p>图像在传输过程中的问题：图像在传输过程中主要由于所用传输信道被干扰而受到噪声污染。</p><p>1.3 噪声的描述</p><p>对噪声的描述一般采用统计意义上的均值和方差。</p><p>数字图像信号是一个二维信号，其二维灰度分布为f(x,y)</p><p>图像的噪声也是二维随机过程，一般的信号噪声是一维的。</p><p>噪声的均值公式：噪声的均值表明了，图像中噪声的总体强度。</p><img src="ImageProc/image-20221204150532510.png" alt="image-20221204150532510" style="zoom: 67%;" /><p>噪声的方差公式：噪声的方差表明了，图像中噪声分布的强弱差异。</p><img src="ImageProc/image-20221204150542829.png" alt="image-20221204150542829" style="zoom:67%;" /><h3 id="噪声分类"><a href="#噪声分类" class="headerlink" title="噪声分类"></a>噪声分类</h3><h4 id="高斯噪声（正态噪声）"><a href="#高斯噪声（正态噪声）" class="headerlink" title="高斯噪声（正态噪声）"></a>高斯噪声（正态噪声）</h4><img src="/2022/11/30/ImageProc/image-20221204150656914.png" class="" title="image-20221204150656914"><p>噪声位置是一定的，即<strong>每一点都有噪声</strong>，但噪声的幅值是随机的。</p><img src="ImageProc/image-20221204150721369.png" alt="image-20221204150721369" style="zoom: 67%;" /><p>其中$z$表示灰度值，$\mu$表示灰度值$z$的平均值或期望值，$\sigma$表示$z$的标准差。$\sigma^2$是$z$的方差。$\mu=0, \sigma=1$时，称为标准正态分布。一般地，高斯噪声均值$\mu=0$</p><h4 id="脉冲噪声（椒盐噪声）"><a href="#脉冲噪声（椒盐噪声）" class="headerlink" title="脉冲噪声（椒盐噪声）"></a>脉冲噪声（椒盐噪声）</h4><img src="/2022/11/30/ImageProc/image-20221204151128494.png" class="" title="image-20221204151128494"><p>噪声的幅值基本相同，但噪声出现的位置是随机的。</p><img src="ImageProc/image-20221204151158644.png" alt="image-20221204151158644" style="zoom:67%;" /><p> 如果pa或pb为零，则脉冲噪声称为单极脉冲</p><p>如果pa或pb均不为零，则脉冲噪声称为双极脉冲噪声或椒盐噪声</p><p> 脉冲噪声可以为正，也可为负</p><p> 标定以后，脉冲噪声总是数字化为最大值（纯黑或纯白）</p><p> 通常，负脉冲以黑点（胡椒点）出现，正脉冲以白点（盐点）出现</p><h4 id="均匀分布噪声"><a href="#均匀分布噪声" class="headerlink" title="均匀分布噪声"></a>均匀分布噪声</h4><img src="ImageProc/image-20221204151806677.png" alt="image-20221204151806677" style="zoom:67%;" /><p>z落在[a,b]的子区间内的概率只与子区间长度有关，而与子区间位置无关,因此z落在[a,b]的长度相等的子区间内的可能性是相等的，所谓的均匀指的就是这种等可能性。</p><h4 id="瑞利噪声"><a href="#瑞利噪声" class="headerlink" title="瑞利噪声"></a>瑞利噪声</h4><img src="/2022/11/30/ImageProc/image-20221204152057901.png" class="" title="image-20221204152057901"><h4 id="伽马（爱尔兰）噪声"><a href="#伽马（爱尔兰）噪声" class="headerlink" title="伽马（爱尔兰）噪声"></a>伽马（爱尔兰）噪声</h4><img src="/2022/11/30/ImageProc/image-20221204152128008.png" class="" title="image-20221204152128008"><h4 id="指数分布噪声"><a href="#指数分布噪声" class="headerlink" title="指数分布噪声"></a>指数分布噪声</h4><img src="/2022/11/30/ImageProc/image-20221204152133982.png" class="" title="image-20221204152133982"><h3 id="噪声模型"><a href="#噪声模型" class="headerlink" title="噪声模型"></a>噪声模型</h3><p>f是图像，n是噪声</p><h4 id="加性噪声模型"><a href="#加性噪声模型" class="headerlink" title="加性噪声模型"></a>加性噪声模型</h4><p>加性噪声：信号和噪声相互独立。本课只考虑加性噪声。</p><p>G(x,y)=f(x,y)+n(x,y)</p><h4 id="乘性噪声模型"><a href="#乘性噪声模型" class="headerlink" title="乘性噪声模型"></a>乘性噪声模型</h4><p>乘性噪声：又称卷积噪声，乘积性噪声可以通过同态变换成为加性噪声。</p><p>G(x,y)=f(x,y)[1+n(x,y)]=f(x,y)+f(x,y)n(x,y)</p><h2 id="6-2图像退化模型"><a href="#6-2图像退化模型" class="headerlink" title="6.2图像退化模型"></a>6.2图像退化模型</h2><p>图像退化：图像在形成、记录、处理和传输过程中，由于成像系统、记录设备、传输介质和处理方法的不完善，从而导致的图像质量下降</p><p>图像复原就是对退化的图像进行处理，试图恢复损坏的图像，还原真面目。确定损坏过程，并尝试其逆过程进行复原。类似于图像增强，但更加客观</p><img src="ImageProc/image-20221204152442731.png" alt="image-20221204152442731" style="zoom:67%;" /><p>典型表现：图像模糊、失真、有噪声</p><p>原因：</p><ul><li>大气的湍流效应</li><li>传感器特性的非线性</li><li>光学系统的像差</li><li>成像设备与被摄物体间的相对运动</li></ul><p>理论上的退化方法：图像复原可以看作图像退化的逆过程，是将图像退化的过程加以估计，建立退化的数学模型后，补偿退化过程造成的失真。</p><p>可行性：在图像退化确知（知道什么类型噪声）的情况下，图像退化的逆过程是有可能进行的。</p><p>存在问题1：但实际情况经常是退化过程并不知晓，这种复原称为<strong>盲目复原</strong>。</p><p>存在问题2：由于图像模糊的同时，噪声和干扰也会同时存在，这也为复原带来了困难和不确定性。</p><p>图像退化的一般模型</p><p>图像退化过程一般都看作是噪声的污染过程，而且假定噪声是加性噪声。如果系统H是一个线性、位置不变性的过程，退化图像可以表示为</p><img src="ImageProc/image-20221204153345711.png" alt="image-20221204153345711" style="zoom:50%;" /><p>h(x,y)是退化函数的空间描述，其他各种影响的综合，可理解为综合所有退化因素的函数，n(x,y)是加性噪声，*表示空间卷积。图像退化/复原过程模型示意图如下：</p><img src="/2022/11/30/ImageProc/image-20221204153412350.png" class="" title="image-20221204153412350"><p>f(x,y)表示一幅输入图像，g(x,y)是f(x,y)产生的一幅退化图像，H表示退化函数，η (<em>x</em>, <em>y</em>),表示外加噪声。</p><p>给定g(x,y)，H和η (<em>x</em>, <em>y</em>),怎样获得关于原始图像的近似估计f(x,y)？</p><img src="ImageProc/image-20221204153448634.png" alt="image-20221204153448634" style="zoom: 67%;" /><p>当一幅图像中惟一存在的退化因素是噪声时,图像退化公式可变成:</p><img src="ImageProc/image-20221204154123517.png" alt="image-20221204154123517" style="zoom:50%;" /><p>注意：实际的成像系统在一定条件下可以近似的看作是线性移不变系统，因此图像恢复过程中往往使用线性移不变的系统模型。该线性系统的输入是原图像（信号），响应是退化图像（信号）</p><p>线性移不变系统？搜了下挺复杂的</p><blockquote><p>线性系统就是一个系统的输入和输出的关系是线性关系，就是说整个系统可以分解成N多的无关独立变化，整个系统就是这些变化的累加。如 x1-&gt;y1, x2-&gt;y2; 那么A<em>x1 + B</em>x2 -&gt; A<em>y1 + B</em>y2 这就是线性系统。 叠加性，齐次性</p><p>线性移不变系统的形式：对于连续空间，表示一个线性系统可以用积分的形式，如Y= Sf(t,x)g(x)dt，S表示积分符号，其中f(t,x)表示的是A,B之类的线性系数。</p><p>上面的公式看上去和卷积很像。如果f(t,x) = F(t-x) 则就是卷积了。从f(t,x)变成F(t-x)实际上是说明F(t-x)是个线性移不变，就是说，变量的差不变化的时候，那么函数的值不变化。</p><p>总结：上述阐明，线性移不变系统的输出可以通过输入信号与一表征系统特性的函数g(t)的卷积得到。</p></blockquote><h2 id="6-3滤波器"><a href="#6-3滤波器" class="headerlink" title="6.3滤波器"></a>6.3滤波器</h2><h3 id="去噪"><a href="#去噪" class="headerlink" title="去噪"></a>去噪</h3><p>改善降质图像的方法有两类：</p><p>一类是不考虑图像降质的原因，只将图像中感兴趣的部分加以处理或突出有用的图像特征，故改善后的图像并不一定要去逼近原图像。这一类图像改善方法称为<strong>图像增强</strong>，主要目的是要提高图像的可懂度。</p><p>另一类方法是针对图像降质的具体原因，设法补偿降质因素，使改善后的图像尽可能地逼近原始图像。这类方法称为图像恢复或<strong>图像复原</strong>技术。</p><p>与图像增强的区别：图像增强不是逼近原图，而是要图像清晰；图像复原是要逼近原图。</p><p>卷积运算</p><p>首先，我们已经把图像的退化模型看作是线性移不变系统。 其次，线性移不变系统的输出可以通过输入信号与一表征系统特性的函数g(t)的卷积得到。因此，我们在处理图像退化，可以采用卷积的形式进行处理。</p><p>边界问题：在图像上移动模板（卷积核）至图像的边界时，在原图像中找不到与卷积核中的加权系数相对应的9个像素，即卷积核悬挂在图像缓冲区的边界上， 这种现象在图像的上下左右四个边界上均会出现。</p><ol><li>忽略图像边界数据(忽略)</li><li>在图像四周复制原图像边界像素的值，从而使卷积核悬挂在图像四周时可以进行正常的计算（复制）</li></ol><img src="ImageProc/image-20221204155323965.png" alt="image-20221204155323965" style="zoom:50%;" /><h3 id="均值滤波器"><a href="#均值滤波器" class="headerlink" title="均值滤波器"></a>均值滤波器</h3><p>什么是均值滤波？</p><p>所谓的均值滤波是指在图像上，对待处理的像素给定一个模板，该模板包括了其周围的邻近像素。将模板中的<strong>全体像素的均值</strong>来替代原来的像素值的方法。</p><img src="ImageProc/image-20221204155847545.png" alt="image-20221204155847545" style="zoom:67%;" /><p>均值滤波可以用来对<strong>椒盐（脉冲）噪声和高斯噪声</strong>进行滤波。</p><p>其主要优点是算法简单，计算速度快，但会造成图像一定程度上的模糊。均值滤波器（邻域平均法）的平滑效果与所采用领域的半径（模板大小）有关。半径越大，则图像的模糊程度越大。</p><h4 id="加权均值滤波器"><a href="#加权均值滤波器" class="headerlink" title="加权均值滤波器"></a>加权均值滤波器</h4><p>将以上的均值滤波器加以修正，可以得到加权平均滤波器，也就是邻域的不同选取方式。</p><img src="/2022/11/30/ImageProc/image-20221204155912968.png" class="" title="image-20221204155912968"><p>低通：若处理的中心像素点是低点（比其他的点低），那么一平均基本没影响；若是高点（比其他的点高），则平均之后要降低。</p><p>高通：若中心像素点是低点(比其他点低)，则减去其他的点，更小了，不通；若是高点（比其他点高），则减去其他点，基本无影响</p><img src="/2022/11/30/ImageProc/image-20221204155935170.png" class="" title="image-20221204155935170"><h3 id="中值滤波器"><a href="#中值滤波器" class="headerlink" title="中值滤波器"></a>中值滤波器</h3><p>因为噪声的出现，使该点像素比周围的像素亮（暗）许多， 给出滤波用的模板，如下图所示是一个一维的模板，对模板中的像素值由小到大排列，最终待处理像素的灰度取这个模板中排在中间位置上的像素的灰度值。</p><p>例如做3*3的模板，对9个数排序，取第5个数替代原来的像素值。</p><ul><li>对于椒盐噪声，中值滤波效果比均值滤波效果好。中值滤波的原理是取合理的邻近像素值来替代噪声点<ul><li>1 椒盐噪声是幅值近似相等但随机分布在不同位置上，图像中有干净点也有污染点。</li><li>2 中值滤波是选择适当的点来替代污染点的值，所以处理效果好。</li><li>因为噪声的均值不为0，所以均值滤波不能很好地去除噪声点。</li></ul></li><li>对于高斯噪声，均值滤波效果比中值滤波效果好。<ul><li>高斯噪声是幅值近似正态分布，但分布在每点像素上。</li><li>因为图像中的每点都是污染点，所中值滤波选不到合适的干净点。</li><li>因为正态分布的均值为0，所以根据统计数学，均值可以消除噪声。</li></ul></li></ul><h3 id="二值图像去噪"><a href="#二值图像去噪" class="headerlink" title="二值图像去噪"></a>二值图像去噪</h3><h4 id="二值图像的黑白点噪声滤波"><a href="#二值图像的黑白点噪声滤波" class="headerlink" title="二值图像的黑白点噪声滤波"></a>二值图像的黑白点噪声滤波</h4><p>方法：消去二值图像f(i，j)上的黑白的噪声，当像f(i，j)周围的8个像素的平均值为a时，若|f(i，j)-a|的值在127.5以上，则对f(i，j)的黑白进行翻转，若不到127.5则f(i，j)不变。 </p><img src="/2022/11/30/ImageProc/image-20221204160505324.png" class="" title="image-20221204160505324"><h4 id="消除孤立黑像素点"><a href="#消除孤立黑像素点" class="headerlink" title="消除孤立黑像素点"></a>消除孤立黑像素点</h4><p>在4点邻域的情况下，若黑像素f(i，j)的上下左右4个像素全为白(0)，则f(i，j)也取为0。</p><p>在8点邻域的情况下，若黑像素f(i，j)的周围8个像素全为白(0)，则f(i，j)也取为0。</p><h3 id="边界保持平滑滤波器"><a href="#边界保持平滑滤波器" class="headerlink" title="边界保持平滑滤波器"></a>边界保持平滑滤波器</h3><p>前面的均值和中值滤波处理结果可知，经过平滑（特别是均值）滤波处理之后，图像就会变得模糊。我们知道，图像上的景物之所以可以辨认清楚是因为目标物之间存在边界。而对边界上的像素进行平滑滤波时，若简单的采用中值或均值，都会降低边界的灰度显著性，导致图像的模糊。</p><p>因此引入边界保持类的平滑滤波。</p><p>设置一个模板，</p><ul><li>如果模板中的像素属于同一个区域，则模板中不包含边界像素，可以进行平滑处理；</li><li>如果模板中的像素属于至少两个不同的区域，则模板中包含有边界像素，这时要对其进行保持，不进行平滑处理。</li></ul><p>怎样判断模板中的像素是否在同一个区域？常用方法：计算模板中所有像素的灰度方差，如果方差大，则表明模板像素属于不同区域的可能性大；反之，则模板中像素属于同一区域的可能性大。</p><p>灰度最小方差的均值滤波器（选择掩模滤波器）</p><img src="/2022/11/30/ImageProc/image-20221204162132162.png" class="" title="image-20221204162132162"><p>选择式掩膜平滑方法取5×5的模板窗口，以中心像素为基准点，制作4个五边形、4个六边形、一个边长为3的正方形共9个形状的屏幕窗口，分别计算每个窗口内的平均值及方差。由于含有尖锐边缘的区域，方差必定比平缓区域大，因此<strong>采用方差最小的屏蔽窗口进行平均化</strong>。这种方法在完成滤波操作的同时，又不破坏区域边界的细节。这种采用9种形状的屏蔽窗口，分别计算各窗口内的灰度值方差，并采用方差最小的屏蔽窗口进行平均化的方法，也称为<strong>自适应平滑方法</strong>。</p><ol><li>以f(x,y)为中心，计算9个模板中的原有像素的灰度分布方差。</li><li>找出方差值最小的模板位置。</li><li>将所选择出的模板中像素的灰度平均值代替f(x,y).</li></ol><h3 id="K近邻平滑滤波器"><a href="#K近邻平滑滤波器" class="headerlink" title="K近邻平滑滤波器"></a>K近邻平滑滤波器</h3><p>  K近邻(KNN)平滑滤波器的核心是：在一个与待处理像素<strong>邻近的范围</strong>内，寻找出其中像素值与之最接近的K个邻点(是指灰度上最邻近)，将该<strong>K个邻点的均值（或中值）替代原像素值</strong>。</p><p>若待处理像素是非噪声点，则通过选择像素值与之相近的邻点，可保证在进行平滑处理时，基本上是同一区域的像素值的计算。则保证图像清晰度。</p><p>若待处理点是噪声点，因噪声本身的孤立性，则通过邻点的平滑处理，可对其进行抑制。</p><ol><li>以待处理像素为中心，作一个m*m的作用模板。</li><li>在模板中，选择K个与待处理像素的灰度差为最小的像素。</li><li>将这K个像素的灰度均值（中值）替换掉原来的像素值。</li></ol><p>由此，获得KNN均值滤波的结果和KNN中值滤波的结果。</p><h3 id="对称近邻平滑滤波器"><a href="#对称近邻平滑滤波器" class="headerlink" title="对称近邻平滑滤波器"></a>对称近邻平滑滤波器</h3><p>算法示意图如下，从模板中的“对称点对” 寻找与待处理像素相同区域的点。然后对选出的点做均值运算。所谓相同区域，是相对的概念，可以是较为接近的，课本有此算法，下面这个图C1的选取就并不是严格的相同</p><img src="/2022/11/30/ImageProc/image-20221204163226417.png" class="" title="image-20221204163226417"><h3 id="Sigma平滑滤波器"><a href="#Sigma平滑滤波器" class="headerlink" title="Sigma平滑滤波器"></a>Sigma平滑滤波器</h3><p>根据统计数学的原理，属于同一类别的元素的置信区间，落在均值附近±2σ 范围之内。</p><p>Sigma滤波器是构造一个模板，计算模板的标准差σ，置信区间为当前像素值的±2σ范围。</p><p>将模板中落在置信范围内的像素的均值替换原来的像素值。</p><img src="/2022/11/30/ImageProc/image-20221204163806502.png" class="" title="image-20221204163806502"><h3 id="高斯平滑滤波器"><a href="#高斯平滑滤波器" class="headerlink" title="高斯平滑滤波器"></a>高斯平滑滤波器</h3><p>所以这个为什么第七章才讲啊？</p><p>高斯滤波器是一类根据高斯函数的形状来选择权值的线性平滑滤波器。高斯平滑滤波器对于抑制服从正态分布的噪声非常有效。(移除细节)</p><p>其中，高斯分布参数<strong>Sigma</strong>决定了高斯函数的宽度。对于图像处理来说，常用二维零均值离散高斯函数作平滑滤波器。</p><p>思路：高斯滤波就是对整幅图像进行加权平均的过程，每一个像素点的值，都由其本身和邻域内的其他像素值经过加权平均后得到。</p><p>两种高斯模板：</p><img src="/2022/11/30/ImageProc/image-20221204180159535.png" class="" title="image-20221204180159535"><p>理论上来讲，图像中每点的分布都不为零，这也就是说每个像素的计算都需要包含整幅图像。在实际应用中，在计算高斯函数的离散近似时，在大概3σ距离之外的像素都可以看作不起作用，（σ=1时，在3σ内的概率为99.73%）那些像素的计算也就可以忽略。</p><p>它在对邻域内像素灰度进行平均时，给予了不同位置像素不同的权值。上图显示的是3×3邻域的高斯模板，模板上越是靠近邻域中心的位置，其权值就越高。如此安排权值的意义在于用此模板进行图像平滑时，在对图像细节进行模糊的同时，可以更多地保留图像总体的灰度分布特征。</p><h2 id="6-4产生噪声"><a href="#6-4产生噪声" class="headerlink" title="6.4产生噪声"></a>6.4产生噪声</h2><h3 id="高斯噪声"><a href="#高斯噪声" class="headerlink" title="高斯噪声"></a>高斯噪声</h3><p>(1)取得图像大小、数据区，并把数据区复制到缓冲区中；</p><p>(2)循环取得各点像素值；</p><p>(3)取得随机数（rand()/1024）；</p><p>(4)该点像素值加上随机数；</p><p>(5)把缓冲区中改动的数据复制到原数据区中。</p><h3 id="椒盐噪声"><a href="#椒盐噪声" class="headerlink" title="椒盐噪声"></a>椒盐噪声</h3><p>(1)取得图像大小、数据区，并把数据区复制到缓冲区中；</p><p>(2)循环取得各点像素值；</p><p>(3)若产生的随机数大于特定值，把该点置0；（只有这些特定点，才有噪声，值为0）</p><p>(4)把缓冲区中改动的数据复制到原数据区中。</p><h1 id="Chapter7-图像锐化与边缘检测"><a href="#Chapter7-图像锐化与边缘检测" class="headerlink" title="Chapter7.图像锐化与边缘检测"></a>Chapter7.图像锐化与边缘检测</h1><h2 id="7-1引言"><a href="#7-1引言" class="headerlink" title="7.1引言"></a>7.1引言</h2><p>问题的提出：一般说，图像的能量主要集中在其低频部分，噪声所在的频段主要在高频段（随机噪声叠加之后数值变大了？），同时图像边缘信息也主要集中在其高频部分（边缘比较黑吧）。这将导致原始图像在平滑处理之后，图像边缘和图像轮廓模糊的情况出现。</p><p>解决：为了减少这类不利效果的影响，就需要利用图像锐化技术，使图像的边缘变得清晰。</p><p>图像锐化处理目的:增强图像边缘，使目标物体的边缘鲜明，以便于提取目标物体的边界、对图像进行分割、目标区域识别、区域形状提取等，为图像理解和分析打下基础。其实就是为了加强图像中景物的边缘和轮廓。锐化的作用是要使灰度边缘的反差增强。</p><p>图像锐化的基本方法：因为边缘和轮廓都位于灰度<strong>突变</strong>的地方。所以锐化算法的实现是基于微分作用</p><p>图像锐化的应用：目前它已成为机器视觉研究领域最活跃的课题之一，在工程应用中占有十分重要的地位。</p><p>两种方法：</p><ul><li>高通滤波：图像的边缘或线条的细节（边缘）部分 与图像频谱的高频分量相对应，因此采用高通滤波让高频分量顺利通过，并适当抑制中低频分量，是图像的细节变得清楚，实现图像的锐化。</li><li>空域微分法：空域的方法——微分法。邻域平均法或加权平均法可以平滑图像，反过来利用对应的微分算法可以锐化图像。由于图像模糊的实质是图像受到平均或积分运算造成的，所以为了把图像中任何方向伸展的边缘模糊的轮廓变得清晰，可以对图像进行逆运算如微分运算，从而使图像清晰化。</li></ul><h3 id="灰度变换曲线"><a href="#灰度变换曲线" class="headerlink" title="灰度变换曲线"></a>灰度变换曲线</h3><p>画面逐渐由亮变暗时，其灰度值的变换是斜坡变化；</p><p>当出现孤立点，一般是噪声点，其灰度值的变化是一个突起的尖峰；</p><p>若进入平缓变化的区域，则其灰度变化为一个平坦段；</p><p>如果图像出现一条细线，则其灰度变化是一个比孤立点略显平缓的尖峰。</p><p>当图像由黑突变到亮，则其灰度变化是一个阶跃。</p><p>通过分析，图像中的细节是指画面的灰度变化情况，可采用微分算子来描述数据变化。</p><p>如图，逐渐亮变暗-孤立点-细线-突变-平缓</p><img src="/2022/11/30/ImageProc/image-20221204164540904.png" class="" title="image-20221204164540904"><p>原图-一阶导-二阶导</p><img src="ImageProc/image-20221204164655112.png" alt="image-20221204164655112" style="zoom:50%;" /><p>图像沿着<strong>中心</strong>并包含噪声点的此图像的水平剖面图。这张剖面图是将要用以说明该图的一维函数。图C是简化的剖面图，该图中取了足够多的点，以便于分析噪声点、线、物体边缘的一阶和二阶微分结果。</p><p>从左到右横穿剖面图，讨论一阶和二阶微分性质。</p><ul><li>图像过渡的边缘（也就是沿整个斜坡），一阶微分都不为零，经过二阶微分后，非零值只出现在斜坡的起始处和终点处。得出结论：一阶微分产生较粗的边缘，二阶微分则细。</li><li>孤立的噪声点。在孤立点及其周围点，二阶微分比一阶微分响应要强。</li><li>细线。也是一种细节。双线</li></ul><p>一阶微分和二阶微分的区别:</p><p>(1)一阶微分处理通常会产生较宽的边缘，二阶微分处理得到的边缘则<strong>细</strong>。</p><p>(2)二阶微分处理对<strong>细节</strong>有较强的响应,如细线和孤立点</p><p>(3)一阶微分处理一般对灰度阶梯有较强的响应</p><p>(4)二阶微分处理对灰度级阶梯变化产生<strong>双响应</strong></p><p>(5)二阶微分在图像中灰度值变化相似时,对线的响应要比对阶梯强,且点比线强.</p><p>小结：大多数应用中,对图像增强来说.二阶微分处理比一阶微分好,因为形成细节的能力强. 而一阶微分处理主要用于提取边缘。</p><h2 id="7-2微分运算"><a href="#7-2微分运算" class="headerlink" title="7.2微分运算"></a>7.2微分运算</h2><p>寄，看ppt吧</p><h3 id="纵向微分运算-amp-横向微分运算"><a href="#纵向微分运算-amp-横向微分运算" class="headerlink" title="纵向微分运算&amp;横向微分运算"></a>纵向微分运算&amp;横向微分运算</h3><p>横向x和纵向y的微分公式，就是后面减前面</p><img src="/2022/11/30/ImageProc/image-20221204170137653.png" class="" title="image-20221204170137653"><p>常用模板，Roberts算子</p><p>计算结果出现了小于0的像素值解决：</p><ol><li><p>整体加一个正整数，以保证所有的像素值均为正。这样做的结果是：可以获得类似浮雕的效果。</p><img src="ImageProc/image-20221204170436353.png" alt="image-20221204170436353" style="zoom:50%;" /></li><li><p>将所有的像素值取绝对值。这样做的结果是，可以获得对边缘的有方向提取</p></li></ol><h3 id="双向一次微分运算"><a href="#双向一次微分运算" class="headerlink" title="双向一次微分运算"></a>双向一次微分运算</h3><p>对灰度图像f在纵方向和横方向两个方向进行微分。该算法是同时增强水平和垂直方向的边缘。该算法的数学表达式为：G(i,j)=sqrt{[f(i,j)-f(i,j-1)]^2+[f(i,j)-f(i-1,j)]^2}就是<strong>梯度运算</strong></p><img src="/2022/11/30/ImageProc/image-20221204171108502.png" class="" title="image-20221204171108502"><h2 id="7-3梯度锐化"><a href="#7-3梯度锐化" class="headerlink" title="7.3梯度锐化"></a>7.3梯度锐化</h2><p>梯度锐化的一般思路：由梯度的计算可知，在图像灰度变化较大的边沿区域其梯度值大，在灰度变化平缓的区域梯度值较小，而在灰度均匀的区域其梯度值为零。</p><p>可根据得到的梯度值来返回像素的值，如将梯度值大的像素设置成白色，梯度值小的设置为黑色，这样就可以将边缘提取出来了，或者是加强梯度值大的像素灰度值就可以突出细节了达到了锐化的目的。</p><p>G(i,j)=sqrt{[f(i,j)-f(i,j-1)]^2+[f(i,j)-f(i-1,j)]^2}</p><p>梯度锐化常用的方法有：</p><ol><li><p>直接以梯度值代替：计算出的梯度值直接等于该点灰度值</p></li><li><p>辅以门限判断</p><p>比较像素的梯度是否大于T，是则将梯度值加100，不是则将该像素点的灰度值恢复（就是不变），如果梯度大于255，将其置为255；</p><img src="ImageProc/image-20221204171512160.png" alt="image-20221204171512160" style="zoom: 67%;" /></li><li><p>给边缘规定一个特定的灰度级</p><p>比较像素的梯度是否大于T，是则将灰度值置为La，否则灰度值不变。</p><img src="ImageProc/image-20221204171647016.png" alt="image-20221204171647016" style="zoom: 80%;" /></li><li><p>给背景规定灰度级：类似3，为背景指定La</p><img src="ImageProc/image-20221204171726468.png" alt="image-20221204171726468" style="zoom:67%;" /></li><li><p>根据梯度二值化图像</p><img src="/2022/11/30/ImageProc/image-20221204171800047.png" class="" title="image-20221204171800047"></li></ol><h2 id="7-4边缘检测"><a href="#7-4边缘检测" class="headerlink" title="7.4边缘检测"></a>7.4边缘检测</h2><p>锐化是把图像的低频边缘高频化，使得图像看起来更加有轮廓</p><p>边缘检测就是检测到图像中的边缘，可以作为锐化的基础，也可以用于分割</p><p>一阶微分算法：</p><h3 id="Roberts算子"><a href="#Roberts算子" class="headerlink" title="Roberts算子"></a>Roberts算子</h3><p>又称交叉微分算法</p><p>特点：对具有陡峭的低噪声的图像处理效果较好，但提取的边缘较粗，边缘定位不是很准确。</p><img src="/2022/11/30/ImageProc/image-20221204173042929.png" class="" title="image-20221204173042929"><img src="/2022/11/30/ImageProc/image-20221204173047417.png" class="" title="image-20221204173047417"><img src="/2022/11/30/ImageProc/image-20221204173101536.png" class="" title="image-20221204173101536"><p>只找到了绝对值的公式图，平方和再开方要更好些。</p><p>每个像素依次循环，用Roberts边缘检测算子分别计算图像中各点灰度值，对它们平方之和，再开方。</p><p>效果图：</p><img src="/2022/11/30/ImageProc/image-20221204173243696.png" class="" title="image-20221204173243696"><h3 id="Sobel算子"><a href="#Sobel算子" class="headerlink" title="Sobel算子"></a>Sobel算子</h3><img src="/2022/11/30/ImageProc/image-20221204173258007.png" class="" title="image-20221204173258007"><img src="/2022/11/30/ImageProc/image-20221204173300127.png" class="" title="image-20221204173300127"><p>特点：锐化的边缘信息定位比较准确；对灰度渐变和噪声较多的图像处理效果比较好。</p><ol><li>分别设置Sobel算子的两个模板，分别对两个缓冲区中的图像进行卷积计算。</li><li>两个缓存图像每个像素依次循环，取两个缓存中各个像素灰度值较大者。</li></ol><img src="/2022/11/30/ImageProc/image-20221204174034007.png" class="" title="image-20221204174034007"><h3 id="Prewitt算子"><a href="#Prewitt算子" class="headerlink" title="Prewitt算子"></a>Prewitt算子</h3><img src="/2022/11/30/ImageProc/image-20221204174046587.png" class="" title="image-20221204174046587"><p>特点：与Sobel相比，有一定的抗干扰性。图像效果比较干净。</p><img src="/2022/11/30/ImageProc/image-20221204174102750.png" class="" title="image-20221204174102750"><h3 id="Krisch边缘检测"><a href="#Krisch边缘检测" class="headerlink" title="Krisch边缘检测"></a>Krisch边缘检测</h3><p>以下8个卷积核组成了Kirsch边缘检测算子。图像中的每个点都用8个模板进行卷积，</p><p>所有8个方向中的最大值作为边缘幅度图像输出</p><img src="ImageProc/image-20221204174235694.png" alt="image-20221204174235694" style="zoom:50%;" /><p>分别设置Kirsch算子的模板1和模板2，调用Templat()模板函数分别对两个缓冲区中的图像进行卷积计算。求出两幅缓存图像中每个像素的较大灰度值存放在缓存图像1中，并将缓存图像1拷贝到缓存图像2中。</p><p>以此类推，分别设置Kirsch算子的模板3、模板4、模板5、模板6、模板7和模板8，每次计算后，求出两幅缓存图像中灰度值较大者存放在缓存图像1中。</p><p>最后将得到的结果缓存图像1复制到原图。</p><img src="/2022/11/30/ImageProc/image-20221204174309087.png" class="" title="image-20221204174309087"><p>二阶微分算法：</p><h3 id="LoG-Laplacian高斯-拉普拉斯算子"><a href="#LoG-Laplacian高斯-拉普拉斯算子" class="headerlink" title="LoG_Laplacian高斯-拉普拉斯算子"></a>LoG_Laplacian高斯-拉普拉斯算子</h3><p>特点：Laplacian算子获得的边界是比较细致的边界。反映的边界信息包括了许多的细节信息，但是所反映的边界不是太清晰。Laplace算子对噪声敏感</p><img src="ImageProc/image-20221204175503469.png" alt="image-20221204175503469" style="zoom: 67%;" /><p>laplacian变形算子</p><img src="/2022/11/30/ImageProc/image-20221204175726708.png" class="" title="image-20221204175726708"><p>还有一个5*5的</p><img src="ImageProc/image-20221204180914835.png" alt="image-20221204180914835" style="zoom:67%;" /><img src="/2022/11/30/ImageProc/image-20221204180930231.png" class="" title="image-20221204180930231"><h3 id="Wallis算子"><a href="#Wallis算子" class="headerlink" title="Wallis算子"></a>Wallis算子</h3><img src="/2022/11/30/ImageProc/image-20221204175801003.png" class="" title="image-20221204175801003"><p>在前面的算法公式中注意以下几点：</p><p>1）为了防止对0取对数，计算时实际上是用  log(f(i,j)+1);</p><p>2）因为对数值很小log(256)=5.45,所以计算时用46*log(f(i,j)+1)（46=255/log(256)）</p><p>  Wallis算法考虑了人眼视觉特性，因此，与Laplacian等其他算法相比，可以对<em>暗区的细节</em>进行比较好的锐化。</p><h3 id="Canny算子"><a href="#Canny算子" class="headerlink" title="Canny算子"></a>Canny算子</h3><p>Canny给出了评价边缘检测性能优劣的三个指标：</p><ol><li>好的信噪比，即将非边缘点判定为边缘点的概率要低，将边缘点判为非边缘点的概率要低；</li><li>高的定位性能，即检测出的边缘点要尽可能在实际边缘的中心；</li><li>对单一边缘仅有唯一响应，即单个边缘产生多个响应的概率要低，并且虚假响应边缘应该得到最大抑制。</li></ol><p>用一句话说，就是希望在提高对景物边缘的敏感性的同时，可以抑制噪声的方法才是好的边缘提取方法。</p><p>Canny算子求边缘点具体算法步骤如下：</p><ol><li><p>用高斯滤波器平滑图像．</p><img src="/2022/11/30/ImageProc/image-20221204180159535.png" class="" title="image-20221204180159535"></li><li><p>用一阶偏导有限差分计算梯度幅值和方向.</p><img src="/2022/11/30/ImageProc/image-20221204180638619.png" class="" title="image-20221204180638619"></li><li><p>对梯度幅值进行非极大值抑制．</p><p>仅仅得到全局的梯度并不足以确定边缘，因此为确定边缘，必须保留局部梯度最大的点，而抑制非极大值。</p><p>解决方法：利用梯度的方向，将梯度离散为圆周的四个扇区，以便用3×3的模板做运算。四个扇区的标号为0到3，对应3*3邻域的四种可能组合。在每一点上，邻域的中心象素M与沿着梯度线的两个象素相比。如果M的梯度值不比沿梯度线的两个相邻象素梯度值大，则令M=0。</p><img src="/2022/11/30/ImageProc/image-20221204180745788.png" class="" title="image-20221204180745788"><p>扇区1-5,2-6,3-7…以此类推</p></li><li><p>用双阈值算法检测和连接边缘</p><p>对非极大值抑制图像作用两个阈值th1和th2，两者关系th1=0.4th2。我们把梯度值小于th1的像素的灰度值设为0，得到图像1。然后把梯度值小于th2的像素的灰度值设为0，得到图像2。由于图像2的阈值较高，去除大部分噪音，但同时也损失了有用的边缘信息。而图像1的阈值较低，保留了较多的信息，我们可以以图像2为基础，以图像1为补充来连结图像的边缘。</p><p>链接边缘的具体步骤如下：</p><p>对图像2进行扫描，当遇到一个非零灰度的像素p(x,y)时，跟踪以p(x,y)为开始点的轮廓线，直到轮廓线的终点q(x,y)。</p><p>考察图像1中与图像2中q(x,y)点位置对应的点s(x,y)的8邻近区域。如果在s(x,y)点的8邻近区域中有非零像素s(x,y)存在，则将其包括到图像2中，作为r(x,y)点。从r(x,y)开始，重复第一步，直到我们在图像1和图像2中都无法继续为止。</p><p>当完成对包含p(x,y)的轮廓线的连结之后，将这条轮廓线标记为已经访问。回到第一步，寻找下一条轮廓线。重复第一步、第二步、第三步，直到图像2中找不到新轮廓线为止。</p><p>至此，完成canny算子的边缘检测。实际就是默认图像2中噪声点全被去掉了，只有边界点。</p></li></ol><h3 id="LOG算子"><a href="#LOG算子" class="headerlink" title="LOG算子"></a>LOG算子</h3><img src="/2022/11/30/ImageProc/image-20221204180847728.png" class="" title="image-20221204180847728"><h1 id="Chapter8-图像分割与测量"><a href="#Chapter8-图像分割与测量" class="headerlink" title="Chapter8.图像分割与测量"></a>Chapter8.图像分割与测量</h1><p>什么是图像分割</p><ul><li>在图像分析中，通常要将所关心的目标从图像中提取出来，这种从图像中将某个特定区域与其他部分进行分离并提取出来的处理，就是图像分割。就是指<strong>将一幅图像分解为若干互不交叠的、有意义的、具有相同性质的区域。</strong>  </li><li>图像分割将图像分为一些有意义的子区域，然后可以对这些区域进行描述，相当于提取出某些目标区域图像的特征，判断图像中是否有感兴趣的目标。</li></ul><p>为什么要进行图像分割</p><ul><li>图像分割与测量是图像识别和图像理解的基本前提步骤。图像分割质量的好坏直接影响后续图像处理的效果。</li><li>分割的目的就是将图像划分为不同的区域。实际图像分割通过某种方法，使得画面场景被分为“目标物”及“非目标物”两类，即将图像的像素变换为黑、白两种。因为结果图像为二值图像，所以通常又称图像分割为图像的二值化处理。</li></ul><p>图像分割特征</p><ul><li>分割出来的各区域对某种性质例如灰度，纹理而言具有相似性，区域内部是连通的且没有过多小孔；</li><li>区域边界是明确的；</li><li>相邻区域对分割所依据的性质有明显的差异。</li></ul><p>图像分割基础</p><ul><li>基于亮度值的两个基本特性之一: （跳跃性）不连续性和相似性.</li><li>第1类性质的应用途径是基于亮度的跳跃（不连续）变化分割图像,比如图像的边缘. </li><li>第2类的主要应用途径是依据事先制定的准则将图像分割为相似的区域.门限(阈值)处理、区域生长、区域分离和聚合都是这类方法的实例。</li></ul><img src="/2022/11/30/ImageProc/image-20221204201224187.png" class="" title="image-20221204201224187"><p>图像分割方法</p><ul><li>基于图像灰度分布的阈值方法</li><li>基于图像灰度空间分布的阈值方法</li><li>边缘检测法</li><li>区域提取方法</li></ul><h2 id="8-1阈值分割法"><a href="#8-1阈值分割法" class="headerlink" title="8.1阈值分割法"></a>8.1阈值分割法</h2><h3 id="基于图像灰度分布的阈值分割"><a href="#基于图像灰度分布的阈值分割" class="headerlink" title="基于图像灰度分布的阈值分割"></a>基于图像灰度分布的阈值分割</h3><p>设图像阈值的分割就是确定某个阈值Th，根据图像中每个像素的灰度值大于或小于该阈值Th来进行图像分割。</p><p>利用图像中要提取的目标物体和背景在灰度上的差异，选择一个合适的阈值。</p><img src="ImageProc/image-20221204201639850.png" alt="image-20221204201639850" style="zoom:67%;" /><p>阈值选择</p><ul><li>全局阈值：是对整幅图像使用同一个阈值做处理分割。适用背景和前景有明显对比的图像。多数情况下，物体和背景的对比度在图像中不是各处一样的，这样很难用一个统一的阈值将物体与图像分开。针对这类图像，可以根据局部特性分别采用不用的阈值进行分割。</li><li>自适应阈值：实际处理时，需要按具体问题将图像分成若干子区域分别选取阈值，或动态地根据一定的邻域范围选择每点处阈值，进行图像分割。</li></ul><h3 id="阈值选择方法"><a href="#阈值选择方法" class="headerlink" title="阈值选择方法"></a>阈值选择方法</h3><h4 id="直方图门限选择"><a href="#直方图门限选择" class="headerlink" title="直方图门限选择"></a>直方图门限选择</h4><p>阈值T可通过分析边缘检测输出的直方图来确定。假设，一幅图像只有物体和背景两部分组成，其灰度级直方图成明显的双峰值，如图。 </p><img src="/2022/11/30/ImageProc/image-20221204202132664.png" class="" title="image-20221204202132664"><p>​    在此情况下，选取双峰间的谷底处的灰度值T作为阈值，即可将物体和背景很好地分割开。阈值分割法可用数学表达式来描述。设图像为f(i，j)，其灰度级范围为[z1，z2]，<strong>设T为阈值</strong>，是z1和z2内任一值，可得一幅二值图像，其数学表达式为:</p><img src="ImageProc/image-20221204202220513.png" alt="image-20221204202220513" style="zoom:50%;" /><p>以此类推，三峰甚至多峰情况也可以选取多个T值作为阈值变为二值化（只要临近的两个区域颜色不一样能分开就行）图像。</p><p>但是对于细节变化特别多的图像，对于阈值没那么明显的图像（没有明显双峰特性）该方法效果比较差。比如lena图</p><img src="/2022/11/30/ImageProc/image-20221204203257467.png" class="" title="image-20221204203257467"><h4 id="半阈值选择图像分割"><a href="#半阈值选择图像分割" class="headerlink" title="半阈值选择图像分割"></a>半阈值选择图像分割</h4><p>阈值方法，不论图像的直方图具有双峰还是多峰值，经过阈值化后均将原始灰度级多值图像变成二值图像，假如希望阈值后的图像<strong>只把图像的背景表示成二值图像</strong>（即背景不是最白（用1表示）就是最黑（用0表示））<strong>而图像中的物体仍为多值图像</strong>。此时，可采用半阈值技术，把物体从背景中分离出来。</p><p>像素灰度值与阈值之差小于T，将像素置为0，否则保持灰度值不变</p><img src="/2022/11/30/ImageProc/image-20221204203450689.png" class="" title="image-20221204203450689"><h4 id="迭代阈值图像分割"><a href="#迭代阈值图像分割" class="headerlink" title="迭代阈值图像分割"></a>迭代阈值图像分割</h4><p>迭代的方法产生阈值，可以通过程序自动计算出比较合适的分割阈值。其计算方法是这样的：</p><p>（1）选择阈值T，通常可以选择图像的平均灰度值来作为初始阈值；</p><p>（2）通过初始阈值T，把图像的平均灰度值分成两组R1和R2；</p><p>（3）计算着两组平均灰度值μ1和μ2；</p><p>（4）重新选择阈值T，新的T定义为：T’=(μ1+μ2)/2;</p><p>循环做第二步到第四步，一直到两组的平均灰度值μ1和μ2不在发生改变，那么我们就获得了所需要的阈值</p><h4 id="最大类间方差"><a href="#最大类间方差" class="headerlink" title="最大类间方差"></a>最大类间方差</h4><p>ppt</p><h4 id="最小类内方差"><a href="#最小类内方差" class="headerlink" title="最小类内方差"></a>最小类内方差</h4><p>ppt</p><p>方差是表征数据分布不均衡性的统计量。因此要通过阈值将图像分割成两类，显然，适当的阈值使得两类数据间的方差越大越好，表明同一类中具有一定的相似性。</p><p>因此用类间与类内方差的比作为选择阈值的评价参数</p><p>最大类间、类内方差比法：就是类间方差与类内方差的比最大。</p><p>这个算法看看ppt吧</p><h4 id="最大熵方法"><a href="#最大熵方法" class="headerlink" title="最大熵方法"></a>最大熵方法</h4><p>ptt(雾)</p><p>熵：是信息论中对不确定性的度量，是对数据中所包含信息量大小的度量。</p><p>熵越大，则表明获得的信息量就越大，也就是不确定性越大。</p><p>最大熵方法的基本思想：选择适当的阈值将图像分成两类，两类的平均熵之和为最大时，可从图像中获得最大信息量，以此来确定最佳阈值。</p><ol><li>求图像中所有像素灰度的分布概率</li><li>用初始阈值将图像分为C1和C2两类</li><li>分别计算两类的平均相对熵E1,E2</li><li>选择最佳阈值，使E1+E2能够取最大值。</li></ol><h4 id="P-参数法"><a href="#P-参数法" class="headerlink" title="P-参数法"></a>P-参数法</h4><p>基本思想：对固定分辨率下的目标物，根据目标物在画面中所占的比例来选择阈值，进行二值化处理。</p><p>适用： 适用于有标准图像的情况，也就是事先知道目标物在图像中所占比例。</p><p>原理</p><ul><li>如下图所示，假设目标物为暗，背景为亮；</li><li>先试探性地给出一个阈值（黄色） ，统计目标物的像素点数在整幅图中所占的比例是否满足要求（？），是，则阈值合适；</li><li>否则，阈值则偏大（右）或者偏小（左），再进行调整，直到满足要求（白色）。</li></ul><img src="ImageProc/image-20221204205220361.png" alt="image-20221204205220361" style="zoom:67%;" /><p>步骤</p><p>1）设图像的大小为m*n，计算得到原图的灰度直方图h；</p><p>2）得到理想状态下目标物所占画面的比例p；怎么得到？</p><p>3）尝试性地给定一个阈值Th=Th0；</p><p>4）计算在Th下判定的目标物的像素点数N; </p><p>5）判断ps=N/(m*n)是否接近p？</p><p>   是，  则输出结果；</p><p>   否则，Th=Th+dT; </p><p>​        (if ps&lt;p, 则dT&gt;0;else dT&lt;0)， </p><p>​        转4），直到满足条件。</p><p>p-参数法对于<strong>已知目标物在画面中所占比例</strong>的情况下使用比较有效。</p><h3 id="基于图像灰度空间分布的阈值方法"><a href="#基于图像灰度空间分布的阈值方法" class="headerlink" title="基于图像灰度空间分布的阈值方法"></a>基于图像灰度空间分布的阈值方法</h3><p>局部阈值法？前面写的标题名字，后面说的是局部</p><p>前面的阈值方法是单一阈值。即对整幅图像采用一个被确定的阈值进行分割处理。也可以进行局部阈值算法。只对简单图像（即目标与背景比较容易区分）有效，但对于一个较为复杂的图像 ，就会有一些问题。</p><p>如图显示全局阈值效果不如局部阈值分割效果。这是因为光照不均造成的（光源位于画面左侧）。</p><p>用全局阈值，会导致远离光源的右侧气泡区域，提取得到的面积远远小于实际面积，这样就会影响后继的定量分析结果。</p><p>局部阈值：将图像进行一定的等分，在每个子块上，光照不均的影响就可忽略不计。在每个子块上采用前面给出的阈值方法，最终可达到理想的效果。</p><img src="/2022/11/30/ImageProc/image-20221204205632081.png" class="" title="image-20221204205632081"><h4 id="灰度-局部灰度均值散布图法"><a href="#灰度-局部灰度均值散布图法" class="headerlink" title="灰度-局部灰度均值散布图法"></a>灰度-局部灰度均值散布图法</h4><p>原理：如果某个像素与其周围领域中的均值偏差较大，则说明该点是边界上的点或者是噪声点。</p><p>构造灰度－局部灰度均值散布图</p><p>以图像灰度为横轴，<strong>局部灰度均值（如3*3模板下的均值）为纵轴</strong>，构造一个图像分布的散布图，</p><p>对于对角线上的点分布，对应于目标或者背景内部的点，对于离开对角线的点，则对应于区域边界上的点。</p><img src="ImageProc/image-20221204210826656.png" alt="image-20221204210826656" style="zoom:67%;" /><h4 id="二维最大熵法"><a href="#二维最大熵法" class="headerlink" title="二维最大熵法"></a>二维最大熵法</h4><p>二维最大熵法基于图像的二维直方图。</p><p>图像的二维直方图定义如下：</p><img src="ImageProc/image-20221204211227307.png" alt="image-20221204211227307" style="zoom:67%;" /><p>其中 M，N是表示图像大小，Ni,j表示图像灰度值是i, 邻域平均灰度值为j的像素的个数。</p><img src="/2022/11/30/ImageProc/image-20221204211256339.png" class="" title="image-20221204211256339"><p>其中区域1和2表示背景和目标像素，区域3和4通常表示边界和噪声信息。阈值向量(t,s)，t表示灰度值，s表示像素邻域均值（通常是8邻域）</p><h3 id="边缘检测法"><a href="#边缘检测法" class="headerlink" title="边缘检测法"></a>边缘检测法</h3><h4 id="梯度直方图法"><a href="#梯度直方图法" class="headerlink" title="梯度直方图法"></a>梯度直方图法</h4><p>关于边缘检测类的阈值方法，在前一章中介绍了Canny算子和LOG算子的边缘检测。这些方法都是通过对边缘变化率的分析得到的。</p><p>这里是基于的边缘检测类的阈值方法，也就是用边缘检测方法来得到二值化阈值</p><img src="/2022/11/30/ImageProc/image-20221204211555163.png" class="" title="image-20221204211555163"><p>下图是对前图进行Sobel锐化结果的梯度值统计直方图。由于图像中像素间的相关性较强，因此低梯度（接近0处）的像素个数是大多数，从而该直方图无法获得直接选择阈值的提示信息。对该直方图进行修正，获得一个<strong>加权梯度直方图</strong>（？）</p><img src="/2022/11/30/ImageProc/image-20221204211802308.png" class="" title="image-20221204211802308"><p>加权梯度直方图的设计方法是，通过对梯度分布进行加权修正，增大直方图的分布细节。一般采用的方法是，对高梯度区加较大的权值，以减小均匀区域内像素点对直方图的贡献，增加边界上的点对直方图的贡献。如前图 (b)所示，通过这样的处理之后，选择第一个峰值为最佳阈值点即可。</p><p>前图 (c)所示，是采用该方法对一幅国际标准测试图像进行处理的结果，经过计算得到该图例的分割阈值为Th* =190。</p><h2 id="8-2轮廓提取"><a href="#8-2轮廓提取" class="headerlink" title="8.2轮廓提取"></a>8.2轮廓提取</h2><h3 id="轮廓提取法"><a href="#轮廓提取法" class="headerlink" title="轮廓提取法"></a>轮廓提取法</h3><p>图像边缘是图像局部特性不连续性（灰度突变、颜色突变等）的反映，它标志着一个区域的终结和另一个区域的开始。</p><p>二值图像的轮廓提取的基本原理：就是掏空内部点，如果原图中有一点为黑，且它的8个相邻点皆为黑，则将该点删除（意思就是把该点置为背景白色，而轮廓即边始终是黑色）。</p><p>注意：</p><ul><li>对于非二值图像，要先进行二值化处理。</li><li>轮廓提取其实是取一个物体的边。</li></ul><p>算法</p><ul><li>将像素点的8邻域像素读入数组中</li><li>如果每一个邻域像素的灰度值和中心点的灰度值相差小于10，则认为邻域像素和中心点相同。</li><li>如果8个邻域像素都和中心点相同，在内存缓冲区中将该像素点置白，否则保持不变。</li></ul><img src="/2022/11/30/ImageProc/image-20221204212230768.png" class="" title="image-20221204212230768"><img src="/2022/11/30/ImageProc/image-20221204212236199.png" class="" title="image-20221204212236199"><h3 id="边界跟踪法"><a href="#边界跟踪法" class="headerlink" title="边界跟踪法"></a>边界跟踪法</h3><p>边界跟踪的基本方法是：先根据某些严格的“探测准则”找出目标物体轮廓上的像素，再根据这些像素的某些特征用一定的“跟踪准则”找出目标物体上的其他像素。</p><p>一般的跟踪准则是：</p><ol><li> 边缘跟踪从图像左上角开始逐像点扫描，当遇到边缘点时则开始顺序跟踪，直至跟踪的后续点回到起始点（对于闭合线）或其后续点再没有新的后续点（对于非闭合线）为止。</li><li>  如果为非闭合线，则跟踪一侧后需从起始点开始朝相反的方向跟踪到另一尾点。</li><li>  如果不止一个后续点，则按上述连接准则选择加权平均最大的点为后续点，另一次要的后续点作为新的边缘跟踪起点另行跟踪。一条线跟踪完后，接着扫描下一个未跟踪点，直至图像内的所有边缘都跟踪完毕。 </li></ol><img src="/2022/11/30/ImageProc/image-20221204212245143.png" class="" title="image-20221204212245143"><h3 id="已知形状的曲线检测"><a href="#已知形状的曲线检测" class="headerlink" title="已知形状的曲线检测"></a>已知形状的曲线检测</h3><p>对已知的直线，曲线，圆等形状曲线进行检测，hough变换非常有效。</p><p>Hough变换的核心思想</p><img src="ImageProc/image-20221204212313420.png" alt="image-20221204212313420" style="zoom:67%;" /><p>ppt</p><h3 id="区域增长法"><a href="#区域增长法" class="headerlink" title="区域增长法"></a>区域增长法</h3><p>基于区域整体特性的图像分割方法。</p><p>图像分割的目的是要把一幅图像划分成一些区域，最直接的方法就是把点组成区域。为此需要：</p><ul><li>确定区域的数目，</li><li>确定一个区域与其他区域相区别的特征，</li><li>产生有意义分割的相似性判据。</li></ul><p>区域生长法的依据：假定已知要划分的区域数目以及每个区域内某一点的位置，就可以推导出图像分割的一种算法，即区域生长法。</p><p>区域生长法主要考虑象素及其空间邻域象素之间的关系。开始时确定一个或多个象素点作为种子，然后按某种相似性准则增长区域，逐步生成具有某种均匀性的空间区域，将相邻的具有相似性质的象素或区域归并从而逐步增长区域，直至没有可以归并的点或其它小区域为止。区域内象素的相似性度量可以包括平均灰度值、纹理、颜色等信息。 </p><img src="/2022/11/30/ImageProc/image-20221204212729992.png" class="" title="image-20221204212729992"><p>区域生长法示例</p><p>下例通过一个印章识别中的印文区域分割例子来具体介绍一种区域生长的方法。</p><p>由于盖印时油墨、下垫物等，以及人手用力不均匀，盖出的印章深浅是不相同的。如果用单一阈值进行分割，则会出现对盖印条件过于敏感等问题。</p><img src="/2022/11/30/ImageProc/image-20221204212935106.png" class="" title="image-20221204212935106"><p>如果采用区域生长法，首先选择红色的点为种子点（假设采用红色的印章油墨盖印），然后确定生长准则。</p><p>如果采用灰度差准则，则是判断当前点与种子点之间的灰度差，如果小于设定的阈值，就确认为印章点，否则认为是背景点。这样，如图 (b)所示，对盖印较浅的部分，就会产生严重的缺损。如果采用一致性准则，如图 (c)所示，可以一定程度地抵抗盖印不均所带来的影响。</p><p>一致性准则是：首先选择若干的红色点为种子点，计算这些点所组成的点集合的灰度均值和方差，然后在判断某个点是否为同一区域时，判断其灰度值与该均值的差，以及该点与种子点之间的方差，如果小于设定阈值，则表明该点与种子点具有一致性，将其判定为印章区域的点。之后，计算增加一个点后的点集合的灰度均值与方差，再进行下一个点的判断。</p><h3 id="区域分裂合并法"><a href="#区域分裂合并法" class="headerlink" title="区域分裂合并法"></a>区域分裂合并法</h3><p>区域合并、分裂方法</p><p>区域生长法存在问题：区域生长法的最关键一步，就是需要根据先验知识选取<strong>种子点</strong>，这就给一些无法获得先验知识的自动分割的课题带来许多的困难。</p><p>区域合并、分裂方法的核心思想是：无需先确定种子点</p><p>将图像分成若干的子块，对每个子块的属性进行计算：当属性表明该子块包含不同区域的像素，则该子块再分裂成若干子块。</p><p>如果几个子块的属性相似，则这几个相似属性的子块合并成一个大的区域。</p><p>基本思想：</p><p>先分裂后合并</p><p>区域分裂合并方法利用了图像数据的金字塔或四叉树数据结构的层次概念，将图像划分成一组任意不相交的初始区域，即可以从图像的这种金字塔或四叉树数据结构的任一中间层开始，根据给定的均匀性检测准则进行分裂和合并这些区域，逐步改善区域划分的性能，直至最后将图像分成数量最少的均匀区域为止。</p><p>区域分裂思想：如果区域的某些特性差别比较大,即不满足一致性准则时,则区域应该采用分裂法,分裂过程从从图像的最大区域开始，一般情况下，是从整幅图像开始。</p><p>注意：</p><ul><li>确定分裂准则(一致性准则，如灰度)</li><li>确定分裂方法，即如何分裂区域，使得分裂后的子区域的特性尽可能都满足一致性准则值。</li></ul><p>算法</p><p>定义P:P(Ri)的可定义为</p><p>区域内多于80%的像素满足不等式|zj-mi|≤2σi，</p><p>其中： R<em>i</em>是第<em>i</em>个区域。zj是区域Ri中第j个点的灰度级，mi是该区域的平均灰度级，σi是区域的灰度级的标准方差。</p><p>就定义P(Ri)=TRUE，并将区域Ri内所有像素的灰度级置为mi。</p><ol><li>形成初始区域</li><li>对图像的每一个区域<em>R**i</em>，计算<em>P</em>(<em>R**i</em>)，如果</li><li><em>P</em>(<em>R**i</em>)=FALSE</li><li>则沿着某一合适的边界分裂区域</li><li>重复步骤2，当没有区域需分裂时，算法结束。</li></ol><p>分裂的存在的问题：单纯的区域分裂只能把图像分成许多满足一致性的区域,相邻的具有相同性质的区域并没有合成一体。</p><p>区域合并基本思想：因此分裂完成后，再将具有相同性质区域合并。</p><ul><li>合并运算就是把相邻的具有相似性质的区域合成为一个区域</li><li>合并算法中最重要的运算：确定两个区域的相似性</li><li>判定区域相似性方法：<ul><li>可以基于区域的灰度值，</li><li>可以基于区域边界的强弱性等因素。</li><li>一种简单的方法是比较它们的灰度均值</li></ul></li></ul><p>算法</p><ol><li>使用某种方法进行图像的初始区域分割。</li><li>对于图像中相邻的区域，计算是否满足一致性,若满足则合并为一个区域。</li><li>重复步骤2，直到没有区域可以合并，算法结束。</li></ol><img src="/2022/11/30/ImageProc/image-20221204213343877.png" class="" title="image-20221204213343877"><img src="/2022/11/30/ImageProc/image-20221204213351615.png" class="" title="image-20221204213351615"><p>失去耐心.jpg</p><img src="/2022/11/30/ImageProc/image-20221204213406551.png" class="" title="image-20221204213406551"><p>整个算法步骤</p><ol><li>设整幅图像为初始区域</li><li>对每一区域<em>R</em>，如果<em>P</em>(<em>R</em>)=FLASE，则把该区域分裂成四个子区域</li><li>重复上一步，直到没有区域可以分裂</li><li>对图像中任意两个相邻的<em>R</em>1和<em>R</em>2，如果<em>P</em>(<em>R</em>1U<em>R</em>2)=TRUE，则把这两个区域合并成一个区域。</li><li>重复上一步，直到没有相邻区域可以合并，算法结束</li></ol><img src="/2022/11/30/ImageProc/image-20221204213442283.png" class="" title="image-20221204213442283"><img src="/2022/11/30/ImageProc/image-20221204213451659.png" class="" title="image-20221204213451659"><img src="/2022/11/30/ImageProc/image-20221204213504538.png" class="" title="image-20221204213504538"><p>区域合并、分裂方法</p><ul><li>根据σ的值进行判别，如果设定阈值为σTh=1，可知f11，f12不再分裂，而f13和f14进行下一层的分裂，刚好分裂到最小单位为单个像素。</li><li>然后，以灰度差小于μTh=2为基准进行合并，可以得到下面的图像分割结果。</li></ul><h2 id="8-3模板匹配"><a href="#8-3模板匹配" class="headerlink" title="8.3模板匹配"></a>8.3模板匹配</h2><p>？没有</p><h2 id="8-4图像的测量"><a href="#8-4图像的测量" class="headerlink" title="8.4图像的测量"></a>8.4图像的测量</h2><p>几个基本概念：</p><p>(1)邻域</p><p> 与像素(x,y)对应的点集合{(x+p,y+q);((p,q)是一对有意义的整数)}称之为像素(x,y)的邻域。离散图像处理中常取4邻域和8邻域. </p><p>(2)连通</p><img src="/2022/11/30/ImageProc/image-20230207125538645.png" class="" title="image-20230207125538645"><p> (3)连通成份 </p><p> 二值图像中互相连通的0-像素集或1-像素集称之为连通成份。 </p><p>孔：在“0”连接成分中，如果存在与外围的一行、一列的像素不连接成分， 则称为孔。如a，b。</p><p>单连接成分：不包含孔的“1”连接成分称为单连接成分；</p><p>孤立点：仅含有一个像素的“1”单连接成分；</p><p>多重连接成分：含有孔的“1”连接成分称为多连接成分。</p><p>3．欧拉数</p><p>  在二值图像中，1像素连接成分数C减去孔数H的值叫做这幅图像的欧拉数或示性数。若用E表示图像的欧拉数，则</p><p>​        E=C-H         (8.1-1)</p><p>E是欧拉数，C是连通成分数，H是孔数</p><p>欧拉数：对于一个1像素连接成分，1减去这个连接成分中所包含的孔数的差值叫做这个1像素连接成分的欧拉数。二值图像的欧拉数是所有1像素连接成分的欧拉数之和。</p> <img src="/2022/11/30/ImageProc/image-20230207125625489.png" class="" title="image-20230207125625489"><p>4．像素的可删除性和连接数</p><p>   二值图像上改变一个像素的值后也就是删除这个像素，整个图像的连接性并不改变（各连接成分既不分离、不结合，孔也不产生、不消失），则这个像素是可删除的。</p><p>5、交叉数：是表征当前像素的八个近邻像素中，从像素值为1的点到像素值为0的点的变化次数。</p><p>6.距离：对于集合S中的两个元素<em>p</em>和<em>q</em>，当函数<em>D</em> ( <em>p</em> , <em>q</em> )满足下式的条件时，把<em>D</em> ( <em>p</em> , <em>q</em> )叫做<em>p</em>和<em>q</em>的距离，也称为距离函数。</p><img src="/2022/11/30/ImageProc/image-20230207125725953.png" class="" title="image-20230207125725953"><p>7、链码</p><p>一种矢量表示法，具有方向性；</p><p>是相互邻接的两个像素按照不同的方向给定一个规定的数字符号（码）。</p><p>用一串这样的符号（码）表示一个连接成分的方法叫 链码表示法。</p> <img src="/2022/11/30/ImageProc/image-20230207125756900.png" class="" title="image-20230207125756900"><p><strong>连接成分的标记：</strong>为区分二值图像中的连接成分，求得连接成分个数，</p><p>对属于同一个１像素连接成分的所有像素分配相同的编号，对不同的连接成分分配不同的编号的操作。</p><p>即分割后的一帧图像内可能存在多个连通成份/域，每个非连通成份/域都对应一个目标图像区，给各目标图像区分配相应标号的工作称之为标记。</p><img src="/2022/11/30/ImageProc/image-20230207125904472.png" class="" title="image-20230207125904472"><p>l4连通加标记的一种方法</p><p>说明：图中A代表物体，0代表背景，规定用四连通加标记，由于扫描的次序，对于任意点，其左前一点和上一点一定是扫描过的点。</p><p>标记原则：</p><ul><li>当左前一点和上一点都是背景0时，则当前点加新标记。</li><li>当左前一点和上一点有一个是0时，另一个已加过标记，则当前点和已加标记点有相同标记。</li><li>当左前一点和上一点都是已加标记点，则当前点标记和左前点相同。</li></ul><p>标记方法：</p><p> 标记直接修改像素值为1，2，3，4…</p><img src="/2022/11/30/ImageProc/image-20230207125948428.png" class="" title="image-20230207125948428"><h1 id="Chapter9-二值图像处理"><a href="#Chapter9-二值图像处理" class="headerlink" title="Chapter9.二值图像处理"></a>Chapter9.二值图像处理</h1><h2 id="9-1数学形态学基础"><a href="#9-1数学形态学基础" class="headerlink" title="9.1数学形态学基础"></a>9.1数学形态学基础</h2><p>数学形态学的数学基础和所用语言是集合论。数学形态学的主要内容是设计一套变换、概念、算法用来描述图像的基本特征。</p><p>基本思想是用具有一定形态的结构元素去量度和提取图像中的对应形状以达到对图像分析和识别的目的。</p><p>元素和集合</p><p>把一幅图像称为一个集合。</p><p>对于二值图像，习惯上景物取值为1，用阴影表示，背景取值为0，用白色表示。</p><p>值为1的点的集合A与图像是一一对应的。</p><p>对于图像A，点a在A区域内， 则a是A的元素，记为<em>a</em>∈A，否则，记作<em>a</em>∈A。</p><img src="/2022/11/30/ImageProc/image-20230207130420104.png" class="" title="image-20230207130420104"><p>基本运算：膨胀、腐蚀</p><p>膨胀或腐蚀反复使用就可以清除二值图像中的小成份或孔。</p><img src="/2022/11/30/ImageProc/image-20230207130506300.png" class="" title="image-20230207130506300"><h3 id="腐蚀"><a href="#腐蚀" class="headerlink" title="腐蚀"></a>腐蚀</h3><p>腐蚀是数学形态学的两个基本运算之一，</p><p>作用：消除物体边界点，使边界向内部收缩的过程。可以把小于结构元素的物体去除。</p><p>设计：选取不同大小的结构元素，就可以去除不同大小的物体。</p><p>一种应用：若两个物体间有细小的连通，通过腐蚀可将两个物体分开。</p><img src="/2022/11/30/ImageProc/image-20230207130649708.png" class="" title="image-20230207130649708"><p>  <em>X</em>用<em>S</em> 腐蚀的结果是所有使<em>S</em> 平移<em>x</em>后仍在<em>X</em> 中的<em>x</em>的集合。</p><p>腐蚀在数学形态学运算中的作用是消除物体边界点。</p><p>腐蚀可以把小于结构元素的物体(毛刺、 小凸起)去除;</p><p>如果两个物体之间有细小的连通，结构元素足够大时，通过腐蚀运算可以将两个物体分开。</p><img src="/2022/11/30/ImageProc/image-20230207130922708.png" class="" title="image-20230207130922708"><img src="/2022/11/30/ImageProc/image-20230207130955000.png" class="" title="image-20230207130955000"><img src="/2022/11/30/ImageProc/image-20230207131005119.png" class="" title="image-20230207131005119"><img src="/2022/11/30/ImageProc/image-20230207131012027.png" class="" title="image-20230207131012027"><h3 id="膨胀"><a href="#膨胀" class="headerlink" title="膨胀"></a>膨胀</h3><p>膨胀的方法：拿S的中心点和X上的点及X周围的点一个一个地对，如果S上有一个点落在X的范围内，则该点存在且为黑。</p><p>（图有小错误）</p><img src="/2022/11/30/ImageProc/image-20230207131139098.png" class="" title="image-20230207131139098"><p>用腐蚀和膨胀运算还可以实现图像的平移。如果在自定义结构元素时选择不在原点的一个点作为结构元素，则得到的图像形状没有任何改变，只是位置发生了移动。</p><img src="/2022/11/30/ImageProc/image-20230207131234088.png" class="" title="image-20230207131234088"><h3 id="开-闭运算"><a href="#开-闭运算" class="headerlink" title="开/闭运算"></a>开/闭运算</h3><p>膨胀和腐蚀不互为逆运算，可以级连结合使用，构造出形态学运算族，它由膨胀和腐蚀两个运算的复合与集合操作组合成的所有运算构成。</p><p>  例如，可先对图像进行腐蚀然后膨胀其结果，称为开运算，或先对图像进行膨胀然后腐蚀其结果，称为闭运算。开运算和闭运算是形态学运算族中两个最为重要的组合运算。 </p><img src="/2022/11/30/ImageProc/image-20230207131358420.png" class="" title="image-20230207131358420"><img src="/2022/11/30/ImageProc/image-20230207131414847.png" class="" title="image-20230207131414847"><img src="/2022/11/30/ImageProc/image-20230207131419942.png" class="" title="image-20230207131419942"><h3 id="击中-击不中"><a href="#击中-击不中" class="headerlink" title="击中/击不中"></a>击中/击不中</h3><img src="/2022/11/30/ImageProc/image-20230207131451735.png" class="" title="image-20230207131451735"><img src="/2022/11/30/ImageProc/image-20230207131459147.png" class="" title="image-20230207131459147"><img src="/2022/11/30/ImageProc/image-20230207131551698.png" class="" title="image-20230207131551698"><img src="/2022/11/30/ImageProc/image-20230207131604942.png" class="" title="image-20230207131604942"><p>   由此可见，击中运算相当于一种条件比较严格的模板匹配，它不仅指出被匹配点所应满足的性质即模板的形状，同时也指出这些点所不应满足的性质，即对周围环境背景的要求。</p><img src="/2022/11/30/ImageProc/image-20230207131629667.png" class="" title="image-20230207131629667"><h2 id="9-2图像几何测量"><a href="#9-2图像几何测量" class="headerlink" title="9.2图像几何测量"></a>9.2图像几何测量</h2><h3 id="面积"><a href="#面积" class="headerlink" title="面积"></a>面积</h3><h3 id="周长"><a href="#周长" class="headerlink" title="周长"></a>周长</h3><img src="/2022/11/30/ImageProc/image-20230207131829944.png" class="" title="image-20230207131829944"><img src="/2022/11/30/ImageProc/image-20230207131835808.png" class="" title="image-20230207131835808"><p>周长是围绕所有像素的外边界的长度。常用简便方法如下： </p><p> (1) 把图像中的像素看作单位面积小方块，图像中的区域和背景均由小方块组成。区域的周长为区域和背景缝隙的长度和，此时边界用隙码表示。求周长就是计算隙码的长度。</p><img src="/2022/11/30/ImageProc/image-20230207131922188.png" class="" title="image-20230207131922188"><p>  (2) 把像素看作一个个点时，周长用链码表示，求周长也即计算链码长度。当链码值为奇数时，其长度记作√2；当链码值为偶数时，其长度记作1。即周长<em>p</em>表示为 </p><img src="/2022/11/30/ImageProc/image-20230207131951128.png" class="" title="image-20230207131951128"><p>  (3) 周长用边界所占面积表示，也即边界点数之和， 每个点占面积为1的一个小方块。(实际就是像素点个数，简单实用）</p><img src="/2022/11/30/ImageProc/image-20230207132440663.png" class="" title="image-20230207132440663"><p>质心、形状特征、矩形度、长宽比、圆形度、致密度、球状性、见ppt</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Chapter1-绪论&quot;&gt;&lt;a href=&quot;#Chapter1-绪论&quot; class=&quot;headerlink&quot; title=&quot;Chapter1.绪论&quot;&gt;&lt;/a&gt;Chapter1.绪论&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>oracle数据库</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/11/27/oraclesql/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/11/27/oraclesql/</id>
    <published>2022-11-27T00:30:36.000Z</published>
    <updated>2023-03-20T07:25:56.216Z</updated>
    
    <content type="html"><![CDATA[<p>-1：考的还行？只能说是立项导师的仁慈（</p><p>知识散的不得了，我也不知道到底怎么复习好，就尽量看吧</p><h1 id="1sql-plus命令"><a href="#1sql-plus命令" class="headerlink" title="1sql plus命令"></a>1sql plus命令</h1><p>用于编辑、保存、运行sql命令、PL/SQL块、格式化查询结果、自定义SQLplus环境等</p><p>单条语句以;结束，程序块用/结束</p><h3 id="登录、退出"><a href="#登录、退出" class="headerlink" title="登录、退出"></a>登录、退出</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">登录<br>用户名sys<br>密码输orcl as sysdba<br>或者，斜杠前面是用户名，后面是密码，@后面是主机字符串<br>conn sys/orcl@orcl as sysdba<br>conn scott/tiger@orcl<br><br>退出<br><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">环境变量查看<br><span class="hljs-keyword">show</span> 查看当前sqlplus系统变量<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">all</span> <br><span class="hljs-keyword">show</span> <span class="hljs-keyword">user</span><br><span class="hljs-keyword">show</span> error<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">timing</span><br>环境变量设置<br><span class="hljs-keyword">set</span> wrap <span class="hljs-keyword">off</span> 关闭自动换行<br><span class="hljs-keyword">set</span> serveroutput <span class="hljs-keyword">on</span> 使用自带输出方法(dbms_output.put_line方法)<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">timing</span> <span class="hljs-keyword">on</span> 显示查询耗费时间<br><span class="hljs-keyword">set</span> autocommit <span class="hljs-keyword">on</span> 自动提交DML<br><span class="hljs-keyword">set</span> linesize <span class="hljs-number">180</span> 一行最多<span class="hljs-number">180</span>字符<br><span class="hljs-keyword">set</span> pause <span class="hljs-keyword">on</span>/<span class="hljs-keyword">off</span><br>设置 <span class="hljs-keyword">SQL</span> *Plus 输出结果是否滚动显示<br><span class="hljs-keyword">off</span> 是默认值，返回结果一次性输出完毕，中间的每一页不会暂停<br><span class="hljs-keyword">on</span> 表示输出结果的每一页都暂停，用户按后回车键后继续显示<br></code></pre></td></tr></table></figure><h3 id="行编辑"><a href="#行编辑" class="headerlink" title="行编辑"></a>行编辑</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">list</span> <br>列出缓冲区内容<br><span class="hljs-keyword">list</span> <span class="hljs-number">1</span> 列出第一行<br><span class="hljs-keyword">list</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span>，<span class="hljs-number">3</span>行<br><span class="hljs-keyword">list</span> <span class="hljs-keyword">last</span> 最后一行<br><span class="hljs-keyword">list</span> * 当前行（有一个类似指针的标记）<br><br><span class="hljs-keyword">append</span> [<span class="hljs-built_in">string</span>] 把<span class="hljs-built_in">string</span>的内容追加到当前行后面<br><span class="hljs-built_in">input</span> [<span class="hljs-built_in">string</span>] <span class="hljs-built_in">string</span>内容插入到当前行之后作为一个新行<br>del 删除当前行<br>del [n] 删除第n行<br>clear <span class="hljs-keyword">buffer</span> 清空缓冲区<br>clear screen 清屏<br><span class="hljs-keyword">edit</span> 打开记事本作为输入区编辑<br>@或start <span class="hljs-keyword">c</span>:/<span class="hljs-number">1</span>.sql 运行sql脚本<br>describe/desc [table|<span class="hljs-function"><span class="hljs-keyword">function</span>]返回对表或函数的描述、</span><br><span class="hljs-keyword">help</span> xxx 对某个命令的帮助<br></code></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs gams">其他一些<br>ARRAYSIZE  一次从数据库读取的行数<br>COLSEP  列之间显示的文本，默认为空格<br>FEEDBACK  查询记录时返回的记录数<br>HEADING  控制报表中列标题的打印<br>PAGESIZE 设置每页的行数<br><br>保存当前设置<br>store <span class="hljs-keyword">set</span> c:/mysetting.cmd<br>@c:/mysetting.cmd 再次登录时启用设置<br><br>输出到文件<br>spool <span class="hljs-comment">filename.txt</span><br>将命令后的输出写入到文件中<br>spool <span class="hljs-comment">off</span>关闭<br><br><br></code></pre></td></tr></table></figure><h1 id="2sql语言基础"><a href="#2sql语言基础" class="headerlink" title="2sql语言基础"></a>2sql语言基础</h1><p>Structured Query Language结构化查询语言，非过程化语言，面向结果的语言</p><h2 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h2><p>DQL数据查询语言：select</p><p>DML数据操纵语言：insert update delete</p><p>DDL数据定义语言：create alter drop truncate</p><p>TCL事务控制语言：commit rollback</p><p>DCL数据控制语言：grant revoke，控制用户对数据库的访问</p><p>另外，有会话控制、系统控制、嵌入式sql等扩展语句。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>分为标准sql类型和PL/SQL数据类型</p><p>无货币类型</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">number</span>(l,p) 允许l个有效数字，允许p位小数，允许l-p位整数<br><span class="hljs-keyword">number</span> 如果只写<span class="hljs-keyword">number</span>，会根据赋值情况进行调整，其他数值型都是<span class="hljs-keyword">number</span>的子类<br>date <span class="hljs-number">7</span>个字节，存世纪、年、月、日、小时、分、秒，每项一个字节。没有存秒的小数部分<br><span class="hljs-built_in">char</span> 定长文本<br>varchar2变长文本<br>VARCHAR2（<span class="hljs-built_in">size</span> <span class="hljs-keyword">type</span>），<span class="hljs-built_in">size</span>最大为<span class="hljs-number">4000</span>，<span class="hljs-keyword">type</span>可以是<span class="hljs-built_in">char</span>也可以是byte，不标明<span class="hljs-keyword">type</span>时默认是byte（如：<span class="hljs-keyword">name</span> VARCHAR2(<span class="hljs-number">60</span>)）。<br>nvarchar2<br>NVARCHAR2（<span class="hljs-built_in">size</span>），<span class="hljs-built_in">size</span>最大值为<span class="hljs-number">2000</span>，单位是字符<span class="hljs-built_in">char</span>；NVARCHAR不受数据库字符集的影响<br>long  包含文本数据，最多<span class="hljs-number">2</span>G<br>binary_integer 二进制整型，速度快，适合pl/sql中做循环变量i<br></code></pre></td></tr></table></figure><p>语法其实和sql server大差不差，比较复杂一点的会有点不一样，oracle用pl/sql，sqlserver是tsql</p><img src="/2022/11/27/oraclesql/image-20230214194213476.png" class="" title="image-20230214194213476"><p>布尔类型</p><img src="/2022/11/27/oraclesql/image-20230214194343616.png" class="" title="image-20230214194343616"><h3 id="schema-模式"><a href="#schema-模式" class="headerlink" title="schema 模式"></a>schema 模式</h3><p>sys.emp</p><p>user.emp</p><p>类似表空间？</p><h3 id="dual伪表"><a href="#dual伪表" class="headerlink" title="dual伪表"></a>dual伪表</h3><p>常用于通过select语句计算常数表达式，查看某个变量数值也可以</p><p><code>select sysdate from dual</code></p><h3 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h3><p>表示没有值，在参与逻辑运算（与或非）时，优先级T&gt;N&gt;F</p><p>包含空值的算术运算表达式值为空</p><h3 id="替代变量"><a href="#替代变量" class="headerlink" title="替代变量"></a>替代变量</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">define</span> <span class="hljs-built_in">var</span>=<span class="hljs-number">1234</span>;<br>undifine <span class="hljs-built_in">var</span>;<br><br>语句中使用时写&amp;<span class="hljs-built_in">var</span><br></code></pre></td></tr></table></figure><h2 id="运算类型"><a href="#运算类型" class="headerlink" title="运算类型"></a>运算类型</h2><h3 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">= &gt; &lt; &gt;= &lt;= !=</span><br>&lt;&gt;（这是？不等于？）<br><br>like<br>between...and...<br>in<br>is (null/not null)<br><br></code></pre></td></tr></table></figure><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="文本函数"><a href="#文本函数" class="headerlink" title="文本函数"></a>文本函数</h3><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sas">Lpad (<span class="hljs-meta">x</span>,y[,z])对<span class="hljs-meta">x</span>左边填充字符Z达到长度y<br>rpad (<span class="hljs-meta">x</span>,y[,z])对<span class="hljs-meta">x</span>右边填充字符Z达到长度y。如果z缺省则表示用空格填充<br>Lower(<span class="hljs-meta">x</span>),upper(<span class="hljs-meta">x</span>),initcap(<span class="hljs-meta">x</span>)小写、大写、首字母大写<span class="hljs-meta"></span><br><span class="hljs-meta">Length(</span><span class="hljs-meta">x</span>)返回<span class="hljs-meta">x</span>的字符数<span class="hljs-meta"></span><br><span class="hljs-meta">Substr(</span><span class="hljs-meta">x</span>,y[,z])返回<span class="hljs-meta">x</span>中从位置y开始的z个字符。Z缺省表示到末尾。<br><span class="hljs-meta">例substr(</span>‘ABCDEFG’,3,4)<br>Instr（<span class="hljs-meta">x</span>，y）字符串<span class="hljs-meta">x</span>中能否找到子串y.<br>instr(‘corporate floor’,’<span class="hljs-meta">or</span>’),找到返回其位置。<span class="hljs-meta"></span><br><span class="hljs-meta">Trim(</span>[[keyword]‘<span class="hljs-meta">x</span>’ <span class="hljs-meta">from</span>] column)去掉开头或结尾的<span class="hljs-meta">x</span>字符。keyword取值为leading、railing、both<br><span class="hljs-meta">trim(</span>both ’_’ <span class="hljs-meta">from</span> ‘_col_1’) -&gt;col_1<br>concat(a,b) a和b拼接起来输出<br><br></code></pre></td></tr></table></figure><h3 id="数字函数"><a href="#数字函数" class="headerlink" title="数字函数"></a>数字函数</h3><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sas">Round(<span class="hljs-meta">x</span>,y)  <span class="hljs-meta">x</span>四舍五入到精度y，y为负数，<span class="hljs-meta">x</span>四舍五入为小数点左边精度y。<br><span class="hljs-meta">Round(</span>134.345,1)=134.3<br><span class="hljs-meta">round(</span>134.345,0)=134<br><span class="hljs-meta">round(</span>134.345,-1)=130<span class="hljs-meta"></span><br><span class="hljs-meta">Ceil(</span><span class="hljs-meta">x</span>) 向上取整<br><span class="hljs-meta">ceil(</span>1.4)=2<br>   <span class="hljs-meta"> ceil(</span>-1.5)=-1<span class="hljs-meta"></span><br><span class="hljs-meta">Floor(</span><span class="hljs-meta">x</span>) 向下取整<br><span class="hljs-meta">Floor(</span>1.4)<br><span class="hljs-meta">floor(</span>-1.5)<span class="hljs-meta"></span><br><span class="hljs-meta">Mod(</span><span class="hljs-meta">x</span>,y)     <span class="hljs-meta">x</span>除以y的余数<span class="hljs-meta"></span><br><span class="hljs-meta">Sign(</span><span class="hljs-meta">x</span>)  符号函数（－1，1，0）<br>power(<span class="hljs-meta">x</span>,y) <span class="hljs-meta">x</span>的y次幂<span class="hljs-meta"></span><br><span class="hljs-meta">Sqrt(</span><span class="hljs-meta">x</span>)      <span class="hljs-meta">x</span>的平方根<span class="hljs-meta"></span><br><span class="hljs-meta">Trunc(</span><span class="hljs-meta">x</span>,y)  将<span class="hljs-meta">x</span>截断为精度y,也用于date类型<br>Vsize(<span class="hljs-meta">x</span>)   <span class="hljs-meta">x</span>的存储字节数<span class="hljs-meta"></span><br><span class="hljs-meta">Abs(</span><span class="hljs-meta">x</span>)    <span class="hljs-meta">x</span>的绝对值<br><br><br><br></code></pre></td></tr></table></figure><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">Last_day(<span class="hljs-params">x</span>)</span>返回日期x所在月份的最后一天的日期<br><span class="hljs-constructor">Months_between(<span class="hljs-params">x</span>,<span class="hljs-params">y</span>)</span>返回日期x与y之间的月数。<br><span class="hljs-constructor">Add_months(<span class="hljs-params">x</span>,<span class="hljs-params">y</span>)</span>返回日期x加上y个月后的日期<br><span class="hljs-constructor">Next_day(<span class="hljs-params">d</span>,<span class="hljs-params">char</span>)</span>返回比d晚的最近的星期几所对应的日期，星期几由<span class="hljs-built_in">char</span>指定。<br>Select next<span class="hljs-constructor">_day(<span class="hljs-params">sysdate</span>, &#x27;星期一&#x27;)</span> from dual;<br><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css">日期格式掩码<br>DAY 星期几      WW第几个周<br><span class="hljs-selector-tag">DD</span> 月中的第几天  DDD年中的第几天<br>MM 两位数字月 <br>Mon 月份的简写 <br>Month 月份的全名      <span class="hljs-selector-tag">Q</span>,季度<br>YYYY 四位年份 <br>YY年份的最后两位<br>HH 小时，按<span class="hljs-number">12</span>小时计 <br>HH24 小时，按<span class="hljs-number">24</span>小时计 <br>MI 分<br>SS 秒 <br></code></pre></td></tr></table></figure><h3 id="日期计算"><a href="#日期计算" class="headerlink" title="日期计算"></a>日期计算</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">相差月份：months<span class="hljs-constructor">_between(&#x27;31-1月-2009&#x27;,&#x27;31-12月-2008&#x27;)</span><br>相差天数：<span class="hljs-keyword">to</span><span class="hljs-constructor">_date(&#x27;31-1月- 2009 &#x27;,&#x27;DD-MON-YYYY&#x27;)</span>-<span class="hljs-keyword">to</span><span class="hljs-constructor">_date(&#x27;31-12月- 2008 &#x27;,&#x27;DD-MON-YYYY&#x27;)</span><br>当前小时：<span class="hljs-keyword">to</span><span class="hljs-constructor">_char(<span class="hljs-params">sysdate</span>,&#x27;<span class="hljs-params">hh24</span>&#x27;)</span><br>今天是星期几：<span class="hljs-keyword">to</span><span class="hljs-constructor">_char(<span class="hljs-params">sysdate</span>,&#x27;<span class="hljs-params">day</span>&#x27;)</span><br>今年的天数：add<span class="hljs-constructor">_months(<span class="hljs-params">trunc</span>(<span class="hljs-params">sysdate</span>,&#x27;<span class="hljs-params">year</span>&#x27;)</span>, <span class="hljs-number">12</span>) - trunc(sysdate,&#x27;year&#x27;) <br>今天是一年的第几天：<span class="hljs-keyword">to</span><span class="hljs-constructor">_char(<span class="hljs-params">sysdate</span>,&#x27;<span class="hljs-params">ddd</span>&#x27;)</span>;<br><br></code></pre></td></tr></table></figure><h3 id="转换函数"><a href="#转换函数" class="headerlink" title="转换函数"></a>转换函数</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">nvl</span><span class="hljs-params">(列名，指定值value)</span></span> 当列为null时，用value代替空值。value应当符合列的数据类型定义<br><span class="hljs-function"><span class="hljs-title">To_char</span><span class="hljs-params">(x,y)</span></span>  把 x（日期或数值）转化为文本，x为日期时y写掩码<br><span class="hljs-function"><span class="hljs-title">To_date</span><span class="hljs-params">(x[,y])</span></span> 非日期值x，用y指定的格式转换为日期<br><span class="hljs-function"><span class="hljs-title">To_number</span><span class="hljs-params">(x)</span></span> 把非数字值转化为数字<br><span class="hljs-function"><span class="hljs-title">Chartorowid</span><span class="hljs-params">(x)</span></span> 字符串转换成Rowid<br><span class="hljs-function"><span class="hljs-title">Rowidtochar</span><span class="hljs-params">(x)</span></span>  rowid转换成varchar2数据类型字符串<br><span class="hljs-function"><span class="hljs-title">Hextoraw</span><span class="hljs-params">(x)</span></span> 十六进制x换算成二进制<br><span class="hljs-function"><span class="hljs-title">Rawtohex</span><span class="hljs-params">(x)</span></span>二进制x换算成十六进制<br><br></code></pre></td></tr></table></figure><h3 id="组函数"><a href="#组函数" class="headerlink" title="组函数"></a>组函数</h3><p>忽略空值null，不进行计算</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>通常联合使用<br>查询子句中的非组表达式都要【放在组表达式之前】，并加入<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>后<br><br><span class="hljs-keyword">having</span> 筛选组数据<br><span class="hljs-keyword">where</span>用于分组前对记录筛选，<span class="hljs-keyword">having</span>分组后筛选<br><br><span class="hljs-built_in">count</span>() 统计非空值的个数<br><span class="hljs-built_in">avg</span>() 计算所有值的平均值，只能对数值类字段使用<br><span class="hljs-built_in">sum</span>() 所有值的和<br><span class="hljs-built_in">max</span>()<br><span class="hljs-built_in">min</span>()<br><br></code></pre></td></tr></table></figure><h2 id="关键字-选项-其他"><a href="#关键字-选项-其他" class="headerlink" title="关键字/选项/其他"></a>关键字/选项/其他</h2><h3 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">distinct</span> 对重复列显示唯一值 <span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> job <span class="hljs-keyword">from</span> emp;<br><br>输出时改名<br>mgr managercode<br>mgr <span class="hljs-string">&#x27;manager code&#x27;</span><br>mgr <span class="hljs-keyword">as</span> managercode<br><br></code></pre></td></tr></table></figure><h3 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接||"></a>字符串连接||</h3><p>换成’+‘，一下子就看懂了呢！</p><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs smalltalk">字符串连接||<br><span class="hljs-string">&#x27;你好，&#x27;</span>||ename||<span class="hljs-string">&#x27;，欢迎新朋友！&#x27;</span><br><br>concat函数也可以，见文本函数<br></code></pre></td></tr></table></figure><h3 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br><span class="hljs-keyword">asc</span>/<span class="hljs-keyword">desc</span> 出现<span class="hljs-keyword">NULL</span>时，正序把<span class="hljs-keyword">null</span>行放在末尾，倒序则放在开头<br></code></pre></td></tr></table></figure><h3 id="decode"><a href="#decode" class="headerlink" title="decode"></a>decode</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">decode</span>(列名,<br>特定值1,替换值1,<br>特定值2,替换值2,...,<br>默认值)<br>相当于<span class="hljs-keyword">if</span>-then-<span class="hljs-keyword">else</span><br></code></pre></td></tr></table></figure><h3 id="like"><a href="#like" class="headerlink" title="like"></a>like</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">like</span>模糊查询<br>_ 匹配一个字符<br><span class="hljs-operator">%</span> 匹配<span class="hljs-number">0</span><span class="hljs-operator">-</span>n个字符<br><span class="hljs-keyword">escape</span>子句：明确指定一个转义字符。如果搜索值中包行了转移字符本身，则使用两个连续的转义字符表示。例如@是转义字符，则可以使用@@搜索@。<br><br><span class="hljs-keyword">like</span>例题：<br><span class="hljs-number">1.</span>创建t_char表<br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_char (a varchar2(<span class="hljs-number">30</span>));<br><span class="hljs-number">2.</span>向t_char表中插入数据<br><span class="hljs-string">&#x27;abc&#x27;&#x27;a%b&#x27;&#x27;abc%&#x27;&#x27;bc%&#x27;</span><br><span class="hljs-string">&#x27;ab%%c&#x27;&#x27;%abc&#x27;&#x27;ab/c&#x27;&#x27;bcd&#x27;</span><br><span class="hljs-string">&#x27;ab&#x27;&#x27;b_c&#x27;&#x27;ad&#x27;</span><br><span class="hljs-number">3.</span>查询包含d字符<br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_char <span class="hljs-keyword">where</span> a <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%d%&#x27;</span>;<br>bcd<br>ad<br><span class="hljs-number">4.</span>查询包含通配符<span class="hljs-operator">%</span><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_char <span class="hljs-keyword">where</span> a <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%/%%&#x27;</span> <span class="hljs-keyword">escape</span> <span class="hljs-string">&#x27;/&#x27;</span>;<br>a<span class="hljs-operator">%</span>b<br>abc<span class="hljs-operator">%</span><br>bc<span class="hljs-operator">%</span><br>ab<span class="hljs-operator">%</span><span class="hljs-operator">%</span>c<br><span class="hljs-operator">%</span>abc<br><span class="hljs-number">5.</span>查询包含两个通配符<span class="hljs-operator">%</span><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_char <span class="hljs-keyword">where</span> a <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%/%/%%&#x27;</span> <span class="hljs-keyword">escape</span> <span class="hljs-string">&#x27;/&#x27;</span>;<br>ab<span class="hljs-operator">%</span><span class="hljs-operator">%</span>c<br><span class="hljs-number">6.</span>查询以通配符<span class="hljs-operator">%</span>开始<br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_char <span class="hljs-keyword">where</span> a <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;/%%&#x27;</span> <span class="hljs-keyword">escape</span> <span class="hljs-string">&#x27;/&#x27;</span>;<br><span class="hljs-operator">%</span>abc<br><span class="hljs-number">7.</span>查询以通配符<span class="hljs-operator">%</span>结尾<br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_char <span class="hljs-keyword">where</span> a <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%/%&#x27;</span> <span class="hljs-keyword">escape</span> <span class="hljs-string">&#x27;/&#x27;</span>;<br>abc<span class="hljs-operator">%</span><br>bc<span class="hljs-operator">%</span><br><span class="hljs-number">8.</span>查询包含转义字符<br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_char <span class="hljs-keyword">where</span> a <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%//%&#x27;</span> <span class="hljs-keyword">escape</span> <span class="hljs-string">&#x27;/&#x27;</span>;<br>ab<span class="hljs-operator">/</span>c<br></code></pre></td></tr></table></figure><h1 id="DQL-select"><a href="#DQL-select" class="headerlink" title="DQL-select"></a>DQL-select</h1><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">e</span>.ename,<span class="hljs-built_in">e</span>.deptno,d.dname<br><span class="hljs-keyword">from</span> emp <span class="hljs-built_in">e</span>,dept d<br><span class="hljs-keyword">where</span> <span class="hljs-built_in">e</span>.deptno=d.deptno;<br><br><span class="hljs-keyword">select</span> ename,emp.deptno,dname<br><span class="hljs-keyword">from</span> emp <span class="hljs-keyword">join</span> dept <span class="hljs-keyword">on</span> emp.deptno=dept.deptno;<br>如果没有on+后面条件会生成笛卡尔积，全连接，没有现实意义<br><br>自然连接<br>natural join 根据两表中同名列自动建立连接<br><span class="hljs-keyword">select</span> ename,emp.deptno,dname<br><span class="hljs-keyword">from</span> emp natural <span class="hljs-keyword">join</span> dept;<br><br>外连接<br>外表：列名(+)<br>内表：内表全返回，无论是否能够匹配<br>左/右外连接：左外连接左边表是内表全返回<br>全外连接：两个表全返回<br>自连接：用自身的一列连接另一列。这时用表的两个副本连接表中数据<br><br></code></pre></td></tr></table></figure><h3 id="组查询"><a href="#组查询" class="headerlink" title="组查询"></a>组查询</h3><p>常用函数中有组函数</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>通常联合使用<br>查询子句中的非组表达式都要【放在组表达式之前】，并加入<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>后<br><span class="hljs-keyword">select</span> deptno,job,avg(sal) <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> deptno,job;<br><br><span class="hljs-keyword">having</span> 筛选组数据<br><span class="hljs-keyword">where</span>用于分组前对记录筛选，<span class="hljs-keyword">having</span>分组后筛选<br></code></pre></td></tr></table></figure><h3 id="子查询-嵌套查询"><a href="#子查询-嵌套查询" class="headerlink" title="子查询/嵌套查询"></a>子查询/嵌套查询</h3><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-meta">where</span>子查询<br><span class="hljs-meta">select</span> ename,emp.deptno,sal <span class="hljs-meta">from</span> emp,dept<br><span class="hljs-meta">where</span> emp.deptno=dept.deptno <span class="hljs-meta">and</span> dept.loc=<span class="hljs-string">&#x27;NEW YORK&#x27;</span>;<br><br>等价单行嵌套查询<br><span class="hljs-meta">select</span> ename,deptno,sal form emp<br><span class="hljs-meta">where</span> deptno=(<span class="hljs-meta">select</span> deptno <span class="hljs-meta">from</span> dept <span class="hljs-meta">where</span> dept.loc=<span class="hljs-string">&#x27;NEW YORK&#x27;</span>);<br>子查询先处理，然后传递给父查询<br>运算符=，还有大于小于，<span class="hljs-meta">in</span>（<span class="hljs-meta">in</span>可以返回多行）<br><br>多行嵌套查询<br>在A,S部门工作的员工<br><span class="hljs-meta">select</span> ename.deptno,sal <span class="hljs-meta">from</span> emp <br><span class="hljs-meta">where</span> deptno <span class="hljs-meta">in(</span><span class="hljs-meta">select</span> deptno form dept <span class="hljs-meta">where</span> dname <span class="hljs-meta">in(</span><span class="hljs-string">&#x27;ACCOUNTING&#x27;</span>,<span class="hljs-string">&#x27;SALES&#x27;</span>));<br><br>多列嵌套查询<br>每个部门最多工资的人<br><span class="hljs-meta">select</span> ename,deptno,sal <span class="hljs-meta">from</span> emp<br><span class="hljs-meta">where</span> (deptno,sal) <span class="hljs-meta">in</span> (<span class="hljs-meta">select</span> deptno<span class="hljs-meta">,max(</span>sal) <span class="hljs-meta">from</span> emo <span class="hljs-meta">group</span> <span class="hljs-meta">by</span> deptno);<br><br><span class="hljs-meta">having</span>子查询<br>差不多的用法<br><span class="hljs-meta">having</span> avg(sal)&gt;(<span class="hljs-meta">select</span> sal <span class="hljs-meta">from</span> emp <span class="hljs-meta">where</span> ename=<span class="hljs-string">&#x27;smart&#x27;</span>);<br><br><span class="hljs-meta">from</span>子查询、内联视图<br><span class="hljs-meta">from</span> emp,(<span class="hljs-meta">select</span> deptno,loc <span class="hljs-meta">from</span> dept <span class="hljs-meta">where</span>...) <span class="hljs-meta">x</span><br>主查询的<span class="hljs-meta">from</span>子句中的子查询称为内联视图。后面标签<span class="hljs-meta">x</span>是必须的别名<br></code></pre></td></tr></table></figure><h3 id="exist相关子查询"><a href="#exist相关子查询" class="headerlink" title="exist相关子查询"></a>exist相关子查询</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs axapta">exist引用父查询中的表，称为相关子查询。对父语句处理每一行执行一次。<br><br>经典例，选了某个老师所有课，大概这样？记不太清<br><span class="hljs-keyword">select</span> * form student x <span class="hljs-keyword">where</span> not <span class="hljs-keyword">exists</span><br>(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> course y <span class="hljs-keyword">where</span> cteacher=<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-string">&#x27;&#x27;</span> and not <span class="hljs-keyword">exists</span><br>(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> sc z <span class="hljs-keyword">where</span> z.sno=x.sno and z.cno=y.cno))<br><br><br></code></pre></td></tr></table></figure><h3 id="rownum"><a href="#rownum" class="headerlink" title="rownum"></a>rownum</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">rownum是系统分配的，从查询返回的行的编号。可以用于限制返回总行数。<br>【是取数据的时候产生的序号】个人理解，<span class="hljs-keyword">where</span>之后的顺序<br><span class="hljs-keyword">where</span>用小于n；大于、等于只能用<span class="hljs-number">1</span>；<span class="hljs-keyword">between</span>必须从<span class="hljs-number">1</span>开始<br><span class="hljs-keyword">select</span> rownum,ename <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> rownum&lt;<span class="hljs-number">5</span>; √<br><span class="hljs-keyword">select</span> rownum,ename form emp <span class="hljs-keyword">where</span> rownum=<span class="hljs-number">2</span>; × rownum总是从<span class="hljs-number">1</span>开始；查出第一行，≠<span class="hljs-number">2</span>，不返回；下一条记录取数据还是第一行<br><br></code></pre></td></tr></table></figure><h3 id="查询数据库文件"><a href="#查询数据库文件" class="headerlink" title="查询数据库文件"></a>查询数据库文件</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">select</span> * from v$datafile<span class="hljs-comment">;</span><br><span class="hljs-keyword">select</span> * from v$controlfile<span class="hljs-comment">;</span><br><span class="hljs-keyword">select</span> * from v$logfile<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h1 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h1><h2 id="create"><a href="#create" class="headerlink" title="create"></a>create</h2><h3 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">从一个表生成另一个表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp1 <br><span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp<br><span class="hljs-keyword">where</span> deptno=<span class="hljs-number">10</span>;<br>与emp表有相同列名、相同数据类型，但是没有主键/外键约束<br>可以通过任何<span class="hljs-keyword">select</span>语句创建<br></code></pre></td></tr></table></figure><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><p>主键primary key、外键foreign key、唯一unique、检查check、非空not null</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t1<br>(<br>写在列后的叫列约束<br>col1 <span class="hljs-type">int</span> <span class="hljs-keyword">default</span>(<span class="hljs-number">0</span>), (<span class="hljs-keyword">primary</span> key也可以这样写)<br>col2 number(<span class="hljs-number">4</span>,<span class="hljs-number">0</span>),(<span class="hljs-number">4</span>个有效数字，<span class="hljs-number">0</span>位小数)<br><br><br>写在这里的叫表约束<br><span class="hljs-keyword">constraint</span> pk <span class="hljs-keyword">primary</span> key(col1), <span class="hljs-comment">--和sqlserver语法不太一样！</span><br><span class="hljs-keyword">constraint</span> fk <span class="hljs-keyword">references</span> dept(deptno)<br>);<br></code></pre></td></tr></table></figure><h2 id="alter"><a href="#alter" class="headerlink" title="alter"></a>alter</h2><p>修改表</p><p>修改字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp<br>modify(ename <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>);<br></code></pre></td></tr></table></figure><p>修改/添加约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp<br><span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> pk <span class="hljs-keyword">primary</span> key(empno);<br></code></pre></td></tr></table></figure><p>禁用/启用约束</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp<br><span class="hljs-keyword">disable</span>/<span class="hljs-keyword">enable</span> <span class="hljs-keyword">constraint</span> pk;<br></code></pre></td></tr></table></figure><p>删除约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">constraint</span> pk;当然实际上只能一行一行来，省点事<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">primary</span> key;和上面效果一样<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">unique</span>(empno);<br></code></pre></td></tr></table></figure><h2 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h2><p>删除表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> dept;报错，有外键引用<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> dept <span class="hljs-keyword">cascade</span> constraints;【同时删除相关约束】<br></code></pre></td></tr></table></figure><p>释放存储过程&amp;函数</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs delphi">drop <span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">proc_name</span>;</span><br>drop <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func_name</span>;</span><br></code></pre></td></tr></table></figure><p>删除包</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">drop <span class="hljs-keyword">package</span> <span class="hljs-title">myPackage;删除包说明和包主体</span><br>drop <span class="hljs-keyword">package</span> <span class="hljs-keyword">body</span> <span class="hljs-title">myPackage;只删除包主体</span><br></code></pre></td></tr></table></figure><h2 id="truncate"><a href="#truncate" class="headerlink" title="truncate"></a>truncate</h2><p>清空表中所有记录，但保留表结构和相关对象（触发器等）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> emp;<br></code></pre></td></tr></table></figure><p>与delete区别：</p><p>truncate是ddl（define定义），将高水平线复位，释放表空间</p><p>delete是dml（manage操纵），删除数据行，并不释放空间</p><h1 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h1><h2 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h2><p>一次只能insert一行，位置要对应</p><p>多行只能通过其他表中的数据添加</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> emp1 (<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp); <br></code></pre></td></tr></table></figure><h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">update</span></span> emp <span class="hljs-keyword">set</span> ... where <span class="hljs-comment">...</span><br></code></pre></td></tr></table></figure><h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span>...<br></code></pre></td></tr></table></figure><p>删除记录不能释放oracle被占用的数据块表空间，只把被删除的数据块标成unused</p><h1 id="PL-SQL"><a href="#PL-SQL" class="headerlink" title="PL/SQL"></a>PL/SQL</h1><p>运行机制</p><img src="/2022/11/27/oraclesql/image-20230206162924666.png" class="" title="image-20230206162924666"><p>程序结构</p><ul><li><p>声明部分（declare开头）</p><p>变量声明、赋初值</p></li><li><p>执行部分（begin）</p><p>执行代码</p></li><li><p>异常处理部分（exception）</p></li></ul><p>执行部分是必须的，其他两个部分可选。每个块部分的语句都必须以分号结束。</p><p>每个块由begin/declare开始，以end结束。</p><p>匿名块，输入/运行；</p><p>命名块，用/创建，execute执行，或者在其他块中调用</p><p>可以使用任何有效的DQL DML语句，还可以使用commit、rollback等TCL</p><h2 id="程序示例"><a href="#程序示例" class="headerlink" title="程序示例"></a>程序示例</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">declare</span><br>var number:=<span class="hljs-number">10</span>; 赋值使用:=<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">update</span> emp<br><span class="hljs-keyword">set</span> comm=sal*i_percent <br><span class="hljs-keyword">where</span> deptno=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">end</span>;<br>/   输这个，然后换行，执行<br></code></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">命名:<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> replace <span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">update_emp</span></span><br><span class="hljs-function"><span class="hljs-params">(v_dept <span class="hljs-keyword">in</span> number,v_percent <span class="hljs-keyword">in</span> number <span class="hljs-keyword">default</span> 10)</span> <span class="hljs-title">is</span></span><br><span class="hljs-function"><span class="hljs-title">begin</span></span><br><span class="hljs-function"><span class="hljs-title">update</span> <span class="hljs-title">emp</span></span><br><span class="hljs-function"><span class="hljs-title">set</span> <span class="hljs-title">comm</span>=<span class="hljs-title">sal</span>*<span class="hljs-title">v_percent</span></span><br><span class="hljs-function"><span class="hljs-title">where</span> <span class="hljs-title">deptno</span>=<span class="hljs-title">v_dept</span>;</span><br><span class="hljs-keyword">end</span>;<br>/<br>execute update_emp(<span class="hljs-number">10</span>,<span class="hljs-number">15</span>);<br><br>调用：<br>declare <br>   v_dept number;<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">select</span> a.deptno <span class="hljs-keyword">into</span> v_dept <span class="hljs-keyword">from</span> emp a<br><span class="hljs-keyword">where</span> job=<span class="hljs-string">&#x27;PRESIDENT&#x27;</span>;<br>update_emp(v_dept);<br><span class="hljs-keyword">end</span>;<br></code></pre></td></tr></table></figure><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs lasso">--单行注释<br><span class="hljs-comment">/**/</span>块注释<br>:=赋值<br><span class="hljs-keyword">select</span> col <span class="hljs-keyword">into</span> <span class="hljs-built_in">var</span> from<span class="hljs-params">...</span><span class="hljs-keyword">where</span><span class="hljs-params">...</span>; 赋值<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">into</span> emorecord form<span class="hljs-params">...</span><span class="hljs-keyword">where</span><span class="hljs-params">...</span>;记录类型赋值<br>*一个<span class="hljs-keyword">select</span> <span class="hljs-keyword">into</span>语句有且仅有一行结果集，如果没有返回/多于一行都会引起异常。<br><br>变量声明<br>Variable_name <span class="hljs-meta">[</span>CONSTANT<span class="hljs-meta">]</span> databyte <span class="hljs-meta">[</span><span class="hljs-literal">NOT</span> <span class="hljs-built_in">NULL</span><span class="hljs-meta">]</span><span class="hljs-meta">[</span>:=|DEFAULT expression<span class="hljs-meta">]</span><br>constant：常量<br>not null后面必须加:=赋初值<br><br>%type%rowtype<br>保持所使用的变量类型与表中数据类型一致，随表的变化而变化，具有更强的通用性<br>ename scott.emp.ename%type;<br>emprecord emp%rowtype;<br>rowtype:相当于定义一个&#x27;记录类型&#x27;，类似结构体，内含表的所有字段定义的类型<br>emprecord.ename使用的时候这样写，得到ename列的变量类型。相当于ename scott.emp.ename%type<br></code></pre></td></tr></table></figure><p>‘s要转义，写’’s？</p><h2 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h2><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><h3 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h3><h4 id="条件结构-if-elsif-else-end-if"><a href="#条件结构-if-elsif-else-end-if" class="headerlink" title="条件结构-if-elsif-else-end if"></a>条件结构-if-elsif-else-end if</h4><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sas">第一种：<br><span class="hljs-meta">if</span> condition <span class="hljs-meta">then</span> <br>   Statement;<br><span class="hljs-meta">end</span> <span class="hljs-meta">if</span>；<br><br>第二种：<br><span class="hljs-meta">If</span> condition <span class="hljs-meta">then</span><br>   Statements_1 ;<br><span class="hljs-meta">Else</span><br>   Statements_2  ;<br><span class="hljs-meta">end</span> <span class="hljs-meta">if</span>；<br><br>第三种：<br><span class="hljs-meta">if</span> gongling&gt;10 <span class="hljs-meta">then</span> <br>    gongzi:=gongzi<span class="hljs-comment">*1.3;</span><br>elsif gongling&gt;5 <span class="hljs-meta">then</span> <br>   gongzi:=gongzi<span class="hljs-comment">*1.2;</span><br>……<br><span class="hljs-meta">else</span> <br>   gongzi:=gongzi<span class="hljs-comment">*1.1;</span><br><span class="hljs-meta">end</span> <span class="hljs-meta">if</span>；<br><br></code></pre></td></tr></table></figure><h4 id="case表达式"><a href="#case表达式" class="headerlink" title="case表达式"></a>case表达式</h4><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs erlang">【<span class="hljs-number">1</span>】<br><span class="hljs-keyword">case</span> val<br><span class="hljs-keyword">when</span> condition1 then<br>statement1;<br><span class="hljs-keyword">when</span> condition2 then<br>statement2;<br>......<br>else statementn;可以省略，但如果前面没有条件满足，会报错case_not_found<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">case</span>;<br><br>【<span class="hljs-number">2</span>】<br>搜索式<span class="hljs-keyword">case</span><br><span class="hljs-keyword">case</span><br><span class="hljs-keyword">when</span> test1=<span class="hljs-number">1</span> then statement1;<br><span class="hljs-keyword">when</span> test2=<span class="hljs-number">2</span> then statement2;<br>......<br>else...<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">case</span>;<br></code></pre></td></tr></table></figure><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk">【<span class="hljs-number">1</span>】<br>x:=<span class="hljs-number">10</span>;<br>loop<br>x:=x+<span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span> x&gt;<span class="hljs-number">1000</span> then <span class="hljs-keyword">exit</span>;<br>(<span class="hljs-keyword">exit</span> when x&gt;<span class="hljs-number">1000</span>;) 另一种写法<br>end loop;没有终止，会死循环；要加条件，加<span class="hljs-keyword">exit</span>结束。<br><br>【<span class="hljs-number">2</span>】<br>x:=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">while</span> x&lt;=<span class="hljs-number">1000</span> loop<br>x:=x+<span class="hljs-number">10</span>;<br>end loop;<br><br>【<span class="hljs-number">3</span>】<br><span class="hljs-keyword">for</span> counter <span class="hljs-keyword">in</span> [reverse] start..end loop<br>statements;<br>end loop;<br><br>x:=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span>..<span class="hljs-number">10</span> loop<br>x:=x+<span class="hljs-number">10</span>;<br>end loop;<br><br></code></pre></td></tr></table></figure><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>对于嵌套语句：</p><ul><li>定义在最外部程序块中的变量可以在所有子块中使用.</li><li>如果在子块中定义了与外部程序块变量相同的变量名，在执行子块时将使用子块中定义的变量。子块中定义的变量不能被父块引用。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs sql">【<span class="hljs-number">1</span>】<br><span class="hljs-keyword">DECLARE</span><br>  v_Counter  NUMBER :<span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br><span class="hljs-keyword">BEGIN</span><br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> temp_table (num_col) <span class="hljs-keyword">VALUES</span> (v_Counter);插入temp_table的v_counter<span class="hljs-operator">=</span><span class="hljs-number">7</span><br>  <span class="hljs-keyword">FOR</span> v_Counter <span class="hljs-keyword">IN</span> <span class="hljs-number">20.</span><span class="hljs-number">.30</span> LOOP这个循环重定义了变量v_counter，类型binary_integer(默认)，隐藏了原来<span class="hljs-keyword">declare</span>的v_counter<br>    <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> temp_table (num_col) <span class="hljs-keyword">VALUES</span> (v_Counter);<br>  <span class="hljs-keyword">END</span> LOOP;<br>  <span class="hljs-comment">-- Inserts another 7 into temp_table.</span><br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> temp_table (num_col) <span class="hljs-keyword">VALUES</span> (v_Counter); 插入temp_table的v_counter<span class="hljs-operator">=</span><span class="hljs-number">7</span><br><span class="hljs-keyword">END</span>;<br><span class="hljs-operator">/</span><br><br>【<span class="hljs-number">2</span>】<br><span class="hljs-operator">&lt;&lt;</span>a<span class="hljs-operator">&gt;&gt;</span> <span class="hljs-operator">&lt;&lt;</span><span class="hljs-operator">&gt;&gt;</span>标签用于goto语句跳出循环，以及...?<br><span class="hljs-keyword">declare</span><br>v_var1 number;<br>v_var2 varchar2(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">begin</span><br> v_var1:<span class="hljs-operator">=</span><span class="hljs-number">200</span>;<br> v_var2:<span class="hljs-operator">=</span><span class="hljs-string">&#x27;abc&#x27;</span>; <br> dbms_output.put_line(<span class="hljs-string">&#x27;v_var1:&#x27;</span><span class="hljs-operator">||</span>v_var1);<span class="hljs-number">200</span><br> dbms_output.put_line(<span class="hljs-string">&#x27;v_var2:&#x27;</span><span class="hljs-operator">||</span>v_var2);abc<br> <span class="hljs-keyword">declare</span><br>   v_var2 varchar2(<span class="hljs-number">8</span>);<br> <span class="hljs-keyword">begin</span><br>   v_var2:<span class="hljs-operator">=</span><span class="hljs-string">&#x27;def&#x27;</span>;<br>  dbms_output.put_line(<span class="hljs-string">&#x27;v_var1:&#x27;</span><span class="hljs-operator">||</span>v_var1);<span class="hljs-number">200</span><br>  dbms_output.put_line(<span class="hljs-string">&#x27;v_var2:&#x27;</span><span class="hljs-operator">||</span>v_var2);def<br>  dbms_output.put_line(<span class="hljs-string">&#x27;v_var2:&#x27;</span><span class="hljs-operator">||</span>a.v_var2);abc(这是什么原理？)<br> <span class="hljs-keyword">end</span>;<br><span class="hljs-keyword">end</span>;<br></code></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>不属于oracle基本事务类型。即：</p><ul><li>启动一个语句块时，并不意味着事务的开始。</li><li>事务的开始并不需要与语句块的开始相一致。</li><li>一个plsql块中可以有多个事务。</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Insert</span> <span class="hljs-keyword">into</span> tb1(col1) <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">Begin</span><br><span class="hljs-keyword">Update</span> emp <span class="hljs-keyword">set</span> comm=<span class="hljs-number">2000</span><br><span class="hljs-keyword">Where</span> empno=<span class="hljs-number">7839</span>;<br><span class="hljs-keyword">Rollback</span>;<br><span class="hljs-keyword">End</span>;<br>匿名语句块中先<span class="hljs-keyword">update</span>，然后<span class="hljs-keyword">rollback</span>。这个<span class="hljs-keyword">rollback</span>不仅撤销了<span class="hljs-keyword">update</span>语句，也撤销了前面的<span class="hljs-keyword">insert</span>语句。<br><span class="hljs-keyword">Insert</span>和该语句块属于同一个事务。<br></code></pre></td></tr></table></figure><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>参数：</p><p>一个PL/SQL程序块，零个或多个参数输入或输出，参数可以有缺省值。存储过程没有返回值</p><p>In 标识输入给过程的参数，默认的参数模式</p><p>out标识输出给过程的参数</p><p>In out 既向过程传值，也向过程体外传值。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">【<span class="hljs-number">1</span>】<br><span class="hljs-keyword">set</span> serveroutput <span class="hljs-keyword">on</span> （使用自带输出方法dbms_output.put_line）<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">procedure</span> Get_EMP_Ename(ename1 <span class="hljs-keyword">out</span> emp.ename<span class="hljs-meta">%type</span>,job1 <span class="hljs-keyword">in</span> emp.job<span class="hljs-meta">%type</span>) <span class="hljs-keyword">as</span><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">select</span> ename <span class="hljs-keyword">into</span> ename1 <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> emp.job=job1;<br><span class="hljs-keyword">end</span>;<br>/<br><span class="hljs-keyword">declare</span><br>ename emp.ename<span class="hljs-meta">%type</span>;<br><span class="hljs-keyword">begin</span><br>Get_emp_ename(ename,<span class="hljs-string">&#x27;PRESIDENT&#x27;</span>);<br>dbms_output.PUT_LINE(ename);<br><span class="hljs-keyword">end</span>;<br>/<br><br>【<span class="hljs-number">2</span>】<br><span class="hljs-keyword">set</span> serveroutput <span class="hljs-keyword">on</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">procedure</span> Get_EMP_Ename(ename1 <span class="hljs-keyword">out</span> emp.ename<span class="hljs-meta">%type</span>,job1 <span class="hljs-keyword">in</span> emp.job<span class="hljs-meta">%type</span>) <span class="hljs-keyword">as</span><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">select</span> ename <span class="hljs-keyword">into</span> ename1 <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> emp.job=job1;<br><span class="hljs-keyword">end</span>;<br>/<br><br>var ename varchar2(<span class="hljs-number">10</span>)    <span class="hljs-comment">--ename为绑定变量</span><br>exec Get_emp_ename(:ename,<span class="hljs-string">&#x27;PRESIDENT&#x27;</span>);<br>print ename<br>语句var&amp;print：使用<span class="hljs-keyword">sql</span> plus命令声明变量，不使用<span class="hljs-keyword">declare</span>；在使用时前面加冒号<br>结尾分号的问题：确实可以不加，加了也不会错<br>但是我不知道这个语法怎么赋值<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>与过程相似，区别是，函数有返回值，过程没有。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">set</span> serveroutput <span class="hljs-keyword">on</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">function</span> Get_EMP_Ename_func(job1 <span class="hljs-keyword">in</span> emp.job<span class="hljs-meta">%type</span>) <span class="hljs-keyword">return</span> emp.ename<span class="hljs-meta">%type</span> <span class="hljs-keyword">as</span><br>ename1 emp.ename<span class="hljs-meta">%type</span>;<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">select</span> ename <span class="hljs-keyword">into</span> ename1 <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> emp.job=job1;<br><span class="hljs-keyword">return</span> ename1;<br><span class="hljs-keyword">end</span>;<br>/<br><span class="hljs-keyword">declare</span><br>ename emp.ename<span class="hljs-meta">%type</span>;<br><span class="hljs-keyword">begin</span><br>ename:=Get_emp_ename_func(<span class="hljs-string">&#x27;PRESIDENT&#x27;</span>);<br>dbms_output.PUT_LINE(ename);<br><span class="hljs-keyword">end</span>;<br><br>其他调用方法<br>var ename varchar2(<span class="hljs-number">10</span>)<br>exec :ename:=Get_emp_ename_func(<span class="hljs-string">&#x27;PRESIDENT&#x27;</span>);<br>print ename<br><span class="hljs-keyword">call</span> get_emp_ename_func(<span class="hljs-string">&#x27;PRESIDENT&#x27;</span>) <span class="hljs-keyword">into</span> :ename;<br>print ename<br><br>注意：<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">function</span> Get_EMP_Ename_func(job1 <span class="hljs-keyword">in</span> emp.job<span class="hljs-meta">%type</span>) <span class="hljs-keyword">return</span> emp.ename<span class="hljs-meta">%type</span> <span class="hljs-keyword">as</span><br>形参的精度或长度都来源于实参，与实参完全一致。所以对形式参数长度或精度约束是不合法的，但可以用<span class="hljs-meta">%type</span>来约束。<br>如，形参job1 varchar2(<span class="hljs-number">30</span>)错，应该是：job1 varchar2<br></code></pre></td></tr></table></figure><h2 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h2><p>Oracle处理sql语句的时候，会在内存中分一个区，游标相当于指向这个区的句柄或指针。</p><p>任何sql语句，服务器都会打开一个游标处理该语句。不过有时候是显式的，有时候是隐式的。</p><p> insert update delete 和只有一行的select into语句：隐式游标</p><p>对于多行结果的处理，要定义显式游标.</p><p>当游标被打开，发生下列情况：</p><ul><li>检验绑定变量的值。</li><li>基于查询确定活动集。</li><li>指针指向活动集第一行。</li></ul><p>每个Fetch之后，指针指向下一行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">cursor</span> cur_name <span class="hljs-keyword">is</span> select...from...where...;<br><span class="hljs-keyword">open</span> cur_name;<br>取数据：<span class="hljs-keyword">fetch</span>将游标内数据取出到变量，或游标<span class="hljs-keyword">for</span>循环<br><span class="hljs-keyword">close</span> cur_name;<br><br><span class="hljs-keyword">set</span> serveroutput <span class="hljs-keyword">on</span><br><span class="hljs-keyword">declare</span><br>v_name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>);<br><span class="hljs-keyword">cursor</span> c_emp <span class="hljs-keyword">is</span> <span class="hljs-keyword">select</span> ename <span class="hljs-keyword">from</span> emp;<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">open</span> c_emp;<br>loop<br><span class="hljs-keyword">fetch</span> c_emp <span class="hljs-keyword">into</span> v_name;<span class="hljs-comment">--c_emp游标的数据到变量v_name</span><br>exit <span class="hljs-keyword">when</span> c_emp<span class="hljs-operator">%</span>notfound;<span class="hljs-comment">--检查的是之前的fetch有没有取到值</span><br>dbms_output.PUT_LINE(TO_CHAR(c_emp<span class="hljs-operator">%</span>ROWCOUNT)<span class="hljs-operator">||</span> <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-operator">||</span>v_name);<br><span class="hljs-keyword">end</span> loop;<br><span class="hljs-keyword">close</span> c_emp;<br><span class="hljs-keyword">end</span>;<br><span class="hljs-operator">/</span><br>可改写while循环：<br><span class="hljs-keyword">Fetch</span> c_emp <span class="hljs-keyword">into</span> v_name;<br>While c_emp<span class="hljs-operator">%</span>found loop<br>Dbms_output.put_line();<br><span class="hljs-keyword">Fetch</span> c_emp <span class="hljs-keyword">into</span> v_name;<br><span class="hljs-keyword">End</span> loop;<br><br></code></pre></td></tr></table></figure><h3 id="游标属性"><a href="#游标属性" class="headerlink" title="游标属性"></a>游标属性</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xquery">可以用游标属性判断游标的当前状况：<br><span class="hljs-meta">%FOUND</span>取到值<span class="hljs-built_in">,true</span><br><span class="hljs-meta">%NOTFOUND</span>没取到值<span class="hljs-built_in">,true</span><br><span class="hljs-meta">%ISOPEN</span>已经打开游标<span class="hljs-built_in">,true</span><br><span class="hljs-meta">%ROWCOUNT</span><span class="hljs-built_in">number</span>,行号<br>用游标属性<span class="hljs-meta">%FOUND</span>、<span class="hljs-meta">%NOTFOUND</span>之前游标必须打开并且已经fetch.<br></code></pre></td></tr></table></figure><h3 id="游标for循环"><a href="#游标for循环" class="headerlink" title="游标for循环"></a>游标for循环</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">简化了游标操作，自动声明r、打开游标、取数据。<br><span class="hljs-keyword">set</span> serveroutput <span class="hljs-keyword">on</span>;<br><span class="hljs-keyword">declare</span> <br><span class="hljs-keyword">cursor</span> c_emp <span class="hljs-keyword">is</span> <span class="hljs-keyword">select</span> ename <span class="hljs-keyword">from</span> emp;<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> c_emp <span class="hljs-keyword">loop</span>r隐式声明，类型为c_emp<span class="hljs-meta">%rowtype</span><br>  dbms_output.PUT_LINE(c_emp%rowcount || <span class="hljs-string">&#x27; &#x27;</span> || r.ename);<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">loop</span>;<br><span class="hljs-keyword">end</span>;<br>/<br><br>如果在使用游标<span class="hljs-keyword">FOR</span>循环时不需要使用任何游标属性，那么直接在游标<span class="hljs-keyword">FOR</span>循环中使用子查询。          <br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> ename <span class="hljs-keyword">from</span> emp) <span class="hljs-keyword">loop</span><br> dbms_output.PUT_LINE(r.ename);<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">loop</span>;<br><span class="hljs-keyword">end</span>;<br>/<br><br></code></pre></td></tr></table></figure><h3 id="参数游标"><a href="#参数游标" class="headerlink" title="参数游标"></a>参数游标</h3><p>带有参数的游标，在定义参数游标之后，当使用不同参数值多次打开游标时，可以产生不同的结果集。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">declare</span><br>v_name emp.ename<span class="hljs-meta">%type</span>;<br><span class="hljs-keyword">cursor</span> c_emp(v_deptno number) <span class="hljs-keyword">is</span><br><span class="hljs-keyword">select</span> ename <span class="hljs-keyword">from</span> emp <br><span class="hljs-keyword">where</span> deptno=v_deptno;<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">open</span> c_emp(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">loop</span>  <br><span class="hljs-keyword">fetch</span> c_emp <span class="hljs-keyword">into</span> v_name;  <br><span class="hljs-keyword">exit</span> <span class="hljs-keyword">when</span> c_emp%notfound;  <br>dbms_output.put_line(v_name);  <br><span class="hljs-keyword">end</span> <span class="hljs-keyword">loop</span>;  <br><span class="hljs-keyword">close</span> c_emp; <br><span class="hljs-keyword">end</span>;<br>/<br><br><span class="hljs-keyword">declare</span> <br><span class="hljs-keyword">cursor</span> c_emp(v_deptno number) <span class="hljs-keyword">is</span><br><span class="hljs-keyword">select</span> ename <span class="hljs-keyword">from</span> emp <br><span class="hljs-keyword">where</span> deptno=v_deptno;<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> c_emp(<span class="hljs-number">10</span>) <span class="hljs-keyword">loop</span><br>  dbms_output.PUT_LINE(c_emp%rowcount || <span class="hljs-string">&#x27; &#x27;</span> || r.ename);<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">loop</span>;<br><span class="hljs-keyword">end</span>;<br>/<br><br></code></pre></td></tr></table></figure><p>for update</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">处理游标的当前行—修改或删除<br><span class="hljs-keyword">set</span> serveroutput <span class="hljs-keyword">on</span>;<br><span class="hljs-keyword">declare</span> <br><span class="hljs-keyword">cursor</span> c_emp(v_deptno number) <span class="hljs-keyword">is</span><br><span class="hljs-keyword">select</span> ename <span class="hljs-keyword">from</span> emp1 <span class="hljs-keyword">where</span> deptno=v_deptno<br><span class="hljs-keyword">FOR</span> <span class="hljs-keyword">UPDATE</span>; <span class="hljs-comment">-- for update的作用是游标打开的时候对数据集加锁</span><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> c_emp(<span class="hljs-number">10</span>) <span class="hljs-keyword">loop</span><br>  <span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> emp1 <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">CURRENT</span> <span class="hljs-keyword">OF</span> c_emp;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">loop</span>;<br><span class="hljs-keyword">end</span>;<br><br><span class="hljs-keyword">update</span> emp1 <span class="hljs-keyword">set</span> sal=sal*<span class="hljs-number">1.3</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">CURRENT</span> <span class="hljs-keyword">OF</span> c_emp; 可以<br><span class="hljs-keyword">UPDATE</span>语句仅更新在游标声明的<span class="hljs-keyword">FOR</span> <span class="hljs-keyword">UPDATE</span>子句处列出的列。如果没有列出任何列，那么所有的列都可以更新。 <br></code></pre></td></tr></table></figure><h3 id="游标变量"><a href="#游标变量" class="headerlink" title="游标变量"></a>游标变量</h3><p>之前例子都是静态游标－－游标与sql语句相关联，编译的时候就确定sql语句。</p><p>游标变量可以在运行时拥有不同的值。是一种引用类型，跟指针相似。程序运行中可以指向不同的存储位置。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">procedure</span> proc1(v_deptno number) <span class="hljs-keyword">as</span><br><span class="hljs-keyword">TYPE</span> curref <span class="hljs-keyword">IS</span> <span class="hljs-keyword">REF</span> <span class="hljs-keyword">CURSOR</span>;<br>varcur curref;<br>empinfo emp<span class="hljs-meta">%rowtype</span>;<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">open</span> varcur <span class="hljs-keyword">for</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno=v_deptno;<br><span class="hljs-keyword">loop</span><br><span class="hljs-keyword">fetch</span> varcur <span class="hljs-keyword">into</span> empinfo;<br><span class="hljs-keyword">exit</span> <span class="hljs-keyword">when</span> varcur%notfound;<br>dbms_output.put_line(empinfo.empno||<span class="hljs-string">&#x27; &#x27;</span>||empinfo.ename);<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">loop</span>;<br><span class="hljs-keyword">end</span>;<br><br></code></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>PL/SQL错误分类：</p><ul><li><p>编译时错误，运行时错误。</p></li><li><p>预定义异常：对应与oracle常见的错误</p><p>用户自定义异常：用户定义的错误，不一定是oracle的错误，可以是数据的错误。</p></li></ul><p>发生异常后，转到相应的错误处理程序。</p><h3 id="预定义异常"><a href="#预定义异常" class="headerlink" title="预定义异常"></a>预定义异常</h3><img src="/2022/11/27/oraclesql/image-20230214213125651.png" class="" title="image-20230214213125651"><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">【<span class="hljs-number">1</span>】<br><span class="hljs-keyword">Declare</span><br>X number(<span class="hljs-number">3</span>);<br><span class="hljs-keyword">Begin</span><br>x:=<span class="hljs-string">&#x27;yyyy&#x27;</span>;<br><span class="hljs-keyword">Exception</span> <br><span class="hljs-keyword">when</span> value_error <span class="hljs-keyword">then</span><br>Dbms_output.put_line(<span class="hljs-string">&#x27;exception handed&#x27;</span>);<br><span class="hljs-keyword">End</span>;<br><br>【<span class="hljs-number">2</span>】<br><span class="hljs-keyword">declare</span><br>v_empno emp.empno<span class="hljs-meta">%TYPE</span>;<br>v_emprecord emp<span class="hljs-meta">%ROWTYPE</span>;<br><span class="hljs-keyword">begin</span><br>v_empno:=<span class="hljs-number">1000</span>;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">into</span> v_emprecord<br><span class="hljs-keyword">from</span> emp<br><span class="hljs-keyword">where</span> empno=v_empno;<br>dbms_output.put_line(<span class="hljs-string">&#x27;name:&#x27;</span> ||v_emprecord.ename);<br><span class="hljs-keyword">exception</span><br><span class="hljs-keyword">when</span> <span class="hljs-built_in">NO_DATA_FOUND</span> <span class="hljs-keyword">then</span><br>dbms_output.put_line(<span class="hljs-string">&#x27;没有数据&#x27;</span>);<br><span class="hljs-keyword">end</span>;<br><br></code></pre></td></tr></table></figure><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">在声明部分声明<br>e_var <span class="hljs-keyword">exception</span>;<br>在执行部分用<span class="hljs-keyword">raise</span>引发。<br><span class="hljs-keyword">raise</span> e_var<br>在<span class="hljs-keyword">Exception</span> 中写错误处理程序<br><span class="hljs-keyword">when</span> e_var <span class="hljs-keyword">then</span>…<br><br>【<span class="hljs-number">1</span>】<br><span class="hljs-keyword">declare</span><br>v_empno emp.empno<span class="hljs-meta">%TYPE</span>;<br>v_sal emp.sal<span class="hljs-meta">%TYPE</span>;<br>e_toolow <span class="hljs-keyword">exception</span>;<br>errNum <span class="hljs-type">integer</span>;<br>errMsg varchar2(<span class="hljs-number">600</span>);<br><span class="hljs-keyword">begin</span><br>v_empno:=<span class="hljs-number">7900</span>;<br><span class="hljs-keyword">select</span> sal <span class="hljs-keyword">into</span> v_sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> empno=v_empno;<br><span class="hljs-keyword">if</span> v_sal&lt;<span class="hljs-number">1000</span> <span class="hljs-keyword">then</span><br><span class="hljs-keyword">raise</span> e_toolow;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span>;<br><span class="hljs-keyword">exception</span><br><span class="hljs-keyword">when</span> e_toolow <span class="hljs-keyword">then</span><br>dbms_output.put_line(<span class="hljs-string">&#x27;工资太低了&#x27;</span>);<br><span class="hljs-keyword">when</span> others <span class="hljs-keyword">then</span><br>errNum:=SQLCODE;<br>errMsg:=<span class="hljs-built_in">SQLERRM</span>;<br>raise_application_error(<span class="hljs-number">-20000</span>,errNum ||<span class="hljs-string">&#x27; &#x27;</span>||errMsg);<br><span class="hljs-keyword">end</span>;     <br><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">raise_application_error返回用户定义的错误号和消息给调用环境。错误号范围<br>－<span class="hljs-number">20000</span>～－<span class="hljs-number">20999</span><br><br>可以用sqlcode 和<span class="hljs-built_in">sqlerrm</span>返回错误号和错误消息<br></code></pre></td></tr></table></figure><h3 id="异常传播"><a href="#异常传播" class="headerlink" title="异常传播"></a>异常传播</h3><p>遵循以下规则：</p><ul><li>对于执行部分的异常，若当前块设置了相应处理器，则执行它并成功完成该块的执行，控制权转交给包含块。若没有该处理器，则异常传播到包含块中。</li><li>对于声明部分或异常部分的异常，不管该块有没有相应处理器，都立即传播给包含块。</li></ul><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>被组合在一起的相关对象的集合,包括：过程、函数、游标、类型、变量</p><p>当包的任何函数或过程被调用时，包就被加载到内存中，从而提高访问速度。</p><p>分为包说明和包体</p><h3 id="包说明"><a href="#包说明" class="headerlink" title="包说明"></a>包说明</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR REPLACE</span> PACKAGE＜包名&gt;<br><span class="hljs-keyword">IS</span><br>变量、常量及数据类型定义；<br>游标定义；<br>函数、过程定义和参数列表及返回类型；<br><span class="hljs-keyword">END</span>＜包名＞；<br>都是公共的，包之外的程序可以调用。<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> package OpOnEmp <span class="hljs-keyword">as</span><br><span class="hljs-keyword">procedure</span> Get_EMP_Ename(ename1 <span class="hljs-keyword">out</span> emp.ename<span class="hljs-meta">%type</span>,job1 <span class="hljs-keyword">in</span> emp.job<span class="hljs-meta">%type</span>);<br><span class="hljs-keyword">function</span> Get_EMP_Ename_func(job1 <span class="hljs-keyword">in</span> emp.job<span class="hljs-meta">%type</span>) <span class="hljs-keyword">return</span> emp.ename<span class="hljs-meta">%type</span>;<br><span class="hljs-keyword">end</span> OpOnEmp;<br></code></pre></td></tr></table></figure><h3 id="包主体"><a href="#包主体" class="headerlink" title="包主体"></a>包主体</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">创建包主体部分的语句格式如下：<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR REPLACE</span>  PACKAGE BODY＜包名＞<br><span class="hljs-keyword">AS</span><br>私有变量等结构<br>游标、函数、过程的具体定义；<br><span class="hljs-keyword">END</span>＜包名＞；<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> package body OpOnEmp <span class="hljs-keyword">as</span><br><span class="hljs-comment">--增加一个存储过程</span><br>    <span class="hljs-keyword">procedure</span> Get_EMP_Ename(ename1 <span class="hljs-keyword">out</span> emp.ename<span class="hljs-meta">%type</span>,job1 <span class="hljs-keyword">in</span> emp.job<span class="hljs-meta">%type</span>) <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">select</span> ename <span class="hljs-keyword">into</span> ename1 <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> emp.job=job1;<br>    <span class="hljs-keyword">end</span> Get_EMP_ename;<br>    <span class="hljs-comment">--增加一个函数</span><br>    <span class="hljs-keyword">function</span> Get_EMP_Ename_func(job1 <span class="hljs-keyword">in</span> emp.job<span class="hljs-meta">%type</span>) <span class="hljs-keyword">return</span> emp.ename<span class="hljs-meta">%type</span> <span class="hljs-keyword">as</span><br>    ename1 emp.ename<span class="hljs-meta">%type</span>;<br>    <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">select</span> ename <span class="hljs-keyword">into</span> ename1 <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> emp.job=job1;<br>    <span class="hljs-keyword">return</span> ename1;<br>    <span class="hljs-keyword">end</span> Get_EMP_Ename_func;<br><span class="hljs-keyword">end</span> OpOnEmp;//函数体<br><br></code></pre></td></tr></table></figure><h3 id="包调用"><a href="#包调用" class="headerlink" title="包调用"></a>包调用</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">与普通的函数或过程的调用方法一样，只不过在函数或过程前加 包名字.<br>Exec Mypackage<span class="hljs-selector-class">.myproc</span>(<span class="hljs-selector-tag">a</span>)<br>exec :ename:= Mypackage.<span class="hljs-built_in">myfunc</span>(a)<br><br>var a <span class="hljs-built_in">varchar2</span>(<span class="hljs-number">30</span>)<br> exec oponemp.<span class="hljs-built_in">get_emp_ename</span>(:a,<span class="hljs-string">&#x27;PRESIDENT&#x27;</span>);<br> print <span class="hljs-selector-tag">a</span><br><br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs applescript">利用包定义全局变量<br>create <span class="hljs-keyword">or</span> replace package public_var <span class="hljs-keyword">as</span><br><span class="hljs-literal">pi</span> <span class="hljs-built_in">number</span>:=<span class="hljs-number">3.14</span>;<br><span class="hljs-keyword">end</span>;<br><span class="hljs-comment">--调用全局变量</span><br>declare<br>area <span class="hljs-built_in">number</span>(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>);<br>begin<br>area:=public_var.<span class="hljs-literal">pi</span>*<span class="hljs-number">2</span>*<span class="hljs-number">2</span>;<br>dbms_output.put_line(area);<br><span class="hljs-keyword">end</span>;<br></code></pre></td></tr></table></figure><img src="/2022/11/27/oraclesql/image-20230214214659982.png" class="" title="image-20230214214659982"><p>内置包扩展了数据库的功能，为 PL/SQL 提供对 SQL 功能的访问</p><p>用户 SYS 拥有所有程序包，授权给任何用户访问</p><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>三个语句：update、delete、insert</p><p>两个时机：before、after</p><p>两个级别：行触发或语句触发</p><h3 id="行触发器"><a href="#行触发器" class="headerlink" title="行触发器"></a>行触发器</h3><p>触发语句处理每一行时，行级别触发器都激发一次。</p><p>在触发器的内部，可以通过相关标识符来访问当前被处理行中的数据。即：old和：new 。二者是特殊类型的绑定变量，二者是表的行类型。</p><p>:new.field引用行的数据</p><p>Insert   :old Null    :new 新插入的值</p><p>Update : old 旧值    :new 新值</p><p>Delete  :old 旧值    :new null</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">【<span class="hljs-keyword">before</span>】<br><span class="hljs-keyword">Create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">trigger</span> del_emp_deptno <span class="hljs-keyword">Before</span> <span class="hljs-keyword">delete</span> <span class="hljs-keyword">on</span> dept1<br><span class="hljs-keyword">For</span> <span class="hljs-keyword">each</span> <span class="hljs-keyword">row</span>        <span class="hljs-comment">--行触发器</span><br><span class="hljs-keyword">Begin</span><br><span class="hljs-keyword">Delete</span> <span class="hljs-keyword">from</span> emp1 <span class="hljs-keyword">where</span> deptno=:<span class="hljs-built_in">old</span>.deptno;<br><span class="hljs-keyword">End</span>; <br><br><span class="hljs-keyword">Delete</span> <span class="hljs-keyword">from</span> dept1 <br><span class="hljs-keyword">where</span> deptno=<span class="hljs-number">10</span> <span class="hljs-keyword">or</span> deptno=<span class="hljs-number">20</span>;<br><br>【<span class="hljs-keyword">after</span>】<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR REPLACE</span> <span class="hljs-keyword">trigger</span> copy_emp_bak <span class="hljs-keyword">after</span> <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">ON</span> emp1<br><span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-keyword">ROW</span>              <span class="hljs-comment">--行触发器</span><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> emp1_copy <span class="hljs-keyword">values</span><br>(:<span class="hljs-built_in">new</span>.EMPNO,:<span class="hljs-built_in">new</span>.ENAME,:<span class="hljs-built_in">new</span>.JOB,:<span class="hljs-built_in">new</span>.MGR,:<span class="hljs-built_in">new</span>.HIREDATE,:<span class="hljs-built_in">new</span>.SAL,:<span class="hljs-built_in">new</span>.COMM,:<span class="hljs-built_in">new</span>.DEPTNO);<br><span class="hljs-keyword">end</span>;<br>/<br><br></code></pre></td></tr></table></figure><p>when子句：只对行触发器有效</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"> <span class="hljs-keyword">Create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">trigger</span> checksal<br> <span class="hljs-keyword">Before</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">update</span> <span class="hljs-keyword">on</span> emp1<br> <span class="hljs-keyword">For</span> <span class="hljs-keyword">each</span> <span class="hljs-keyword">row</span><br> <span class="hljs-keyword">When</span>(<span class="hljs-built_in">new</span>.sal&lt;<span class="hljs-number">1000</span>)<br> <span class="hljs-keyword">Begin</span><br> Raise_application_error(<span class="hljs-number">-20001</span>, <span class="hljs-string">&#x27;The salary is too low.&#x27;</span>);<br> <span class="hljs-keyword">End</span>;<br><span class="hljs-keyword">When</span>子句里面的表达式可以用<span class="hljs-built_in">new</span>和<span class="hljs-built_in">old</span>引用当前行。但这不加冒号。冒号只在触发器体中有效。<br><br></code></pre></td></tr></table></figure><h3 id="语句触发器"><a href="#语句触发器" class="headerlink" title="语句触发器"></a>语句触发器</h3><p>一个语句触发器只会针对指定DML语句激活一次。比如，一个update语句，无论update多少行，也只会调用一次update语句触发器。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR REPLACE</span> <span class="hljs-keyword">trigger</span> op_emp1_log<br>    <span class="hljs-keyword">after</span> <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">update</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">delete</span> <span class="hljs-keyword">ON</span> emp1<br><span class="hljs-keyword">Declare</span><br>descstr varchar2(<span class="hljs-number">50</span>);<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">if</span> inserting <span class="hljs-keyword">then</span><br>  descstr:=<span class="hljs-string">&#x27;Insert&#x27;</span>;<br><span class="hljs-keyword">elsif</span> updating <span class="hljs-keyword">then</span><br>  descstr:=<span class="hljs-string">&#x27;update&#x27;</span>;<br><span class="hljs-keyword">else</span> <br>  descstr:=<span class="hljs-string">&#x27;delete&#x27;</span>;<br><span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span>;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> logtb <span class="hljs-keyword">values</span> (<span class="hljs-keyword">user</span>,sysdate,descstr || <span class="hljs-string">&#x27; on emp1&#x27;</span>);<br><span class="hljs-keyword">end</span>;<br><br></code></pre></td></tr></table></figure><p>触发器谓词：</p><ul><li>Inserting 如果触发语句为insert,则为true</li><li>Updating 如果触发语句为update,则为true</li><li>Deleting 如果触发语句为delete,则为true</li></ul><h3 id="替代触发器"><a href="#替代触发器" class="headerlink" title="替代触发器"></a>替代触发器</h3><p>Instead of 触发器只能定义于视图上，触发事件是视图上的DML，主要用于修改一个本来不能修改的视图。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">创建视图：<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">view</span> stuview <span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> s.sno,s.sname,math,english<br><span class="hljs-keyword">from</span> student s,score<br><span class="hljs-keyword">where</span> s.sno=score.sno;<br><br>视图stuview来自于两个表的连接操作，因而它不能被修改。但如果有人试图修改，会怎样？<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> stuview(sno,sname,math,english)<br><span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;007&#x27;</span>,<span class="hljs-string">&#x27;cc&#x27;</span>,<span class="hljs-number">90</span>,<span class="hljs-number">90</span>);<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">trigger</span> InstStuView <span class="hljs-keyword">instead</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">on</span> stuview<br><span class="hljs-keyword">For</span> <span class="hljs-keyword">each</span> <span class="hljs-keyword">row</span><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student(sno,sname) <span class="hljs-keyword">values</span>(:<span class="hljs-built_in">new</span>.sno,:<span class="hljs-built_in">new</span>.sname);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> score(sno,math,english) <span class="hljs-keyword">values</span>(:<span class="hljs-built_in">new</span>.sno,:<span class="hljs-built_in">new</span>.math,:<span class="hljs-built_in">new</span>.english);<br><span class="hljs-keyword">end</span>;<br><span class="hljs-keyword">Instead</span> <span class="hljs-keyword">of</span> 触发器都是行级别的。<br><br></code></pre></td></tr></table></figure><h3 id="DML触发器激发顺序"><a href="#DML触发器激发顺序" class="headerlink" title="DML触发器激发顺序"></a>DML触发器激发顺序</h3><p>一个表可以拥有定义在其上的任何数量的触发器，可以包括多个DML类型。例如可以定义两个在delete语句级别之后的触发器，相同类型的触发器被激发的顺序没有定义，如果该顺序很重要，那么就把所有的操作结合到一个触发器中。</p><ol><li><p>如果存在，执行语句级别之前的触发器</p></li><li><p>对于受语句影响的每一行：</p><ol><li>如果存在，执行行级别之前的触发器。</li><li>执行语句本身</li><li>如果存在，执行行级别之后的触发器</li></ol></li><li><p>如果存在，执行语句级别之后的触发器。</p></li></ol><h3 id="系统触发器"><a href="#系统触发器" class="headerlink" title="系统触发器"></a>系统触发器</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">在数据库事件上发生，包括：服务器的启动与关闭、用户登录/注销，以及服务器错误。<br>Servererror   <span class="hljs-keyword">after</span> 有错就激发<br>Logon           <span class="hljs-keyword">after</span>  用户成功连接数据库激发<br>Logoff           <span class="hljs-keyword">before</span> 用户刚开始注销<br>Startup         <span class="hljs-keyword">after</span>  实例开始时激发<br>Shutdown    <span class="hljs-keyword">before</span> 实例关闭之前激发 //异常关闭，也许不激发<br><br><span class="hljs-comment">--database级别上：</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">trigger</span> logconnect<br><span class="hljs-keyword">after</span> logon <span class="hljs-keyword">on</span> <span class="hljs-keyword">database</span><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> scott.logtable<br><span class="hljs-keyword">values</span>(<span class="hljs-keyword">user</span>,sysdate);<br><span class="hljs-keyword">end</span>;<br><br><span class="hljs-comment">--schema级别上：</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">trigger</span> logconnect<br><span class="hljs-keyword">after</span> logon <span class="hljs-keyword">on</span> <span class="hljs-keyword">schema</span><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> scott.logtable<br><span class="hljs-keyword">values</span>(<span class="hljs-keyword">user</span>,sysdate);<br><span class="hljs-keyword">end</span>;<br><br></code></pre></td></tr></table></figure><h3 id="DDL触发器"><a href="#DDL触发器" class="headerlink" title="DDL触发器"></a>DDL触发器</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span>，<span class="hljs-keyword">alter</span>，<span class="hljs-keyword">drop</span>数据库中的模式对象，时机可以是<span class="hljs-keyword">after</span>或者<span class="hljs-keyword">before</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">trigger</span> createtrigger<br> <span class="hljs-keyword">after</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">database</span>/<span class="hljs-keyword">on</span> <span class="hljs-keyword">schema</span><br> <span class="hljs-keyword">begin</span><br> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> scott.createlog<br> <span class="hljs-keyword">values</span>(sys.dictionary_obj_name,sysdate,<span class="hljs-keyword">user</span>);<br> <span class="hljs-keyword">end</span>;<br> /<br><br></code></pre></td></tr></table></figure><h3 id="触发器事件属性函数"><a href="#触发器事件属性函数" class="headerlink" title="触发器事件属性函数"></a>触发器事件属性函数</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">属   性适用触发器类型说 明    <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Sys</span>.</span></span>sysevent  所有类型返回触发器触发事件字符串    <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Sys</span>.</span></span>instance_num所有类型返回Oracle实例号    <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Sys</span>.</span></span>database_name所有类型返回数据库名字    <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Sys</span>.</span></span>server<span class="hljs-constructor">_error(<span class="hljs-params">stack_position</span>)</span>SERVERERROR 从错误堆栈指定位置返回错误号，参数为<span class="hljs-number">1</span>表示最近的错误    <br><span class="hljs-constructor">Is_servererror(<span class="hljs-params">error_number</span>)</span>SERVERERROR 判断堆栈中是否有参数指定的错误号<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Sys</span>.</span></span>login_user所有类型返回导致触发器触发的用户名    <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Sys</span>.</span></span>dictionary_obj_type CREATE、ALTER、DROP    返回DDL触发器触发时涉及的对象类型    <br>Sys. dictionary_obj_name    CREATE、ALTER、DROP    返回DDL触发器触发时涉及的对象名称    <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Sys</span>.</span></span>des_encrypted_password  CREATE、ALTER、DROP    创建或修改用户时，返回加密后的用户密码<br><br></code></pre></td></tr></table></figure><h3 id="启用-禁用-删除"><a href="#启用-禁用-删除" class="headerlink" title="启用/禁用/删除"></a>启用/禁用/删除</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">启动：<span class="hljs-keyword">Alter</span> <span class="hljs-keyword">trigger</span> triggername <span class="hljs-keyword">enable</span>;<br>禁用： <span class="hljs-keyword">Alter</span> <span class="hljs-keyword">trigger</span> triggername <span class="hljs-keyword">disable</span>;<br>删除:<span class="hljs-keyword">drop</span> <span class="hljs-keyword">trigger</span> triggername ;<br></code></pre></td></tr></table></figure><h3 id="变异表"><a href="#变异表" class="headerlink" title="变异表"></a>变异表</h3><p>变异表是当前被DML语句修改的表。对于触发器，这是触发器为之定义的表。</p><p>对于所有行级别（FOR EACH ROW）的触发器，触发器体中的SQL语句不可以读取或修改任何触发语句的变异表，即当前被DML语句修改的表。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR REPLACE</span> <span class="hljs-keyword">trigger</span> emp1_count<br>    <span class="hljs-keyword">after</span> <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">delete</span> <span class="hljs-keyword">ON</span> emp1<br>    <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-keyword">ROW</span> <br><span class="hljs-keyword">declare</span><br>v_num number;<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">select</span> count(*) <span class="hljs-keyword">into</span> v_num<br><span class="hljs-keyword">from</span> emp1;<br>dbms_output.put_line(v_num);<br><span class="hljs-keyword">end</span>;<br>/<br>该例子把<span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> <span class="hljs-keyword">row</span>去掉就可以了。<br>当删除了表，之上的触发器也被删除了。<br>以上例子对于<span class="hljs-keyword">delete</span>删除只影响一行也不行。<br>有个特例就是如果<span class="hljs-keyword">INSERT</span>只影响一行记录那么定义在这行上的行级<span class="hljs-keyword">BEFORE</span>触发器，就不会将这个触发表当作变异表。<br><br><br></code></pre></td></tr></table></figure><h3 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h3><p>PL/SQL使用早期绑定来执行sql语句。这样做导致只有DML语句可以直接包含在PL/SQL块中。</p><p>可以通过动态SQL执行DDL。</p><p>动态SQL不与PL/SQL语句块一起进行分析，而是在运行时进行分析并随后执行。</p><p>动态SQL主要用于DML和DDL。</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs delphi">create <span class="hljs-keyword">or</span> replace <span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">create_table1</span> <span class="hljs-title">as</span></span><br><span class="hljs-function"><span class="hljs-title">begin</span></span><br><span class="hljs-function"><span class="hljs-title">execute</span> <span class="hljs-title">immediate</span> &#x27;<span class="hljs-title">create</span> <span class="hljs-title">table</span> <span class="hljs-title">emps</span><span class="hljs-params">(ids number,<span class="hljs-keyword">name</span> varchar2(10)</span>,<span class="hljs-title">salary</span> <span class="hljs-title">number</span>)&#x27;;</span> <br><span class="hljs-keyword">end</span>;<br>exec create_table1;<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">【修改成以下代码（对还是错？）】<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">procedure</span> create_table1 <span class="hljs-keyword">as</span><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">execute</span> <span class="hljs-keyword">immediate</span> <span class="hljs-string">&#x27;create table emps(ids number,name varchar2(10),salary number)&#x27;</span>; <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> emps <span class="hljs-keyword">values</span>(<span class="hljs-number">100</span>,<span class="hljs-string">&#x27;jacky&#x27;</span>,<span class="hljs-number">5600</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> emps <span class="hljs-keyword">values</span>(<span class="hljs-number">101</span>,<span class="hljs-string">&#x27;rose&#x27;</span>,<span class="hljs-number">3000</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> emps <span class="hljs-keyword">values</span>(<span class="hljs-number">102</span>,<span class="hljs-string">&#x27;john&#x27;</span>,<span class="hljs-number">4500</span>);<br><span class="hljs-keyword">end</span>;<br>exec create_table1;<br><br>【正确写法(一)】<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">procedure</span> create_table1 <span class="hljs-keyword">as</span><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">execute</span> <span class="hljs-keyword">immediate</span> <span class="hljs-string">&#x27;create table emps(ids number,name varchar2(10),salary number)&#x27;</span>; <br><span class="hljs-keyword">end</span>;<br>exec create_table1;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">procedure</span> insert_table1 <span class="hljs-keyword">as</span><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> emps <span class="hljs-keyword">values</span>(<span class="hljs-number">100</span>,<span class="hljs-string">&#x27;jacky&#x27;</span>,<span class="hljs-number">5600</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> emps <span class="hljs-keyword">values</span>(<span class="hljs-number">101</span>,<span class="hljs-string">&#x27;rose&#x27;</span>,<span class="hljs-number">3000</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> emps <span class="hljs-keyword">values</span>(<span class="hljs-number">102</span>,<span class="hljs-string">&#x27;john&#x27;</span>,<span class="hljs-number">4500</span>);<br><span class="hljs-keyword">end</span>;<br>exec insert_table1;<br><br>【正确写法(二)】<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">procedure</span> create_table1 <span class="hljs-keyword">as</span><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">execute</span> <span class="hljs-keyword">immediate</span> <span class="hljs-string">&#x27;create table emps(ids number,name varchar2(10),salary number)&#x27;</span>;<br><span class="hljs-keyword">execute</span> <span class="hljs-keyword">immediate</span> <span class="hljs-string">&#x27;insert into emps values (:ids,:name,:sal)&#x27;</span> <span class="hljs-keyword">using</span> <span class="hljs-number">100</span>,<span class="hljs-string">&#x27;jacky&#x27;</span>,<span class="hljs-number">5600</span>;<br><span class="hljs-keyword">execute</span> <span class="hljs-keyword">immediate</span> <span class="hljs-string">&#x27;insert into emps values(:ids,:name,:sal)&#x27;</span><span class="hljs-keyword">using</span> <span class="hljs-number">101</span>,<span class="hljs-string">&#x27;rose&#x27;</span>,<span class="hljs-number">3000</span>;<br><span class="hljs-keyword">execute</span> <span class="hljs-keyword">immediate</span> <span class="hljs-string">&#x27;insert into emps values(:ids,:name,:sal)&#x27;</span><span class="hljs-keyword">using</span> <span class="hljs-number">102</span>, <span class="hljs-string">&#x27;john&#x27;</span>,<span class="hljs-number">4500</span>;<br><span class="hljs-keyword">end</span>;<br>exec create_table1;<br><br>用上面方法传参数，<br>或者（遇到单引号要加转义）：<br><span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">execute</span> <span class="hljs-keyword">immediate</span> <span class="hljs-string">&#x27;insert into emps values (100,&#x27;&#x27;jacky&#x27;&#x27;,5600)&#x27;</span>;<br><span class="hljs-keyword">End</span>;<br>或者：<br><span class="hljs-keyword">declare</span><br>str varchar2(<span class="hljs-number">100</span>);<br><span class="hljs-keyword">begin</span><br>str:=<span class="hljs-string">&#x27;insert into emps values(&#x27;</span>||<span class="hljs-number">101</span>||<span class="hljs-string">&#x27;,&#x27;&#x27;rose&#x27;&#x27;,&#x27;</span>||<span class="hljs-number">3000</span>||<span class="hljs-string">&#x27;)&#x27;</span>;<br>dbms_output.put_line(str);<br><span class="hljs-keyword">execute</span> <span class="hljs-keyword">immediate</span> str;<br><span class="hljs-keyword">end</span>;<br><br>【传参数】<br><span class="hljs-keyword">DECLARE</span><br>  v_SQLString  VARCHAR2(<span class="hljs-number">1000</span>);<br><span class="hljs-keyword">BEGIN</span><br>   v_SQLString :=<br>    <span class="hljs-string">&#x27;INSERT INTO dept1 (deptno,dname,loc)</span><br><span class="hljs-string">       VALUES (:deptno,:dname,:loc)&#x27;</span>;<br>   <span class="hljs-keyword">EXECUTE</span> <span class="hljs-keyword">IMMEDIATE</span> v_SQLString <span class="hljs-keyword">USING</span><br>    <span class="hljs-number">70</span>, <span class="hljs-string">&#x27; ENGINEERING &#x27;</span>, <span class="hljs-string">&#x27; SHENZHEN&#x27;</span>;<br><span class="hljs-keyword">end</span>;<br>/<br><span class="hljs-keyword">Rollback</span>；<br></code></pre></td></tr></table></figure><h1 id="事务-1"><a href="#事务-1" class="headerlink" title="事务"></a>事务</h1><p>事务是由相关操作构成的一个完整的操作单元，是一系列数据改变的sql语句</p><p>在一个事务内，数据的修改一起提交或撤销，如果发生故障或系统错误，整个事务也会自动撤销。提交之后，就不能撤销，提交成功后其他用户才可以通过查询浏览数据的变化。</p><p>对数据库所做的一系列修改，在修改过程中，暂时不写入数据库，而是缓存起来，用户在自己的终端可以预览变化，直到全部修改完成，并经过检查确认无误后，一次性提交并写入数据库。</p><p>分为隐式和显式两种</p><ul><li><p>隐式：</p><p>隐式提交：DDL（create），DCL（exit，quit，grant，revoke）由系统自动完成提交或撤销，无需用户干预</p><p>隐式回退：异常结束，或系统故障；或系统环境变量autocommit设置为on，那么显示提交的数据也将被自动提交，变为隐式</p></li><li><p>显式：DML（insert），需要用户操作commit/rollback/savepoint</p></li></ul><p>commit：数据库事务提交，将变化写入数据库，受影响的数据行上的锁被释放。</p><p>rollback：回滚语句使数据库回到上次最后提交事务的状态，数据的改变被撤销，之前的数据状态恢复，受影响的数据行上的锁被释放。</p><p>savepoint：保存点</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lasso">savepoint sp1; 起个名字，创建保存点<br>insert<span class="hljs-params">...</span><br><span class="hljs-params">...</span>这部分都被撤销<br>rollback <span class="hljs-keyword">to</span> sp1; 事务的阶段回退，回到sp1之前的状态，【该语句不能结束一个事务】<br></code></pre></td></tr></table></figure><p>Commit and rollback之前的数据状态：</p><ul><li>数据可以被恢复.</li><li>当前用户可以用select语句查询修改结果.</li><li>其他用户不可以查看当前用户对数据做的修改</li><li>受影响的数据行被锁; 其他用户不能改变这些行.</li></ul><p>何时开始事务：</p><ul><li>开始第一个会话（连接数据库）时</li><li>执行第一条sql语句时（select不算）</li></ul><p>何时结束事务：</p><ul><li>执行commit，rollback，DDL</li><li>断开与oracle连接（exit），事务自动提交</li><li>用户进程异常终止，当前事务回滚</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql">scott<span class="hljs-variable">@ORCL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> aa(col1 number);<br>scott<span class="hljs-variable">@ORCL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> aa <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>);<br>                                 <span class="hljs-comment">--另一个用户登录能否看到？</span><br>scott<span class="hljs-variable">@ORCL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> aa rename <span class="hljs-keyword">to</span> ab;<br>                                 <span class="hljs-comment">--此时另一个用户登录能否看到？</span><br>scott<span class="hljs-variable">@ORCL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> ab;<br>scott<span class="hljs-variable">@ORCL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> ab <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>);<br>scott<span class="hljs-variable">@ORCL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">savepoint</span> a;<br>scott<span class="hljs-variable">@ORCL</span><span class="hljs-operator">&gt;</span> update ab <span class="hljs-keyword">set</span> col1<span class="hljs-operator">=</span><span class="hljs-number">3</span> <span class="hljs-keyword">where</span> col1<span class="hljs-operator">=</span><span class="hljs-number">2</span>;<br>scott<span class="hljs-variable">@ORCL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> ab;<br>scott<span class="hljs-variable">@ORCL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">rollback</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">savepoint</span> a;<br>scott<span class="hljs-variable">@ORCL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> ab;<br>scott<span class="hljs-variable">@ORCL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">rollback</span> ;<br>scott<span class="hljs-variable">@ORCL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> ab;<br>scott<span class="hljs-variable">@ORCL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> ab <span class="hljs-keyword">values</span>(<span class="hljs-number">4</span>);关闭sqlplus<br>                     <span class="hljs-comment">--此时另一个用户登录能否看到4？</span><br>scott<span class="hljs-variable">@ORCL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> ab <span class="hljs-keyword">values</span>(<span class="hljs-number">5</span>); quit<br>                   <span class="hljs-comment">--此时另一个用户登录能否看到5？</span><br></code></pre></td></tr></table></figure><h1 id="3oracle体系结构"><a href="#3oracle体系结构" class="headerlink" title="3oracle体系结构"></a>3oracle体系结构</h1><p>体系结构：组成oracle系统的主要部分，以及这些部分之间的关系、工作方式。</p><p>记忆+理解</p><h2 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h2><img src="/2022/11/27/oraclesql/image-20230204165550234.png" class="" title="image-20230204165550234"><h2 id="database"><a href="#database" class="headerlink" title="database"></a>database</h2><p>包括数据文件、控制文件、日志文件，必须的，有多个；其他包括参数文件、口令文件、归档日志文件</p><h3 id="数据文件"><a href="#数据文件" class="headerlink" title="数据文件"></a>数据文件</h3><p>data files</p><p>存储全部数据：表中数据，索引数据</p><p>通常后缀.dbf</p><p>通过DBWR从数据库缓冲区高速缓存写入到数据文件。</p><h3 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h3><p>redo log files/重做日志文件</p><p>记录数据库全部变更，可能是DML、DDL语句。在系统发生故障时，用它对数据库进行恢复</p><p>通常名称Redo*.log</p><p>LGWR从重做日志缓冲区将重做日志写到日志文件中。</p><p><strong>至少有两个日志文件</strong>，循环写入</p><p>根据在事务信息将被覆盖时，是否应该将文件归档，数据库分为两种归档模式：archivelog（归档日志）（保存历史日志项），noarchivelog（非归档日志）模式</p><h3 id="控制文件"><a href="#控制文件" class="headerlink" title="控制文件"></a>控制文件</h3><p>control files</p><p>oracle打开数据库时需要读取的文件。</p><p>是较小的二进制文件，记录了数据库的物理结构：数据库名，数据文件、日志文件的名称和位置等。</p><p>通常名称Control*.ctl</p><p><strong>至少有一个控制文件</strong>，且控制文件的内容只能由oracle本身来修改。控制文件损坏或丢失，会导致无法打开数据库。</p><h3 id="参数文件"><a href="#参数文件" class="headerlink" title="参数文件"></a>参数文件</h3><p>parameter files 目前已不使用</p><p>控制内存、实例</p><p>是ASCII文本文件，initsid.ora（名称和内容都不能更改，可以通过其他接口查看），记录数据库运行时的一些重要参数，其中的参数值决定数据库和实例的特性。</p><h4 id="服务器参数文件"><a href="#服务器参数文件" class="headerlink" title="服务器参数文件"></a>服务器参数文件</h4><p>server parameter files——SPFile</p><p>是二进制文件，spfilesid.ora，不能更改</p><p>oracle实例启动读取参数文件的顺序：spfilesid.ora-&gt;initsid.ora</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">alter<span class="hljs-built_in"> system </span><span class="hljs-builtin-name">set</span> open_links =5 <span class="hljs-attribute">scope</span>=spfile; 下次重启oracle 开始生效。<br>   <span class="hljs-attribute">scope</span>=memory;当前立即生效,下次重启oracle,恢复到以前<br>   <span class="hljs-attribute">scope</span>=both;值当前立即生效,重启也有效.<br></code></pre></td></tr></table></figure><h2 id="instance实例"><a href="#instance实例" class="headerlink" title="instance实例"></a>instance实例</h2><p>用户访问物理数据库需要借助实例，一个实例通常对应一个数据库。</p><p>组成：系统全局区SGA、后台进程</p><h3 id="系统全局区SGA"><a href="#系统全局区SGA" class="headerlink" title="系统全局区SGA"></a>系统全局区SGA</h3><p>SGA system global area</p><p>SGA=数据库缓冲区高速缓存+重做日志缓存+共享池+java池+大池+fixed pool（?）</p><p>是实例的主要部分，oracle内存结构的主要组成部分，是oracle为一个实例分配的一组共享内存缓冲区。</p><p>保存着oracle系统与所有数据库用户的共享信息，包括共享数据、sql语句分析、重做日志管理等。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">select</span> * from v$sga<span class="hljs-comment">;</span><br>然后会出来一堆各种区块大小<br></code></pre></td></tr></table></figure><h4 id="数据库缓冲区高速缓存"><a href="#数据库缓冲区高速缓存" class="headerlink" title="数据库缓冲区高速缓存"></a>数据库缓冲区高速缓存</h4><p>存放用户进程发布SQL语句后从数据文件检索到的数据。</p><ol><li>改善对相同数据重复执行select的语句性能</li><li>用户能够在内存中对数据进行快速更改。</li></ol><p>更改缓冲区大小</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">alter<span class="hljs-built_in"> system </span><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">db_cache_size</span>=30M;数据库块的大小<br> <span class="hljs-builtin-name">set</span> <span class="hljs-attribute">db_block_buffers</span>=10; 包含数据库块的数目<br></code></pre></td></tr></table></figure><h4 id="重做日志缓冲区"><a href="#重做日志缓冲区" class="headerlink" title="重做日志缓冲区"></a>重做日志缓冲区</h4><p>redo log buffer</p><p>执行语句生成的重做项（执行DML DDL对数据库更改时，oracle为了重构或重做保存的信息）临时存放到这里。将被LGWR后台进程随时写入重做日志文件。</p><h4 id="共享池"><a href="#共享池" class="headerlink" title="共享池"></a>共享池</h4><p>shared buffer</p><p>存放最近执行的sql语句和最近使用的数据定义。</p><p>包括：库高速缓存，数据字典高速缓存，其他可选结构（跟服务器采用专用/共享有关）</p><p>更改共享池大小</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">alter<span class="hljs-built_in"> system </span><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">shared_pool_size</span>=64M;<br></code></pre></td></tr></table></figure><h5 id="库高速缓存"><a href="#库高速缓存" class="headerlink" title="库高速缓存"></a>库高速缓存</h5><p>library cache</p><p>存储最近使用的sql和pl/sql语句，分为共享sql区和共享pl/sql区</p><p>有利于常用语句的共享（已经执行过的语句，再使用省去分析过程）</p><p>采用LRU（least recently used）算法来更新</p><h5 id="数据字典缓冲区"><a href="#数据字典缓冲区" class="headerlink" title="数据字典缓冲区"></a>数据字典缓冲区</h5><p>dictionary cache</p><p>保存最近存取的数据字典的内容，如表和列定义、用户名、口令、权限等，大小由共享池大小决定</p><p>LRU算法更新</p><p>缓存数据字典信息可以提高查询响应效率</p><h3 id="后台进程"><a href="#后台进程" class="headerlink" title="后台进程"></a>后台进程</h3><p>维持实例和物理文件之间的关系</p><h4 id="DBWR-DBWn"><a href="#DBWR-DBWn" class="headerlink" title="DBWR/DBWn"></a>DBWR/DBWn</h4><p>database writer</p><p>把数据库缓冲区高速缓存的数据写入到数据文件中。</p><p>写入时机：</p><ol><li>检查点发生</li><li>脏数据达到一个阈值</li><li>没有空闲的缓冲区</li><li>超时</li></ol><h4 id="LGWR"><a href="#LGWR" class="headerlink" title="LGWR"></a>LGWR</h4><p>log writer</p><p>把重做日志缓冲区的日志项写到日志文件中，异常中止，数据文件未全部完成时，可通过重做日志文件恢复。</p><p>写入时机：</p><ol><li>commit</li><li>1/3满</li><li>1MB重做日志（？达到1M吗）</li><li>每3s</li><li>在DBWn写入之前（写日志比写数据优先级更高）</li></ol><h4 id="SMON"><a href="#SMON" class="headerlink" title="SMON"></a>SMON</h4><p>system monitor</p><ol><li><p>启动时实例恢复</p><p>需要回滚的进行回滚；日志项记录了，但数据文件未更新的更新</p></li><li><p>每3s连结空闲的表空间</p></li><li><p>回收临时段</p></li></ol><h4 id="PMON"><a href="#PMON" class="headerlink" title="PMON"></a>PMON</h4><p>process monitor</p><p>在服务器出现故障时进行进程的恢复</p><ol><li>回滚事务</li><li>释放资源</li><li>重新启动死掉的进程</li></ol><h4 id="CKPT"><a href="#CKPT" class="headerlink" title="CKPT"></a>CKPT</h4><p>check point 检查点</p><p>保证数据缓冲区中修改的数据能写到数据文件中。</p><p>检查点时：</p><ol><li>通知DBWn写</li><li>更新数据文件头</li><li>更新控制文件头</li></ol><p>检查点后，物理文件达到一致状态。若不一致，开启数据库后通过SMON恢复。</p><h4 id="ARCn"><a href="#ARCn" class="headerlink" title="ARCn"></a>ARCn</h4><p>archiver，可选</p><p>当设置成归档模式时，自动备份重做日志文件，备份所有的数据库更改记录。</p><h3 id="其他内存结构"><a href="#其他内存结构" class="headerlink" title="其他内存结构"></a>其他内存结构</h3><h4 id="进程全局区PGA"><a href="#进程全局区PGA" class="headerlink" title="进程全局区PGA"></a>进程全局区PGA</h4><p>服务器进程启动时被分配，是服务器进程专有的，其他进程不能访问。只有服务进程本身才能访问他自己的PGA区。</p><p>存储注入绑定变量值、排序区、游标处理等信息，帮助执行用户进程。</p><h4 id="用户全局区UGA"><a href="#用户全局区UGA" class="headerlink" title="用户全局区UGA"></a>用户全局区UGA</h4><p>如果使用共享服务器，UGA在SGA中分配；</p><p>如果使用专用服务器，UGA在PGA中分配。</p><h3 id="其他进程"><a href="#其他进程" class="headerlink" title="其他进程"></a>其他进程</h3><h4 id="用户进程"><a href="#用户进程" class="headerlink" title="用户进程"></a>用户进程</h4><p>在客户机上运行，当用户运行一个应用程序时，系统就建立一个用户进程（不专门适用于oracle，os似乎就是这样）。执行的是一个应用程序或oracle工具程序的代码，以完成用户所指定的任务。</p><h4 id="服务器进程"><a href="#服务器进程" class="headerlink" title="服务器进程"></a>服务器进程</h4><p>处理与应用程序相连的用户进程的请求，与用户进程相通讯，服务于相连的用户进程请求。</p><h5 id="专用服务器"><a href="#专用服务器" class="headerlink" title="专用服务器"></a>专用服务器</h5><img src="/2022/11/27/oraclesql/image-20230206102711864.png" class="" title="image-20230206102711864"><p>为每个用户进程创建一个服务器进程</p><p>监听器告诉Oracle生成一个新的专用服务器进程，然后将该用户进程分配给此专用服务器进程。</p><h5 id="共享服务器"><a href="#共享服务器" class="headerlink" title="共享服务器"></a>共享服务器</h5><p>多个用户进程共享若干个服务器进程，如果用户很多，需要等待</p><img src="/2022/11/27/oraclesql/image-20230206104015947.png" class="" title="image-20230206104015947"><img src="/2022/11/27/oraclesql/image-20230206102717820.png" class="" title="image-20230206102717820"><img src="/2022/11/27/oraclesql/image-20230206103116442.png" class="" title="image-20230206103116442"><p>如图所示，客户连接向调度器发送一个请求。调度器首先将这个请求放在SGA中的请求队列中 ①。第一个可用的共享服务器从请求队列中取出这个请求②并处理。共享服务器的处理结束后，再把响应（返回码、数据等）放到响应队列中③，接下来调度器拿到这个响应④，传回给客户。 </p><h4 id="监听器进程"><a href="#监听器进程" class="headerlink" title="监听器进程"></a>监听器进程</h4><p>监听通过网络连接到数据库的用户。上图中的listener</p><h2 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h2><p>逻辑结构支配一个数据库如何使用系统的物理空间。</p><ul><li>数据库从逻辑上由一个或多个表空间组成</li><li>表空间由段组成</li><li>段由一组区组成</li><li>区由一组连续的数据块组成</li><li>块对应硬盘上的一个或多个物理块。</li></ul><img src="/2022/11/27/oraclesql/image-20230206104039601.png" class="" title="image-20230206104039601"><h3 id="表空间"><a href="#表空间" class="headerlink" title="表空间"></a>表空间</h3><p>和表是完全不同的概念！</p><p>逻辑存储结构最高层，一个数据库通常由若干表空间组成，每个表空间可以对应若干数据文件。</p><p>表空间中对象的存储：</p><ul><li>如果表空间对应一个数据文件，所有对象都存储在此数据文件中；</li><li>如果表空间对应多个数据文件，可将一个对象的数据存储在该表空间的任意一个数据文件中，也可一个对象的数据分布在表空间的多个数据文件中。</li></ul><p>表空间分类</p><p>   Oracle中除了用户创建的存放数据对象的数据表空间外，还有以下类型的表空间：</p><p>（1）System表空间，存系统数据，包括数据字典。</p><p>（2）回滚表空间（RollBack TableSpace）执行后未提交的值，回滚/提交后释放空间</p><p>（3）临时表空间（Temp TableSpace）不断在分配，临时的排序数据等</p><p>表空间优点</p><p>在数据库中使用多个表空间具有如下优势：</p><p>（1）能够将数据字典与用户数据分离开来，避免由于字典对象和用户对象保存在同一个数据文件中而产生的I／O冲突。</p><p>（2）能够将回滚数据与用户数据分离开来，避免由于硬盘损坏而导致永久性的数据丢失。</p><p>（3）能够将表空间的数据文件分散保存到不同硬盘上，平均分布物理I／O操作。</p><p>（4）能够将某个表空间设置为脱机状态或联机状态，以便对数据库的一部分进行备份和恢复。</p><p>（5）能够将某个表空间设置为只读状态，从而将数据库的一部分设置为只读状态。</p><p>（6）能够为某种特殊用途专门设置一个表空间，比如临时表空间等，以优化表空间的使用效率。</p><p>（7）能够更加灵活地为用户设置表空间限额。</p><h3 id="段"><a href="#段" class="headerlink" title="段"></a>段</h3><p>表空间中以段为单位进行分配</p><p><strong>段是对象的容器</strong></p><p>如：视频、long等大对象，单独放一个段</p><p>段分类</p><p>1．数据段：保存的是表中的记录。</p><p>2．索引段：保存索引中的索引条目。</p><p>3．临时段：当处理查询时，Oracle可能会需要使用到一些临时存储空间，用于临时保存解析过的查询语句以及在排序过程中产生的临时数据。</p><p>4．回滚段：用于存放数据修改之前的值（包括数据修改之前的位置和值）。</p><h3 id="区"><a href="#区" class="headerlink" title="区"></a>区</h3><p>段由区组成，每个段在创建时都会分配一定数目的初始区（主区），当主区用完，自动为段分配新区。</p><p>区的大小可能不同，可以是一个数据块，也可以达到2G</p><p><strong>区是分配的单位</strong></p><h3 id="数据库块"><a href="#数据库块" class="headerlink" title="数据库块"></a>数据库块</h3><p>块是最小的空间分配单位。</p><p>数据行、索引条目、临时排序结果存储在块中。通常oracle 从磁盘读写的就是块。</p><p>常见大小：2KB 4K 8K 16K 32K，也可以自行设置</p><img src="/2022/11/27/oraclesql/image-20230206121320036.png" class="" title="image-20230206121320036"><h2 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h2><p>汇集了数据库运行所需要的基础信息，是oracle数据库的核心组件，随着数据库的产生而产生，随数据库变化而变化。</p><p>数据字典由sys拥有，在system表空间中。</p><p>包括：</p><ul><li>数据库所有对象的定义（表、视图、索引、群集、同义词、序列、过程、函数、包、触发器等）</li><li>为对象如何分配和使用空间</li><li>列的默认值</li><li>完整性约束信息</li><li>数据库安全信息，包括用户、权限、角色等</li><li>审计信息</li></ul><h3 id="数据字典的结构"><a href="#数据字典的结构" class="headerlink" title="数据字典的结构"></a>数据字典的结构</h3><h4 id="基础表"><a href="#基础表" class="headerlink" title="基础表"></a>基础表</h4><p>存储相关数据库信息的表，包括表、索引、约束，以及所有其他数据库对象结构的信息，是oracle系统的核心。system表空间的表非常重要，应避免以sys登录破坏基表。</p><h4 id="数据字典视图"><a href="#数据字典视图" class="headerlink" title="数据字典视图"></a>数据字典视图</h4><p>USER视图:前缀为USER，当前用户模式下所有对象的信息。</p><p>ALL视图:当前用户所拥有的、有权限访问的数据库对象。</p><p>DBA视图:前缀为DBA，在DBA数据字典视图中包含着全部数据库对象的信息。对于带有DBA前缀的视图，显示了整个数据库的情况。因此，它们只能被数据库管理员查询。授予系统权限SELECT ANY TABLE的用户都能查询带有DBA前缀的视图。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">数据字典查询<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> user_tables;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> dba_source <span class="hljs-keyword">where</span> owner=<span class="hljs-string">&#x27;scott&#x27;</span>;<br>describe dba_source列出表结构、有哪些字段、什么类型<br></code></pre></td></tr></table></figure><h2 id="动态性能视图"><a href="#动态性能视图" class="headerlink" title="动态性能视图"></a>动态性能视图</h2><p>Oracle维护了一种从数据库内存结构构建的虚拟表，记录当前数据库的活动。这些表称为动态性能表。在这些表上面创建的视图被称为动态性能视图（dynamic performance view）。</p><p>V$LOG,LOGFILE</p><p>V$DATAFILE</p><p>V$CONTROLFILE</p><p>V$DATABASE  –数据库的常规信息</p><p>V$SYSSTAT    –数据库性能信息</p><p>V$SESSION, V$SESSTAT –会话信息、性能</p><h1 id="用户及权限管理"><a href="#用户及权限管理" class="headerlink" title="用户及权限管理"></a>用户及权限管理</h1><h2 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h2><p>审核用户方法：</p><ol><li>密码 db</li><li>外部 针对dba的审核，包括两种：os审核和口令文件审核。要设置init.ora的remote_login_passwordfile参数，确定审核方式。默认是操作系统审核。</li><li>全局 oracle安全服务器</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">创建数据库审核账户<br><span class="hljs-keyword">Create</span> <span class="hljs-keyword">user</span> spanky<br>Identified <span class="hljs-keyword">by</span> first01 <span class="hljs-comment">--（指定oracle审核初始密码）</span><br><span class="hljs-keyword">Default</span> <span class="hljs-keyword">tablespace</span> users <span class="hljs-comment">--指定存放数据的表空间为users表空间）</span><br><span class="hljs-keyword">Temporary</span> <span class="hljs-keyword">tablespace</span> <span class="hljs-keyword">temp</span> <span class="hljs-comment">--（为用户指定临时表空间为temp）</span><br>Quota <span class="hljs-number">10</span>m <span class="hljs-keyword">on</span> users  <span class="hljs-comment">--（users表空间上的限额）</span><br>Profile app_developer <span class="hljs-comment">-- (概要文件名为app_developer,可采用default缺省概要文件)</span><br><span class="hljs-keyword">Password</span> expire      <span class="hljs-comment">-- （密码到期，也就是用户第一次登录要修改密码） </span><br>Account unlock    <span class="hljs-comment">--（默认值为未锁定状态）</span><br><br>密码到期了用<span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> yzp1 identified <span class="hljs-keyword">by</span> newpwd;解除。过期了，原来的信息就没了，没办法恢复<br><br>用户只能修改自己的密码<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> lily identified <span class="hljs-keyword">by</span> newpwd;<br><br>删除用户<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">user</span> username;<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">user</span> username <span class="hljs-keyword">cascade</span>;当用户拥有对象，级联删除<br>正在连接的用户不能删除<br><br>查询相关信息Dba_users<br>Dba_ts_quotas:用户所拥有的空间限额<br>USER_TS_QUOTAS <br><span class="hljs-keyword">SELECT</span> USERNAME,TABLESPACE_NAME,MAX_BYTES/<span class="hljs-number">1024</span>/<span class="hljs-number">1024</span> “Max MB” <span class="hljs-keyword">FROM</span> dba_ts_quotas <span class="hljs-keyword">WHERE</span> USERNAME=<span class="hljs-string">&#x27;LILY&#x27;</span>;<br><br></code></pre></td></tr></table></figure><p><strong>公共用户public</strong></p><p>一个特殊用户，如果把某个系统权限、对象权限、角色授予public，则数据库中所有用户都拥有该权限。因此不要给public过多权限和角色。</p><h2 id="管理权限"><a href="#管理权限" class="headerlink" title="管理权限"></a>管理权限</h2><h3 id="系统权限"><a href="#系统权限" class="headerlink" title="系统权限"></a>系统权限</h3><p>是一种功能很强的权限，它向用户提供了执行某一种或某类型的数据库操作的能力。系统权限可授权给用户或角色，一般，系统权限只授予管理人员和应用开发人员，终端用户不需要这些相关功能。</p><img src="/2022/11/27/oraclesql/image-20230207135826806.png" class="" title="image-20230207135826806"><p>（这三条没有标题写是哪个对象的权限）</p><p>无 create index权限。如果有create table权限则能够创建索引。</p><p>无truncate table/truncate any table 。（drop any table 体现）</p><p>SELECT * FROM SYSTEM_PRIVILEGE_MAP查系统权限</p><img src="/2022/11/27/oraclesql/image-20230207140605638.png" class="" title="image-20230207140605638"><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">授予系统权限<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">session</span> <span class="hljs-keyword">to</span> emi;<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">session</span> <span class="hljs-keyword">to</span> emi <span class="hljs-keyword">with</span> <span class="hljs-keyword">admin</span> <span class="hljs-keyword">option</span>;<br><span class="hljs-keyword">with</span> <span class="hljs-keyword">admin</span> <span class="hljs-keyword">option</span>:表示当授予某用户时，允许他把获得的权限授予他人。<br></code></pre></td></tr></table></figure><h3 id="对象权限"><a href="#对象权限" class="headerlink" title="对象权限"></a>对象权限</h3><p>在指定的表、视图、序列、过程、函数或包等对象上执行特殊动作的权利。</p><img src="/2022/11/27/oraclesql/image-20230208171355529.png" class="" title="image-20230208171355529"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">授予对象权限<br><span class="hljs-keyword">grant</span> object_privs(<span class="hljs-keyword">column</span>,...) <span class="hljs-keyword">on</span> object_name <span class="hljs-keyword">to</span> <span class="hljs-keyword">user</span><span class="hljs-operator">/</span>role<span class="hljs-operator">/</span>public...with <span class="hljs-keyword">grant</span> option<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">on</span> tb1 <span class="hljs-keyword">to</span> user1; user1插入table1的权限<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">insert</span>(id,name) <span class="hljs-keyword">on</span> tb1 <span class="hljs-keyword">to</span> user1;<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">execute</span> <span class="hljs-keyword">on</span> dbms_output <span class="hljs-keyword">to</span> jeff;<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> emp1 <span class="hljs-keyword">to</span> yzp;<span class="hljs-comment">--emp1表上所有的对象权限</span><br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">on</span> authors <span class="hljs-keyword">to</span> testuser1 <span class="hljs-keyword">with</span> <span class="hljs-keyword">grant</span> option<br><br>撤销权限<br><span class="hljs-keyword">Revoke</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">from</span> testuser2<br><span class="hljs-keyword">Revoke</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">on</span> authors <span class="hljs-keyword">from</span> testuser1;<br><br></code></pre></td></tr></table></figure><img src="/2022/11/27/oraclesql/image-20230208171745558.png" class="" title="image-20230208171745558"><p>验证上述：</p><img src="/2022/11/27/oraclesql/image-20230208171836177.png" class="" title="image-20230208171836177"><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">conn sys/orcl <span class="hljs-keyword">as</span> sysdba;<br>    <span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> testuser1 identified <span class="hljs-keyword">by</span> yzp;<br>    <span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> testuser2 identified <span class="hljs-keyword">by</span> yzp;<br>    <span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> testuser3 identified <span class="hljs-keyword">by</span> yzp;<br>    <span class="hljs-keyword">grant</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">session</span> <span class="hljs-keyword">to</span> testuser1 <span class="hljs-keyword">with</span> <span class="hljs-keyword">admin</span> <span class="hljs-keyword">option</span>; <br>    <span class="hljs-keyword">grant</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">session</span> <span class="hljs-keyword">to</span> testuser2;<br>    <span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">on</span> scott.emp <span class="hljs-keyword">to</span> testuser2 <span class="hljs-keyword">with</span> <span class="hljs-keyword">grant</span> <span class="hljs-keyword">option</span>;<br>conn testuser1/yzp;<br>    <span class="hljs-keyword">grant</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">session</span> <span class="hljs-keyword">to</span> testuser3;<br>/<br>conn testuser2/yzp<br>    <span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">on</span> scott.emp <span class="hljs-keyword">to</span> testuser3;<br>/<br>conn testuser3/yzp<br>    <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> scott.emp;<br>/<br>conn sys/orcl <span class="hljs-keyword">as</span> sysdba;<br>    <span class="hljs-keyword">revoke</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">session</span> <span class="hljs-keyword">from</span> testuser1;<br>    <span class="hljs-keyword">revoke</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">on</span> scott.emp <span class="hljs-keyword">from</span> testuser2;<br>/<br> conn testuser3/yzp<br>    <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> scott.emp; 报错：表/视图不存在<br>    <br><br></code></pre></td></tr></table></figure><h2 id="管理角色"><a href="#管理角色" class="headerlink" title="管理角色"></a>管理角色</h2><p>角色：是权限的集合，角色不包含在任何模式中。</p><p>（1）角色可授予系统权限或对象权限。</p><p>（2）一个角色可授权给其它角色，但<strong>不能循环授权</strong>。</p><p>（3）角色授权给用户后，可以控制是否可用；用户可以拥有多个角色</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">使用<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">ROLE</span>语句可以创建一个新的角色，执行该语句的用户必须具有<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">ROLE</span>系统权限。<br>授予权限.把角色授予给用户<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">role</span> role1;  <br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span>,<span class="hljs-keyword">update</span>,<span class="hljs-keyword">delete</span> <span class="hljs-keyword">on</span> scott.emp <span class="hljs-keyword">to</span> role1;<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">session</span> <span class="hljs-keyword">to</span> role1;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> yzp identified <span class="hljs-keyword">by</span> yzp;<br><span class="hljs-keyword">grant</span> role1 <span class="hljs-keyword">to</span> yzp;<br><br>默认只有建立角色的用户具有对该角色的管理权限。<br>可以使用以下语句，把管理角色的能力授予用户。<br><span class="hljs-keyword">Grant</span> rolename <span class="hljs-keyword">to</span> username <span class="hljs-keyword">with</span> <span class="hljs-keyword">admin</span> <span class="hljs-keyword">option</span><br>使用<span class="hljs-keyword">WITH</span> <span class="hljs-keyword">ADMIN</span> <span class="hljs-keyword">OPTION</span>为角色授予的权限不级联取消<br><br>删除角色<br>撤销用户的角色：<span class="hljs-keyword">Revoke</span> role1 <span class="hljs-keyword">from</span> yzp;<br>删除角色：<span class="hljs-keyword">drop</span> <span class="hljs-keyword">role</span> role1;<br>在删除角色前不需要撤销角色；<br>角色删除后，原来拥有该角色的用户就不再拥有该角色了，相应的权限也就没有了<br><br>查询角色信息<br>DBA_ROLES：数据库中所有角色及是否有口令<br>DBA_ROLE_PRIVS 用户（grantee）及被授予的角色(granted_role)<br>USER_ROLE_PRIVS 当前用户被授予的角色<br>ROLE_ROLE_PRIVS角色及被授予的角色<br>DBA_SYS_PRIVS所有角色和用户的系统权限<br>DBA_TAB_PRIVS所有角色和用户的对象权限<br>ROLE_SYS_PRIVS被授予角色的系统权限<br>ROLE_TAB_PRIVS被授予角色的对象权限<br>SESSION_ROLES当前会话中可用的角色<br>SESSION_PRIVS  当前会话中的系统权限 <br><br></code></pre></td></tr></table></figure><p>预定义角色</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">CONNECT 角色<br>该角色使用户可以连接数据库（<span class="hljs-keyword">create</span> session）.默认情况下，该角色不能访问其他用户的表。 <br><span class="hljs-keyword">select</span> <span class="hljs-keyword">privilege</span> <span class="hljs-keyword">from</span> dba_sys_privs <span class="hljs-keyword">where</span> grantee=<span class="hljs-string">&#x27;CONNECT&#x27;</span>;<br><br>RESOURCE 角色 —它允许用户拥有较多的系统权限，如创建触发器或存储过程。<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">privilege</span> <span class="hljs-keyword">from</span> dba_sys_privs <span class="hljs-keyword">where</span> grantee=<span class="hljs-string">&#x27;RESOURCE&#x27;</span> ;<br><br>DBA角色-管理员权限<br>允许用户拥有所有系统权限<br><br></code></pre></td></tr></table></figure><h1 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h1><p>数据库备份恢复是保证数据库安全运行的一项重要内容。</p><p>是数据库管理员的重要职责。</p><p>由于数据库的物理结构被误操作、机器硬件故障而遭到破坏，必须使用数据库的备份文件对数据库实施恢复，尽可能使用户的数据免遭损失，使数据库运行正常。</p><p>所谓备份 ，就是把数据库复制到转储设备的过程。其中，转储设备是指用于放置数据库拷贝的磁带或磁盘。 </p><img src="/2022/11/27/oraclesql/image-20230208180857105.png" class="" title="image-20230208180857105"><h2 id="逻辑备份"><a href="#逻辑备份" class="headerlink" title="逻辑备份"></a>逻辑备份</h2><p>逻辑备份是利用SQL语言从数据库中抽取数据并存于二进制文件的过程,生成文件后缀为dmp。</p><p>用导出/导入命令(Export/Import-exp/imp)导出是数据库的逻辑备份，导入是数据库的逻辑恢复。</p><p>数据库逻辑备份是物理备份的补充，适用于数据较少时，使用灵活</p><p>Oracle支持三种类型的导出:</p><p>(1)表方式，将指定表的数据导出。</p><p>(2)用户方式，将指定用户的所有对象及数据导出。</p><p>(3)全库方式，将数据库中的所有对象导出。</p><p>数据库必须处于打开状态</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><img src="/2022/11/27/oraclesql/image-20230208181120691.png" class="" title="image-20230208181120691"><h3 id="imp"><a href="#imp" class="headerlink" title="imp"></a>imp</h3><p>Import读取由Export导出的二进制转储文件并执行其中的命令。</p><p>可以导入所有或部分导出数据。</p><p>可以在IMPORT时使用FROM USER和TO USER参数来确定要导入的USER，但是要保证TO USER一定已经存在。</p><p>不加 FROMUSER和TOUSER,默认原先是谁的对象还是导给谁。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">imp scott/tiger@orcl <span class="hljs-attribute">file</span>=c:\scott_emp.dmp <span class="hljs-attribute">full</span>=y  <br>imp system/orcl@orcl <span class="hljs-attribute">file</span>=c:\scott.dmp tables=(emp,dept) fromuser=(scott) touser=(yzp)<br>imp ‘sys/orcl@orcl as sysdba’ <span class="hljs-attribute">file</span>=d:\fulldb.dmp <span class="hljs-attribute">full</span>=y <br><br>在sqlplus中命令的写法:<br><span class="hljs-variable">$exp</span> scott/tiger@orcl <span class="hljs-attribute">file</span>=c:\scott.dmp <span class="hljs-attribute">LOG</span>=c:\scott.LOG<br>Host exp scott/tiger@orcl <span class="hljs-attribute">file</span>=c:\scott.dmp <span class="hljs-attribute">LOG</span>=c:\scott.LOG<br></code></pre></td></tr></table></figure><h2 id="物理备份"><a href="#物理备份" class="headerlink" title="物理备份"></a>物理备份</h2><p>物理备份是将实际组成数据库的操作系统文件从一处拷贝到另一处的备份过程，它涉及到组成数据库的文件，但不考虑其逻辑内容。物理备份包括脱机备份（冷备份）和联机备份（热备份）两种方式。</p><h3 id="脱机备份"><a href="#脱机备份" class="headerlink" title="脱机备份"></a>脱机备份</h3><p> 主要指在正常关闭数据库的状态下进行的数据库完全备份，备份内容包括所有数据文件、控制文件、联机日志文件及参数文件（spfile）。（D:\oracle\product\10.2.0\db_1\dbs\SPFILEORCL.ORA）</p><p>脱机备份必须在数据库已经正常关闭的情况下进行，此时，系统会提供给用户一个完整的数据库</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs abnf">完全脱机备份：<br><span class="hljs-number">1</span>.关闭数据库<br>Shutdown immediate<span class="hljs-comment">;</span><br><span class="hljs-number">2</span>.利用操作系统命令将数据文件、控制文件，参数文件和联机重做日志文件复制到磁盘<br><span class="hljs-number">3</span>.重新启动数据库<br>Startup<span class="hljs-comment">;</span><br><br>恢复到备份状态<br><span class="hljs-number">1</span>.关闭数据库<br>Shutdown immediate<span class="hljs-comment">;</span><br><span class="hljs-number">2</span>.利用操作系统命令将数据文件、控制文件，联机重做日志文件和参数文件从备份复制到磁盘相应目录<br><span class="hljs-number">3</span>.重新启动数据库<br>Startup<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>优点：</p><p>（1）是非常快速的备份方法（只需拷贝文件）。</p><p>（2）容易恢复到某个时间点上（只需将文件再拷贝回去）。</p><p>（3）能与归档方法相结合，作数据库“最新状态”的恢复。</p><p>（4）低度维护，高度安全。最快和最安全的方法</p><p>缺点：</p><p>(1)单独使用时，只能提供到“某一时间点上”的恢复。</p><p>(2)在实施备份的过程中．数据库必须备份而不能做其他工作。也就是说，在冷备份过程中，数据库必须是关闭状态。</p><p>(3)若磁盘空间有限，只能拷贝到磁带等其他外部存储设备上，速度会很慢。</p><h3 id="联机备份"><a href="#联机备份" class="headerlink" title="联机备份"></a>联机备份</h3><p>完全数据库脱机备份不足之处：备份期间要关闭数据库，影响用户正常使用。</p><p>联机备份也叫热备份，是在数据库正常运行时进行，备份期间不影响用户使用。</p><p>数据库联机备份包括控制文件、数据文件、归档日志文件备份等。</p><p>联机备份由于数据库文件之间存在不同步，在备份拷回数据库时需要实施恢复。所以只能在归档模式下使用。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">数据库在archivelog方式下运行<br>联机备份步骤：<br>   将要备份的表空间设置为备份状态。<br>   备份其数据文件<br>   将表空间恢复正常状态<br>数据库可以从联机备份中完全恢复，可以通过归档重做日志回退到任一时刻。<br><br>（<span class="hljs-number">1</span>）查看数据库是否己经启动归档日志：<br>archive <span class="hljs-keyword">log</span> list;<br>（<span class="hljs-number">2</span>）如果为归档日志模式则跳过此步骤，否则打开数据库的归档日志模式，先使用shutdown <span class="hljs-keyword">immediate</span>命令关闭数据库，然后使用如下命令启动数据库：<br>startup mount;<br>修改数据库的归档日志模式：<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> archivelog;<br>（<span class="hljs-number">3</span>）查看数据库中的表空间文件：<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> v$datafile;<br>（<span class="hljs-number">4</span>）使数据库表空间处于热备份状态；<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">tablespace</span> users <span class="hljs-keyword">begin</span> backup;<br>（<span class="hljs-number">5</span>）此时可以直接将表空间数据文件复制到另一个目录中进行备份，复制完成后使用如下命令完成数据的备份：<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">tablespace</span> users <span class="hljs-keyword">end</span> backup;<br><br>恢复：<br>（<span class="hljs-number">1</span>）首先使出现问题的表空间处于脱机状态：<br><span class="hljs-keyword">SQL</span>&gt; <span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> datafile <span class="hljs-string">&#x27;E:\ORACLE\PRODUCT\10.2.0\ORADATA\ORCL\USERS01.DBF&#x27;</span> offline;<br>（<span class="hljs-number">2</span>）将原先备份的表空间文件复制到其原来所在的目录，并覆盖原有文件。<br>（<span class="hljs-number">3</span>）使用 recover命令进行介质恢复：<br><span class="hljs-keyword">SQL</span>&gt;recover datafile <span class="hljs-string">&#x27;E:\ORACLE\PRODUCT\10.2.0\ORADATA\ORCL\USERS01.DBF&#x27;</span>;<br>（<span class="hljs-number">4</span>）将表空间恢复为联机状态：<br><span class="hljs-keyword">SQL</span>&gt;<span class="hljs-keyword">alter</span> <span class="hljs-keyword">database</span> datafile<br><span class="hljs-string">&#x27;E:\ORACLE\PRODUCT\10.2.0\ORADATA\ORCL\USERS01.DBF&#x27;</span> online;<br>至此表空间数据恢复完成。<br></code></pre></td></tr></table></figure><p>由于联机备份需要消耗较多的系统资源，因此DBA应安排在数据库不使用或使用率较低的情况下进行。</p><p>优点：</p><p>（1）可在表空间或数据文件级备份，备份时间短。</p><p>（2）备份时数据库仍可使用。</p><p>（3）可达到秒级恢复（恢复到某一时间点上）。</p><p>（4）可对几乎所有数据库实体作恢复。</p><p>（5）恢复是快速的，在大多数情况下在数据库仍工作时恢复。</p><p>缺点：</p><p>（1）不能出错，否则后果严重。</p><p>（2）若联机备份不成功，所得结果不可用于时间点的恢复。</p><p>（3）较难维护，必须仔细小心，不允许失败。</p><h2 id="数据库恢复"><a href="#数据库恢复" class="headerlink" title="数据库恢复"></a>数据库恢复</h2><p>数据库恢复，就是当发生故障后，利用已备份的文件，重新建立一个完整的数据库。根据出现故障的原因，恢复分为两种类型：</p><ul><li>实例恢复：这种恢复是Oracle实例出现失败后（意外掉电，后台进程故障），Oracle自动进行的恢复。</li><li>介质恢复：针对介质故障（一个文件、一个文件的一部分或一个磁盘不能读或不能写）这种恢复是当存放数据库的介质出现故障时所做的恢复。</li></ul><img src="/2022/11/27/oraclesql/image-20230208181859607.png" class="" title="image-20230208181859607"><p>在归档方式下，根据数据库的恢复程度，将恢复方法分为两种类型：</p><p>完全恢复：将数据库恢复到数据库<strong>失败时</strong>数据库的状态。这种恢复是通过装载数据库备份并应用全部的重做日志做到的。</p><p>不完全恢复：将数据库恢复到数据库<strong>失败前的某一时刻</strong>数据库的状态。这种恢复是通过装载数据库备份并应用部分的重做日志做到的，进行不完全恢复后须在启动数据库时用 resetlogs 选项重设联机重做日志。</p><img src="/2022/11/27/oraclesql/image-20230208181946488.png" class="" title="image-20230208181946488"><img src="/2022/11/27/oraclesql/image-20230208181952881.png" class="" title="image-20230208181952881"><h2 id="导入与导出"><a href="#导入与导出" class="headerlink" title="导入与导出"></a>导入与导出</h2><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>数据库表导出到其他格式文件，如csv，用于不同数据库间数据迁移。</p><p>使用sql loader。缺点是速度比较慢</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs lasso">sqlldr userid=scott/tiger control=c:\test.ctl <span class="hljs-keyword">log</span>=c:\test.out<br>关键字<br>userid：username/password<br>control：控制文件<br><span class="hljs-keyword">log</span>：记录的日志文件<br>bad：坏数据文件<br><span class="hljs-built_in">data</span>：数据文件<br>discard：丢弃的数据文件<br>discardmax：允许丢弃数据最大值（全部默认？什么意思，默认全部可丢弃吗）<br><span class="hljs-keyword">skip</span>：Number of logical <span class="hljs-keyword">records</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">skip</span>（默认<span class="hljs-number">0</span>）<br>load：Number of logical <span class="hljs-keyword">records</span> <span class="hljs-keyword">to</span> load（全部默认）<br>errors：允许的错误记录数（默认<span class="hljs-number">50</span>）<br><span class="hljs-params">...</span>还有很多参数<br><br></code></pre></td></tr></table></figure><p><strong>控制文件</strong></p><p>控制命令的脚本文件，通常以ctl结尾，内容：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">load</span> data infile <span class="hljs-string">&#x27;t.dat&#x27;</span><br><span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> <span class="hljs-built_in">table_name</span><br>badfile <span class="hljs-string">&#x27;c:\bad.txt&#x27;</span>   <span class="hljs-comment">--可选，指定坏文件地址，缺省在当前目录下生成与原文件名一致的.bad文件</span><br><br>（四种装入表的方式：）<br>append：追加<br><span class="hljs-keyword">insert</span>：空表写入，如果原来有数据sqlldr会停止。默认<span class="hljs-keyword">insert</span>，缺省时<span class="hljs-keyword">insert</span><br>replace：原先数据会被全部删除<br><span class="hljs-keyword">truncate</span>：原先数据通过<span class="hljs-keyword">truncate</span>方式删除<br><br>fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;,&#x27;</span>/writespace（以逗号分割/空白分割） optionally enclosed <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;&#x27;&#x27;&#x27;</span>（这是？）<br><span class="hljs-keyword">trailing</span> nullcols表字段没有对应值时允许为空<br>(<br>col1,col2<br>)<br></code></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stata">【<span class="hljs-keyword">test</span>.ctl】文件<br>LOAD DATA<br><span class="hljs-keyword">INFILE</span> &#x27;c:/data1.txt&#x27;<br><span class="hljs-keyword">Append</span><br>INTO <span class="hljs-keyword">TABLE</span> dept<br>Fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&quot;,&quot;</span><br>(<br>deptno,dname,<span class="hljs-keyword">loc</span><br>)<br><br>sqlldr userid=scott/tiger@orcl control=c:\<span class="hljs-keyword">test</span>.ctl <span class="hljs-keyword">log</span>=c:\<span class="hljs-keyword">test</span>.<span class="hljs-keyword">out</span><br></code></pre></td></tr></table></figure><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">sql</span> plus下执行<br>spool D:\<span class="hljs-keyword">out</span>.csv<br><span class="hljs-keyword">select</span> ename||<span class="hljs-string">&#x27;,&#x27;</span>||job||<span class="hljs-string">&#x27;,&#x27;</span>||sal <span class="hljs-keyword">from</span> emp;<br>spool <span class="hljs-keyword">off</span><br>然后输出的语句都导入到<span class="hljs-keyword">out</span>.csv中<br><br>setheading <span class="hljs-keyword">off</span> pages <span class="hljs-number">0</span>不显示表头<br><span class="hljs-keyword">set</span> feedback <span class="hljs-keyword">off</span>不显示行数信息<br>然后打开csv编辑一下<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-1：考的还行？只能说是立项导师的仁慈（&lt;/p&gt;
&lt;p&gt;知识散的不得了，我也不知道到底怎么复习好，就尽量看吧&lt;/p&gt;
&lt;h1 id=&quot;1sql-plus命令&quot;&gt;&lt;a href=&quot;#1sql-plus命令&quot; class=&quot;headerlink&quot; title=&quot;1sql plu</summary>
      
    
    
    
    
    <category term="review" scheme="https://github.com/sterne012/sterne012.github.io/tags/review/"/>
    
    <category term="sql" scheme="https://github.com/sterne012/sterne012.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/11/22/net/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/11/22/net/</id>
    <published>2022-11-22T07:31:56.000Z</published>
    <updated>2023-03-20T07:26:38.221Z</updated>
    
    <content type="html"><![CDATA[<p>-1：寄——了——，虽然寄了，但是也挺喜欢这科的（</p><h1 id="Chapter1-概述"><a href="#Chapter1-概述" class="headerlink" title="Chapter1.概述"></a>Chapter1.概述</h1><p>1、理解边缘网络与核心网络、理解电路交换和分组交换、面向连<br>    接的服务与无连接、客户服务器方式与对等方式的概念。</p><p>2、理解协议与网络体系结构；</p><p>3、理解分层的网络体系结构，理解协议及服务的概念；</p><p>4、理解数据封装与拆装的过程；</p><p>5、理解TCP/IP体系结构及五层体系结构；</p><p>6、掌握衡量网络性能的几个指标：</p><p>  速率、带宽、吞吐量、时延（发送时延、传播时延、排队时延、处理时延）、往返时延、时延带宽积</p><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><p>计算机网络发展：</p><ol><li>第一代，面向终端的计算机通信网络，首次将计算机与通信技术结合起来</li><li>第二代，初级计算机网络，实现交换：数据在网络节点之间转接的过程</li><li>第三代，</li></ol><p>交换方式：电路交换，报文交换，分组交换。</p><h3 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h3><p>circuit switching</p><img src="net/image-20230124155050371.png" alt="image-20230124155050371" style="zoom:67%;" /><img src="net/image-20230124155100274.png" alt="image-20230124155100274" style="zoom:67%;" /><img src="net/image-20230124160253737.png" alt="image-20230124160253737" style="zoom:67%;" /><h3 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h3><img src="net/image-20230124160551812.png" alt="image-20230124160551812" style="zoom:67%;" /><h3 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h3><p>对报文交换的优化，设置长度上限变为分组</p><img src="net/image-20230124160639629.png" alt="image-20230124160639629" style="zoom:67%;" /><p>分组交换优点：</p><ol><li>高效，动态分配传输带宽，对通信链路逐段占用</li><li>灵活，以分组为传送单位独立路由</li><li>迅速，不必先建立连接就能向其他主机发送分组</li></ol><p>缺点：</p><ol><li>某些分组传丢，兜圈子等等，导致分组乱序到达</li><li>各分组携带的首部造成一定的开销</li><li>可靠性较电路交换较低</li></ol><img src="net/image-20230124160951855.png" alt="image-20230124160951855" style="zoom:67%;" /><p>比较</p><ul><li>若要连续传送大量的数据，且其传送时间远大于连接建立时间，则电路交换的传输速率较快。</li><li>报文交换和分组交换不需要预先分配传输带宽，在传送突发数据时可提高整个网络的信道利用率。</li><li>由于一个分组的长度往往远小于整个报文的长度，因此分组交换比报文交换的时延小，同时也具有更好的灵活性。</li></ul><h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><p>两台或多台主机之间要想传递数据、彼此理解，需要解决复杂的问题。1将复杂问题分为若干层，2并定义每层解决哪些问题，就是体系结构需要解决的两个问题。</p><p>网络要划分为几层、以及每层功能的解释就是网络的体系结构</p><p>意义在于，如果任何两台计算机遵从相同的体系结构，那么两者间一定可以实现互连，反之成立</p><p>协议：进行网络中数据交换而建立的规则、标准或约定，即网络协议，简称协议</p><img src="net/image-20230124162545436.png" alt="image-20230124162545436" style="zoom:67%;" /><h2 id="Internet"><a href="#Internet" class="headerlink" title="Internet"></a>Internet</h2><p>互连网：局部范围互连起来的网络，internet。</p><p>互联网：世界上最大的计算机网络，Internet。由数量极大的各种计算机网络互连起来</p><h2 id="互联网的组成"><a href="#互联网的组成" class="headerlink" title="互联网的组成"></a>互联网的组成</h2><img src="net/image-20230124163912449.png" alt="image-20230124163912449" style="zoom:67%;" /><h3 id="边缘部分"><a href="#边缘部分" class="headerlink" title="边缘部分"></a>边缘部分</h3><p>由所有连接在互联网上的主机组成，又称端系统，在功能上可能存在很大差别。这部分是用户直接使用的，用来进行通信（传送数据、音频或视频）和资源共享</p><p>端系统之间通信：“主机 A 和主机 B 进行通信”实际上是指：“运行在主机 A 上的某个程序和运行在主机 B 上的另一个程序进行通信”。通过传输层和应用层的程序进行通信。</p><p>端系统两种通信方式：</p><p>客户-服务器方式C/S</p><p>客户软件：被用户调用后运行，在打算通信时主动向远地服务器发起通信（请求服务）。因此，客户程序必须知道服务器程序的地址。不需要特殊的硬件和很复杂的操作系统。</p><p>服务器软件：专门用来提供某种服务的程序，可同时处理多个远地或本地客户的请求。系统启动后即自动调用并一直不断地运行着，被动地等待并接受来自各地的客户的通信请求。因此，服务器程序不需要知道客户程序的地址。一般需要强大的硬件和高级的操作系统支持。客户与服务器的通信关系建立后，通信可以是双向的，客户和服务器都可发送和接收数据。</p><p>对等方式P2P</p><p>对等连接 (peer-to-peer，简写为 P2P) 是指两个主机在通信时并不区分哪一个是服务请求方还是服务提供方。只要两个主机都运行了对等连接软件 (P2P 软件) ，它们就可以进行平等的、对等连接通信。双方都可以下载对方已经存储在硬盘中的共享文档。对等连接工作方式可支持大量对等用户（如上百万个）同时工作。</p><h3 id="核心部分"><a href="#核心部分" class="headerlink" title="核心部分"></a>核心部分</h3><p>由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的（提供连通性和交换）</p><p>路由器：实现分组交换，转发收到的分组，将网络互联起来。</p><p>计算机网络的定义：计算机网络主要是由一些通用的、可编程的硬件互连而成的，而这些硬件并非专门用来实现某一特定目的（例如，传送数据或视频信号）。这些可编程的硬件能够用来传送多种不同类型的数据，并能支持广泛的和日益增长的应用。</p><p>根据这个定义：</p><p>(1) 计算机网络所连接的硬件，并不限于一般的计算机，而是包括了智能手机。</p><p>(2) 计算机网络并非专门用来传送数据，而是能够支持很多种的应用（包括今后可能出现的各种应用）。</p><h2 id="网络分类"><a href="#网络分类" class="headerlink" title="网络分类"></a>网络分类</h2><h3 id="作用范围-组网协议分类"><a href="#作用范围-组网协议分类" class="headerlink" title="作用范围/组网协议分类"></a>作用范围/组网协议分类</h3><img src="net/image-20230125112906854.png" alt="image-20230125112906854" style="zoom:67%;" /><h3 id="网络使用者分类"><a href="#网络使用者分类" class="headerlink" title="网络使用者分类"></a>网络使用者分类</h3><p>公用网 (public network) ：按规定交纳费用的人都可以使用的网络。因此也可称为公众网。</p><p>专用网 (private network) ：为特殊业务工作的需要而建造的网络。</p><p>接入网 AN (Access Network)，它又称为本地接入网或居民接入网。</p><ul><li>接入网是一类比较特殊的计算机网络，用于将用户接入互联网。</li><li>接入网本身既不属于互联网的核心部分，也不属于互联网的边缘部分。</li><li>接入网是从某个用户端系统到互联网中的第一个路由器（也称为边缘路由器）之间的一种网络。</li><li>从覆盖的范围看，很多接入网还是属于局域网。</li><li>从作用上看，接入网只是起到让用户能够与互联网连接的“桥梁”作用。</li></ul><h2 id="网络性能指标"><a href="#网络性能指标" class="headerlink" title="网络性能指标"></a>网络性能指标</h2><h3 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h3><p>bit/s，单位时间内网络中的某信道所能通过的最高数据率。</p><h3 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h3><p>指信号具有的频带宽度，单位是赫。频域上的单位。</p><p>能够通过的最大频率是多少?</p><p>但是习惯上速率的定义也可以叫带宽，时域意义上。</p><h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><p>单位时间内通过某个网络（或信道、接口）的数据量。一般单位也是bit/s</p><h3 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h3><p>数据从一端传送到另一端所需的时间。是如下四种的和。</p><h4 id="发送时延"><a href="#发送时延" class="headerlink" title="发送时延"></a>发送时延</h4><p>通常为主要时延</p><p>也称传输时延，发送数据时，数据帧从节点接入到传输媒体所需要的时间。</p><p>从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间。</p><img src="net/image-20230126105320044.png" alt="image-20230126105320044" style="zoom:67%;" /><h4 id="传播时延"><a href="#传播时延" class="headerlink" title="传播时延"></a>传播时延</h4><p>电磁波在信道中需要传播一定的距离而花费的时间。普通网络中可忽略不计，卫星中不能</p><img src="net/image-20230126105837163.png" alt="image-20230126105837163" style="zoom:67%;" /><h4 id="处理时延"><a href="#处理时延" class="headerlink" title="处理时延"></a>处理时延</h4><p>主机或路由器在收到分组时，为处理分组（例如分析首部、提取数据、差错检验或查找路由）所花费的时间。</p><h4 id="排队时延"><a href="#排队时延" class="headerlink" title="排队时延"></a>排队时延</h4><p>分组在路由器输入输出队列中排队等待处理所经历的时延。排队时延的长短往往取决于网络中当时的通信量。</p><p>处理时延&amp;排队时延太长，数据拥堵，易丢包/超时，应当提升路由器性能。</p><img src="net/image-20230126110738204.png" alt="image-20230126110738204" style="zoom:67%;" /><img src="net/image-20230126110833231.png" alt="image-20230126110833231" style="zoom:67%;" /><h3 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h3><p>你是？</p><p>链路的时延带宽积又称为以比特为单位的链路长度</p><img src="net/image-20230126110930715.png" alt="image-20230126110930715" style="zoom:50%;" /><h3 id="往返时间RTT"><a href="#往返时间RTT" class="headerlink" title="往返时间RTT"></a>往返时间RTT</h3><p>表示从发送方发送数据开始，到发送方收到来自接收方的确认，总共经历的时间。</p><p>往返时间包括各中间节点的处理时延、排队时延以及转发数据的发送时延。</p><h3 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h3><p>信道利用率并非越高越好。当某信道的利用率增大时，该信道引起的时延也就迅速增加。分以下两种</p><h4 id="信道利用率"><a href="#信道利用率" class="headerlink" title="信道利用率"></a>信道利用率</h4><p>指出某信道有百分之几的时间是被利用的（有数据通过）。完全空闲的信道的利用率是零。</p><h4 id="网络利用率"><a href="#网络利用率" class="headerlink" title="网络利用率"></a>网络利用率</h4><p>全网络的信道利用率的加权平均值。</p><h4 id="时延与网络利用率的关系"><a href="#时延与网络利用率的关系" class="headerlink" title="时延与网络利用率的关系"></a>时延与网络利用率的关系</h4><img src="net/image-20230126111518595.png" alt="image-20230126111518595" style="zoom: 50%;" /><h3 id="各层主要功能"><a href="#各层主要功能" class="headerlink" title="各层主要功能"></a>各层主要功能</h3><h4 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h4><p>物理层的任务就是透明地传送比特流。</p><p>物理层所传数据的单位是比特。</p><p>物理层不是介质层。</p><h4 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h4><p>数据链路层的任务是在两个相邻结点间的线路上提供以帧为单位的可靠性数据传输。</p><p>数据链路层所传数据的单位是帧。</p><h4 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h4><p>网络层负责为互联网上的不同主机提供通信。</p><p>完成路由选择、拥塞控制和网络互连。</p><p>IP协议是网络互连的关键协议。</p><p>网络层所传数据的单位是分组/数据报。</p><h4 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h4><p>运输层的任务是负责主机中两个进程之间的通信。</p><p>运输层可使用面向连接的传输控制协议TCP和无连接的用户数据报协议UDP。 </p><p>运输层为应用层屏蔽下层的通信细节。</p><p>运输层所传数据的单位是数据报/报文段。</p><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><p>应用层是体系结构中的最高层，直接为用户的应用进程提供服务。</p><p>应用层确定进程之间通信的性质以满足用户的需要（这反映在用户所产生的服务请求）。</p><p>应用层所传数据的单位是报文。</p><p>应用层协议很丰富，如：HTTP, SMTP, DNS, FTP etc.</p><h3 id="协议-amp-服务"><a href="#协议-amp-服务" class="headerlink" title="协议&amp;服务"></a>协议&amp;服务</h3><p>实体 (entity) 表示任何可发送或接收信息的硬件或软件进程。</p><p>协议（protocol）是控制两个对等实体进行通信的规则的集合。 协议的实现保证了能够向上一层提供服务。</p><p>服务(service)是本层的功能。</p><ul><li>协议是服务的实现。</li><li>本层协议，向上一层提供服务。</li><li>要实现本层协议，还需要使用下层所提供的服务。 </li></ul><p>本层的服务用户只能看见服务而无法看见下面的协议。即下面的协议对上面的服务用户是透明的。 </p><p>协议是“水平的”，即协议是控制对等实体之间通信的规则。</p><p>服务是“垂直的”，即服务是由下层向上层通过层间接口提供的。</p><p>同一系统相邻两层的实体进行交互的地方，称为服务访问点 SAP (Service Access Point)。 </p><p>服务访问点SAP是一个抽象的概念，它实际上就是一个逻辑接口。</p><p>OSI把层与层之间交换的数据的单位称为服务数据单元 SDU (Service Data Unit)。</p><img src="net/image-20230126115434481.png" alt="image-20230126115434481" style="zoom:67%;" /><h1 id="Chapter2-物理层"><a href="#Chapter2-物理层" class="headerlink" title="Chapter2.物理层"></a>Chapter2.物理层</h1><p>本章要求：</p><ol><li><p>理解物理层的功能</p></li><li><p>掌握有关信道的几个基本概念</p></li><li><p>掌握信道的最高码元传输速率和极限信息传输速率</p></li><li><p>掌握物理层下面的传输媒体（双绞线、光纤）</p></li><li><p>掌握模拟传输与数字传输（几种调制方法）</p></li><li><p>掌握信道复用技术</p><p>频分复用、时分复用和统计时分复用、 波分复用、码分复用</p></li><li><p>了解同步光纤网 SONET 和同步数字系列 SDH</p></li><li><p>了解几种宽带接入技术：ADSL,HFC,FTTx</p></li></ol><h2 id="数据通信系统"><a href="#数据通信系统" class="headerlink" title="数据通信系统"></a>数据通信系统</h2><p>透明性：</p><ol><li>屏蔽掉不同传输媒体差异，使数据链路层感受不到这种差异。（物理层作用）</li><li>关心如何在传输媒体上传输bit流，而不关心具体的传输媒体/通信介质，不关心流的实际含义。（物理层关心的）</li></ol><p>物理层协议也叫物理层规程procedure</p><p>物理层的主要任务描述为确定与传输媒体的接口的一些特性：</p><ul><li>机械特性  指明接口所用接线器的形状和尺寸、引线数目和排列、固定和锁定装置等等。</li><li>电气特性  指明在接口电缆的各条线上出现的电压的范围。</li><li>功能特性  指明某条线上的某一电平的电压表示何种意义。</li><li>规程特性  指明对于不同功能的各种可能事件的出现顺序。 </li></ul><p>消息：语音、文字、图像…</p><p>数据：运送消息的实体。有意义的符号序列</p><p>信号：数据的电气的或电次的表现。分为：</p><ul><li>模拟信号：所代表消息的参数取值是连续的，例如语音（电话网络）</li><li>数字信号：所代表消息的参数取值是离散的，计算机中</li></ul><p>基带信号/基本频带信号：来自信源的信号。含有较多的低频部分，甚至直流成分。</p><p>调制：信号波形的变换，编码的过程</p><ul><li>基带调制：仅对基带信号的波形进行变换，把数字信号转换为另一种形式的<strong>数字信号</strong>。把这种过程称为编码 (coding)。</li><li>带通调制：使用载波 (carrier)进行调制，把基带信号的频率范围搬移到较高的频段，并转换为<strong>模拟信号</strong>。经过载波调制后的信号称为带通信号（即仅在一段频率范围内能够通过信道）。</li><li>脉冲编码调制：模拟信号-&gt;数字信号</li></ul><img src="net/image-20230126170242918.png" alt="image-20230126170242918" style="zoom:67%;" /><p>信道：自信源到信宿之间传递信号的路径。一般指表示向某一个方向传送信息的媒体。信道是一个逻辑概念，不同于物理链路。1-2之间传递信息，可以有多条信道，同时传递信息。</p><p>单向通信（单工通信）：只能有一个方向的通信而没有反方向的交互。</p><p>双向交替通信（半双工通信）：通信的双方都可以发送信息，但<strong>不能双方同时</strong>发送(当然也就不能同时接收)。</p><p>双向同时通信（全双工通信）：通信的双方可以<strong>同时</strong>发送和接收信息。</p><p>码元(code)：在使用时间域（或简称为时域）的波形表示数字信号时，代表不同离散数值的基本波形。</p><p>码元传送速率（波特率）：单位时间内通过信道的波形数。单位：波特Baud (1 波特为每秒传送 1 个码元)。</p><img src="net/image-20230126173547324.png" alt="image-20230126173547324" style="zoom:67%;" /><img src="net/image-20230126174338180.png" alt="image-20230126174338180" style="zoom:67%;" /><p>提高数据率：提高k或B</p><h2 id="数据编码方法"><a href="#数据编码方法" class="headerlink" title="数据编码方法"></a>数据编码方法</h2><h3 id="1基带调制"><a href="#1基带调制" class="headerlink" title="1基带调制"></a>1基带调制</h3><h4 id="1-1不归零制"><a href="#1-1不归零制" class="headerlink" title="1.1不归零制"></a>1.1不归零制</h4><img src="net/image-20230127095639153.png" alt="image-20230127095639153" style="zoom:67%;" /><h4 id="1-2归零制"><a href="#1-2归零制" class="headerlink" title="1.2归零制"></a>1.2归零制</h4><img src="net/image-20230127095844486.png" alt="image-20230127095844486" style="zoom: 67%;" /><h4 id="1-3曼彻斯特编码"><a href="#1-3曼彻斯特编码" class="headerlink" title="1.3曼彻斯特编码"></a>1.3曼彻斯特编码</h4><img src="net/image-20230127095855416.png" alt="image-20230127095855416" style="zoom:67%;" /><h4 id="1-4差分曼彻斯特编码"><a href="#1-4差分曼彻斯特编码" class="headerlink" title="1.4差分曼彻斯特编码"></a>1.4差分曼彻斯特编码</h4><img src="net/image-20230127095904073.png" alt="image-20230127095904073" style="zoom:67%;" /><p>从信号波形中可以看出，曼彻斯特编码和差分曼彻斯特编码产生的信号频率比不归零制高。</p><p>从自同步能力来看，不归零制不能从信号波形本身中提取信号时钟频率（没有自同步能力），而曼彻斯特编码和差分曼彻斯特编码具有自同步能力。</p><h3 id="2带通调制"><a href="#2带通调制" class="headerlink" title="2带通调制"></a>2带通调制</h3><p>对选取的载波信号进行波形改变</p><img src="net/image-20230127144223587.png" alt="image-20230127144223587" style="zoom:67%;" /><p>调幅(AM)：载波的振幅随基带数字信号而变化。 A</p><p>调频(FM)：载波的频率随基带数字信号而变化。ω</p><p>调相(PM)：载波的初始相位随基带数字信号而变化。φ </p><p>多相调制：同时改变相位、振幅或频率中的两个参数，形成多种波形，携带多位信息，提高数据率。</p><p>正交调制QAM</p><img src="net/image-20230127144954768.png" alt="image-20230127144954768" style="zoom:67%;" /><p>不是码元越多越好。每个码元携带的比特数越多，则在接收端进行解调时要正确识别每一种状态就越困难，出错率增加。码元携带的比特数k的提升是有上限的。</p><h2 id="信道"><a href="#信道" class="headerlink" title="信道"></a>信道</h2><p>任何实际的信道都不是理想的，都不可能以任意高的速率进行传送。</p><p>码元传输的速率越高，或信号传输的距离越远，或噪声干扰越大，或传输媒体质量越差，在接收端的波形的失真就越严重。</p><img src="/2022/11/22/net/image-20230127145058560.png" class="" title="image-20230127145058560"><h3 id="频率范围"><a href="#频率范围" class="headerlink" title="频率范围"></a>频率范围</h3><p>具体的信道所能通过的频率范围总是有限的。信号中的许多高频分量往往不能通过信道。</p><p>码间串扰：信号中的高频分量传输时受到衰减，接收端收到的波形的前沿和后沿不那么陡峭，每个码元所占的时间界限不再清晰明显，而是前后拖着“尾巴”，有一定的拖延，使得原本清晰的一串码元变得模糊而无法识别。</p><p>码间串扰与信道带宽有关，越宽，串扰越少；越窄，串扰越大。</p><h3 id="信噪比"><a href="#信噪比" class="headerlink" title="信噪比"></a>信噪比</h3><p>信号功率和噪音功率的比值。</p><h4 id="奈奎斯特准则"><a href="#奈奎斯特准则" class="headerlink" title="奈奎斯特准则"></a>奈奎斯特准则</h4><p>码元传输的最高速率=2W（码元/s）</p><p>在带宽为W（Hz）的低通信道中，若不考虑噪声影响，码元传输速率最高是2W。</p><p>适用条件：</p><ul><li>理想信道，不考虑任何噪声和干扰</li><li>低通信道，最低0Hz，最高W Hz。</li></ul><p>说明：</p><ul><li>在任何信道中，码元传输的速率是有上限的，否则就会出现码间串扰的问题，使接收端对码元的判决（即识别）成为不可能。</li><li>如果信道的频带越宽，也就是能够通过的信号高频分量越多，那么就可以用更高的速率传送码元而不出现码间串扰。 </li></ul><p>信噪比就是信号的平均功率和噪声的平均功率之比。常记为 <em>S</em>/<em>N</em>，并用分贝 (dB) 作为度量单位。即：</p><p>信噪比(dB) = 10 log10(<em>S</em>/<em>N</em>)  </p><p>S：信号的平均功率；N：噪声平均功率</p><p>例如，当 <em>S</em>/<em>N</em> = 10 时，信噪比为 10 dB，而当 <em>S</em>/<em>N</em> = 1000时，信噪比为 30 dB。 </p><ul><li>噪声是随机产生的，它的瞬时值有时会很大。因此噪声会使接收端对码元的判决产生错误。</li><li>但噪声的影响是相对的。如果信号相对较强，那么噪声的影响就相对较小。</li></ul><h3 id="极限信息传输速率"><a href="#极限信息传输速率" class="headerlink" title="极限信息传输速率"></a>极限信息传输速率</h3><p>香农公式：1948年，香农(Shannon)用信息论的理论推导出了带宽受限且有高斯白噪声干扰的信道的极限、无差错的信息传输速率。</p><p>信道的极限信息传输速率 <em>C</em> 可表达为：单位bit/s</p><img src="net/image-20230127151840674.png" alt="image-20230127151840674" style="zoom: 67%;" /><p><em>W</em> 为信道的带宽（以 Hz 为单位）；<em>S</em> 为信道内所传信号的平均功率；<em>N</em> 为信道内部的高斯噪声功率。 </p><p>表明：</p><ul><li>信道的带宽或信道中的信噪比越大，则信息的极限传输速率就越高。 </li><li>若信道带宽 <em>W</em> 或信噪比 <em>S</em>/<em>N</em> 没有上限（当然实际信道不可能是这样的），则信道的极限信息传输速率 <em>C</em> 也就没有上限。</li><li>只要信息传输速率低于信道的极限信息传输速率，就一定可以找到某种办法来实现无差错的传输。</li><li>实际信道上能够达到的信息传输速率要比香农的极限传输速率低不少。 </li></ul><img src="net/image-20230127152250689.png" alt="image-20230127152250689" style="zoom:67%;" /><h2 id="物理层下面的传输媒体"><a href="#物理层下面的传输媒体" class="headerlink" title="物理层下面的传输媒体"></a>物理层下面的传输媒体</h2><p>传输媒体也称为传输介质或传输媒介，它就是数据传输系统中在发送器和接收器之间的物理通路。</p><p>传输媒体可分为两大类：</p><ul><li>导引型传输媒体，常称为有线媒体。电磁波被导引沿着固体媒体（铜线或光纤）传播。</li><li>非导引型传输媒体，常称为无线媒体，指自由空间，电磁波的传输常称为无线传输。</li></ul><img src="net/image-20230127152731240.png" alt="image-20230127152731240" style="zoom:67%;" /><h3 id="导引型传输媒体"><a href="#导引型传输媒体" class="headerlink" title="导引型传输媒体"></a>导引型传输媒体</h3><h4 id="1双绞线"><a href="#1双绞线" class="headerlink" title="1双绞线"></a>1双绞线</h4><p>最常用的引导型传输媒体。把两根互相绝缘的铜导线并排放在一起，然后用规则的方法绞合 (twist) 起来就构成了双绞线。绞合度越高，可用的数据传输率越高。</p><h5 id="无屏蔽双绞线UTP"><a href="#无屏蔽双绞线UTP" class="headerlink" title="无屏蔽双绞线UTP"></a>无屏蔽双绞线UTP</h5><p>UTP：Unshielded Twisted Pair</p><p>无屏蔽层，价格便宜，方便，常用</p><h5 id="屏蔽双绞线STP"><a href="#屏蔽双绞线STP" class="headerlink" title="屏蔽双绞线STP"></a>屏蔽双绞线STP</h5><p>Shielded Twisted Pair</p><p>有屏蔽层，需接地，更好屏蔽电磁干扰，重、粗</p><img src="/2022/11/22/net/image-20230127153340015.png" class="" title="image-20230127153340015"><img src="net/image-20230127153332197.png" alt="image-20230127153332197" style="zoom:67%;" /><p> x/UTP：对整条双绞线电缆进行屏蔽。</p><p> F/UTP (F=Foiled)：表明采用铝箔屏蔽层。</p><p> S/UTP (S=braid Screen)：表明采用金属编织层进行屏蔽。</p><p> SF/UTP：表明在铝箔屏蔽层外面再加上金属编织层的屏蔽。</p><p> FTP 或 U/FTP：把电缆中的每一对双绞线都加上铝箔屏蔽层。U表明对整条电缆不另增加屏蔽层</p><p> F/FTP：在 FTP 基础上对整条电缆再加上铝箔屏蔽层。</p><p> S/FTP：在 FTP 基础上对整条电缆再加上金属编织层的屏蔽。</p><img src="net/image-20230127153509425.png" alt="image-20230127153509425" style="zoom:50%;" /><h5 id="双绞线标准"><a href="#双绞线标准" class="headerlink" title="双绞线标准"></a>双绞线标准</h5><img src="/2022/11/22/net/image-20230127153607631.png" class="" title="image-20230127153607631"><p>更常用568B型。B型中，12负责发送数据，36接收数据，其他是冗余，负责校验等？</p><p>B-B两头一样：直通线，主机—路由器/交换机</p><p>A-B两头不一样：交叉线，主机—主机，交换机—交换机</p><p>？还挺重要</p><img src="/2022/11/22/net/image-20230127153901515.png" class="" title="image-20230127153901515"><h4 id="2同轴电缆"><a href="#2同轴电缆" class="headerlink" title="2同轴电缆"></a>2同轴电缆</h4><p>由内导体铜质芯线（单股实心线或多股绞合线）、绝缘层、网状编织的外导体屏蔽层（也可以是单股的）以及保护塑料外层所组成。</p><p>主要用于有线电视、较高速率数据传输</p><img src="net/image-20230127154014136.png" alt="image-20230127154014136" style="zoom:67%;" /><p>性能评价：成本比双绞线高、易安装性比双绞线差、抗干扰性低比双绞线强，最大带宽接近1GHz</p><h4 id="3光纤"><a href="#3光纤" class="headerlink" title="3光纤"></a>3光纤</h4><p>光纤是光纤通信的传输媒体通过传递光脉冲来进行通信。</p><p>其传输带宽远远大于目前其他各种传输媒体的带宽。</p><p>一个完整的光传输系统：</p><ul><li>发送端：光源 （发光二极管、半导体激光器）          </li><li>接收端：检测器（光电二极管）</li></ul><p>工作原理：高折射率介质到低折射率介质，入射角小，折射角大，在一定角度下发生全反射，不断地全反射以传递信息。</p><img src="net/image-20230127154303897.png" alt="image-20230127154303897" style="zoom: 50%;" /><img src="net/image-20230127154315331.png" alt="image-20230127154315331" style="zoom:67%;" /><h5 id="多模光纤"><a href="#多模光纤" class="headerlink" title="多模光纤"></a>多模光纤</h5><p>只要入射角大于临界角度，可以存在多条不同角度入射的光线在一条光纤中传输。</p><p>光脉冲在多模光纤中传输时会逐渐展宽，造成失真，只适合于近距离传输。</p><img src="net/image-20230127154353407.png" alt="image-20230127154353407" style="zoom:67%;" /><h5 id="单模光纤"><a href="#单模光纤" class="headerlink" title="单模光纤"></a>单模光纤</h5><p>将纤芯直径减小到只有一个光的波长（几个微米），可使光线一直向前传播，而不会产生多次反射。</p><p>制造成本较高，但衰耗较小。</p><p>光源要使用昂贵的半导体激光器，不能使用较便宜的发光二极管。</p><img src="net/image-20230127154419888.png" alt="image-20230127154419888" style="zoom:67%;" /><img src="net/image-20230127154451893.png" alt="image-20230127154451893" style="zoom:67%;" /><p>优点：</p><p>（1）通信容量非常大</p><p>（2）传输损耗小，中继距离长，对远距离传输特别经济。</p><p>（3）抗雷电和电磁干扰性能好。这在有大电流脉冲干扰的环境下尤为重要。</p><p>（4）无串音干扰，保密性好，也不易被窃听或截取数据。</p><p>（5）体积小，重量轻。</p><p>缺点：成本高。但目前工艺成熟，价格降低，已经普遍采用</p><h3 id="非导引型传输媒体"><a href="#非导引型传输媒体" class="headerlink" title="非导引型传输媒体"></a>非导引型传输媒体</h3><p>（无线介质、自由介质）不能够将信号约束在某个固定的媒体中，就是无线传输捏。主要使用微波波段</p><p><strong>多径效应</strong>：基站发出的信号可以经过多个障碍物的数次反射，从多条路径、按不同时间等到达接收方。多条路径的信号叠加后一般都会产生很大的失真。</p><p>特点：</p><p>(1) 微波波段频率很高，频段范围很宽，其通信信道的容量很大。</p><p>(2) 工业干扰和天电干扰对微波通信的危害小，微波传输质量较高。</p><p>(3) 与相同容量和长度的电缆载波通信比较，微波接力通信建设投资少，见效快，易于实施。</p><p>缺点：</p><p>(1) 相邻站之间必须直视（常称为视距 LOS (Line Of Sight)），不能有障碍物，存在多径效应。</p><p>(2) 有时会受到恶劣气候的影响。</p><p>(3) 与电缆通信系统比较，微波通信的隐蔽性和保密性较差。</p><p>(4) 对大量中继站的使用和维护要耗费较多的人力和物力。</p><p>卫星通信：</p><ol><li>通信容量大，通信距离远，通信比较稳定，通信费用与通信距离无关。</li><li>但传播时延较大：在 250~300 ms之间。</li><li>请注意：“卫星信道的传播时延较大”并不等于“用卫星信道传送数据的时延较大”。</li><li>保密性相对较差。</li><li>造价较高。</li></ol><h2 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h2><p>允许用户使用一个共享信道进行通信</p><h3 id="频分复用"><a href="#频分复用" class="headerlink" title="频分复用"></a>频分复用</h3><p>频率不同</p><p>将信道的可用频带分为若干子频带。相邻子频带之间留有临界保护频带。将不同用户的信号分别调制到这些子频带上。信道上同时传输多路信号。所有用户在同样的时间占用不同的带宽资源。频分复用适用于模拟传输。</p><h3 id="时分复用TDM"><a href="#时分复用TDM" class="headerlink" title="时分复用TDM"></a>时分复用TDM</h3><p>时隙，交替</p><p>将信道的可用时间分为若干时隙;将这些时隙平分给不同用户的信号;每路信号交替占用信道资源;所有用户在不同的时间占用同样的频带宽度;TDM 信号也称为等时 (isochronous) 信号;时分复用适用于数字传输</p><img src="net/image-20230127160156351.png" alt="image-20230127160156351" style="zoom:67%;" /><p>导致信道利用率不高，有些人占地方不发信息</p><img src="/2022/11/22/net/image-20230127160334491.png" class="" title="image-20230127160334491"><h3 id="统计时分复用STDM"><a href="#统计时分复用STDM" class="headerlink" title="统计时分复用STDM"></a>统计时分复用STDM</h3><p>统计时分复用 STDM 是对时分复用的一种改进。使用统计时分复用 STDM帧传送复用数据；时隙数可以不同于用户数。用户有了数据即发往集中器缓存（队列），集中器扫描缓存，将其中数据放入STDM帧，放满即可发送出去。</p><img src="/2022/11/22/net/image-20230127161156528.png" class="" title="image-20230127161156528"><ul><li> 统计时分复用不是平均分配时隙，而是按需分配时隙，明显提高信道的利用率。</li><li> STDM帧的时隙中包括用户地址信息，集中器的设计为具有更多智能性，加入许多控制信息，开销增大。</li><li> STDM不适合于用户数据均衡且重负载的通信。</li><li> 统计复用又称为异步时分复用，而普通的时分复用称为同步时分复用。</li></ul><h3 id="波分复用WDM"><a href="#波分复用WDM" class="headerlink" title="波分复用WDM"></a>波分复用WDM</h3><p>光纤使用不同的波长，是光的频分复用</p><h3 id="码分复用CDM-码分多址CDMA"><a href="#码分复用CDM-码分多址CDMA" class="headerlink" title="码分复用CDM/码分多址CDMA"></a>码分复用CDM/码分多址CDMA</h3><p>重要，但是想找题理解一下</p><img src="net/image-20230128112900474.png" alt="image-20230128112900474" style="zoom:67%;" /><img src="net/image-20230128112923064.png" alt="image-20230128112923064" style="zoom:67%;" /><img src="net/image-20230128112932589.png" alt="image-20230128112932589" style="zoom:67%;" /><h2 id="数字传输系统"><a href="#数字传输系统" class="headerlink" title="数字传输系统"></a>数字传输系统</h2><h3 id="脉码调制PCM"><a href="#脉码调制PCM" class="headerlink" title="脉码调制PCM"></a>脉码调制PCM</h3><img src="net/image-20230128114458412.png" alt="image-20230128114458412" style="zoom:67%;" /><h3 id="同步光纤网SONET-amp-同步数字系列SDH"><a href="#同步光纤网SONET-amp-同步数字系列SDH" class="headerlink" title="同步光纤网SONET&amp;同步数字系列SDH"></a>同步光纤网SONET&amp;同步数字系列SDH</h3><p>各级网络时钟均来自一个精确的主时钟，以51.84Mb/s为基础，必须是其整数倍（什么战力单位）</p><p>后来定义SDH=3xSONET=155.52Mb/s</p><ul><li>使北美、日本、欧洲三个地区的数字传输体制在STM-1等级获得统一。</li><li>真正实现了数字体制的世界性标准。</li><li>也适用于微波和卫星传输技术体制。</li></ul><h3 id="宽带接入技术"><a href="#宽带接入技术" class="headerlink" title="宽带接入技术"></a>宽带接入技术</h3><p>分为有线宽带接入、无线宽带接入</p><h1 id="Chapter3-数据链路层"><a href="#Chapter3-数据链路层" class="headerlink" title="Chapter3.数据链路层"></a>Chapter3.数据链路层</h1><p>本章要求</p><p>一、使用点对点链路的数据链路层</p><ol><li>理解数据链路层的功能。<ol><li>封装成帧</li><li>透明传输</li><li>差错控制</li></ol></li><li>掌握循环冗余校验的方法。</li><li>理解PPP协议的工作原理。</li></ol><p>二、使用广播信道的数据链路层</p><ol><li>掌握CSMA/CD协议的工作原理。</li><li>掌握传统以太网（主要是10BASE-T）的连接方法。</li><li>理解MAC地址及DIX Ethernet V2 帧格式 。</li><li>掌握使用集线器、交换器扩展以太网的方法。</li><li>交换机的自学习算法和优点。</li><li>了解虚拟局域网和高速以太网的基本原理。</li></ol><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><p>透明性；等效于本层间进行数据传递</p><p>使用两种类型的信道：点对点信道，广播信道。</p><h3 id="数据链路和帧"><a href="#数据链路和帧" class="headerlink" title="数据链路和帧"></a>数据链路和帧</h3><p>链路link：一条无源的点到点的物理线路段，中间没有任何其他的交换节点。链路是一条通路的一个组成部分。</p><p>数据链路data link：除了物理线路外，还必须有通信协议来控制这些数据的传输，把实现这些协议的硬件和软件加到链路上，就构成了数据链路。使用适配器（即网卡）来实现这些协议的硬件和软件。一般的适配器都包括了数据链路层和物理层这两层的功能。</p><p>帧：数据链路层传送单位。</p><h3 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h3><p>最大传送单元MTU：规定了所能传送的帧的<strong>数据部分</strong>长度上限。不含数据链路层帧首尾！</p><p>封装成帧(framing)：在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。</p><p>帧定界：首部和尾部的作用，确定帧的界限。<strong>只有数据链路层帧有尾部</strong></p><img src="net/image-20230128143319529.png" alt="image-20230128143319529" style="zoom:67%;" /><p>控制字符 SOH (Start Of Header) 放在一帧的最前面，表示帧开始。帧开始符</p><p>控制字符 EOT (End Of Transmission) 放在一帧的末尾，表示帧结束。帧结束符</p><h3 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h3><p>含义：无论发送什么样的比特组合的数据，这些数据都能够按照原样没有差错地通过这个数据链路层，且不会产生误解。</p><p>如果数据中某个字节的二进制代码恰好和SOH或EOT一样，数据链路层就会错误地找到帧边界，导致错误。因此，要避免出现与定界符相同的bit组合。</p><img src="net/image-20230128145324801.png" alt="image-20230128145324801" style="zoom:67%;" /><h4 id="字节填充-字符填充"><a href="#字节填充-字符填充" class="headerlink" title="字节填充/字符填充"></a>字节填充/字符填充</h4><p>发送方在数据中出现SOH或EOT的前面，插入一个转义字符，比如ESC（0x1B）（虽然转义字符和ESC不同义，但是ESC感觉更好理解？所以下面写的ESC）</p><p>接收方收到后，去掉ESC。如果ESC也出现在数据当中，则在ESC前面再加一个ESC。接收方连续收到两个ESC时，删除前面的一个。</p><img src="net/image-20230128151253242.png" alt="image-20230128151253242" style="zoom:67%;" /><h3 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h3><p>传输中可能产生比特差错，1变0,0变1（0异事件（</p><p>误码率BER（bit error rate）：一段时间内，传输错误的bit所占总bit的比例。与信噪比有很大关系。</p><p>为了保证数据传输的可靠性，在计算机网络传输数据时，必须采用各种差错检测措施。主要分两种：</p><ul><li>检错法，检出错误后丢弃重传，简单易行，适用于重传代价低，距离近的一般通信</li><li>纠错法，检出错误后改正错误，方法复杂，适用于重传代价高的，例如卫星通信</li></ul><p>几种校验：</p><ul><li>奇偶校验，最简单，错奇数位能检出，错偶数位不能检出</li><li>CRC循环冗余校验</li><li>还有个啥</li></ul><h4 id="循环冗余检验CRC"><a href="#循环冗余检验CRC" class="headerlink" title="循环冗余检验CRC"></a>循环冗余检验CRC</h4><p>在发送端，先把数据划分为组，假定每组 <em>k</em> 个比特。</p><p>假设待传送的一组数据 <em>M</em> = 101001（现在 <em>k</em> = 6）。我们在 <em>M</em> 的后面再添加供差错检测用的 <em>n</em> 位冗余码一起发送。 </p><img src="net/image-20230128152117137.png" alt="image-20230128152117137" style="zoom:67%;" /><img src="net/image-20230128160623919.png" alt="image-20230128160623919" style="zoom:67%;" /><img src="net/image-20230128160641746.png" alt="image-20230128160641746" style="zoom:67%;" /><p>在数据后面添加上的冗余码称为帧检验序列 FCS (Frame Check Sequence)。</p><p>循环冗余检验 CRC 和帧检验序列 FCS并不等同。</p><ul><li>CRC 是一种常用的检错方法，而 FCS 是添加在数据后面的冗余码。</li><li>FCS 可以用 CRC 这种方法得出，但 CRC 并非用来获得 FCS 的唯一方法。 </li></ul><p>总而言之差不多！混用吧！</p><p>有差错，但是不知道具体哪里出错了，闭卷考试只出分现状</p><p>差错检测≠可靠传输：</p><ul><li>凡是接收的帧，都能以非常接近1的概率认为这些帧在传输过程中没有出错。</li><li>要做到可靠传输，还需要确认和重传机制。</li></ul><h2 id="3-2-点对点协议PPP"><a href="#3-2-点对点协议PPP" class="headerlink" title="3.2 点对点协议PPP"></a>3.2 点对点协议PPP</h2><p>使用最广泛的数据链路层协议Point to Point Protocol</p><p>是用户计算机和ISP进行通信时所使用的数据链路层协议。</p><p>PPP协议有三个组成部分：</p><ul><li>一个将 IP 数据报封装到串行链路的方法。</li><li>一个链路控制协议 LCP (Link Control Protocol)：用来建立、配置、测试数据链路连接，通信双方协商一些选项。协商数据链路层</li><li>一套网络控制协议 NCP (Network Control Protocol) ：每一个协议支持不同的网络层协议。协商网络层</li></ul><h3 id="PPP帧格式"><a href="#PPP帧格式" class="headerlink" title="PPP帧格式"></a>PPP帧格式</h3><p>PPP帧是面向字节的，所有的PPP帧都是整数字节B</p><img src="/2022/11/22/net/image-20230128164437482.png" class="" title="image-20230128164437482"><p>标志字段F=0x7E，是帧定界符，首尾都有</p><p>地址字段A=0xFF，保留字段</p><p>控制字段C=0x03，保留字段</p><p>协议：2B</p><ul><li>协议字段=0x0021，则信息部分是IP数据报</li><li>0xC021，PPP链路控制数据</li><li>0x8021，网络控制数据</li></ul><p>FCS：CRC-16的16位冗余码</p><h3 id="PPP透明传输问题"><a href="#PPP透明传输问题" class="headerlink" title="PPP透明传输问题"></a>PPP透明传输问题</h3><h4 id="异步传输"><a href="#异步传输" class="headerlink" title="异步传输"></a>异步传输</h4><p>PPP 用在异步传输（？低速网使用）时，使用字符填充法。</p><p>将信息字段中出现的每一个 0x7E 字节转变成为 2 字节序列 (0x7D, 0x5E)。</p><p>若信息字段中出现一个 0x7D 的字节, 则将其转变成为 2 字节序列(0x7D, 0x5D)。</p><p>若信息字段中出现 ASCII 码的控制字符（即数值小于 0x20 的字符），则在该字符前面要加入一个 0x7D 字节，同时改变该字符的编码。</p><h4 id="同步传输"><a href="#同步传输" class="headerlink" title="同步传输"></a>同步传输</h4><p>PPP 协议用在 SONET/SDH 链路时，使用同步传输（一连串的比特连续传送）。这时 PPP 协议采用零比特填充方法来实现透明传输。</p><p>为避免帧定界符F=0x7E=01111110连续6个1的情况</p><p>在发送端，只要发现有 5 个连续 1，则立即填入一个 0。</p><p>接收端对帧中的比特流进行扫描。每当发现 5 个连续1时，就把这 5 个连续 1 后的一个 0 删除。</p><p>如果存在7个连续1，铁传错</p><h3 id="PPP工作状态"><a href="#PPP工作状态" class="headerlink" title="PPP工作状态"></a>PPP工作状态</h3><img src="net/image-20230128165722385.png" alt="image-20230128165722385" style="zoom:80%;" /><p>当用户拨号接入 ISP 时，调制解调器对拨号做出确认，并建立一条物理连接。</p><p>PC 机向路由器发送一系列的 LCP 分组（封装成多个 PPP 帧）这些分组及其响应选择一些 PPP 参数，和进行网络层配置，NCP 给新接入的 PC机分配一个临时的 IP 地址，使 PC 机成为因特网上的一个主机。</p><p>通信完毕时，NCP 释放网络层连接，收回分配出去的 IP 地址。接着LCP 释放数据链路层连接；最后释放的是物理层的连接。  </p><h2 id="3-3-使用广播信道的数据链路层"><a href="#3-3-使用广播信道的数据链路层" class="headerlink" title="3.3 使用广播信道的数据链路层"></a>3.3 使用广播信道的数据链路层</h2><h3 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h3><p>特点：</p><ol><li>网络为一个单位拥有，便于管理</li><li>拓扑结构规整（最主要特点）</li><li>地理范围和站点数目均有限，一般不涉及远程通信。</li><li>网络速率高，传输可靠性好。</li></ol><p>局域网物理拓扑：</p><img src="net/image-20230128172327117.png" alt="image-20230128172327117" style="zoom:67%;" /><p>优点：具有广播功能、便于系统扩展、提高可靠性</p><p>媒体共享技术</p><p>静态划分信道：和物理层一样，频分、时分、波分、码分</p><p>动态媒体接入控制（多点接入）</p><ul><li>随机接入：争用网，总线网采用，需要解决碰撞</li><li>受控接入：轮询网，环网采用，需考虑轮询时令牌的分配</li></ul><h3 id="数据链路层两个子层"><a href="#数据链路层两个子层" class="headerlink" title="数据链路层两个子层"></a>数据链路层两个子层</h3><p>为使数据链路层能更好地适应多种局域网标准，802 委员会就将局域网的数据链路层拆成两个子层：</p><p>逻辑链路控制 LLC (Logical Link Control)子层；</p><p>媒体接入控制 MAC (Medium Access Control)子层。</p><p>与接入到传输媒体有关的内容都放在 MAC子层，而 LLC 子层则与传输媒体无关，不管采用何种协议的局域网对 LLC 子层来说都是透明的。 </p><p>但由于时代原因，一般不考虑LLC子层</p><img src="net/image-20230128175651444.png" alt="image-20230128175651444" style="zoom:67%;" /><h4 id="MAC层"><a href="#MAC层" class="headerlink" title="MAC层"></a>MAC层</h4><p>数据链路层两个子层之MAC层</p><p>硬件地址/物理地址/MAC地址/MAC-48/EUI-48，固化在适配器的ROM中，不会改变</p><h5 id="MAC帧格式"><a href="#MAC帧格式" class="headerlink" title="MAC帧格式"></a>MAC帧格式</h5><p>有两种标准DIX Ethernet V2；IEEE 802.3，这是V2的格式</p><img src="net/image-20230129120316894.png" alt="image-20230129120316894" style="zoom:67%;" /><img src="net/image-20230129120514001.png" alt="image-20230129120514001" style="zoom:67%;" /><h5 id="无效的MAC帧"><a href="#无效的MAC帧" class="headerlink" title="无效的MAC帧"></a>无效的MAC帧</h5><ul><li>帧的长度不是整数个字节；如17bit</li><li>用收到的帧检验序列 FCS 查出有差错；</li><li>数据字段的长度不在 46 ~ 1500 字节之间。（有效的 MAC 帧长度为 64 ~ 1518 字节之间）</li></ul><img src="net/image-20230129164859488.png" alt="image-20230129164859488" style="zoom:67%;" /><h3 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h3><p>网络接口板又称为通信适配器(adapter)或网络接口卡 NIC (Network Interface Card)，或“网卡”。 </p><p>适配器的重要功能：</p><ul><li>进行串行/并行转换。</li><li>对数据进行缓存。</li><li>实现以太网协议。</li><li>在计算机的操作系统安装设备驱动程序。</li></ul><p>适配器检查MAC地址</p><p>适配器从网络上每收到一个 MAC 帧就首先用硬件检查 MAC 帧中的 MAC 地址.（过滤功能）如果是发往本站的帧则收下，然后再进行其他的处理。否则就将此帧丢弃，不再进行其他的处理。</p><p>“发往本站的帧”包括以下三种帧： </p><ul><li>单播(unicast)帧（一对一）</li><li>广播(broadcast)帧（一对全体）</li><li>多播(multicast)帧（一对多）</li></ul><p>适配器的“混杂模式”：数据全收，用于数据分析，嗅探</p><h3 id="总线拓扑-CSMA-CD"><a href="#总线拓扑-CSMA-CD" class="headerlink" title="总线拓扑 CSMA/CD"></a>总线拓扑 CSMA/CD</h3><p>以太网核心协议 载波侦听多路访问/冲突检测detection</p><p>“载波监听”是指每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，以免发生冲突。总线上并没有什么“载波”。因此，“载波监听”就是用电子技术检测总线上有没有其他计算机发送的数据信号。 </p><p>“多点接入”表示许多计算机以多点接入的方式连接在一根总线上。</p><p>“冲突检测”就是计算机边发送数据边检测信道上的信号电压大小。</p><img src="net/image-20230128180832858.png" alt="image-20230128180832858" style="zoom:67%;" /><p>B广播方式发送，总线上的每一个工作的计算机都能检测到 B 发送的数据信号，由于只有计算机 D 的地址与数据帧首部写入的地址一致，因此只有 D 才接收这个数据帧。 其他所有的计算机（A, C 和 E）都检测到不是发送给它们的数据帧，因此就丢弃这个数据帧而不能够收下来。具有广播特性的总线上实现了一对一的通信。 </p><p>两个措施：无连接、尽最大努力交付。不编号，不确认，不重传</p><p>工作原理：</p><ul><li>站点在发送数据帧之前，先侦听总线是否忙，只有总线空闲时方可发送；</li><li>发送过程中边侦听边发送;</li><li>若出现冲突，则停止发送当前数据帧，向总线发送强化冲突的干扰串;</li><li>待冲突退避时间之后再侦听总线，重新发送。 </li></ul><img src="net/image-20230128181552335.png" alt="image-20230128181552335" style="zoom:67%;" /><h4 id="1-如何冲突检测"><a href="#1-如何冲突检测" class="headerlink" title="1.如何冲突检测"></a>1.如何冲突检测</h4><p>当几个站同时在总线上发送数据时，总线上的信号电压摆动值将会增大（互相叠加）。<strong>当一个站检测到的信号电压摆动值超过一定的门限值时</strong>，就认为总线上至少有两个站同时在发送数据，表明产生了冲突。所谓“冲突”就是发生了碰撞，因此“冲突检测”也称“碰撞检测”。</p><ul><li>超过高低电平极限值</li><li>曼彻斯特编码下，跳变的时钟发生偏移-&gt;冲突</li></ul><h4 id="2-检测到冲突后"><a href="#2-检测到冲突后" class="headerlink" title="2.检测到冲突后"></a>2.检测到冲突后</h4><p>一旦检测到冲突，立即停止发送</p><p>等待？随机时间后，再次发送</p><h4 id="3-何时检测到冲突"><a href="#3-何时检测到冲突" class="headerlink" title="3.何时检测到冲突"></a>3.何时检测到冲突</h4><p>当某个站监听到总线是空闲时，也可能总线并非真正是空闲的。 </p><p>A 向 B 发出的信息，要经过一定的时间后才能传送到 B。B 若在 A 发送的信息到达 B 之前发送自己的帧(因为这时 B 的载波监听检测不到 A 所发送的信息)，则必然要在某个时间和 A 发送的帧发生冲突。</p><p>t：单程端到端传播时延；A-B，2t时间内若有冲突，A一定能发现</p><p>δ：数据发完还需要的时间</p><img src="net/image-20230129105200530.png" alt="image-20230129105200530" style="zoom:80%;" /><h4 id="4-争用期"><a href="#4-争用期" class="headerlink" title="4.争用期"></a>4.争用期</h4><p>最先发送数据帧的站，在发送数据帧后至多经过时间 2t （两倍的端到端往返时延）就可知道发送的数据帧是否遭受了冲突。经过这段时间还没有检测到冲突，才能肯定这次发送不会发生冲突。</p><p>以太网的端到端往返时延 <strong>2t</strong> 称为<strong>争用期</strong>，或冲突窗口。或<strong>512比特时间</strong>，或<strong>64字节时间</strong></p><p>取 51.2 ms 为争用期的长度。</p><p>对于 10 Mb/s 以太网，在争用期内可发送512 bit，即 64 字节。因此，争用期的长度也表达为512比特时间。</p><h4 id="5-最短有效帧长"><a href="#5-最短有效帧长" class="headerlink" title="5.最短有效帧长"></a>5.最短有效帧长</h4><p>如果发生冲突，就一定是在发送的前 64 字节之内。 争用期内</p><p>由于一检测到冲突就立即中止发送，这时已经发送出去的数据一定小于 64 字节。 </p><p>以太网<strong>规定了最短有效帧长为 64 字节</strong>，凡长度小于 64 字节的帧都是由于冲突而异常中止的<strong>无效帧</strong>。</p><p>发送帧最短要达到64B，不足用0补齐</p><h4 id="6-强化冲突"><a href="#6-强化冲突" class="headerlink" title="6.强化冲突"></a>6.强化冲突</h4><p>当发送数据的站一旦发现发生了冲突时，除了立即停止发送数据外，双方都要再继续发送若干比特的人为干扰信号(jamming signal)，以便让所有用户都知道现在已经发生了冲突。 </p><p>强化冲突原因：设冲突点离A很远，离B很近，即B发送很少的数据后冲突，后停发，少量的叠加数据远距离传到A，可能被A忽略。A继续发送，浪费时间。</p><p>强化冲突的违规码长度介于32-64比特之间，不易被忽略。</p><h4 id="7-退避算法"><a href="#7-退避算法" class="headerlink" title="7.退避算法"></a>7.退避算法</h4><p>发生冲突的站在停止发送数据后，要推迟（退避）一个随机时间才能再发送数据。</p><img src="net/image-20230129110651961.png" alt="image-20230129110651961" style="zoom:67%;" /><h4 id="8-帧间隔"><a href="#8-帧间隔" class="headerlink" title="8.帧间隔"></a>8.帧间隔</h4><p>帧间最小间隔为9.6微秒，相当于<strong>96比特时间</strong>。</p><p>这样做是为了使刚刚收到数据帧的站的接收缓存来得及清理，做好接收下一帧的准备。</p><p>若适配器检测到信道空闲（即在96比特时间内没有检測到信道上有信号），就发送这个帧。若检测到信道忙，则继续检测并等待信道转为空闲（加上96比特时间），然后发送个帧。 </p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>不是全双工，只能进行半双工通信</p><p>每个站在发送数据后的争用期内，均存在冲突的可能性，使以太网的平均通信量远小于最高数据率。</p><h3 id="星形拓扑"><a href="#星形拓扑" class="headerlink" title="星形拓扑"></a>星形拓扑</h3><p>采用双绞线的星形以太网初期的最大传输速率为10Mb/s，称为10BASE-T</p><p>星形的中心设备为集线器</p><p>使用集线器的以太网<strong>在逻辑上仍是一个总线网</strong>，各工作站使用的还是 CSMA/CD 协议，并共享逻辑上的总线。</p><p>集线器很像一个多接口的转发器，工作在物理层。 又称盒中总线。</p><img src="net/image-20230129111915113.png" alt="image-20230129111915113" style="zoom:67%;" /><p>10BASE-T使用无屏蔽双绞线。</p><p>每个站需要用两对双绞线，分别用于发送和接收。</p><p>集线器使用了大规模集成电路芯片，因此这样的硬件设备的可靠性已大大提高了。 </p><p>10BASE-T 的通信距离稍短，每个站到集线器的距离不超过 100 m。</p><h3 id="信道利用率-1"><a href="#信道利用率-1" class="headerlink" title="信道利用率"></a>信道利用率</h3><p>看ppt吧如果重要的话</p><h2 id="3-4-扩展的以太网"><a href="#3-4-扩展的以太网" class="headerlink" title="3.4 扩展的以太网"></a>3.4 扩展的以太网</h2><p>以太网是一种计算机局域网技术</p><h3 id="1在物理层扩展以太网"><a href="#1在物理层扩展以太网" class="headerlink" title="1在物理层扩展以太网"></a>1在物理层扩展以太网</h3><p>主机使用光纤和一堆光纤调制解调器连接到集线器，用集线器扩展局域网</p><img src="net/image-20230129170809036.png" alt="image-20230129170809036" style="zoom:67%;" /><p>碰撞率/冲突域：网络中一个站点发出的帧会与其他站点发出的帧产生碰撞或冲突的那部分网络。碰撞域越大，发生碰撞的概率越高。</p><h3 id="2在数据链路层扩展以太网"><a href="#2在数据链路层扩展以太网" class="headerlink" title="2在数据链路层扩展以太网"></a>2在数据链路层扩展以太网</h3><p>更常用。早期使用网桥，现在使用以太网交换机</p><p>网桥：工作在数据链路层。根据 MAC 帧的目的地址对收到的帧进行转发和过滤。或者转发，或者丢弃。</p><p>交换机：工作在数据链路层。实质是多端口的网桥。可明显地提高以太网的性能。可以全双工。</p><h4 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h4><p>交换机的自学习功能：</p><img src="net/image-20230129181316326.png" alt="image-20230129181316326" style="zoom:67%;" /><p>第一次发送数据，A-&gt;B：</p><ol><li><p>A 先向 B 发送一帧。该帧从接口 1 进入到交换机。</p></li><li><p>交换机把这个帧的源地址 A 和接口 1 写入交换表中。</p></li><li><p>交换机收到帧后，先查找交换表。没有查到应从哪个接口转发这个帧给 B，于是向除接口 1 以外的所有的接口<strong>广播</strong>这个帧。</p></li><li><p>B,C,D均收到广播，由于与该帧的目的地址不相符，C 和 D 将丢弃该帧。</p></li></ol><p>第二次发送数据，B-&gt;A：</p><ol><li>B 向 A 发送一帧。该帧从接口 3 进入到交换机。</li><li>交换机把这个帧的源地址 B 和接口 3 写入交换表中。</li><li>交换机收到帧后，先查找交换表。发现交换表中的 MAC 地址有 A，表明要发送给 A 的帧应从接口 1 转发出去。于是就把这个帧传送到接口 1 转发给 A。</li></ol><p>考虑到可能有时要在交换机的接口更换主机，或者主机要更换其网络适配器，这就需要更改交换表中的项目。为此，在交换表中每个项目都设有一定的有效时间。过期的项目就自动被删除。</p><p>这种自学习方法使得以太网交换机能够即插即用，不必人工进行配置。</p><h4 id="两台交换机"><a href="#两台交换机" class="headerlink" title="两台交换机"></a>两台交换机</h4><img src="net/image-20230131092734592.png" alt="image-20230131092734592" style="zoom:67%;" /><p>不能出现回路</p><img src="net/image-20230131092746858.png" alt="image-20230131092746858" style="zoom:67%;" /><p> 消除回路：使用生成树协议STP：不改变网络实际拓扑，但在逻辑上切断某些链路，使得一台主机到所有其他主机的路径是无环路的树状结构，从而消除兜圈子现象。</p><ul><li>以太网交换机具有并行性。</li><li>能同时连通多对接口，使多对主机能同时通信。</li><li>相互通信的主机都独占传输媒体，无碰撞地传输数据。</li><li>每一个端口和连接到端口的主机构成了一个碰撞域。</li></ul><img src="net/image-20230131093316096.png" alt="image-20230131093316096" style="zoom:67%;" /><img src="net/image-20230131093335928.png" alt="image-20230131093335928" style="zoom:67%;" /><h4 id="从总线以太网到星形以太网"><a href="#从总线以太网到星形以太网" class="headerlink" title="从总线以太网到星形以太网"></a>从总线以太网到星形以太网</h4><img src="net/image-20230131093547087.png" alt="image-20230131093547087" style="zoom:67%;" /><img src="net/image-20230131093554302.png" alt="image-20230131093554302" style="zoom:67%;" /><h3 id="3虚拟局域网VLAN"><a href="#3虚拟局域网VLAN" class="headerlink" title="3虚拟局域网VLAN"></a>3虚拟局域网VLAN</h3><p>以太网存在的问题：</p><ul><li>广播风暴：广播太多，占用太多带宽，导致单播无法传递。程度收到主机数量影响</li><li>安全问题：广播，不安全，不能隔绝不同部门的通信</li><li>管理问题</li></ul><p>广播域：指这样一部分网络，其中任何一台设备发出的广播通信都能被该部分网络中的所有其他设备所接收。一个以太网就是一个广播域，交换机间的冗余链路易形成广播风暴。</p><p>VLAN</p><ul><li>由一些局域网网段构成的与物理位置无关的逻辑组。</li><li>这些网段具有某些共同的需求。</li><li>每一个 VLAN 的帧都有一个明确的标识符，指明发送这个帧的工作站是属于哪一个 VLAN。</li><li>虚拟局域网其实只是局域网给用户提供的一种服务，而并不是一种新型局域网。 </li></ul><p>划分VLAN后，同VLAN 内能接收广播，不同的广播会被隔绝；若不同域想发送消息，需要通过路由器。</p><h4 id="基于交换机端口划分"><a href="#基于交换机端口划分" class="headerlink" title="基于交换机端口划分"></a>基于交换机端口划分</h4><p>属于在第 1 层划分虚拟局域网的方法</p><p>最简单、常用。缺点：不允许用户移动端口。</p><p>有实验来着？</p><h4 id="基于网卡的MAC地址划分"><a href="#基于网卡的MAC地址划分" class="headerlink" title="基于网卡的MAC地址划分"></a>基于网卡的MAC地址划分</h4><p>属于在第 2 层划分虚拟局域网的方法</p><p>根据用户计算机的 MAC 地址划分虚拟局域网。允许移动端口</p><p>缺点：需要输入和管理大量的 MAC 地址。如果用户的 MAC 地址改变了，则需要管理员重新配置VLAN。</p><h4 id="基于IP子网地址的方法"><a href="#基于IP子网地址的方法" class="headerlink" title="基于IP子网地址的方法"></a>基于IP子网地址的方法</h4><p>根据以太网帧的第三个字段“类型”和 IP 分组首部中的源 IP 地址字段确定该 IP 分组属于哪一个虚拟局域网。</p><p>属于在第 3 层划分虚拟局域网的方法。</p><h4 id="基于高层应用或服务的方法"><a href="#基于高层应用或服务的方法" class="headerlink" title="基于高层应用或服务的方法"></a>基于高层应用或服务的方法</h4><p>可以基于协议，FTP，QQ等。</p><p>更灵活，但也更复杂。</p><img src="net/image-20230131095325769.png" alt="image-20230131095325769" style="zoom:67%;" /><h4 id="帧格式"><a href="#帧格式" class="headerlink" title="帧格式"></a>帧格式</h4><img src="net/image-20230131095543188.png" alt="image-20230131095543188" style="zoom: 80%;" /><img src="net/image-20230131095603193.png" alt="image-20230131095603193" style="zoom:80%;" /><img src="net/image-20230131095613095.png" alt="image-20230131095613095" style="zoom:80%;" /><h2 id="3-5-高速以太网"><a href="#3-5-高速以太网" class="headerlink" title="3.5 高速以太网"></a>3.5 高速以太网</h2><h3 id="100BASE-T"><a href="#100BASE-T" class="headerlink" title="100BASE-T"></a>100BASE-T</h3><p>速率达到或超过 100 Mb/s 的以太网称为高速以太网。采用双绞线的 100 Mb/s 星型拓扑以太网，仍使用 IEEE 802.3 的CSMA/CD 协议。100BASE-T 以太网又称为快速以太网(Fast Ethernet) IEEE802.3u；更换100Mb/s的适配器和集线器，网络拓扑结构、软件可保持不变。（不需要换网卡）可在全双工方式下工作而无冲突发生。此时不使用 CSMA/CD 协议。</p><p>当速率增加到10倍时，可将帧长增加10倍或电缆线减为原来的1/10.</p><p>100Mb/s以太网的方法是:</p><ul><li>保持最短帧长64字节保持不变;</li><li>将一个网段的最大电缆长度减小到 100 m;</li><li>争用期为5.12 ms（512b）</li><li>帧间时间间隔为 0.96 ms。</li></ul><img src="net/image-20230131155953942.png" alt="image-20230131155953942" style="zoom:67%;" /><h3 id="1000BASE-T"><a href="#1000BASE-T" class="headerlink" title="1000BASE-T"></a>1000BASE-T</h3><p>Gbit以太网</p><p>允许在 1 Gb/s 下全双工和半双工两种方式工作。使用 802.3 协议规定的帧格式，IEEE802.3z 。在半双工方式下使用 CSMA/CD 协议。与 10BASE-T 和 100BASE-T 技术向后兼容。</p><p>吉比特以太网仍然保持一个网段的最大长度为 100 m，但采用了“载波延伸”的办法，使最短帧长仍为 64 字节（这样可以保持兼容性），同时将争用时间增大为 512 字节。（原来是512b）（实际最短帧512B）</p><h4 id="载波延伸"><a href="#载波延伸" class="headerlink" title="载波延伸"></a>载波延伸</h4><p>凡发送的 MAC 帧长不足 512 字节时，就用一些特殊字符填充在帧的后面，使MAC 帧的发送长度增大到 512 字节，但这对有效载荷并无影响。</p><p>接收端在收到以太网的 MAC 帧后，要将所填充的特殊字符删除后才向高层交付。 </p><img src="net/image-20230131160216245.png" alt="image-20230131160216245" style="zoom:67%;" /><h4 id="分组突发"><a href="#分组突发" class="headerlink" title="分组突发"></a>分组突发</h4><p>当很多短帧要发送时，第一个短帧要采用上面所说的载波延伸的方法进行填充。</p><p>随后的一些短帧则可一个接一个地发送，只需留有必要的帧间最小间隔即可。这样就形成可一串分组的突发，直到达到 1500 字节或稍多一些为止。</p><img src="/2022/11/22/net/image-20230131160945225.png" class="" title="image-20230131160945225"><h3 id="10G-100Gbit以太网"><a href="#10G-100Gbit以太网" class="headerlink" title="10G/100Gbit以太网"></a>10G/100Gbit以太网</h3><p>10 吉/100 吉比特以太网与 10 Mb/s，100 Mb/s 和 1 Gb/s 以太网的帧格式完全相同，IEEE802.3ae10 吉比特以太网还保留了 802.3 标准规定的以太网最小和最大帧长，便于升级。10 吉比特以太网使用光纤作为传输媒体。10 吉比特以太网只工作在全双工方式，因此没有争用问题，也不使用 CSMA/CD 协议。  </p><h3 id="以太网宽带接入-PPPoE"><a href="#以太网宽带接入-PPPoE" class="headerlink" title="以太网宽带接入-PPPoE"></a>以太网宽带接入-PPPoE</h3><p>PPPoE (PPP over Ethernet) ：在以太网上运行 PPP。将 PPP 帧封装到以太网中来传输。</p><p>现在的光纤宽带接入 FTTx 都要使用 PPPoE 的方式进行接入。</p><h1 id="Chapter4-网络层"><a href="#Chapter4-网络层" class="headerlink" title="Chapter4.网络层"></a>Chapter4.网络层</h1><ol><li>理解数据报服务与虚电路服务</li><li>掌握分类的IP地址无分类编址、路由聚合、地址块划分</li><li>掌握分组的转发流程。</li><li>掌握IP协议 (数据报结构、分片方法)。</li><li>掌握ARP协议和ICMP协议的工作原理。</li><li>掌握RIP、OSPF 、BGP路由协议工作原理。</li><li>理解路由器的结构和作用。</li><li>理解IPv6</li><li>理解多播地址（包括IP多播地址和局域网多播地址）、IGMP协议、<br> 反向路径广播机制，多播转发树。</li><li>理解NAT协议、VPN以及专网的概念。</li><li>理解MPLS的原理</li><li>理解SDN基本概念</li></ol><h2 id="4-1-网络层提供的两种服务"><a href="#4-1-网络层提供的两种服务" class="headerlink" title="4.1 网络层提供的两种服务"></a>4.1 网络层提供的两种服务</h2><h3 id="虚电路服务"><a href="#虚电路服务" class="headerlink" title="虚电路服务"></a>虚电路服务</h3><ul><li>思路：可靠通信应当由网络来保证</li><li>面向连接的通信方式-可靠交付</li><li>虚电路表示建立一条逻辑上连接，分组都沿逻辑连接按照存储转发方式传送</li></ul><h3 id="数据报服务"><a href="#数据报服务" class="headerlink" title="数据报服务"></a>数据报服务</h3><ul><li>思路：可靠通信由用户主机来保证</li><li>无连接的通信方式-尽最大努力的交付</li><li>直接发送数据报，每个分组独立路由，与前后分组无关</li><li>路由器结构简单，价格低；由传输层负责差错等；生存性好（存在通路就有可能发出数据）</li></ul><h2 id="4-2-IP"><a href="#4-2-IP" class="headerlink" title="4.2 IP"></a>4.2 IP</h2><h3 id="1-虚拟互连网络"><a href="#1-虚拟互连网络" class="headerlink" title="1.虚拟互连网络"></a>1.虚拟互连网络</h3><p>网络互连中间设备/中继系统：</p><ul><li>转发器（repeater）：物理层中继系统</li><li>网桥或桥接器（bridge）：数据链路层<ul><li>交换机是一种网桥</li></ul></li><li>路由器（router）（有时称网关（易混，蛮怪的））：网络层</li><li>桥路器（brouter）：网桥x路由器</li><li>网关（gateway）：网络层以上的中继系统，目前使用较少</li></ul><p>同构网络：物理层/数据链路层不相同，而其他部分相同；这种情况不称之为网络互连，仅是将一个网络扩大，但仍是一个网络。</p><p>异构网络：其他的不相同的；使用路由器的（个人理解）</p><p>互联网（Internet）：指用路由器进行互连的网络</p><p>虚拟互连网络：使用IP协议则简称IP网，是逻辑互连网络；当互联网上的主机进行通信时，就好像在一个网络上通信一样，看不见互连的各具体的网络异构细节。</p><p>直接交付：通过同构网络交付；相同网络号地址的主机</p><p>间接交付：需要通过路由器交付；不同网络号地址的主机</p><p>网络（网段）：是具有相同网络号的主机的集合<br>$$<br>Everyting \space over \space IP \<br>IP \space over \space everything<br>$$<br>与IP配套使用的协议：</p><ol><li>地址解析协议ARP（MAC地址）</li><li>逆地址解析协议RARP</li><li>网际控制报文协议ICMP（出错通知）</li><li>网际组管理协议IGMP（多播）</li></ol><img src="net/F7248935D82BFBB0C8DFB236DB2B0B7A.png" alt="img" style="zoom:50%;" /><h3 id="2-IP地址划分"><a href="#2-IP地址划分" class="headerlink" title="2.IP地址划分"></a>2.IP地址划分</h3><h4 id="IP地址表示法"><a href="#IP地址表示法" class="headerlink" title="IP地址表示法"></a>IP地址表示法</h4><p>点 分 十 进 制 记 法（别看见不知道是啥）</p><h4 id="分类的IP"><a href="#分类的IP" class="headerlink" title="分类的IP"></a>分类的IP</h4><p>IP地址::={&lt;net-id&gt;,&lt;host-id&gt;}</p><p>规定：</p><ol><li>net-id不能全0</li><li>host-id全0，代表一个网段/网络/网络地址</li><li>host-id全1，代表一个广播</li></ol><p>分类IP也有掩码</p><h5 id="A类"><a href="#A类" class="headerlink" title="A类"></a>A类</h5><p>net-id第一位标记0，0开头即A类地址</p><p>环回地址，用于网络测试，只有A类有好像</p><p>掩码255.0.0.0</p><table><thead><tr><th>8位net-id</th><th>24位host-id</th></tr></thead><tbody><tr><td><del><strong>0</strong>000 0000</del> （全0）</td><td></td></tr><tr><td><strong>0</strong>000 0001.    1.x.x.x</td><td></td></tr><tr><td>…        （共126个）</td><td>共2^24-2（全0全1）个</td></tr><tr><td><strong>0</strong>111 1110.    126.x.x.x</td><td></td></tr><tr><td>0111 1111.（环回地址）</td><td></td></tr></tbody></table><h5 id="B类"><a href="#B类" class="headerlink" title="B类"></a>B类</h5><p>标记10，掩码255.255.0.0</p><table><thead><tr><th>16位net-id</th><th>16位host-id</th></tr></thead><tbody><tr><td><strong>10</strong>00 0000.0000 0001    128.1.x.x</td><td></td></tr><tr><td>…                      共2^14-1个</td><td>共2^16-2个</td></tr><tr><td>1011 1111.1111 1111    191.255.x.x</td><td></td></tr></tbody></table><h5 id="C类"><a href="#C类" class="headerlink" title="C类"></a>C类</h5><p>标记110，掩码255.255.255.0</p><table><thead><tr><th>24位net-id</th><th>8位host-id</th></tr></thead><tbody><tr><td><strong>110</strong>0 0000.0000 0000.0000 0001.    192.0.1.x</td><td></td></tr><tr><td>…                                                           共2^21-1个</td><td>共2^8-2个，254</td></tr><tr><td>1101 1111.1111 1111.1111 1111.    223.255.255.x</td><td></td></tr></tbody></table><h5 id="D类"><a href="#D类" class="headerlink" title="D类"></a>D类</h5><p>多播地址，标记1110</p><h5 id="E类"><a href="#E类" class="headerlink" title="E类"></a>E类</h5><p>保留，标记1111</p><h5 id="特殊IP"><a href="#特殊IP" class="headerlink" title="特殊IP"></a>特殊IP</h5><ul><li>0.0.0.0，表示本网络上的主机，相当于“我”；源地址可使用，目的不可用</li><li>网络号全0，主机号x，表示本网络上主机号为x的主机，“我们班的第几位同学”，但并未具体指明是什么班，只能在本网络通信；源不可用，目的可用</li><li>1.1.1.1，表示本网络上的广播；源不可用，目的可用</li><li>网络号y，主机号全1，表示网络号为y上的广播；源不可用，目的可用；（源地址写主机自己，目的写广播）</li><li>网络号127，主机号非全0全1，用于本地软件环回测试；源、目的均可用</li></ul><h5 id="IP地址特点"><a href="#IP地址特点" class="headerlink" title="IP地址特点"></a>IP地址特点</h5><ol><li>每个IP地址都由网络号和主机号两部分构成。</li><li>IP是标志一台主机（路由器）和一条链路的接口。多归属主机（就是路由器）：具有至少两个网络号不同的IP地址</li><li>转发器/交换机连接的若干局域网仍为一个网络。他们的网络号均相同，具有不同网络号的网络必须使用路由器互连。</li><li>在IP地址中，所有分配到网络号的网络是平等的。</li></ol><h5 id="分类IP优缺点"><a href="#分类IP优缺点" class="headerlink" title="分类IP优缺点"></a>分类IP优缺点</h5><p>优点：</p><ol><li>管理简单</li><li>使用方便</li><li>转发分组迅速</li><li>划分子网，灵活使用</li></ol><p>缺点：设计不合理</p><ol><li>大地址块，浪费地址资源</li><li>即使采用划分子网，也无法解决IP枯竭</li></ol><h4 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h4><p>似乎没细讲，对最基本编址方法的改进，把基于每类的IP网络进一步分成更小的网络。</p><h4 id="无分类编址CIDR"><a href="#无分类编址CIDR" class="headerlink" title="无分类编址CIDR"></a>无分类编址CIDR</h4><p>CIDR（Classless Inter-Domain Routing）：无分类域间路由选择</p><p>有时称CIDR为构造超网/网络聚合</p><h5 id="网络前缀"><a href="#网络前缀" class="headerlink" title="网络前缀"></a>网络前缀</h5><p>IP地址::={&lt;网络前缀&gt;,&lt;主机号&gt;}，CIDR中必须指明前缀</p><p>前缀：位数不固定，采用斜线记法；如114.51.4.0/20，前20位是前缀</p><p>连续的0可以省略：10.0.0.0/10—-10/10（192.0/10前面x位，后面n位，使x&gt;=n位？老师好像这么讲）</p><h5 id="地址块-网络-网段"><a href="#地址块-网络-网段" class="headerlink" title="地址块/网络/网段"></a>地址块/网络/网段</h5><p>网络前缀都相同的所有IP地址组成一个CIDR地址块</p><p>前缀n位，主机号m=32-n位：</p><ol><li>共有$2^m$个地址，<strong>可分配/指派的地址</strong>$2^m-2$个（总之好几种说法，但是看清是总的地址还是分配的！）</li><li>主机号全0为网络地址，全1为广播地址</li><li>特例？/31地址块中主机号可以是0或1，通常用于连接两个路由器</li></ol><h5 id="地址掩码-子网掩码-掩码"><a href="#地址掩码-子网掩码-掩码" class="headerlink" title="地址掩码/子网掩码/掩码"></a>地址掩码/子网掩码/掩码</h5><p>address mark/subnet mark</p><p>一串1+一串0，1的个数是网络前缀的长度</p><p>用于让机器从IP迅速算出网络地址（进行按位与运算即可）</p><p>所以这个可以理解为网络前缀的另一种表达方式</p><h5 id="常用CIDR地址块"><a href="#常用CIDR地址块" class="headerlink" title="常用CIDR地址块"></a>常用CIDR地址块</h5><p>有啥用啊</p><img src="net/CC2787196936A9BB69A9FFB0898AA953.png" alt="img" style="zoom: 50%;" /><h5 id="构造超网-路由聚合"><a href="#构造超网-路由聚合" class="headerlink" title="构造超网/路由聚合"></a>构造超网/路由聚合</h5><p>每一个CIDR地址块中的地址数一定是2的整数次幂。除最后几行，CIDR地址块都包含了多个C类地址（是一个C类地址的$2^n$倍）</p><p><del>你说这个我也不懂啊</del>具体做法：求同存异</p><p><del>你说这个也不具体啊</del>一堆xxx/24，若前面n位相同，就可以变成xxx/n，构造一个大网络</p><h5 id="CIDR地址块划分"><a href="#CIDR地址块划分" class="headerlink" title="CIDR地址块划分"></a>CIDR地址块划分</h5><p>做题吧</p><p>平均划分：主机号借位划分，前缀变长</p><p>按需划分：二叉树划分</p><p>无论哪种方法，划分后总地址数量减少（需要扣掉网络地址和广播地址）</p><img src="net/5A47296151C37B7F3213D6B050852F08.png" alt="img" style="zoom:67%;" /><h5 id="特殊CIDR块"><a href="#特殊CIDR块" class="headerlink" title="特殊CIDR块"></a>特殊CIDR块</h5><ul><li>/32 全是网络号，255.255.255.255：就是一个IP地址，这个特殊地址用于主机路由（？）</li><li>/31 只有两个IP地址，255.255.255.254：主机号0和1。用于点对点链路/链路路由（两个路由器之间）</li><li>/0 全是主机号，同时IP地址全0，0.0.0.0/0：用于默认路由（？）</li></ul><p>下面路由表里面还有讲，别急</p><blockquote><p>主机路由/网络路由</p><p>直连路由和网关路由是由下一跳区分的，而主机路由和网络路由是由目的地址的完整度区分的；</p><p>主机路由的目的地址是一个完整的主机地址。网络路由目的地址是一个网络地址（主机号部分为0）。</p><p>当为某个目的I P地址搜索路由表时，主机地址项必须与目的地址完全匹配，</p><p>而网络地址项只需要匹配目的地址的网络号和子网号就可以了。</p></blockquote><blockquote><p>默认路由（缺省路由）</p><p>这个路由将匹配所有的包. 能帮助减少路由条目</p><p>配置一条默认静态路由和静态路由相似，但IP地址和子网掩码全部是零</p><p>例如:ip route 0.0.0.0 0.0.0.0 [网关ip或接口]</p><p>子网掩码 0.0.0.0 代表匹配所有网络</p></blockquote><h3 id="3-IP地址与硬件地址"><a href="#3-IP地址与硬件地址" class="headerlink" title="3.IP地址与硬件地址"></a>3.IP地址与硬件地址</h3><p>无法描述，看ppt</p><p>透明</p><p>IP数据报向下封装成MAC帧；网络层使用IP，数据链路层使用硬件地址</p><p>注意帧格式，MAC-目的-源，IP-源-目的</p><p>路由器的IP地址并不出现在主机-主机的IP数据报首部中，但在MAC帧中出现</p><h3 id="4-ARP协议与RARP协议"><a href="#4-ARP协议与RARP协议" class="headerlink" title="4.ARP协议与RARP协议"></a>4.ARP协议与RARP协议</h3><p>Address Resolution Protocol 从IP地址解析出MAC地址</p><p>MAC地址/硬件地址/物理地址</p><p>ARP分组封装在<strong>以太网帧</strong>中，只解决同一局域网上的主机或路由器的IP/MAC映射问题</p><h4 id="工作过程"><a href="#工作过程" class="headerlink" title="工作过程"></a>工作过程</h4><ol><li><p>ARP高速缓存</p><p>存放IP到MAC的映射表，动态更新</p></li><li><p>ARP工作</p><p>概括讲，通过IP查映射表找MAC，找到即写入MAC帧目的地址，找不到就运行ARP获取MAC，并更新高速缓存</p></li><li><p>ARP查找IP地址对应的MAC地址</p><ol><li><p>主机A在本局域网广播发送ARP请求分组</p><p>路由器不转发ARP请求</p><p>其他主机重写A的MAC地址，更新ARP高速缓存</p></li><li><p>主机B向A单播发送ARP响应分组</p><p>主机A更新缓存</p></li></ol></li></ol><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li>发送方是主机，要把 IP 数据报发送到本网络上的另一个主机。这时用 ARP 找到目的主机的硬件地址。 </li><li>发送方是主机，要把 IP 数据报发送到另一个网络上的一个主机。这时用 ARP 找到本网络上的一个路由器的硬件地址。剩下的工作由这个路由器来完成。 </li><li>发送方是路由器，要把 IP 数据报转发到本网络上的一个主机。这时用 ARP 找到目的主机的硬件地址。</li><li>发送方是路由器，要把 IP 数据报转发到另一个网络上的一个主机。这时用 ARP 找到本网络上另一个路由器的硬件地址。剩下的工作由这个路由器来完成。 </li></ol><h3 id="5-IP数据报格式"><a href="#5-IP数据报格式" class="headerlink" title="5.IP数据报格式"></a>5.IP数据报格式</h3><img src="net/3B97B9D13257055D818B3DE1389C736D.png" alt="img" style="zoom:67%;" /><p>非常的必考，非常的必考</p><p>首部：固定长度/固定部分20Bytes，160bit；可变部分/可选字段最大40B；整个首部不超过60B</p><p>版本：4b，IP协议的版本，IPv4-0100，IPv6-0110</p><p>首部长度：4b，表示范围0101-1111（5-15)（一个单位表示4字节，所以20-60字节），因此首部长度最大值60B</p><p>区分服务：8b，用来获得更好的服务。IPv4没用，v6很有用（流媒体传输QoS等）</p><p>总长度：16b，指<strong>首部+数据部分</strong>总的长度，单位是字节，最大2^16-1=65535B，总长度必须不超过最大传送单元MTU。（MTU：Maxium Transfer Unit，规定所能传送的MAC帧的<strong>数据部分</strong>长度上限，IP封装成MAC帧时<strong>首部+数据部分</strong>不能超过MTU）</p><p>标识：16b，计数器，用来产生数据报的标识（用于分片，分片的各个数据报标识都一样）</p><p>标志：3b</p><p>​        第一位：MF More Fragment，MF=1表示后面还有分片，MF=0表示最后一个分片。</p><p>​        第二位：DF Dont Fragment，DF=0时允许分片，DF=1不允许分片。</p><p>​        第三位：目前无意义</p><p>片偏移：13b，分片后，某片在原分组中的相对位置。以8B为单位。（做题）</p><p>生存时间TTL(Time To live)：8b，数据报在网络中可通过的路由器数的最大值。跳数上限</p><p>协议：8b，指出数据报携带的数据使用何种协议，便于目的主机IP层将数据部分上交给哪个处理进程(ICMP/IGMP/OSPF/TCP/UDP)</p><p>首部检验和：16b，只检验首部，不检验数据部分。采用反码求和算法（具体怎么算没看懂）</p><p>源地址：32b</p><p>目的地址：32b</p><p>可选字段：最大40B（320b），用来支持排错、测量、安全措施；但会增加每个路由器处理数据报的开销。</p><h2 id="4-3-IP转发分组的过程"><a href="#4-3-IP转发分组的过程" class="headerlink" title="4.3 IP转发分组的过程"></a>4.3 IP转发分组的过程</h2><h3 id="1-基于终点的转发"><a href="#1-基于终点的转发" class="headerlink" title="1.基于终点的转发"></a>1.基于终点的转发</h3><p>分组在互联网中是逐跳转发的，基于终点，基于分组首部中的目的地址传送和转发。（？）</p><p>路由表（目的网络地址，下一跳地址）</p><p>特殊的路由：</p><ul><li>默认路由0.0.0.0/0：不在路由表中详细指明目的网络的，采用默认路由，默认通过某个端口转发。放在路由表最后面</li><li>主机路由x.x.x.x/32：对特定目的主机的IP地址专门指明的一个路由。放在路由表最前面，多为管理员/防火墙使用。</li><li>链路路由x.x.x.x/31：点对点链路，路由器之间</li></ul><p>转发过程：</p><ol><li>主机H1掩码按位与，获得目的地址的网络号，若在本网络上，直接交付；否则向其他路由器R1转发。</li><li>ARP匹配MAC地址</li><li>R1查找路由表，匹配到之后直接（通过接口直达）/间接交付（给下一个路由器）</li><li>ARP匹配MAC地址</li><li>…</li></ol><h3 id="2-最长前缀匹配"><a href="#2-最长前缀匹配" class="headerlink" title="2.最长前缀匹配"></a>2.最长前缀匹配</h3><p>使用CIDR时，可能得到不止一个匹配结果。</p><p>最长前缀匹配原则：选择前缀最长的一个作为匹配的前缀。网络前缀越长，地址块越小，路由越具体。</p><p>将前缀最长的排在路由表第一行。</p><p>注：直接交付也应当符合最长前缀匹配。</p><h3 id="3-使用二叉线索查找路由表"><a href="#3-使用二叉线索查找路由表" class="headerlink" title="3.使用二叉线索查找路由表"></a>3.使用二叉线索查找路由表</h3><p>二叉线索 (binary trie)：一种特殊结构的树，可以快速在路由表中找到匹配的叶节点。</p><p>从二叉线索的根节点自顶向下的深度最多有 32 层，每一层对应于 IP 地址中的一位。</p><p>为简化二叉线索的结构，可以用唯一前缀 (unique prefix) 来构造二叉线索。</p><p>为了提高二叉线索的查找速度，广泛使用了各种压缩技术。</p><p>构建：</p><p>规则：先检查 IP 地址左边的第一位，如为 0，则第一层的节点就在根节点的左下方；如为 1，则在右下方。然后再检查地址的第二位，构造出第二层的节点。依此类推，直到唯一前缀的最后一位。每个叶节点代表一个唯一前缀。</p><p>为检查网络前缀是否匹配，必须使二叉线索中的每一个叶节点包含所对应的网络前缀和掩码。</p><p>查找：</p><ol><li><p>找到了一个叶节点。</p><p>将目的 IP 地址和该叶节点的掩码进行按位 AND 运算，看结果是否与叶节点的网络前缀相匹配。</p><p>若匹配，就按下一跳的接口转发该分组。</p></li><li><p>查到第三个字符 0 时，在二叉线索中找不到匹配的。说明这个地址不在这个二叉线索中。</p><p>检查是否存在默认路由。若有，把分组传送到指明的默认路由器，否则丢弃该分组。</p></li></ol><h2 id="4-4-ICMP"><a href="#4-4-ICMP" class="headerlink" title="4.4 ICMP"></a>4.4 ICMP</h2><p>网际控制报文协议Internet Control Message Protocol</p><p>允许主机或路由器报告差错情况和提供有关异常情况的报告。</p><p>种类：ICMP差错报告报文；ICMP询问报文</p><p>（报文一般为应用层称呼，但出于习惯…）</p><img src="net/492482A4A33B80ADBEA0482967A384DE.png" alt="img" style="zoom:67%;" /><img src="net/97BC0C39B1D09DABEFDC186967A71E76.png" alt="img" style="zoom:67%;" /><h3 id="差错报告报文"><a href="#差错报告报文" class="headerlink" title="差错报告报文"></a>差错报告报文</h3><img src="net/BB82F03D1A5350190C09C8BE8901CB44.png" alt="img" style="zoom: 50%;" /><p>抽象图解释：A-R-B发送数据，然后到R出错了，应当由R向A发送ICMP差错报告报文，此时源地址R，目的地址A</p><p>不发送ICMP差错报告报文的情况：</p><ol><li>对 ICMP 差错报告报文不再发送 ICMP 差错报告报文。（loop差错）</li><li>对第一个分片的数据报片的所有后续数据报片都不发送 ICMP 差错报告报文。（发了第一个不对-那么所有报片都会被重发）</li><li>对具有多播地址的数据报都不发送 ICMP 差错报告报文。（不知道要发给谁）（？IP多播有吧）</li><li>对具有特殊地址（如127.0.0.0 （环回地址）或 0.0.0.0（主机我））的数据报不发送 ICMP 差错报告报文。（话说CIDR有环回地址吗）</li></ol><h3 id="询问报文"><a href="#询问报文" class="headerlink" title="询问报文"></a>询问报文</h3><p>(1) 回送请求和回答</p><p>由主机或路由器向一个特定的目的主机发出的询问。</p><p>收到此报文的主机必须给源主机或路由器发送 ICMP 回送回答报文。</p><p>这种询问报文用来测试目的站是否可达，以及了解其有关状态。了解对方是否开机；探路；排错；定位到主机/路由器等。</p><p>(2) 时间戳请求和回答</p><p>请某台主机或路由器回答当前的日期和时间。</p><p>时间戳回答报文中有一个 32 位的字段，其中写入的整数代表从1900 年 1 月 1 日起到当前时刻一共有多少秒。</p><p>时间戳请求与回答可用于时钟同步和时间测量，测试网络延迟等。</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>PING packet internet grope</p><p>Traceroute</p><h2 id="4-5-Internet路由选择协议"><a href="#4-5-Internet路由选择协议" class="headerlink" title="4.5 Internet路由选择协议"></a>4.5 Internet路由选择协议</h2><p>理想的路由算法：正确、完整、简单、自适应（适应通信量和网络拓扑变化）、稳定、公平、最佳</p><p>不存在绝对最佳，最佳只是相对于某一种特定要求下得出的较为合理的选择。尽可能接近理想情况。</p><p>从路由算法的自适应性考虑：</p><ol><li>静态路由选择策略（已废弃）</li><li>动态路由选择策略：自适应路由选择，能够适应网络状态变化，但是实现起来较为复杂，开销较大。</li></ol><p>分层次的路由选择协议</p><h3 id="自治系统AS"><a href="#自治系统AS" class="headerlink" title="自治系统AS"></a>自治系统AS</h3><p>Autonomous System</p><p>​    定义：在单一的技术管理</p><ul><li>Internet将整个互联网划分成较小的AS</li><li>一个AS 是一个互联网，特点：AS有权自主地决定在本系统内使用何种路由协议（有且仅有一个，RIP/OSPF；路由选择评价标准一致）</li></ul><p>自治系统内的路由选择-域内路由选择，使用IGP</p><p>自制系统外的路由选择-域间路由选择，使用EGP</p><h3 id="内部网关协议IGP"><a href="#内部网关协议IGP" class="headerlink" title="内部网关协议IGP"></a>内部网关协议IGP</h3><h4 id="RIP-路由信息协议"><a href="#RIP-路由信息协议" class="headerlink" title="RIP 路由信息协议"></a>RIP 路由信息协议</h4><p>router information protocol</p><p>应用层协议</p><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>RIP协议认为距离最短的就是最优的路径。</p><p>距离的定义：从⼀路由器到直接连接的⽹络的距离定义为1，从⼀个路由器到⾮直接连接的⽹络的距离定义为所经过的路由器数加1。距离也称为跳数(hop count)，因为每经过⼀个路由器，跳数+1。</p><p>RIP协议允许⼀条路径最多只能包含15个路由器，距离为<strong>16</strong>时相当于不可达（代码中置为inf，⼀个⼤整型），因此RIP仅适⽤于⼩型互联⽹。</p><p>RIP按照固定的时间间隔（如30s）与相邻的路由器交换路由信息（双⽅交换整个的路由表）。</p><p>路由器在刚刚开始⼯作时，只知道到直接连接的⽹络的距离（距离定义为1，下⼀跳为直接交付），之后每⼀个路由器也只和相邻路由器交换并更新路由信息。经过若⼲次更新后，所有的路由器最终都会直到到达本⾃制系统中任何⼀个⽹络的最短距离和下⼀跳路由器的地址。</p><h5 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h5><p>路由器A接收到来自B的路由表后，做出如下之⼀操作：</p><p>寻找B能够到达，而自身不能到达的目的网络。此时更新A路由表，增加新的一行，目的网络为这⼀新的目的网络，距离=B距离+1，下⼀跳为B。</p><p>寻找自身和B都到达的目的网络，且B是A的下⼀跳。此时⽆论⽹络状态变好或变差，更新距离=B 距离+1。</p><p>寻找自身和B都到达的目的网络，且B到达这⼀⽬的⽹络的距离&lt;A到达这⼀目的网络的距离，更新距离=B距离+1。</p><p>⼀定时间后，若B未向A发送路由表，认为B 不可达。A路由表中下⼀跳为B的信息，其距离=16（即不可达）。</p><h5 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h5><img src="net/8AA658C6E4FC6E168E9704510AC5AAA0.png" alt="img" style="zoom: 50%;" /><h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h5><p>优点：实现简单，开销小</p><p>缺点：</p><ol><li>没有负载均衡机制。RIP协议认为距离最短的就是最优的路径，即便在实际使⽤中还存在⼀条⾼速（低时延）但路由器较多的路由。并且RIP不能在两个⽹络之间同时使⽤多条路由。</li><li>限制了网络规模。最大16跳</li><li>“好消息传得快，坏消息传得慢”。在⽹络所有路由器都正常⼯作的情况下（好消息），此时RIP收敛速度较快；但⽹络中一旦出现某台路由器由于某些原因导致故障（不可达），故障信息（坏消息）的传递会受到协议⾃⾝的限制出现两个路由器之间递归，到达最⼤跳数16时才能检出故障。</li><li>随着网络规模扩大，开销也将增加（路由器之间交换完整路由表的开销）</li></ol><h4 id="OSPF-开放最短路优先"><a href="#OSPF-开放最短路优先" class="headerlink" title="OSPF 开放最短路优先"></a>OSPF 开放最短路优先</h4><p>open shortest path first</p><p>网际层协议~~</p><h5 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h5><p>open：开放的协议，不受厂商控制</p><p>SPF：dijkstra算法</p><p>ospf是一个分布式的链路状态协议，每个路由器都维护一个链路状态数据库，数据库实际上就是本自治系统的网络拓扑结构图。各路由器频繁交换信息，实现链路状态数据库在全网范围内的一致（称为链路状态数据库的同步）。路由器基于此数据库，采用dijkstra算法生成路由表。</p><h5 id="信息交换"><a href="#信息交换" class="headerlink" title="信息交换"></a>信息交换</h5><p>使用洪泛法向本AS所有路由器发送信息（直接向邻居，间接向其他所有路由器）</p><p>信息是与本路由器相邻的所有路由器的链路状态/对当前网络拓扑的认知（说明本路由器与谁相邻，以及该相邻链路上的代价/度量）</p><p>只有链路状态发生变化时，路由器才发送信息。</p><p>五种信息分组</p><img src="net/image-20221220180345578.png" alt="image-20221220180345578" style="zoom: 67%;" /><ol><li>相邻路由器每10s交换一次问候分组，若超过40s没有受到，认为其不可达。</li><li>摘要信息：有哪些路由器的链路状态信息已写入数据库。降低开销。</li><li>没有注释</li><li>只要链路状态发生变化，路由器就使用链路状态更新分组，采用可靠的洪泛法向全网更新链路状态。</li><li>没有注释</li></ol><p>可靠的洪泛法：有限的确认，不会出现大量无效信息（A发给B，B洪泛时不再发给A）</p><h5 id="OSPF的区域"><a href="#OSPF的区域" class="headerlink" title="OSPF的区域"></a>OSPF的区域</h5><p>使OSPF能作用于规模很大的网络，在AS下划分更小的范围，叫做区域。区域使用32位标识符（点分十进制表示）</p><p>一个区域内路由器最好不超过200个。</p><p>体现分层设计的思想（主干区域-其他在下层的区域，2层）</p><p>主干区域专用于连接下层区域、其他自治系统，标识符规定为0.0.0.0</p><p>一个区域的内部路由器只知道本区域的完整网络拓扑，而不知道其他区域网络拓扑情况。</p><p>优点：将洪泛的范围局限于每一个区域，而不是整个AS，使通信量减小。</p><p>缺点：交换信息的种类增加，更加复杂（但是值得）</p><h5 id="报文格式-1"><a href="#报文格式-1" class="headerlink" title="报文格式"></a>报文格式</h5><img src="net/image-20221220185125194.png" alt="image-20221220185125194" style="zoom:67%;" /><p>运输层协议，使用IP数据报传送。构成的数据报很短，减少路由信息的通信量，可以不必将长数据报分片传送，一定程度上避免分片出错重传。</p><h5 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h5><p>优点</p><ul><li>更新过程收敛快</li><li>多种度量，可设置不同的代价</li><li>适合大型互联网</li><li>多路径负载平衡：如果同一个目的网络有多条相同代价的路径，可以将通信量分配给这几条路径。</li><li>OSPF分组具有鉴别功能，安全</li></ul><p>缺点：实现复杂</p><h3 id="外部网关协议EGP"><a href="#外部网关协议EGP" class="headerlink" title="外部网关协议EGP"></a>外部网关协议EGP</h3><h4 id="BGP"><a href="#BGP" class="headerlink" title="BGP"></a>BGP</h4><p>是<strong>不同AS</strong>的路由器之间交换路由信息的协议。</p><p>只保证可达，不考虑最佳</p><p>采用路径向量路由选择协议</p><p>应用层协议</p><h5 id="边界路由器"><a href="#边界路由器" class="headerlink" title="边界路由器"></a>边界路由器</h5><p>BGP speaker</p><p>每一个自制系统的管理员至少选择一个路由器作为边界路由器</p><p>一个边界路由器与其他AS的边界路由器交换信息，要先建立TCP连接，然后在此连接上交换BGP报文以建立BGP会话，利用BGP会话交换路由信息。使用TCP能够提供可靠服务，也简化了路由选择协议。</p><h5 id="目标前缀"><a href="#目标前缀" class="headerlink" title="目标前缀"></a>目标前缀</h5><p>就是目的网络的意思，不要混淆</p><h5 id="eBGP"><a href="#eBGP" class="headerlink" title="eBGP"></a>eBGP</h5><p>external BGP</p><p>边界路由器在AS之间建立的半永久性TCP连接，eBGP在不同AS间交换路由信息</p><h5 id="iBGP"><a href="#iBGP" class="headerlink" title="iBGP"></a>iBGP</h5><p>internal BGP</p><p>在AS内部，任何互相通信的路由器之间必须有一个逻辑连接（也使用TCP），在AS内部的路由器之间交换BGP路由信息。</p><p>BGP协议不仅运行在AS之间，也运行在AS内部。</p><p>因此：</p><ul><li>在AS内部运行的协议：IGP（OSPF/RIP）、iBGP</li><li>在AS之间运行的协议：eBGP</li></ul><p>eBGP&amp;iBGP使用的报文类型、属性、状态机等都完全一致，在通报前缀（目的网络）时，使用的规则不同：</p><ul><li>在eBGP连接的对等端得知的目的网络信息，可以通报给一个iBGP连接的对等端</li><li>在iBGP中，不通报给另一个iBGP连接的对等端</li></ul><img src="net/image-20221226105807534.png" alt="image-20221226105807534" style="zoom: 80%;" /><h5 id="BGP路由信息"><a href="#BGP路由信息" class="headerlink" title="BGP路由信息"></a>BGP路由信息</h5><p>BGP路由=[前缀(目的网络)，BGP属性]=[前缀，AS-PATH，NEXT-HOP]   即路由表一行中的信息</p><img src="net/image-20221226110058665.png" alt="image-20221226110058665" style="zoom:80%;" /><img src="net/image-20221226110323140.png" alt="image-20221226110323140" style="zoom:80%;" /><img src="net/image-20221226110722429.png" alt="image-20221226110722429" style="zoom:80%;" /><h5 id="BGP路由选择策略"><a href="#BGP路由选择策略" class="headerlink" title="BGP路由选择策略"></a>BGP路由选择策略</h5><ol><li><p>本地偏好(local preference)值最高的路由</p><img src="net/image-20221226111200984.png" alt="image-20221226111200984" style="zoom: 67%;" /></li><li><p>AS跳数最小的路由</p><p>字面意思，仅考虑AS数量最少，即便可能在AS4中会经过更多次数的转发</p></li><li><p>热土豆路由选择算法</p><p>选择能最快离开本AS的路径</p></li><li><p>路由器BGP ID数值最小的路由</p><p>这位更是()，R1c序号比1d小，所以选1c</p></li></ol><p>避免兜圈子：在属性AS-PATH中，不允许出现相同的AS号。</p><img src="net/image-20221226111446415.png" alt="image-20221226111446415" style="zoom:80%;" /><p>三种AS：</p><ul><li>末梢AS：不转发来自其他AS的分组，自身向所连接的AS付费</li><li>穿越AS：为其他AS转发分组，其他AS付费</li><li>对等AS：事先协商的两个AS，彼此之间的发送或接收分组都不付费</li></ul><h5 id="BGP报文"><a href="#BGP报文" class="headerlink" title="BGP报文"></a>BGP报文</h5><ul><li>(1) 打开(OPEN)报文，用来与相邻边界路由器建立关系。</li><li>(2) 更新(UPDATE)报文，用来发送某一路由的信息，以及列出要撤消的多条路由。</li><li>(3) 保活(KEEPALIVE)报文，用来确认打开报文和周期性地证实邻站关系。</li><li>(4) 通知(NOTIFICATION)报文，用来发送检测到的差错。</li><li>在 RFC 2918 中增加了 ROUTE-REFRESH 报文，用来请求对等端重新通告。</li></ul><p>报文格式</p><img src="net/image-20221226111819911.png" alt="image-20221226111819911" style="zoom:67%;" /><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><ol><li>BGP协议交换路由信息的节点数是自制系统数，维护路由表开销不大</li><li>每个AS的边界路由器数目很少，使自制系统之间的路由选择不会过分复杂</li><li>BGP支持CIDR，因此BGP的路由表包括<u>目的网络前缀</u>、下一跳路由器，以及到达该目的网络所要经过的各个自制系统序列</li><li>BGP刚刚运行时，BGP交换整个路由表；之后只需要在发生变化时更新有变化的部分</li></ol><h3 id="路由器的构成"><a href="#路由器的构成" class="headerlink" title="路由器的构成"></a>路由器的构成</h3><p>功能：接收数据、转发数据，隔绝广播</p><h4 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h4><p>路由器是一种具有多个输入端口和多个输出端口的专用计算机，其任务是转发分组。即，路由器某个输入端口收到的分组，按照分组的目的网络，把该分组从路由器的某个合适的输出端口转发给下一跳。下一跳的路由器递归进行这种处理，直到分组到达终点。</p><img src="net/image-20221226114154366.png" alt="image-20221226114154366" style="zoom:80%;" /><p>转发和路由选择的区别</p><p>转发forwarding：路由器根据路由表将用户IP数据报从合适的端口转发出去。</p><p>路由选择routing：按照路由协议/算法，动态改变所选择的路由。</p><p>路由表是根据路由算法得出的，转发表是从路由表得出的。</p><p>输入端口的处理：数据链路层剥去帧首部和尾部后，将分组送到网络层的队列中排队等待处理，这会产生一定时延</p><img src="net/image-20230104102833270.png" alt="image-20230104102833270" style="zoom:80%;" /><p>输出端口的处理：与输入类似的反过程，先缓存，然后数据链路层加帧首尾，交给物理层后转发给外部线路。</p><img src="net/image-20230104102948665.png" alt="image-20230104102948665" style="zoom:80%;" /><p>分组丢弃：队列缓存空间耗尽，后面再进入队列的分组由于没有存储空间被丢弃，是造成分组丢失的重要原因，根本原因之一。</p><p>丢弃最主要发生在输入端口缓存</p><h4 id="交换结构"><a href="#交换结构" class="headerlink" title="交换结构"></a>交换结构</h4><p>这是什么？</p><h5 id="通过存储器交换"><a href="#通过存储器交换" class="headerlink" title="通过存储器交换"></a>通过存储器交换</h5><img src="net/image-20230104103705321.png" alt="image-20230104103705321" style="zoom:67%;" /><h5 id="通过总线交换"><a href="#通过总线交换" class="headerlink" title="通过总线交换"></a>通过总线交换</h5><img src="net/image-20230104103719935.png" alt="image-20230104103719935" style="zoom:67%;" /><h5 id="纵横交换结构"><a href="#纵横交换结构" class="headerlink" title="纵横交换结构"></a>纵横交换结构</h5><img src="net/image-20230104103730552.png" alt="image-20230104103730552" style="zoom:67%;" /><h2 id="4-6-IP多播"><a href="#4-6-IP多播" class="headerlink" title="4.6 IP多播"></a>4.6 IP多播</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>多播multicast</p><p>单播 一对一，广播 一对多，多播介于两者之间，一对n</p><p>可以大大节约网络资源</p><p>在互联网上进行多播叫IP多播，能够运行多播协议的路由器叫多播路由器</p><h4 id="多播IP地址"><a href="#多播IP地址" class="headerlink" title="多播IP地址"></a>多播IP地址</h4><p>IP多播所传送的分组需要使用多播IP地址作为目的地址</p><p>IPv4中，多播地址就是IP地址中的D类地址</p><p>每一个D类地址标志一个多播组224.0.0.0-239.255.255.255</p><h4 id="多播数据报"><a href="#多播数据报" class="headerlink" title="多播数据报"></a>多播数据报</h4><p>尽最大努力的交付，不保证能够播到所有成员</p><p>不产生ICMP差错报文</p><h3 id="局域网上的硬件多播"><a href="#局域网上的硬件多播" class="headerlink" title="局域网上的硬件多播"></a>局域网上的硬件多播</h3><p>IP-&gt;MAC不使用ARP，使用简单换算的以太网多播地址块(?)</p><img src="net/image-20230104120918907.png" alt="image-20230104120918907" style="zoom:67%;" /><img src="net/image-20230104152356465.png" alt="image-20230104152356465" style="zoom:67%;" /><h3 id="IGMP网际组管理协议-amp-多播路由选择协议"><a href="#IGMP网际组管理协议-amp-多播路由选择协议" class="headerlink" title="IGMP网际组管理协议&amp;多播路由选择协议"></a>IGMP网际组管理协议&amp;多播路由选择协议</h3><h4 id="IGMP"><a href="#IGMP" class="headerlink" title="IGMP"></a>IGMP</h4><p>网际组管理协议Internet Group Management Protocol</p><p>多播路由选择协议：协同工作，路由选择，转发数据</p><p>IGMP使多播路由器知道多播组成员信息，只知道有没有，不知道是谁，不知道成员分布在哪些网络上</p><p>IP在多播的扩展：IGMP报文加上IP首部构成IP数据报。IGMP也向IP提供服务，因此把IGMP看作IP的一个组成部分</p><p>IGMP工作可分为两阶段：1加入多播组；2探询组成员变化情况。</p><p>使用范围：</p><ul><li>多播路由器必须动态适应多播组成员的变化，因为每一台主机可以随时加入和离开。</li><li>多播数据报可以由没有加入多播组的主机发出，也可以通过没有组成员的接入网络。</li></ul><p>IGMP采用一些措施，避免增加大量开销</p><ul><li>所有通信都使用IP多播(?)，并尽可能使用硬件多播</li><li>对所有的组只发送一个请求信息的询问（询问：有组成员吗-&gt;回答：组x有）（而不是，询问：组x有吗-&gt;回答有）（节省开销，只收一条有无的回复）</li><li>当同一个网络上连接有多个多播路由器时，能迅速选择其中的一个来探询主机的成员关系</li><li>分散响应。采用随机数，让主机顺序发言（</li><li>抑制机制。同一组内每一个主机都要监听响应，只要有本组的其他主机先发送响应，自己就不再发送。</li></ul><h4 id="多播路由选择"><a href="#多播路由选择" class="headerlink" title="多播路由选择"></a>多播路由选择</h4><img src="net/image-20230104165420601.png" alt="image-20230104165420601" style="zoom:67%;" /><img src="net/image-20230104165459198.png" alt="image-20230104165459198" style="zoom:67%;" /><p>多播路由选择方法：</p><ol><li>反向路径广播RPB（检查是否经最短路径传送来的，查单播表，若到达反向主机，看下一跳是否为R1，若是，是来自R1的最优路径，转发；否，不转发）</li><li>洪泛与减除</li><li>隧道技术（在不支持多播的网络中封装成单播IP数据报传送）</li><li>基于核心的发现技术（对每个多播组指定核心路由器，为每一个多播组构建一个转发树，而不是每个源构建。开销较小，扩展性较好）</li></ol><h2 id="4-7-IPv6"><a href="#4-7-IPv6" class="headerlink" title="4.7 IPv6"></a>4.7 IPv6</h2><h3 id="IPv6基本首部"><a href="#IPv6基本首部" class="headerlink" title="IPv6基本首部"></a>IPv6基本首部</h3><h4 id="主要变化"><a href="#主要变化" class="headerlink" title="主要变化"></a>主要变化</h4><ol><li>更大的地址空间。地址增大到128位，2^128</li><li>扩展的地址层次结构。不进行地址块划分</li><li>灵活的首部格式。定义了许多可选的扩展首部</li><li>改进的选项。允许数据报包含有选项的控制信息，可根据自身需求增加字段（可编程的）</li><li>允许协议继续扩充</li><li>支持自动配置。不需要使用DHCP</li><li>支持资源预分配。QoS使用</li><li>IPv6首部改为8字节对齐。首部长度必须是8B的整数倍</li></ol><h4 id="数据报一般格式"><a href="#数据报一般格式" class="headerlink" title="数据报一般格式"></a>数据报一般格式</h4><p>由两大部分组成：基本首部+有效载荷</p><p>基本首部40B</p><p>有效载荷payload，也称净负荷，不超过65535B，有效载荷允许0-n个扩展首部，在后面是数据部分</p><img src="net/image-20230108173259228.png" alt="image-20230108173259228" style="zoom:67%;" /><p>版本：4b，IPv6该字段为6</p><p>通信量类traffic class/服务类型：8b，为了区分不同的IPv6数据报的类别或优先级，与QoS（quality of service？）有关</p><p>流标号flow label：20b，“流”是互联网络上从特定源点到特定终点的一系列数据报，“流”所经过的路径上的路由器都保证指明的服务质量。所有属于同一个流的数据报都具有同样的流标号。</p><p><strong>流</strong>：源到目的地的一批数据，标号相同则属于同一段流，同一段流各种传输、各种属性都一致</p><p>有效载荷长度payload length：16b，指明IPv6数据报除基本首部以外的字节数（所有扩展首部都计算在有效载荷之内），最长64KB的扩展首部</p><p>下一个首部next header：8b，相当于IPv4协议字段或可选字段？</p><p>跳数限制：8b，数据报发出时设置跳数限制，路由器每次转发时-1，值为0时丢弃数据报，防止兜圈子</p><p>源地址，目的地址：128b</p><p>有效载荷/扩展首部：IPv6将原来IPv4中选项功能放在扩展首部中，且扩展首部在中间路由不处理，只在两端的源站和目的站处理（特例：逐跳选项扩展首部）。提高了路由器的处理效率</p><img src="net/image-20230109095649190.png" alt="image-20230109095649190" style="zoom:67%;" /><img src="net/image-20230109095757164.png" alt="image-20230109095757164" style="zoom:67%;" /><h3 id="IPv6的地址"><a href="#IPv6的地址" class="headerlink" title="IPv6的地址"></a>IPv6的地址</h3><p>目的地址可以是：</p><ol><li>单播unicast：传统的点对点通信</li><li>多播multicast：一对多的通信</li><li>任播anycast：IPv6增加的类型；DNS是一种任播<ul><li>任播的目的站是一组计算机，但数据报在交付时只交付其中的一个，通常是距离最近的一个</li><li>任播地址不能做报文源地址</li><li>任播地址只能分配给路由器，不能分配给主机</li></ul></li><li>IPv6没有定义广播地址，认为广播是多播特例</li></ol><h4 id="节点与接口"><a href="#节点与接口" class="headerlink" title="节点与接口"></a>节点与接口</h4><p>IPv6将实现IPv6的主机和路由器均称为节点</p><p>一个节点可能有多个与链路相连的接口，IPv6地址分配给节点上面的接口。（和实验中分配IPv4的一样）</p><h4 id="冒号十六进制记法"><a href="#冒号十六进制记法" class="headerlink" title="冒号十六进制记法"></a>冒号十六进制记法</h4><p>每16位的值用1位十六进制值表示，各值之间用冒号分割，如</p><p>68E6:8C64:FFFF:FFFF:0:1180:960A:FFFF</p><p>8段，4(一个字母4b)x4(4个16进制一段)x8(8段)=128b</p><p>允许把数字前的0省略，例如0000可以写成0</p><h5 id="零压缩"><a href="#零压缩" class="headerlink" title="零压缩"></a>零压缩</h5><p>一串连续的0可以省略，写两个冒号</p><p>FF05:0:0:0:0:0:0:B3-&gt;FF05**::**B3</p><p>注意：只能用一次零压缩</p><p>12AB:0:0:CD30:0:0:0:0/60 压缩为</p><p>12AB**::**CD30:0:0:0:0/60 或</p><p>12AB:0:0:CD30**::**/60</p><h5 id="点分十进制法的后缀"><a href="#点分十进制法的后缀" class="headerlink" title="点分十进制法的后缀"></a>点分十进制法的后缀</h5><p>可结合使用点分十进制，将IPv4转换为IPv6地址。如</p><p>0:0:0:0:0:0:128.10.2.1-&gt;::128.10.2.1</p><p>后面128.10.2.1是十进制的，不需要再转换16进制的意思吧</p><p>CIDR斜线记法仍然可用</p><p>IPv6不再使用掩码（没必要使用）</p><h4 id="IPv6常用地址"><a href="#IPv6常用地址" class="headerlink" title="IPv6常用地址"></a>IPv6常用地址</h4><img src="net/image-20230109103748473.png" alt="image-20230109103748473" style="zoom:67%;" /><p>全球单播地址 详细的在ppt有，有点乱</p><h3 id="从IPv4向IPv6过渡"><a href="#从IPv4向IPv6过渡" class="headerlink" title="从IPv4向IPv6过渡"></a>从IPv4向IPv6过渡</h3><p>IPv6要兼容IPv4，能够为v4提供路由服务。</p><h4 id="使用双协议栈"><a href="#使用双协议栈" class="headerlink" title="使用双协议栈"></a>使用双协议栈</h4><p>双协议栈dual stack：在完全过渡到IPv6之前，使一部分主机/路由器装两个协议栈，一个v4一个v6</p><p>双协议栈主机记为IPv6/IPv4，表明它同时具有两种IP地址，一个v4地址，一个v6地址。</p><img src="net/image-20230109160756046.png" alt="image-20230109160756046" style="zoom:67%;" /><h4 id="使用隧道技术"><a href="#使用隧道技术" class="headerlink" title="使用隧道技术"></a>使用隧道技术</h4><p>在IPv6数据报要进入IPv4网络时，把IPv6数据报封装成IPv4数据报，整个的IPv6数据报变成了IPv4的数据部分</p><p>当v4数据报离开v4网络的隧道进入v6网络时，再把数据部分（即v6数据报）交给主机的v6协议栈</p><img src="net/image-20230109161044955.png" alt="image-20230109161044955" style="zoom:67%;" /><h3 id="ICMPv6"><a href="#ICMPv6" class="headerlink" title="ICMPv6"></a>ICMPv6</h3><p>IPv6也不保证数据报可靠交付，路由器也可能丢弃数据报，因此使用ICMP来反馈一些差错信息，新版本称为ICMPv6。</p><p>此外，地址解析协议ARP和网际组管理协议IGMP（多播管理）的功能都被合并到ICMPv6中</p><img src="net/image-20230109161649754.png" alt="image-20230109161649754" style="zoom:67%;" /><h4 id="ICMPv6报文的分类"><a href="#ICMPv6报文的分类" class="headerlink" title="ICMPv6报文的分类"></a>ICMPv6报文的分类</h4><img src="net/image-20230109161704569.png" alt="image-20230109161704569" style="zoom:67%;" /><h2 id="4-8-VPN-amp-NAT"><a href="#4-8-VPN-amp-NAT" class="headerlink" title="4.8 VPN&amp;NAT"></a>4.8 VPN&amp;NAT</h2><h3 id="虚拟专用网VPN"><a href="#虚拟专用网VPN" class="headerlink" title="虚拟专用网VPN"></a>虚拟专用网VPN</h3><p>virtual private network</p><p>核心原理：数据加密</p><p>节省IP地址的策略：</p><ol><li>无分类划分CIDR</li><li>VPN</li><li>NAT</li></ol><p>由于IPv4地址紧缺，一个机构能申请到的IP地址数往往小于本机构主机数。考虑到安全性，也并不需要将所有主机接入到外部互联网。假定机构内部的计算机通信也是采用TCP/IP协议，仅在机构内部使用的计算机就可以自行分配其IP地址。通过这一原理可以设置网络防火墙，外部无法得知内部主机IP，但不防内部攻击。</p><p>本地地址：仅在机构内使用的IP，可以由本机构自行分配</p><p>全球地址：全球唯一的IP地址，必须向互联网的管理机构申请</p><p>但会出现本地地址和全球地址重复，产生二义性。因此制定了一些专用地址，只能用作本地地址，在互联网中的所有路由器都不转发目的地址是专用地址的数据报</p><p>三个专用IP地址块：</p><ul><li>A类，10.0.0.0-10.255.255.255。或记为10.0.0.0/8，又称为24位块（前缀网络号8位，主机号24位）</li><li>B类，172.16.0.0-172.31.255.255。或记为172.16.0.0/12，又称为20位块</li><li>C类，192.168.0.0/16-192.168.255.255。或记为192.168.0.0/16，又称为16位块（常用作FTP服务器）</li></ul><p>专用互联网/本地互联网/专用网：采用这样专用IP地址的互联网络</p><p>可重用地址resuable address：这些专用地址仅在本机构内部使用，并且可以在物理上集中/分散，在其他机构可以重用</p><p><strong>虚拟专用网VPN</strong>：利用公用的互联网作为本机构各专用网之间的通信载体，这样的专用网称为虚拟专用网。专用网专用于机构内部的通信；虚拟表示 好像是 但实际不是，因为没有真正使用通信专线，而VPN只是在效果上和真正的专用网一样。</p><p>如果专用网不同网点之间的通信必须经过公用的互联网，但又有保密要求，那么所有通过互联网传送的数据都必须加密。构建VPN，需要机构为每个场所购买专门的硬件和软件并配置，使每个场所的VPN系统都知道其他场所的地址。</p><h4 id="用隧道技术实现虚拟专用网"><a href="#用隧道技术实现虚拟专用网" class="headerlink" title="用隧道技术实现虚拟专用网"></a>用隧道技术实现虚拟专用网</h4><img src="net/image-20230109171653095.png" alt="image-20230109171653095" style="zoom:67%;" /><img src="net/image-20230109171706846.png" alt="image-20230109171706846" style="zoom:67%;" /><h4 id="内联网-amp-外联网"><a href="#内联网-amp-外联网" class="headerlink" title="内联网&amp;外联网"></a>内联网&amp;外联网</h4><p>内联网intranet：由部门A和B的内部网络所构成的虚拟专用网VPN，表示部门A和B都是在一个机构的内部。</p><p>外联网extranet：一个机构和某些外部机构共同建立的VPN。</p><h4 id="远程接入VPN"><a href="#远程接入VPN" class="headerlink" title="远程接入VPN"></a>远程接入VPN</h4><p>remote access VPN</p><p>满足外部流动员工访问公司网络的需求。</p><p>在外地工作的员工拨号接入互联网，在员工PC机中的VPN软件可在PC机和公司的主机之间建立VPN隧道，外地员工与公司通信的内容是保密的，员工感觉好像在使用公司内部的本地网络。</p><h3 id="网络地址转换NAT"><a href="#网络地址转换NAT" class="headerlink" title="网络地址转换NAT"></a>网络地址转换NAT</h3><p>在专用网上，使用专用地址的主机与互联网上的主机通信–NAT</p><p>路由器需安装NAT软件，称为NAT路由器，至少有一个全球IP地址。使用本地地址的主机与外界通信时，都要在NAT路由器上将其本地地址转换成全球地址，才能与互联网连接。</p><img src="net/image-20230110113306479.png" alt="image-20230110113306479" style="zoom:80%;" /><ol><li>内部主机 A 用本地地址 IPA 和互联网上主机 B 通信所发送的数据报必须经过 NAT 路由器。</li><li>NAT 路由器将数据报的源地址 IPA 转换成全球地址 IPG，并把转换结果记录到NAT地址转换表中，目的地址 IPB 保持不变，然后发送到互联网。</li><li>NAT 路由器收到主机 B 发回的数据报时，知道数据报中的源地址是 IPB 而目的地址是 IPG。</li><li>根据 NAT 转换表，NAT 路由器将目的地址 IPG 转换为 IPA，转发给最终的内部主机 A。 </li></ol><img src="net/image-20230110120344407.png" alt="image-20230110120344407" style="zoom:80%;" /><p>NAT路由器有n个全球IP地址时，专用网内最多有n台主机接入到互联网，主机可以轮流使用优先数量的全球IP地址。通过NAT的通信必须由专用网内的主机发起，内部的主机不能充当服务器，因为互联网上的客户无法请求专用网内的主机。</p><h4 id="网络地址与端口号转换NAPT"><a href="#网络地址与端口号转换NAPT" class="headerlink" title="网络地址与端口号转换NAPT"></a>网络地址与端口号转换NAPT</h4><p>为了更加有效地利用 NAT 路由器上的全球IP地址，现在常用的 NAT 转换表把运输层的端口号也利用上。这样，就可以使多个拥有本地地址的主机，共用一个 NAT 路由器上的全球 IP 地址，因而可以同时和互联网上的不同主机进行通信。</p><p>使用端口号的 NAT 叫做网络地址与端口号转换NAPT (Network Address and Port Translation)，而不使用端口号的 NAT 就叫做传统的 NAT (traditional NAT)。</p><h2 id="4-9-MPLS多协议标签转换"><a href="#4-9-MPLS多协议标签转换" class="headerlink" title="4.9 MPLS多协议标签转换"></a>4.9 MPLS多协议标签转换</h2><p>多协议标签转换Multi-Protocol Label Switching</p><p>更快的转发分组，不查路由表即可转发</p><p>作用在网络层-数据链路层之间</p><p>是一种IP增强技术，路由器通过一次快速查表完成数据转发</p><p>多协议：MPLS的上层可以采用多种协议，例如IP，IPX；可以使用多种数据链路层协议，例如PPP，以太网，ATM（千兆以太网-异步传输）等</p><p>标签：给每个分组打上一个标签，根据该标签对分组进行转发。根据短而定长的标签转发报文，省去了通过软件查找IP路由的繁琐过程，数据传输更高速高效。</p><img src="net/image-20230110160432488.png" alt="image-20230110160432488" style="zoom:80%;" /><h3 id="MPLS工作原理"><a href="#MPLS工作原理" class="headerlink" title="MPLS工作原理"></a>MPLS工作原理</h3><p>利用面向连接的概念，使每个分组携带一个叫做标签的小整数。当分组到达标签交换路由器时，标签交换路由器读取分组的标签，用标签值来检索分组转发表。这样比查找路由表来转发分组快得多。</p><p>MPLS域：该域中所有的路由器都是支持MPLS技术的<strong>标签交换路由器</strong>LSR(label switching router)。</p><p>LSR：同时具有标签交换和路由选择功能，标签交换是为了快速转发，但在这之前LSR需要使用路由选择功能构建转发表。</p><img src="net/image-20230110163023190.png" alt="image-20230110163023190" style="zoom:80%;" /><p>特点：</p><ol><li>支持面向连接的服务质量；支持流量工程，平衡网络负载；支持VPN</li><li>把IP的路由和转发分离，在源路由（入口处）就可以决定数据报将要走的整条路经（传统的IP路由转发，每一跳都需要查找路由表），可以为不同入口的IP数据报打不同标签</li></ol><p>工作过程：</p><ol><li><p>找出标签交换路径 LSP</p><p>各 LSR 使用标签分配协议 LDP (Label Distribution Protocol) 交换报文，找出和标签相对应的标签交换路径 LSP (Label Switched Path)。整个标签交换路径就像一条虚连接一样（-&gt;支持面向连接）。</p><p>MPLS的主干网基本不变，完成1需要对网络情况的足够了解。</p></li><li><p>打标签，然后转发</p><p>入口节点 (ingress node) 给进入 MPLS 域的 IP 数据报打上标签（实际上是插入一个 MPLS 首部），并按照转发表把它转发给下一个 LSR。以后的所有 LSR 都按照标签进行转发。</p><p>给 IP 数据报打标签的过程叫做分类 (classification)。</p></li><li><p>标签对换。</p><p>一个标签仅在两个 LSR 之间才有意义。</p><p>LSR 要做两件事：转发，更新标签。</p><p>更新标签：把入标签更换成为出标签。称之为标签对换 (label swapping)。</p><img src="net/image-20230110164734416.png" alt="image-20230110164734416" style="zoom: 50%;" /></li><li><p>去除标签</p><p>当分组离开 MPLS 域时，MPLS 出口节点 (egress node) 把分组的标签去除。</p><p>把 IP 数据报交付给非 MPLS 的主机或路由器。</p></li></ol><p>显式路由选择explicit routing：由入口LSR确定进去MPLS域之后的转发路径。和传统的每一个路由器逐跳进行路由选择存在很大不同。</p><h4 id="转发等价类FEC"><a href="#转发等价类FEC" class="headerlink" title="转发等价类FEC"></a>转发等价类FEC</h4><p>forwarding equivalence class，MPLS的重要概念，即，路由器按照同样方式对待的分组的集合。</p><p>按照同样方式对待：从同样接口转发到同样的下一跳地址并且具有同样服务类别和同样丢弃优先级等。</p><ul><li>分类由服务商/网络管理员定义。</li><li>入口节点并不是给每一个分组指派一个不同的标签，而是将属于同样 FEC 的分组都指派同样的标签。</li><li>FEC 和标签是一一对应的关系。</li></ul><p>FEC用于负载平衡：</p><img src="net/image-20230110165921451.png" alt="image-20230110165921451" style="zoom:67%;" /><p>流量工程TE：traffic engineering：采用FEC，更好的管理网络资源，均衡网络负载的工程。</p><h3 id="MPLS首部的位置与格式"><a href="#MPLS首部的位置与格式" class="headerlink" title="MPLS首部的位置与格式"></a>MPLS首部的位置与格式</h3><p>在把IP数据报封装成以太网帧之前，需要先插入一个MPLS首部。因此MPLS位于网络层-数据链路层之间。</p><img src="net/image-20230110170158190.png" alt="image-20230110170158190" style="zoom:80%;" /><p>标签值（占 20 位）</p><ul><li>可以同时容纳高达 220 个流（即 1048576 个流）</li><li>实际上几乎没有哪个 MPLS 实例会使用很大数目的流，通常需要管理员人工管理和设置每条交换路径。</li></ul><p>试验（占 3 位）：目前保留用作试验。</p><p>栈S（占 1 位）：在有“标签栈”时使用。</p><p>生存时间TTL（占 8 位）：用来防止 MPLS 分组在 MPLS 域中兜圈子。</p><h3 id="新一代的MPLS"><a href="#新一代的MPLS" class="headerlink" title="新一代的MPLS"></a>新一代的MPLS</h3><p>MPLS 存在的问题，缺点：</p><ul><li>控制协议（如 LDP）比较复杂，扩展性差，运行维护较困难。</li><li>协议 LDP 无法做到基于时延或带宽等要求的流量调度。</li></ul><p>新一代的 MPLS：段路由选择协议 SR (Segment Routing)</p><p>保留了MPLS的主要特点，更简单。</p><p>段 (segment)：网络分为多个段，每个段有一个标识符，标签。</p><p>SR 基本工作原理：</p><ul><li>基于标签交换，但不需要使用协议 LDP。</li><li>由源节点为发送的报文指定路径，并将路径转换成有序的段列表 (Segment List)，即 MPLS 标签栈，它被封装在分组首部。</li><li>网络中的其他节点基于标签进行转发。</li><li>网络设有SDN控制器，收集并掌握全网的拓扑信息和链路状态信息，计算出分组的整个传输路径。</li></ul><h2 id="4-10-SDN软件定义网络"><a href="#4-10-SDN软件定义网络" class="headerlink" title="4.10 SDN软件定义网络"></a>4.10 SDN软件定义网络</h2><p>software defined network</p><p>网络层的两个层面：控制层面，数据层面。在逻辑上是分离的</p><p>在软件定义网络中，把控制层面和数据层面分离，让控制层面利用软件控制数据层面中的设备。控制层面/远程控制器负责计算最佳路由，在每一个路由器中生成其正确的转发表。</p><img src="net/image-20230110171916776.png" alt="image-20230110171916776" style="zoom:67%;" /><p>优点：</p><ul><li>提高网络带宽利用率。完全SDN环境下各路由器不需交换路由表等信息，节省开销，提高利用率</li><li>网络运行更加稳定。</li><li>管理更加高效简化。进行集中管理</li><li>运行费用明显降低。路由器的控制层面被移走，实质上类似于交换机</li></ul><p>缺点：</p><ul><li>互联网精神——分布式，打破了这种体系，变为集中式</li><li>路由器生产厂家利润低，不愿生产支持SDN的路由器</li></ul><h3 id="SDN与OpenFlow"><a href="#SDN与OpenFlow" class="headerlink" title="SDN与OpenFlow"></a>SDN与OpenFlow</h3><p>SDN是一种新的<strong>体系结构</strong>，是一种设计、构建和管理网络的新方法或新概念。</p><p>OpenFlow是SDN体系结构中控制层面与数据层面之间的通信接口，是交换信息的<strong>协议</strong>。使控制层面的控制器可以对数据层面中的物理或虚拟设备进行直接访问和操纵，在逻辑上是集中式的、基于流的。</p><p>注：SDN未规定必须使用OpenFlow（体系结构和协议之间并无硬性规定）。</p><img src="net/image-20230110173124482.png" alt="image-20230110173124482" style="zoom:67%;" /><h4 id="OpenFlow协议"><a href="#OpenFlow协议" class="headerlink" title="OpenFlow协议"></a>OpenFlow协议</h4><p>怎么就架构了呢？应该是SDN体系结构下openflow协议的使用架构？</p><p>OpenFlow架构的三个组成部分：</p><ul><li>流表：指示OpenFlow交换机如何进行流的处理，每个动作关联一个流表项</li><li>安全通道：负责控制器与交换机之间的交互，通过安全通道与远端控制器连接</li><li>OpenFlow协议：南向接口标准（控制器与交换机之间通信的开放标准）</li></ul><img src="net/image-20230110173737753.png" alt="image-20230110173737753" style="zoom:67%;" /><p>数据层面：流表</p><p>流表 (flow table)：规定“匹配 + 动作”。</p><p>流：穿过网络的一种分组序列，而在此序列中的分组都共享分组首部某些字段的值。</p><img src="net/image-20230110174542375.png" alt="image-20230110174542375" style="zoom:67%;" /><p>流表结构</p><p>与转发表不同，可以基于更多信息进行转发。</p><img src="net/image-20230110174744354.png" alt="image-20230110174744354" style="zoom:80%;" /><p>首部字段值：一组字段（12 个），用来使入分组的对应首部与之相匹配。</p><ul><li>匹配不上的分组被丢弃，或发送到远程控制器做更多的处理。涉及三个层， Openflow的匹配抽象与之前的分层匹配完全不同。</li></ul><p>计数器：一组计数器，可包括已经与该表项匹配的分组数量，以及从该表项上次更新到现在经历的时间。</p><ul><li>输入缓存 目前计时数/时间，统计出数据xxx操作用的时间</li></ul><p>动作：广义转发。当分组匹配某个流表项时，把分组转发到指明的端口，或丢弃该分组，或把分组进行复制后再从多个端口转发出去，或重写分组的首部字段（第二、三和四层的首部字段）等。</p><img src="net/image-20230110175118035.png" alt="image-20230110175118035" style="zoom:80%;" /><img src="net/image-20230110175145289.png" alt="image-20230110175145289" style="zoom:80%;" /><img src="net/image-20230110175203813.png" alt="image-20230110175203813" style="zoom:80%;" /><h3 id="SDN特征"><a href="#SDN特征" class="headerlink" title="SDN特征"></a>SDN特征</h3><ul><li>基于流的转发，流表定义转发规则</li><li>数据层面与控制层面分离，二者不在同一设备中</li><li>网络控制功能位于数据层面交换机之外，用软件实现</li><li>可编程的网络，不会受限于路由器算法固定</li></ul><h3 id="SDN控制器"><a href="#SDN控制器" class="headerlink" title="SDN控制器"></a>SDN控制器</h3><img src="/2022/11/22/net/image-20230111100026702.png" class="" title="image-20230111100026702"><p>通信层：完成SDN控制器与受控网络设备之间的通信。通信层与数据层面的接口叫做南向接口，基本上采用OpenFlow</p><p>SNMP：简单网络管理协议，获取各种设备状态</p><p>状态管理层：完成核心功能</p><ul><li>管理和维护链路、主机、交换机等网络状态；</li><li>确定和维护流表，对生成流表的设施进行管理。</li></ul><p>最上面：SDN控制器与网络控制应用程序交互的接口称为北向接口，该API接口允许网络控制应用程序对状态管理层里的网络状态和流表进行读写操作。</p><p>SDN与传统网络的差别：</p><p>SDN</p><ul><li>功能分散。交换机、SDN 控制器、网络控制应用程序都是可以分开的实体。</li><li>可以由不同的厂商和机构来提供。</li></ul><p>传统网络</p><ul><li>控制层面、数据层面、协议的实现都垂直集成在一个机器里。</li><li>由单独的厂商提供。</li></ul><img src="net/image-20230111102404345.png" alt="image-20230111102404345" style="zoom:67%;" /><h1 id="Chapter5-传输层"><a href="#Chapter5-传输层" class="headerlink" title="Chapter5.传输层"></a>Chapter5.传输层</h1><p>1、理解传输层的作用；</p><p>2、理解端口与插口的概念；</p><p>3、理解TCP协议与UDP协议区别；</p><p>4、掌握UDP数据报和TCP报文段的首部格式；</p><p>5、掌握TCP协议的可靠性控制机制：</p><p>  拥塞控制（慢启动，拥塞避免，快重传，快恢复）</p><p>  流量控制（滑动窗口协议）</p><p>  确认机制（最大重传时间的确定方法）</p><p>  连接管理（连接建立与释放）</p><h2 id="5-1传输层协议概述"><a href="#5-1传输层协议概述" class="headerlink" title="5.1传输层协议概述"></a>5.1传输层协议概述</h2><h3 id="进程之间的通信"><a href="#进程之间的通信" class="headerlink" title="进程之间的通信"></a>进程之间的通信</h3><p>运输层向应用层提供服务，它属于面向通信部分的最高层，同时也是用户功能中的最低层。</p><p>应用进程之间的通信又称为端到端的通信。网络边缘部分-端系统</p><p>当两个主机进行端到端通信时，只有位于网络边缘部分的主机的协议栈才有运输层，网络核心部分的路由器在转发分组时豆豆只用到下三层的功能（路由器只有三层）。</p><img src="net/image-20230112103651208.png" alt="image-20230112103651208" style="zoom:67%;" /><h3 id="运输层主要功能"><a href="#运输层主要功能" class="headerlink" title="运输层主要功能"></a>运输层主要功能</h3><ol><li><p>为应用进程之间提供端到端的逻辑通信。（对比网络层，为主机之间提供逻辑通信）</p><p>运输层向下屏蔽了底层结构，只关心进程，不需了解网络下层的核心细节。</p></li><li><p>对收到的报文进行差错检测</p></li><li><p>UDP&amp;TCP提供的服务也存在差别</p></li></ol><h3 id="两个主要协议"><a href="#两个主要协议" class="headerlink" title="两个主要协议"></a>两个主要协议</h3><p>UDP(user datagram protocol)用户数据报协议（区分UTP：无屏蔽双绞线）</p><p>TCP(transmission control protocol)传输控制协议</p><p>TPDU(transport protocol data unit)运输协议数据单元：两个对等运输实体在通信时传送的数据单位</p><p>TCP的TPDU是<strong>TCP报文段</strong></p><p>UDP的TPDU是<strong>UDP报文</strong>或<strong>用户数据报</strong></p><p>一些对比：</p><ul><li>UDP提供无连接服务，尽最大努力交付，在网络状况较好时非常高效</li><li>TCP提供面向连接的可靠服务，不提供广播/多播服务。因为可靠（差错、流量、重传、拥塞）所以不可避免地增加了许多开销，不仅使TPDU首部增大、复杂，还要占用许多的处理机资源。</li></ul><p>使用UDP和TCP的典型应用和应用层协议</p><img src="net/image-20230112105722440.png" alt="image-20230112105722440" style="zoom:67%;" /><h3 id="应用进程-端口"><a href="#应用进程-端口" class="headerlink" title="应用进程-端口"></a>应用进程-端口</h3><p>端口是运输层与应用层的服务接口。运输层的复用和分用功能都要通过端口才能实现。</p><p>运输层从IP层收到发送给应用进程的数据后，必须分别交付给指明的各应用进程。</p><p>协议端口号protocol port number，简称端口port</p><p>端口用一个16位端口号进行标志，只具有本地意义，标志本计算机应用层中各进程，在互联网中没有联系。</p><h4 id="三类端口"><a href="#三类端口" class="headerlink" title="三类端口"></a>三类端口</h4><ul><li>熟知端口，0-1023</li><li>登记端口，1024-49151，使用这个范围的端口号必须在IANA登记，防止重复</li><li>客户端口号/短暂端口号，49152-65535，留给客户进程选择暂时使用。当服务器进程收到客户进程的报文时，就知道了客户进程所使用的动态端口号。通信结束后，这个端口号可供其他客户进程以后使用。</li></ul><p>因此，<strong>客户机一般是大端口，服务器是小端口</strong></p><img src="net/image-20230112112238084.png" alt="image-20230112112238084" style="zoom:67%;" /><img src="net/image-20230112112253038.png" alt="image-20230112112253038" style="zoom:67%;" /><h4 id="软件端口-amp-硬件端口"><a href="#软件端口-amp-硬件端口" class="headerlink" title="软件端口&amp;硬件端口"></a>软件端口&amp;硬件端口</h4><p>软件端口：在协议栈层间的抽象协议端口，是应用层的各种协议进程与运输实体进行层间交互的一种地址</p><p>硬件端口：在路由器或交换机上的端口，是不同硬件设备进行交互的接口</p><p>？</p><h2 id="5-2-UDP用户数据报协议"><a href="#5-2-UDP用户数据报协议" class="headerlink" title="5.2 UDP用户数据报协议"></a>5.2 UDP用户数据报协议</h2><p>UDP只在IP数据报服务之上增加了很少一点功能，虽然UDP用户数据报只能提供不可靠的交付，但UDP在某些方面有其优点。</p><ul><li>复用：将UDP用户数据报组装成不同的IP数据报，发送到互联网</li><li>分用：根据UDP用户数据报首部中的目的端口号，将数据报分别传送到相应端口，以便应用进程到端口读取数据。</li><li>差错检测：检出错误，丢弃，不再占用资源传递，采用反码求和方法</li></ul><p>主要特点：无连接；尽最大努力交付；无拥塞控制；支持广播/多播；首部开销小；面向报文</p><h3 id="面向报文"><a href="#面向报文" class="headerlink" title="面向报文"></a>面向报文</h3><ul><li>发送方 UDP 对应用程序交下来的报文，在添加首部后就向下交付 IP 层。UDP 对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。</li><li>应用层交给 UDP 多长的报文，UDP 就照样发送，即一次发送一个报文。</li><li>接收方 UDP 对 IP 层交上来的 UDP 用户数据报，在去除首部后就原封不动地交付上层的应用进程，一次交付一个完整的报文。</li><li>应用程序必须选择合适大小的报文。<ul><li>若报文太长，IP 层在传送时可能要进行分片，降低 IP 层的效率。</li><li>若报文太短，会使 IP 数据报的首部的相对长度太大，降低 IP 层的效率。</li></ul></li></ul><h3 id="UDP首部格式"><a href="#UDP首部格式" class="headerlink" title="UDP首部格式"></a>UDP首部格式</h3><img src="net/image-20230112115321237.png" alt="image-20230112115321237" style="zoom:67%;" /><p>首部字段8B，由四个字段组成（源端口、目的端口、长度、检验和），每个字段都是2B。</p><p>计算检验和时，临时把12B“伪首部”和UDP用户数据报连接在一起。伪首部仅为了计算检验和，无其他含义</p><img src="net/image-20230112161622459.png" alt="image-20230112161622459" style="zoom:67%;" /><img src="net/image-20230112161722315.png" alt="image-20230112161722315" style="zoom:67%;" /><h3 id="UDP基于端口的分用"><a href="#UDP基于端口的分用" class="headerlink" title="UDP基于端口的分用"></a>UDP基于端口的分用</h3><img src="net/image-20230112161118709.png" alt="image-20230112161118709" style="zoom:67%;" /><p>接收方UDP根据首部中的目的端口号，把报文通过相应的端口上交给应用进程。如果接收方UDP发现收到的报文中的目的端口号不正确（不存在该端口号的进程），就丢弃该报文，并由ICMP发送“端口不可达”差错报文给传送方。</p><h2 id="5-3-TCP传输控制协议"><a href="#5-3-TCP传输控制协议" class="headerlink" title="5.3 TCP传输控制协议"></a>5.3 TCP传输控制协议</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>TCP主要特点</p><ul><li>面向连接</li><li>面向字节流</li><li>点对点的连接，只有两个端点</li><li>提供可靠交付服务</li><li>提供全双工通信</li></ul><img src="net/image-20230112171024085.png" alt="image-20230112171024085" style="zoom:67%;" /><p>面向字节流：相较于UDP面向报文，面向字节指最小传送单位是字节，字节在缓存中排队等待，达到一定数量后成组传送，不考虑字节组成报文的含义。对应用进程一次把多长的报文发送到TCP缓存中并不关心。</p><p>TCP根据对方给出的窗口值和当前网络拥塞的程度来决定一个报文段应包含多少字节，可以把太长的数据分片传送，也可以等待积累足够多的字节再构成报文传送。对比UDP，报文长度由应用进程给出，一次发送整个报文段。</p><h3 id="TCP的连接"><a href="#TCP的连接" class="headerlink" title="TCP的连接"></a>TCP的连接</h3><p>TCP 连接有两个端点，连接的端点叫<strong>套接字socket</strong>/插口=IP地址+端口号。</p><p>socket = （IP地址:端口号）</p><p>socket = （192.168.1.1:2028）</p><p>每一条TCP连接唯一地被通信两端（两个套接字）所确定；一对socket唯一定义一个连接。</p><h2 id="5-4-TCP报文段的首部格式"><a href="#5-4-TCP报文段的首部格式" class="headerlink" title="5.4 TCP报文段的首部格式"></a>5.4 TCP报文段的首部格式</h2><img src="net/image-20230117103152658.png" alt="image-20230117103152658" style="zoom:67%;" /><p>MSS（maximum segment size）：TCP报文段中的<strong>数据字段</strong>的最大长度。数据字段+TCP首部=TCP报文段。</p><p>源端口、目的端口：各占2B</p><p>序号：4B，TCP连接中传送的数据流中的每一个<strong>字节</strong>都编上一个序号，序号字段的值则指的是本报文段所发送的数据的<strong>第一个字节</strong>的序号。（可以康康ppt35/172）</p><p>确认：4B，是期望收到对方的下一个报文段数据的第一个字节的序号。全双工，双方可以同时发送和确认。</p><img src="net/image-20230117105634582.png" alt="image-20230117105634582" style="zoom:67%;" /><p>数据偏移/<strong>首部长度</strong>：4b，指出TCP报文段的数据起始处距离TCP报文段的起始处有多远。单位是32b=4B。最大1111-&gt;60B的首部长度</p><p>保留：6b，空</p><p>下面都是关键校验位，全部都是1位</p><p>URG紧急：URG=1时有效，此报文段中有紧急数据，是高优先级的数据，不排队直接传送。</p><p>ACK确认：ACK=1时前面的确认号才有效，ACK=0时确认号无效。</p><p>PSH推送：PSH=1有效，类似URG，接收端尽快交付不排队直接交付。</p><p>RST复位：RST=1有效，表示TCP连接出现严重差错，如由于主机崩溃或其他原因，必须释放连接，然后再重新建立连接。</p><p>SYN同步：SYN=1表示连接请求或连接接受报文，握手阶段。</p><p>FIN终止：FIN=1表示此报文段的发送端的数据已完成发送，要求释放连接。</p><p>窗口：16b，是发送方的接收窗口，从确认号算起，允许对方发送的数据量。</p><p>紧急指针：16b，指出在本报文段中紧急数据共有多少字节（紧急数据放在本报文段数据的最前面）。窗口为0也可以发送紧急数据。</p><p>选项：长度可变</p><ul><li>窗口扩大选项 ——占 3 字节，其中有一个字节表示移位值 S。新的窗口值等于TCP 首部中的窗口位数增大到(16 + S)，相当于把窗口值向左移动 S 位后获得实际的窗口大小。</li><li>时间戳选项——占10 字节，其中最主要的字段时间戳值字段（4 字节）和时间戳回送回答字段（4 字节）。<ul><li>用来计算往返时间RTT</li><li>用来防治序号绕回</li></ul></li><li>选择确认选项——见5.6TCP可靠传输</li></ul><p>填充字段：使整个首部长度是4B的整数倍的填充，无实际意义。</p><h2 id="5-5-可靠传输的工作原理"><a href="#5-5-可靠传输的工作原理" class="headerlink" title="5.5 可靠传输的工作原理"></a>5.5 可靠传输的工作原理</h2><h3 id="停止等待协议"><a href="#停止等待协议" class="headerlink" title="停止等待协议"></a>停止等待协议</h3><p>每发送完一个分组就停止发送，等待对方的确认。在收到确认后再发送下一个分组。</p><p>全双工的双方既是发送方也是接收方。方便起见，A为发送方，B为接收方，仅考虑一侧通信情况</p><h4 id="1无差错情况"><a href="#1无差错情况" class="headerlink" title="1无差错情况"></a>1无差错情况</h4><p>A 发送分组 M1，并在缓存中保留M1副本，发完就暂停发送，等待 B 的确认 (ACK)。</p><p>B 收到了 M1 向 A 发送 ACK。</p><p>A 在收到了对 M1 的确认后，从缓存中删除M1，就再发送下一个分组 M2。</p><img src="net/image-20230117152619979.png" alt="image-20230117152619979" style="zoom: 67%;" /><h4 id="2差错情况"><a href="#2差错情况" class="headerlink" title="2差错情况"></a>2差错情况</h4><p>接收方B会出现两种情况：</p><ol><li>【分组错误】接收M1时检测出了差错，丢弃M1</li><li>【分组丢失】M1在过程中传丢，B什么都不知道哦。</li></ol><p>此时，B都不发送任何信息。</p><p>解决方法：超时重传，A为每个已发送的分组设置独立的超时计时器，超时时间应当比数据平均往返时间更长一些。A只要在超时计时器到期之前收到了相应的确认，就撤销超时计时器，继续发送M2</p><img src="net/image-20230117155236370.png" alt="image-20230117155236370" style="zoom:67%;" /><h4 id="3确认丢失和确认迟到"><a href="#3确认丢失和确认迟到" class="headerlink" title="3确认丢失和确认迟到"></a>3确认丢失和确认迟到</h4><ol><li><p>B收到数据，但是发出的对M1的确认丢失了。A不能在设定时间内收到确认，重传M1，导致B收到两个M1。</p><p>解决方法：B丢弃重复的M1，并重新发送确认</p></li><li><p>传输过程中没有出现差错，但B对分组M1的确认迟到了。此时A重传M1，B收到重复的M1又发送了ACK，导致A共收到两个M1的ACK。</p><p>解决方法：A丢弃重复的对M1的ACK。</p></li></ol><img src="net/image-20230117155445656.png" alt="image-20230117155445656" style="zoom:67%;" /><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li><p>发送分组前，必须暂时保留已发送分组的副本，以备重发。</p></li><li><p>分组和确认都必须编号</p></li><li><p>通常，A最终总是能收到对所有发出分组的确认。</p><p>如果A不断重传，但总收不到确认，就认为通信线路太差，不能通信。</p></li></ul><p>自动重传请求ARQ</p><p>automatic repeat re<strong>q</strong>uest</p><p>使用停止等待的机制，就可以在不可靠的传输网络上实现可靠的通信。</p><p>ARQ，意思是重传的请求是自动进行的，接收方不需要请求发送方重传某个出错的分组（？用户不需要的意思吗</p><h4 id="信道利用率-2"><a href="#信道利用率-2" class="headerlink" title="信道利用率"></a>信道利用率</h4><p>停止等待协议的优点是简单，缺点是信道利用率太低。</p><img src="net/image-20230117155815423.png" alt="image-20230117155815423" style="zoom:50%;" /><p>当往返时间RTT远大于分组发送时间TD时，信道利用率就会非常低。若重传，利用率还会进一步降低。</p><h3 id="连续ARQ协议"><a href="#连续ARQ协议" class="headerlink" title="连续ARQ协议"></a>连续ARQ协议</h3><p>采用流水线传输，连续发送多个分组，不必发完一个就停下来等待确认。可以使信道上一直有数据不间断地传送。这样可以获得很高的信道利用率。</p><img src="net/image-20230118093146977.png" alt="image-20230118093146977" style="zoom: 67%;" /><p>发送窗口：位于发送窗口内的分组都可以连续发送出去，不需要等待对方的确认。</p><p>连续ARQ协议规定，发送方每收到一个确认，就把发送窗口向前滑动一个分组的位置。</p><p>假设传送了M1M2M3M4，M2超时了，就重传M2M3M4</p><img src="net/image-20230118122149251.png" alt="image-20230118122149251" style="zoom: 67%;" /><p>累计确认：不对收到的分组逐个确认，而是<strong>对按序到达的最后一个分组发送确认</strong>，表示：到这个分组为止的所有分组都已正确收到。</p><p>优点：容易实现，*即使确认丢失也不必重传。（？什么意思）</p><p>缺点：不能向发送方反映出接收方已经正确收到的所有分组的信息。</p><p>Go-back-N（回退 N）：表示需要再退回来重传已发送过的 N 个分组。v如果发送方发送了前 5 个分组，而中间的第 3 个分组丢失了。这时接收方只能对前两个分组发出确认。发送方无法知道后面三个分组的下落，而只好把后面的三个分组都再重传一次。</p><p>当通信线路质量不好时，连续 ARQ 协议会带来负面的影响。疯狂重传一大堆分组</p><h3 id="滑动窗口协议"><a href="#滑动窗口协议" class="headerlink" title="滑动窗口协议"></a>滑动窗口协议</h3><img src="net/image-20230118124028667.png" alt="image-20230118124028667" style="zoom:67%;" /><h2 id="5-6-TCP可靠传输的实现"><a href="#5-6-TCP可靠传输的实现" class="headerlink" title="5.6 TCP可靠传输的实现"></a>5.6 TCP可靠传输的实现</h2><p>通过滑动窗口协议实现。</p><img src="net/image-20230118124137302.png" alt="image-20230118124137302" style="zoom:67%;" /><p>然后抽象的两张图，有一个课后题不是很懂</p><img src="/2022/11/22/net/image-20230118155934954.png" class="" title="image-20230118155934954"><img src="/2022/11/22/net/image-20230118160507944.png" class="" title="image-20230118160507944"><p>P1P2P3：第一个字节的意思</p><img src="/2022/11/22/net/image-20230118160539119.png" class="" title="image-20230118160539119"><img src="/2022/11/22/net/image-20230118160552293.png" class="" title="image-20230118160552293"><img src="/2022/11/22/net/image-20230118160602815.png" class="" title="image-20230118160602815"><img src="/2022/11/22/net/image-20230118160612711.png" class="" title="image-20230118160612711"><h3 id="发送缓存-amp-接收缓存"><a href="#发送缓存-amp-接收缓存" class="headerlink" title="发送缓存&amp;接收缓存"></a>发送缓存&amp;接收缓存</h3><p>发送缓存用来暂时存放：</p><ol><li>发送应用程序传送给发送方TCP准备发送的数据；</li><li>TCP已发送但尚未收到确认的数据</li></ol><p>接受缓存用来暂时存放：</p><ol><li>按序到达的、但尚未被接收应用程序读取的数据；</li><li>不按序到达的数据</li></ol><p>注意：</p><ul><li>A 的发送窗口并不总是和 B 的接收窗口一样大（因为有一定的时间滞后）。</li><li>TCP 标准没有规定对不按序到达的数据应如何处理。操作系统通常是先临时存放在接收窗口中，等到字节流中所缺少的字节收到后，再按序交付上层的应用进程。</li><li>TCP 要求接收方必须有累积确认的功能，这样可以减小传输开销。 累计一批/多批数据后发送对最后一个字节数据的确认。</li></ul><h3 id="接收方发送确认"><a href="#接收方发送确认" class="headerlink" title="接收方发送确认"></a>接收方发送确认</h3><p>接收方可以在合适的时候发送确认，也可以在自己有数据要发送时把确认信息顺便捎带上。</p><p>注意：</p><p>第一，接收方不应过分推迟发送确认，否则会导致发送方不必要的重传，这反而浪费了网络的资源。</p><p>第二，捎带确认实际上并不经常发生，因为大多数应用程序很少同时在两个方向上发送数据。</p><h2 id="5-7-TCP的流量控制"><a href="#5-7-TCP的流量控制" class="headerlink" title="5.7 TCP的流量控制"></a>5.7 TCP的流量控制</h2><p>利用滑动窗口实现流量控制</p><p>流量控制(flow control)就是让发送方的发送速率不要太快，要让接收方来得及接收。</p><img src="/2022/11/22/net/image-20230118162131137.png" class="" title="image-20230118162131137"><h3 id="零窗口持续计时器"><a href="#零窗口持续计时器" class="headerlink" title="零窗口持续计时器"></a>零窗口持续计时器</h3><p>TCP 为每一个连接设有一个零窗口持续计时器，只要 TCP 连接的一方收到对方的零窗口通知，不能正常发送数据了，就启动持续计时器。</p><p>若持续计时器设置的时间到期，就发送一个零窗口探测报文段（仅携带 1 字节的数据，加首部共21B），而对方就在确认这个探测报文段时给出了现在的窗口值。</p><p>若窗口仍然是零，则收到这个报文段的一方就重新设置持续计时器。</p><p>若窗口不是零，则正常发送数据力</p><h3 id="传输时机"><a href="#传输时机" class="headerlink" title="传输时机"></a>传输时机</h3><p>指的是TCP缓存堆堆堆，决定发出的时机</p><ol><li>TCP 维持一个变量，它等于最大报文段长度 MSS。只要缓存中存放的数据达到 MSS 字节时，就组装成一个 TCP 报文段发送出去。</li><li>由发送方的应用进程指明要求发送报文段，即 TCP 支持的紧急URG或推送PSH操作。</li><li>发送方设置的一个计时器期限到了，这时就把当前已有的缓存数据装入报文段（但长度不能超过 MSS）发送出去。一个通用机制</li></ol><h4 id="发送方糊涂窗口综合症"><a href="#发送方糊涂窗口综合症" class="headerlink" title="发送方糊涂窗口综合症"></a>发送方糊涂窗口综合症</h4><p>在发送方上层数据速度慢时，发送方应用进程把数据逐个字节地送到TCP缓存中，并且每接收到上层一字节数据就发送。这样，发送效率很低。解决：使用nagle算法</p><h4 id="nagle算法"><a href="#nagle算法" class="headerlink" title="nagle算法"></a>nagle算法</h4><p>发送方把第一个数据字节先发送出去，把后面到达的数据字节都缓存起来。停止等待后面未到的数据。</p><p>当发送方收到对第一个数据字符的确认后，再把发送缓存中的所有数据组装成一个报文段发送出去，同时继续对随后到达的数据进行缓存。</p><ul><li>只有在收到对前一个报文段的确认后才继续发送下一个报文段。</li><li>当到达的数据已达到发送窗口大小的一半或已达到报文段的最大长度时，就立即发送一个报文段。满足这一条件时，即便未收到确认也发送。</li></ul><h4 id="接收方糊涂窗口综合症"><a href="#接收方糊涂窗口综合症" class="headerlink" title="接收方糊涂窗口综合症"></a>接收方糊涂窗口综合症</h4><p>当接收方的 TCP 缓冲区已满，接收方会向发送方发送窗口大小为 0 的报文。</p><p>若此时接收方的应用进程以交互方式每次只读取一个字节，于是接收方又发送窗口大小为一个字节的更新报文，发送方应邀发送一个字节的数据（发送的 IP 数据报是 41 字节长），于是接收窗口又满了，如此循环往复。</p><p>解决方法：改变发送更新报文时机，让接收方等待一段时间，使得接收缓存已有足够空间容纳一个最长的报文段，或者等到接收缓存已有一半空闲的空间。只要出现这两种情况之一，接收方就发出确认报文，并向发送方通知当前的窗口大小。</p><h3 id="超时重传时间的选择"><a href="#超时重传时间的选择" class="headerlink" title="超时重传时间的选择"></a>超时重传时间的选择</h3><p>最重要和最复杂的问题</p><p>TCP 每发送一个报文段，就对这个报文段设置一次计时器。只要计时器设置的重传时间到但还没有收到确认，就要重传这一报文段。</p><img src="net/image-20230118171818686.png" alt="image-20230118171818686" style="zoom:67%;" /><p>计算方法：超时重传时间RTO=加权平均往返时间RTTs+4*偏差加权平均往返时间RTTd</p><h4 id="加权平均往返时间RTTs"><a href="#加权平均往返时间RTTs" class="headerlink" title="加权平均往返时间RTTs"></a>加权平均往返时间RTTs</h4><img src="net/image-20230118172007254.png" alt="image-20230118172007254" style="zoom: 80%;" /><h4 id="超时重传时间RTO"><a href="#超时重传时间RTO" class="headerlink" title="超时重传时间RTO"></a>超时重传时间RTO</h4><p>retransmission time-out</p><img src="net/image-20230118172036149.png" alt="image-20230118172036149" style="zoom:80%;" /><img src="net/image-20230118172640725.png" alt="image-20230118172640725" style="zoom:80%;" /><h4 id="Karn算法"><a href="#Karn算法" class="headerlink" title="Karn算法"></a>Karn算法</h4><p>在计算平均往返时间 RTT 时，只要报文段重传了，就<strong>不采用</strong>其往返时间样本。</p><p>这样得出的加权平均平均往返时间 RTTS 和超时重传时间 RTO 就较准确。 </p><p><strong>修正的karn算法</strong></p><p>报文段每重传一次，就把RTO增大一些</p><img src="/2022/11/22/net/image-20230119115838899.png" class="" title="image-20230119115838899"><p>γ通常取2，即新的RTO变为2倍</p><p>当不再发生报文段重传时，才根据报文段的往返时延更新RTT和RTO的数值。缩回正常值。</p><h3 id="选择确认SACK"><a href="#选择确认SACK" class="headerlink" title="选择确认SACK"></a>选择确认SACK</h3><p>接收方收到了前面的字节流不连续的两个字节块，如果这些字节块都在接受窗口内，接收方先收下这些数据，然后批量发送对他们的确认。</p><img src="net/image-20230119121203436.png" alt="image-20230119121203436" style="zoom:67%;" /><h2 id="5-8-TCP的拥塞控制"><a href="#5-8-TCP的拥塞控制" class="headerlink" title="5.8 TCP的拥塞控制"></a>5.8 TCP的拥塞控制</h2><p>拥塞congestion：在某段时间，若对网络中某<strong>资源的需求</strong>超过了该资源所能提供的<strong>可用</strong>部分，网络的性能就要变坏，产生拥塞。</p><p>若网络中有许多资源同时产生拥塞，网络的性能就要变坏，整个网络的吞吐量将随输入负荷的增大而下降。</p><p>增加资源能解决拥塞吗？不能，还可能使网络的性能更坏。必须着眼于系统全局解决问题。</p><ol><li>增大缓存，但未提高输出链路的容量和处理机的速度，排队等待时间将会大大增加，引起大量超时重传，解决不了网络拥塞；</li><li>提高处理机处理的速率会将瓶颈转移到其他地方；</li><li>拥塞引起的重传并不会缓解网络的拥塞，反而会加剧网络的拥塞。</li></ol><img src="net/image-20230124094558669.png" alt="image-20230124094558669" style="zoom:67%;" /><img src="net/image-20230124094745623.png" alt="image-20230124094745623" style="zoom:67%;" /><ul><li>拥塞控制的前提：网络能够承受现有的网络负荷。</li><li>实践证明，拥塞控制是很难设计的，因为它是一个动态问题。</li><li>在许多情况下，甚至正是拥塞控制本身成为引起网络拥塞的原因</li><li>分组的丢失是网络发生拥塞的结果，而不是原因。</li></ul><h3 id="开环控制和闭环控制"><a href="#开环控制和闭环控制" class="headerlink" title="开环控制和闭环控制"></a>开环控制和闭环控制</h3><img src="net/image-20230124095002546.png" alt="image-20230124095002546" style="zoom:67%;" /><p>开环实际并不现实</p><p>闭环控制措施：</p><ol><li>监测：监测网络系统，拥塞在何时何处发生。</li><li>传送：将拥塞发生的信息传送到可采取行动的地方。将拥塞发生的信息传送到产生分组的源站，周期性发出探测分组等</li><li>调整：调整网络系统的运行以解决出现的问题。选择合适调整周期</li></ol><h3 id="TCP基于窗口拥塞控制"><a href="#TCP基于窗口拥塞控制" class="headerlink" title="TCP基于窗口拥塞控制"></a>TCP基于窗口拥塞控制</h3><p>属于闭环控制。运输层位于端，不可能详细了解网络核心部分。</p><p>发送方维持一个拥塞窗口 cwnd (<strong>c</strong>ongestion <strong>w</strong>i<strong>nd</strong>ow)</p><ul><li><p>拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。</p></li><li><p>发送端利用拥塞窗口根据网络的拥塞情况调整发送的数据量。</p></li><li><p>发送窗口大小不仅取决于接收方公告的接收窗口，还取决于网络的拥塞状况，所以真正的发送窗口值为：</p><p>真正的发送窗口值 = Min(通知窗口值，拥塞窗口值)</p></li></ul><p>控制拥塞窗口的原则：</p><ul><li>只要网络没有出现拥塞，拥塞窗口就再增大一些，以便把更多的分组发送出去，这样就可以提高网络的利用率。</li><li>但只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数，以便缓解网络出现的拥塞。</li></ul><p>判断网络出现拥塞的依据：出现数据超时，即未接收到ACK，虽然原因有很多，但只能认为产生了拥塞。</p><h3 id="TCP四种拥塞控制算法"><a href="#TCP四种拥塞控制算法" class="headerlink" title="TCP四种拥塞控制算法"></a>TCP四种拥塞控制算法</h3><h4 id="慢开始"><a href="#慢开始" class="headerlink" title="慢开始"></a>慢开始</h4><p>由小到大逐渐增大拥塞窗口数值。</p><p>初始拥塞窗口<strong>cwnd</strong>设置：在刚刚开始发送报文段时，设置为1个发送方的最大报文段SMSS(sender max segment size)</p><p>慢开始门限<strong>ssthresh</strong>（slow start thresh）：动态控制变量</p><p>在每收到一个对新的报文的确认后，把拥塞窗口增加最多一个SMSS的数值（一个指数增加）</p><p>拥塞窗口cwnd每次的增加量 = min (N, SMSS)</p><p>其中 <em>N</em> 是原先未被确认的、但现在被刚收到的确认报文段所确认的字节数。不难看出，当 <em>N</em> &lt; SMSS 时，拥塞窗口每次的增加量要小于 SMSS。</p><p>传输轮次 (transmission round)：</p><ul><li>使用慢开始算法后，每经过一个传输轮次，拥塞窗口 cwnd 就加倍。</li><li>传输轮次：把拥塞窗口 cwnd 所允许发送的报文段都连续发送出去，并收到了对已发送的最后一个字节的确认。</li><li>一个传输轮次所经历的时间约为一个往返时间 RTT。</li><li>例如，拥塞窗口 cwnd = 4，这时的往返时间 RTT 就是发送方连续发送 4 个报文段，并收到这 4 个报文段的确认，总共经历的时间。</li></ul><p>慢开始门限 ssthresh 的用法：cwnd指数增长变为线性</p><ul><li>当 cwnd &lt; ssthresh 时，使用慢开始算法。</li><li>当 cwnd &gt; ssthresh 时，停止使用慢开始算法而改用拥塞避免算法。</li><li>当 cwnd = ssthresh 时，既可使用慢开始算法，也可使用拥塞避免算法。</li></ul><h4 id="拥塞避免"><a href="#拥塞避免" class="headerlink" title="拥塞避免"></a>拥塞避免</h4><p>拥塞避免算法的思路是让拥塞窗口 cwnd 缓慢地增大，即每经过一个往返时间 RTT 就把发送方的拥塞窗口 cwnd 加 1，而不是加倍，使拥塞窗口 cwnd 按线性规律缓慢增长。</p><p>在拥塞避免阶段，有“加法增大” (Additive Increase) 的特点。</p><p>出现拥塞时（重传计时器超时未接收ACK）：</p><ul><li>ssthresh = max(cwnd/2，2)</li><li>cwnd = 1</li><li>执行慢开始算法</li></ul><p>迅速减少主机发送到网络中的分组数，使得发生拥塞的路由器有足够时间把队列中积压的分组处理完毕。</p><img src="net/image-20230124104651957.png" alt="image-20230124104651957" style="zoom:80%;" /><p><strong>注：</strong></p><ul><li>“拥塞避免”并非指完全能够避免了拥塞。利用以上的措施要完全避免网络拥塞还是不可能的。</li><li>“拥塞避免”是说在拥塞避免阶段把拥塞窗口控制为按线性规律增长，使网络比较不容易出现拥塞。</li></ul><h4 id="快重传"><a href="#快重传" class="headerlink" title="快重传"></a>快重传</h4><p>可以让发送方尽早知道发生了报文段的丢失。要求接收方不要等待自己发送数据时捎带确认，而是立即确认，即使收到了失序的报文段也是</p><p>发送方只要一连收到三个重复确认，就知道接收方确实没有收到报文段，因而应当立即进行重传（即“快重传”），这样就不会出现超时，发送方也不就会误认为出现了网络拥塞。</p><p>使用快重传可以使整个网络的吞吐量提高约20%. </p><p>不难看出，快重传并非取消重传计时器，而是在某些情况下可更早地重传丢失的报文段。</p><img src="net/image-20230124110223245.png" alt="image-20230124110223245" style="zoom:67%;" /><h4 id="快恢复"><a href="#快恢复" class="headerlink" title="快恢复"></a>快恢复</h4><p>当发送端收到<strong>连续三个重复的确认</strong>时，就执行“乘法减小”算法，把慢开始门限 ssthresh 减半。</p><p>由于发送方现在认为网络很可能没有发生拥塞，因此现在不执行慢开始算法，而是：</p><ul><li>慢开始门限 ssthresh = 当前拥塞窗口 cwnd / 2 ；</li><li>新拥塞窗口 cwnd = 慢开始门限 ssthresh ；</li><li>开始执行拥塞避免算法，使拥塞窗口缓慢地线性增大。</li></ul><img src="net/image-20230124110419296.png" alt="image-20230124110419296" style="zoom:67%;" /><p>发送窗口的上限值：</p><p>发送方的发送窗口的上限值应当取为接收方窗口 rwnd 和拥塞窗口 cwnd 这两个变量中较小的一个。</p><h4 id="加法增大-amp-乘法减小AIMD"><a href="#加法增大-amp-乘法减小AIMD" class="headerlink" title="加法增大&amp;乘法减小AIMD"></a>加法增大&amp;乘法减小AIMD</h4><p>在拥塞避免阶段，拥塞窗口是按照线性规律增大的。这常称为“加法增大” AI (Additive Increase)。</p><p>当出现超时或3个重复的确认时，就要把门限值设置为当前拥塞窗口值的一半，并大大减小拥塞窗口的数值。这常称为“乘法减小”MD (Multiplicative Decrease)。</p><p>二者合在一起就是 AIMD 算法。</p><img src="net/image-20230124110635995.png" alt="image-20230124110635995" style="zoom:67%;" /><h3 id="主动队列管理AQM"><a href="#主动队列管理AQM" class="headerlink" title="主动队列管理AQM"></a>主动队列管理AQM</h3><p>？</p><p>先进先出FIFO</p><p>全局同步</p><p>随即早期检测RED</p><h2 id="5-9-TCP的运输连接管理"><a href="#5-9-TCP的运输连接管理" class="headerlink" title="5.9 TCP的运输连接管理"></a>5.9 TCP的运输连接管理</h2><p>运输连接的三个阶段：连接建立、数据传送、连接释放</p><p>采用客户机/服务器 C/S方式。主动发起者为客户，被动等待为服务器。</p><p>用三次握手建立TCP连接</p><p>四次挥手释放TCP连接</p><p>PPT</p><h1 id="Chapter6-应用层"><a href="#Chapter6-应用层" class="headerlink" title="Chapter6.应用层"></a>Chapter6.应用层</h1><ol><li>理解域名解析、文件传送、万维网、电子邮件、动态主机配置、网络管理</li><li>理解客户服务器与P2P的工作原理</li><li>掌握 DNS、FTP、HTTP、 SMTP、DHCP协议的工作原理</li><li>理解Chord、SNMP协议</li><li>了解POP3、IMAP、MIME</li><li>了解Napster、Gnutella、BitTorrent、CAN</li></ol><p>每个应用层协议都是为了解决某一类应用问题，通常是通过位于不同主机的多个应用进程之间的通信和协同工作来完成的。</p><p>应用层的具体内容就是规定应用进程在交互时所遵循的协议。</p><p>应用层的许多协议都是基于客户/服务器方式。</p><ul><li>客户(client)和服务器(server)都是指通信中所涉及的<strong>两个应用进程。</strong></li><li>客户/服务器方式所描述的是<strong>进程之间</strong>服务和被服务的关系。</li></ul><h2 id="6-1-域名系统DNS"><a href="#6-1-域名系统DNS" class="headerlink" title="6.1 域名系统DNS"></a>6.1 域名系统DNS</h2><p>域名系统 DNS (Domain Name System) ：互联网使用的命名系统，用来把人们使用的机器名字（域名）转换为 IP 地址，为互联网的各种网络应用提供了核心服务。使用UDP通信</p><p>DNS 是一个<strong>联机分布式数据库系统</strong>，采用客户/服务器方式，域名到 IP 地址的解析是由若干个域名服务器程序共同完成。域名服务器程序在专设的结点上运行，运行该程序的机器称为域名服务器。 </p><p>域名解析过程（原理上，但是实际有些区别）</p><img src="net/image-20230131162403739.png" alt="image-20230131162403739" style="zoom:67%;" /><h3 id="互联网的域名结构"><a href="#互联网的域名结构" class="headerlink" title="互联网的域名结构"></a>互联网的域名结构</h3><p>命名方法：层次树状结构方法</p><p>域名：任何一个连接在互联网上的主机或路由器，都有一个唯一的层次结构的名字，即域名 (domain name)。</p><p>域：名字空间中一个可被管理的划分。可以划分为子域，而子域还可继续划分为子域的子域，这样就形成了顶级域、二级域、三级域，等等。</p><p>域名结构：层次结构。由标号 (label) 序列组成，各标号之间用点隔开，各标号分别代表不同级别的域名。</p><img src="net/image-20230131163045101.png" alt="image-20230131163045101" style="zoom:67%;" /><img src="net/image-20230131163421220.png" alt="image-20230131163421220" style="zoom:80%;" /><img src="net/image-20230131163431167.png" alt="image-20230131163431167" style="zoom:80%;" /><h3 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h3><p>区：一个能进行域名解析的服务器的解析范围。一个服务器所负责管辖的（或有权限的）范围叫做区(zone)。各单位根据具体情况来划分自己管辖范围的区。但在一个区中的所有节点必须连通。DNS 服务器的管辖范围不以“域”为单位，而是以“区”为单位。</p><p>每一个区设置相应的权限域名服务器，用来保存该区中的所有主机的域名到IP地址的映射。</p><img src="net/image-20230131164039969.png" alt="image-20230131164039969" style="zoom: 67%;" /><img src="net/image-20230131164934064.png" alt="image-20230131164934064" style="zoom: 67%;" /><h4 id="根域名服务器"><a href="#根域名服务器" class="headerlink" title="根域名服务器"></a>根域名服务器</h4><p>最高层次的域名服务器。所有的根域名服务器都知道所有的顶级域名服务器的域名和 IP 地址（知道下面一层）。</p><p>Internet上共有13 个不同 IP 地址的根域名服务器，其名字是用一个英文字母命名，从a 一直到 m（前13 个字母）。</p><p>根域名服务器共有 13 套装置，不是 13 个机器。采用任播技术，使世界上大部分DNS域名服务器都能就近找到根服务器进行域名解析。</p><p>由1主根+12辅根组成，辅根的辅根：镜像，目前很多情况采用镜像。</p><p>相应的域名分别是：</p><ul><li>  a.rootservers.net</li><li>  b.rootservers.net</li><li>  … </li><li>  m.rootservers.net</li></ul><p>13套根域名服务器中：<br> 1套为主根服务器，放置在美国；<br> 其余12套均为辅根服务器，其中美国9套，欧洲2套，位于英国和瑞典，亚洲1套，位于日本。</p><p>2016年，中国主导在全球16个国家完成25台IPv6根服务器架设，事实上形成了13个原有根加25个IPv6根的新格局，中国部署了其中的4套，由1套主根服务器和3台辅根服务器组成，打破了中国过去没有根服务器的困境。 </p><p>根域名服务器并不直接把域名直接转换成 IP 地址。在使用迭代查询时，根域名服务器把下一步应当找的顶级域名服务器的 IP 地址告诉本地域名服务器。</p><h4 id="顶级域名服务器"><a href="#顶级域名服务器" class="headerlink" title="顶级域名服务器"></a>顶级域名服务器</h4><p>顶级域名服务器（即 TLD 服务器）负责管理在该顶级域名服务器注册的所有二级域名。收到 DNS 查询请求，给出相应的回答（可能是最后的结果，也可能是下一步应当找的域名服务器的 IP 地址）</p><p>北京有，负责.cn下的所有域名请求</p><h4 id="权限域名服务器"><a href="#权限域名服务器" class="headerlink" title="权限域名服务器"></a>权限域名服务器</h4><p>任何权限域名服务器，若要对互联网上任何一个域名进行解析，只要自己无法解析，就需要求助于根域名服务器。</p><p>负责一个区的域名服务器。当一个权限域名服务器还不能给出最后的查询回答时，就会告诉发出查询请求的 DNS 客户，下一步应当找哪一个权限域名服务器。（？</p><h4 id="本地域名服务器"><a href="#本地域名服务器" class="headerlink" title="本地域名服务器"></a>本地域名服务器</h4><p>或默认域名服务器</p><p>当一个主机发出 DNS 查询请求时，这个查询请求报文就发送给本地域名服务器。每一个互联网服务提供者 ISP，或一个大学，甚至一个大学里的系，都可以拥有一个本地域名服务器。</p><h4 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h4><p>DNS 域名服务器都把数据复制到几个域名服务器来保存，其中的一个是主域名服务器，其他的是辅助域名服务器。辅助域名服务器只会在主服务器故障时运行服务。当主域名服务器出故障时，辅助域名服务器可以保证 DNS 的查询工作不会中断。</p><p>主域名服务器定期把数据复制到辅助域名服务器中，而更改数据只能在主域名服务器中进行。这样就保证了数据的一致性。</p><h3 id="域名的解析过程"><a href="#域名的解析过程" class="headerlink" title="域名的解析过程"></a>域名的解析过程</h3><p><strong>主机</strong>向<strong>本地</strong>域名服务器的查询一般都是采用递归查询。<br>如果主机所询问的本地域名服务器不知道被查询域名的 IP 地址，那么本地域名服务器就以 DNS 客户的身份，向其他根域名服务器继续发出查询请求报文。</p><p><strong>本地</strong>域名服务器向<strong>根</strong>域名服务器的查询通常是采用迭代查询。<br>当根域名服务器收到本地域名服务器的迭代查询请求报文时，要么给出所要查询的 IP 地址，要么告诉本地域名服务器：“你下一步应当向哪一个域名服务器进行查询”。然后让本地域名服务器进行后续的查询。</p><h4 id="递归查询"><a href="#递归查询" class="headerlink" title="递归查询"></a>递归查询</h4><img src="net/image-20230131173229066.png" alt="image-20230131173229066" style="zoom:80%;" /><h4 id="迭代查询"><a href="#迭代查询" class="headerlink" title="迭代查询"></a>迭代查询</h4><img src="net/image-20230131173219814.png" alt="image-20230131173219814" style="zoom:80%;" /><h4 id="高速缓存"><a href="#高速缓存" class="headerlink" title="高速缓存"></a>高速缓存</h4><p>每个域名服务器都维护一个高速缓存，存放最近用过的名字以及从何处获得名字映射信息的记录。可大大减轻根域名服务器的负荷，使互联网上的 DNS 查询请求和回答报文的数量大为减少。</p><p>为保持高速缓存中的内容正确，域名服务器应为每项内容设置计时器，并处理超过合理时间的项（例如，每个项目只存放两天）。</p><p>当权限域名服务器回答一个查询请求时，在响应中都指明绑定有效存在的时间值。增加此时间值可减少网络开销，而减少此时间值可提高域名转换的准确性。</p><h2 id="6-2-文件传输协议FTP"><a href="#6-2-文件传输协议FTP" class="headerlink" title="6.2 文件传输协议FTP"></a>6.2 文件传输协议FTP</h2><p>文件传送协议 FTP (File Transfer Protocol) 是互联网上使用最广泛的文件传送协议。FTP 提供交互式的访问，允许客户指明文件的类型与格式，并允许文件具有存取权限。</p><p>文件传送协议 FTP 只提供文件传送的一些基本的服务，它使用 TCP 可靠的运输服务。</p><p>FTP 的主要功能是减少或消除不同操作系统处理文件的不兼容性。</p><p>FTP 使用客户服务器方式。一个 FTP 服务器进程可同时为多个客户进程提供服务。FTP 的服务器进程由两大部分组成：一个主进程，负责接受新的请求；另外有若干个从属进程，负责处理单个请求。</p><p>过程：</p><p>很离谱，三页ppt三个说法</p><ol><li>打开熟知端口（端口号为 21），使客户进程能够连接上。</li><li>客户进程发出连接请求，寻找连接服务器进程的熟知端口(21)，同时还要告诉服务器进程自己的另一个端口号码，用于建立数据传送连接。</li><li>服务器进程用自己传送数据的熟知端口(20)与客户进程所提供的端口号码建立数据传送连接。启动从属进程来处理客户进程发来的请求。从属进程对客户进程的请求处理完毕后即终止，但从属进程在运行期间根据需要还可能创建其他一些子进程。</li><li>回到等待状态，继续接受其他客户进程发来的请求。主进程与从属进程的处理是并发地进行。</li></ol><p>由于 FTP 使用了两个不同的端口号，所以数据连接与控制连接不会发生混乱。</p><p><strong>控制连接</strong>在整个会话期间一直保持打开，FTP 客户发出的传送请求通过控制连接发送给服务器端的控制进程，但控制连接不用来传送文件。</p><p>实际用于传输文件的是<strong>数据连接</strong>。服务器端的控制进程在接收到 FTP 客户发送来的文件传输请求后就创建“数据传送进程”和“数据连接”，用来连接客户端和服务器端的数据传送进程。数据传送进程实际完成文件的传送，在传送完毕后关闭“数据传送连接”并结束运行。</p><img src="net/image-20230131174428394.png" alt="image-20230131174428394" style="zoom:67%;" /><img src="/2022/11/22/net/image-20230131174441153.png" class="" title="image-20230131174441153"><h2 id="6-3-万维网WWW"><a href="#6-3-万维网WWW" class="headerlink" title="6.3 万维网WWW"></a>6.3 万维网WWW</h2><p>万维网是分布式超媒体(hypermedia)系统，它是超文本(hypertext)系统的扩充。</p><p>一个超文本由多个信息源链接成。利用一个链接可使用户找到另一个文档。超媒体与超文本的区别是文档内容不同。超文本文档仅包含文本信息，而超媒体文档还包含其他表示方式的信息，如图形、图像、声音、动画，甚至活动视频图像。</p><p>万维网以客户/服务器方式工作。</p><p>浏览器就是在用户计算机上的万维网客户程序。万维网文档所驻留的计算机则运行服务器程序，因此这个计算机也称为万维网服务器。客户程序向服务器程序发出请求，服务器程序向客户程序送回客户所要的万维网文档。在一个客户程序主窗口上显示出的万维网文档称为页面(page)。</p><p>(1) 怎样标志分布在整个互联网上的万维网文档？</p><p>使用统一资源定位符 URL (Uniform Resource Locator)来标志万维网上的各种文档。</p><p>统一资源定位符 URL 是对可以从互联网上得到的资源的位置和访问方法的一种简洁的表示。大小写无要求</p><img src="/2022/11/22/net/image-20230201101211086.png" class="" title="image-20230201101211086"><p>协议：http可以省略，其他都不能</p><p>主机：是存放资源的主机在互联网中的域名，通过DNS查找</p><p>端口、路径：可省略，根据协议映射，http-80，ftp-20,21</p><p>(2) 用何协议实现万维网上各种超链的链接？ </p><p>在万维网客户程序与万维网服务器程序之间进行交互所使用的协议，是超文本传送协议 HTTP (HyperText Transfer Protocol)。</p><p>HTTP 是一个应用层协议，它使用 TCP 连接进行可靠的传送。 </p><p>(3) 怎样使各种万维网文档都能在互联网上的各种计算机上显示出来，同时使用户清楚地知道在什么地方存在着超链？ </p><p>超文本标记语言 HTML (HyperText Markup Language)使得万维网页面的设计者可以很方便地用一个超链从本页面的某处链接到互联网上的任何一个万维网页面，并且能够在自己的计算机屏幕上将这些页面显示出来。</p><p>(4) 怎样使用户能够很方便地找到所需的信息？ </p><p>为了在万维网上方便地查找信息，用户可使用各种的搜索工具（即搜索引擎）。 </p><h3 id="超文本传送协议HTTP"><a href="#超文本传送协议HTTP" class="headerlink" title="超文本传送协议HTTP"></a>超文本传送协议HTTP</h3><p>HTTP 是面向事务的(transaction-oriented)应用层协议，它是万维网上能够可靠地交换文件（包括文本、声音、图像等各种多媒体文件）的重要基础。</p><img src="net/image-20230201102221715.png" alt="image-20230201102221715" style="zoom:80%;" /><p>(1) 浏览器分析超链指向页面的 URL；</p><p>(2) 浏览器向 DNS 请求解析 <a href="http://www.tsinghua.edu.cn/">www.tsinghua.edu.cn</a> 的 IP 地址；</p><p>(3) 域名系统 DNS 解析出清华大学服务器的 IP 地址；</p><p>(4) 浏览器与服务器建立 TCP 连接；</p><p>(5) 浏览器发出取文件命令：GET /chn/yxsz/index.htm；</p><p>(6) 服务器给出响应，把文件 index.htm 发给浏览器；</p><p>(7) TCP 连接释放；</p><p>(8) 浏览器显示“清华大学院系设置”文件 index.htm 中的所有文本。</p><h4 id="HTTP报文结构"><a href="#HTTP报文结构" class="headerlink" title="HTTP报文结构"></a>HTTP报文结构</h4><p>由于 HTTP 是面向正文的(text-oriented)，因此在报文中的每一个字段都是一些 ASCII 码串，因而每个字段的长度都是不确定的。协议接近自然语言。</p><h5 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h5><p>从客户向服务器发送请求报文。</p><img src="net/image-20230201102412290.png" alt="image-20230201102412290" style="zoom:80%;" /><p>方法：是面向对象技术中使用的专门名词。所谓“方法”就是对所请求的对象进行的操作，因此这些方法实际上也就是一些命令。因此，请求报文的类型是由它所采用的方法决定的。</p><p>URL：请求资源的URL</p><p>版本：HTTP的版本，有1.0    1.1    2.0。版本协议结构大致相同</p><h5 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h5><p>从服务器到客户的回答。</p><img src="net/image-20230201104646056.png" alt="image-20230201104646056" style="zoom:80%;" /><img src="net/image-20230201104704152.png" alt="image-20230201104704152" style="zoom:80%;" /><h3 id="HTTP特点"><a href="#HTTP特点" class="headerlink" title="HTTP特点"></a>HTTP特点</h3><ul><li><p>HTTP 是面向事务的客户/服务器协议。</p></li><li><p>HTTP 协议是无状态的(stateless)。</p></li><li><p>HTTP 协议本身是无连接的，虽然它使用了面向连接的 TCP 向上提供的服务。TCP提供可靠性保障。</p><p>无连接，不会记录用户信息；使用cookie记录用户信息</p></li></ul><h3 id="HTTP资源请求工作方式"><a href="#HTTP资源请求工作方式" class="headerlink" title="HTTP资源请求工作方式"></a>HTTP资源请求工作方式</h3><p>1.1版本，可以一次传送多个TCP请求，是n个连接一起发送，不是一个连接</p><img src="/2022/11/22/net/image-20230201105530755.png" class="" title="image-20230201105530755"><img src="/2022/11/22/net/image-20230201105701986.png" class="" title="image-20230201105701986"><img src="/2022/11/22/net/image-20230201105710856.png" class="" title="image-20230201105710856"><p>HTTP1.1使用持续连接（persistent connection）：服务器在发送响应后仍然在一段时间内保持这条连接（不释放），使同一个客户（浏览器）和该服务器可以继续在这条连接上传送后续的 HTTP 请求报文和响应报文。只要文档都在同一个服务器上，就可以继续使用该 TCP 连接。</p><p>两种工作方式：</p><ul><li>非流水线方式 (without pipelining)</li><li>流水线方式 (with pipelining)。</li></ul><img src="/2022/11/22/net/image-20230201105936701.png" class="" title="image-20230201105936701"><img src="/2022/11/22/net/image-20230201105944953.png" class="" title="image-20230201105944953"><p>HTTP2</p><ul><li>协议 HTTP/1.1 的升级版本，允许客户复用 TCP 连接进行多个请求。</li><li>服务器可以并行发回响应（使用同一个 TCP 连接）。时间间隔更小</li><li>把所有的报文都划分为许多较小的二进制编码的帧，并采用了新的压缩算法，<strong>不发送重复的首部字段</strong>，大大减小了首部的开销，提高了传输效率。（重大升级）</li><li>向后兼容。兼容1.0   1.1</li></ul><h3 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h3><p>代理服务器(proxy server)又称为万维网高速缓存(Web cache)，它代表浏览器发出 HTTP 请求。</p><img src="net/image-20230201110227942.png" alt="image-20230201110227942" style="zoom:80%;" /><p>(1) 浏览器访问互联网的服务器时，要先与校园网的高速缓存建立 TCP 连接，并向高速缓存发出 HTTP 请求报文。</p><p>(2) 若高速缓存已经存放了所请求的对象，则将此对象放入 HTTP 响应报文中返回给浏览器，不需要根据URL访问。</p><p>(3) 否则，高速缓存就代表发出请求的用户浏览器，与互联网上的源点服务器建立 TCP 连接，并发送 HTTP 请求报文。</p><p>(4) 源点服务器将所请求的对象放在 HTTP 响应报文中返回给校园网的高速缓存。</p><p>(5) 高速缓存收到此对象后，先复制在其本地存储器中（为今后使用），然后再将该对象放在 HTTP 响应报文中，通过已建立的 TCP 连接，返回给请求该对象的浏览器。</p><p>此外，高速缓存设置计时器，一定时间后更新显示内容</p><p>优点：</p><ol><li>减少路由器间的流量</li><li>NAT，不需要内网IP地址，只需代理服务器地址来访问网络，节省IP</li><li>代理服务防火墙，隐藏了主机</li></ol><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>万维网站点使用 Cookie 来跟踪用户，Cookie 表示在 HTTP 服务器和客户之间传递的状态信息。</p><p>使用 Cookie 的网站服务器为用户产生一个唯一的识别码。利用此识别码，网站就能够跟踪该用户在该网站的活动。 </p><img src="/2022/11/22/net/image-20230201110622177.png" class="" title="image-20230201110622177"><h3 id="信息检索系统"><a href="#信息检索系统" class="headerlink" title="信息检索系统"></a>信息检索系统</h3><p>1.全文检索搜索和分类目录搜索</p><p>在万维网中用来进行搜索的程序叫做搜索引擎。</p><p>全文检索搜索引擎是一种纯技术型的检索工具。它的工作原理是通过搜索软件到互联网上的各网站收集信息，找到一个网站后可以从这个网站再链接到另一个网站。然后按照一定的规则建立一个很大的在线数据库供用户查询。</p><p>用户在查询时只要输入关键词，就从已经建立的索引数据库上进行查询（并不是实时地在互联网上检索到的信息）。</p><ul><li><p>分类目录搜索引擎</p><ul><li>并不采集网站的任何信息，而是利用各网站向搜索引擎提交的网站信息时填写的关键词和网站描述等信息，经过人工审核编辑后，如果认为符合网站登录的条件，则输入到分类目录的数据库中，供网上用户查询。分类目录搜索也叫做分类网站搜索。</li></ul></li><li><p>垂直搜索引擎 (Vertical Search Engine)</p><ul><li>针对某一特定领域、特定人群或某一特定需求提供搜索服务。</li><li>垂直搜索也是提供关键字来进行搜索的，但被放到了一个行业知识的上下文中，返回的结果更倾向于信息、消息、条目等。</li></ul></li><li><p>元搜索引擎（META Search Engine）</p><ul><li>接受用户查询请求后，同时在多个搜索引擎上搜索，并将结果返回给用户。</li></ul></li></ul><h2 id="6-4-电子邮件"><a href="#6-4-电子邮件" class="headerlink" title="6.4 电子邮件"></a>6.4 电子邮件</h2><h3 id="电子邮件软件"><a href="#电子邮件软件" class="headerlink" title="电子邮件软件"></a>电子邮件软件</h3><ul><li><p>用户代理</p><ul><li><p>用户代理 UA 就是用户与电子邮件系统的接口，是电子邮件客户端软件。</p></li><li><p>用户代理的功能：撰写、显示、处理和通信。目前很多网站提供UA功能。专门的电子邮件管理软件可以一起收不同网站的邮箱邮件。</p></li></ul></li><li><p>邮件服务器</p><ul><li>邮件服务器的功能是发送和接收邮件，同时还要向发信人报告邮件传送的情况（已交付、被拒绝、丢失等）。</li><li>邮件服务器按照客户服务器方式工作。邮件服务器需要使用发送和读取两个不同的协议。</li></ul></li></ul><h3 id="电子邮件的标准"><a href="#电子邮件的标准" class="headerlink" title="电子邮件的标准"></a>电子邮件的标准</h3><p>发送邮件的协议：SMTP+MIME</p><p>读取邮件的协议：POP3 和 IMAP</p><p>通用互联网邮件扩充： MIME 在其邮件首部中说明了邮件的数据类型(如文本、声音、图像、视像等)，使用 MIME 可在邮件中同时传送多种类型的数据。</p><p>注：一个邮件服务器既可以作为客户，也可以作为服务器。例如，当邮件服务器 A 向另一个邮件服务器 B 发送邮件时，邮件服务器 A 就作为 SMTP 客户，而 B 是 SMTP 服务器。当邮件服务器 A 从另一个邮件服务器 B 接收邮件时，邮件服务器 A 就作为 SMTP 服务器，而 B 是 SMTP 客户。</p><h3 id="发送接收过程"><a href="#发送接收过程" class="headerlink" title="发送接收过程"></a>发送接收过程</h3><img src="/2022/11/22/net/image-20230201161556073.png" class="" title="image-20230201161556073"><p>(1) 发信人调用用户代理来编辑要发送的邮件。用户代理用 SMTP 把邮件传送给发送端邮件服务器。</p><p>(2) 发送端邮件服务器将邮件放入邮件缓存队列中，等待发送。</p><p>(3) 运行在发送端邮件服务器的 SMTP 客户进程，发现在邮件缓存中有待发送的邮件，就向运行在接收端邮件服务器的 SMTP 服务器进程发起 TCP 连接的建立。</p><p>(4) TCP 连接建立后，SMTP 客户进程开始向远程的 SMTP 服务器进程发送邮件。当所有的待发送邮件发完了，SMTP 就关闭所建立的 TCP 连接。</p><p>(5) 运行在接收端邮件服务器中的 SMTP 服务器进程收到邮件后，将邮件放入收信人的用户邮箱中，等待收信人在方便时进行读取。</p><p>(6) 收信人在打算收信时，调用用户代理，使用 POP3或 IMAP协议将自己的邮件从接收端邮件服务器的用户邮箱中的取回（如果邮箱中有来信）。</p><h3 id="电子邮件的组成"><a href="#电子邮件的组成" class="headerlink" title="电子邮件的组成"></a>电子邮件的组成</h3><p>电子邮件由信封(envelope)和内容(content)两部分组成。</p><p>信封：在邮件的信封上，最重要的就是收件人的地址。</p><p>地址：xxx@邮箱所在主机的域名</p><p>内容：正文</p><p>电子邮件的传输程序根据邮件信封上的信息来传送邮件。用户在从自己的邮箱中读取邮件时才能见到邮件的内容。</p><h3 id="简单邮件传送协议SMTP"><a href="#简单邮件传送协议SMTP" class="headerlink" title="简单邮件传送协议SMTP"></a>简单邮件传送协议SMTP</h3><p>SMTP 所规定的就是在两个相互通信的 SMTP 进程之间应如何交换信息，基于<strong>TCP</strong>协议，端口号：25.</p><p>SMTP 使用客户/服务器方式，负责发送邮件的 SMTP 进程就是 SMTP 客户，而负责接收邮件的 SMTP 进程就是 SMTP 服务器。</p><p>SMTP 规定了 14 条命令和 21 种应答信息。每条命令用 4 个字母组成，而每一种应答信息一般只有一行信息，由一个 3 位数字的代码开始，后面附上简单的文字说明。 </p><p>通信的三个阶段</p><ol><li>连接建立：连接是在发送主机的 SMTP 客户和接收主机的 SMTP 服务器之间建立的。<br> SMTP不使用中间的邮件服务器。  </li><li>邮件传送</li><li>连接释放：邮件发送完毕后，SMTP 应释放 TCP 连接。</li></ol><p>SMTP 有以下缺点：通过MIME解决</p><ul><li>SMTP 不能传送可执行文件或其他的二进制对象。</li><li>SMTP 限于传送 7 位的 ASCII 码。许多其他非英语国家的文字（如中文、俄文，甚至带重音符号的法文或德文）就无法传送。</li><li>SMTP 服务器会拒绝超过一定长度的邮件。</li><li>某些 SMTP 的实现并没有完全按照[RFC 821]的 SMTP 标准。 </li></ul><h3 id="邮件读取协议POP3-IMAP"><a href="#邮件读取协议POP3-IMAP" class="headerlink" title="邮件读取协议POP3 IMAP"></a>邮件读取协议POP3 IMAP</h3><p>POP3</p><p>邮局协议 POP 是一个非常简单、但功能有限的邮件读取协议，现在使用的是它的第三个版本 POP3。POP 也使用客户/服务器的工作方式。在接收邮件的用户 PC 机中必须运行 POP 客户程序，而在用户所连接的 ISP 的邮件服务器中则运行 POP 服务器程序。  </p><p>最重要的特点：用户从邮件服务器上下载邮件后，只能本地查看邮件内容，在接收服务器中已经删除</p><p>IMAP</p><p>解决了POP3离线的问题，用户可以在不同的地方使用不同的计算机随时上网阅读和处理自己的邮件。</p><p>IMAP 还允许收件人只读取邮件中的某一个部分。例如，收到了一个带有视像附件（此文件可能很大）的邮件。为了节省时间，可以先下载邮件的正文部分，待以后有时间再读取或下载这个很长的附件。</p><p>IMAP 的缺点是如果用户没有将邮件复制到自己的 PC 机上，则邮件一直是存放在 IMAP 服务器上。因此用户需要经常与 IMAP 服务器建立连接</p><h3 id="万维网电子邮件"><a href="#万维网电子邮件" class="headerlink" title="万维网电子邮件"></a>万维网电子邮件</h3><p>用户代理 (UA) 的缺点：必须在计算机中安装用户代理软件。</p><p>万维网电子邮件优点：需要在计算机中再安装用户代理软件。只要能联网，就能方便地收发电子邮件。界面非常友好。</p><img src="/2022/11/22/net/image-20230201165234465.png" class="" title="image-20230201165234465"><p>电子邮件从 发送方A 发送到发送方邮件服务器使用 HTTP 协议。</p><p>两个邮件服务器之间的传送使用 SMTP。</p><p>邮件从接收方邮件服务器传送到接收方B 使用 HTTP 协议。</p><h3 id="通用互联网邮件扩充MIME"><a href="#通用互联网邮件扩充MIME" class="headerlink" title="通用互联网邮件扩充MIME"></a>通用互联网邮件扩充MIME</h3><p>MIME 并没有改动 SMTP 或取代SMTP。增加了邮件主体的结构，并定义了传送非 ASCII 码的编码规则。 </p><img src="/2022/11/22/net/image-20230201165411313.png" class="" title="image-20230201165411313"><ol><li><p>5 个新的邮件首部字段，它们可包含在[RFC 822]首部中。这些字段提供了有关邮件主体的信息。</p><img src="/2022/11/22/net/image-20230201170225499.png" class="" title="image-20230201170225499"></li><li><p>定义了传送编码，可对任何内容格式进行转换，而不会被邮件系统改变。</p><img src="/2022/11/22/net/image-20230201170233519.png" class="" title="image-20230201170233519"><p>quoted-printable编码</p><img src="/2022/11/22/net/image-20230201170317709.png" class="" title="image-20230201170317709"><p>base64编码，适合任意长度的二进制数据</p><img src="/2022/11/22/net/image-20230201170418889.png" class="" title="image-20230201170418889"><img src="/2022/11/22/net/image-20230201170428524.png" class="" title="image-20230201170428524"></li><li><p>定义了许多邮件内容的格式，对多媒体电子邮件的表示方法进行了标准化。</p></li></ol><img src="/2022/11/22/net/image-20230201170501664.png" class="" title="image-20230201170501664"><h2 id="6-5-动态主机配置协议DHCP"><a href="#6-5-动态主机配置协议DHCP" class="headerlink" title="6.5 动态主机配置协议DHCP"></a>6.5 动态主机配置协议DHCP</h2><p>配置的项目</p><p> (1) IP 地址</p><p> (2) 子网掩码</p><p> (3) 默认路由器的 IP 地址</p><p> (4) 域名服务器的 IP 地址</p><p>这些信息通常存储在一个配置文件中，计算机在引导过程中可以对这个文件进行存取。</p><p>DHCP 提供了即插即用连网(plug-and-play networking)的机制，这种机制允许一台计算机加入新的网络和获取IP地址而不用手工参与。 </p><p>DHCP 使用客户/服务器方式，基于UDP，工作流程包括6阶段。</p><h3 id="DHCP工作流程"><a href="#DHCP工作流程" class="headerlink" title="DHCP工作流程"></a>DHCP工作流程</h3><p>前四个阶段都是广播，后面两个是单播。全部都是UDP</p><h4 id="1发现阶段"><a href="#1发现阶段" class="headerlink" title="1发现阶段"></a>1发现阶段</h4><p>即：DHCP客户机寻找DHCP服务器的阶段。</p><p>（服务器要求：标准主机；拥有一组IP地址，已配置或能够自行配置掩码、网关等参数）</p><p>DHCP客户机以广播方式发送DHCP discover发现信息来寻找DHCP服务器，该广播包中的源IP地址为0.0.0.0（不知道自己IP，所以填”我”），目标IP地址为255.255.255.255（全1广播）</p><p>网络上每一台安装了TCP/IP协议的主机都会接收到这种广播信息，但只有DHCP服务器才会做出响应。</p><h4 id="2提供阶段"><a href="#2提供阶段" class="headerlink" title="2提供阶段"></a>2提供阶段</h4><p>即DHCP服务器提供IP地址的阶段。</p><p>在网络中接收到DHCP discover发现信息的DHCP服务器做出响应；</p><p>从尚未出租的IP地址中挑选一个分配给DHCP客户机；</p><p>向DHCP客户机发送一个DHCP offer提供信息广播包。该广播包的源IP地址为DCHP服务器IP，目标IP地址为255.255.255.255，包中还包含提供的IP地址、子网掩码及租期等信息。</p><h4 id="3选择阶段"><a href="#3选择阶段" class="headerlink" title="3选择阶段"></a>3选择阶段</h4><p>即DHCP客户机选择某台DHCP服务器提供的IP地址的阶段。</p><p>如果有多台DHCP服务器向DHCP客户机发来的DHCP offer提供信息，则DHCP客户机只接受第一个收到的DHCP offer提供信息，然后它就以广播方式回答一个DHCP request请求信息，该信息中包含向它所选定的DHCP服务器请求IP地址的内容。发出的广播，源地址全0，目的地址全1。</p><p>之所以要以广播方式回答，是为了通知所有的DHCP服务器，他将选择某台DHCP服务器所提供的IP地址。</p><h4 id="4确认阶段"><a href="#4确认阶段" class="headerlink" title="4确认阶段"></a>4确认阶段</h4><p>即DHCP服务器确认所提供的IP地址的阶段。</p><p>当DHCP服务器收到客户机的DHCP request请求信息之后，便向DHCP客户机<strong>广播</strong>一个包含它所提供的IP地址和其他设置的DHCP ACK确认信息，告诉DHCP客户机可以使用它所提供的IP地址。</p><p>然后DHCP客户机便将其TCP/IP协议与网卡绑定。</p><p>除DHCP客户机选中的服务器外，其他的DHCP服务器都将收回曾提供的IP地址。</p><h4 id="5重新登录"><a href="#5重新登录" class="headerlink" title="5重新登录"></a>5重新登录</h4><p>以后DHCP客户机每次重新登录网络时，就不需要再发送DHCP discover发现信息了，而是直接发送包含前一次所分配的IP地址的DHCP request请求信息。</p><p>当DHCP服务器收到这一信息后，它会尝试让DHCP客户机继续使用原来的IP地址，并回答一个DHCP ACK确认信息。</p><p>如果此IP地址已无法再分配给原来的DHCP客户机使用时，则DHCP服务器给DHCP客户机回答一个DHCP NACK否认信息。</p><p>当原来的DHCP客户机收到此DHCP NACK否认信息后，它就必须重新发送DHCP discover发现信息来请求新的IP地址。回到1发现阶段</p><h4 id="6更新租约"><a href="#6更新租约" class="headerlink" title="6更新租约"></a>6更新租约</h4><p>DHCP服务器向DHCP客户机出租的IP地址一般都有一个租借期限，期满后DHCP服务器便会收回出租的IP地址。</p><p>如果DHCP客户机要延长其IP租约，必须更新其IP租约。</p><p>DHCP客户机启动时和IP租约期限过一半时，DHCP客户机都会自动向DHCP服务器发送更新其IP租约的信息。若服务器同意，则延长租约；不同意，到期后客户机重新1发现阶段广播。</p><h3 id="DHCP中继代理"><a href="#DHCP中继代理" class="headerlink" title="DHCP中继代理"></a>DHCP中继代理</h3><p>并不是每个网络上都有 DHCP 服务器，这样会使 DHCP 服务器的数量太多。现在是每一个网络至少有一个 DHCP 中继代理，它配置了 DHCP 服务器的 IP 地址信息。</p><p>当 DHCP 中继代理收到主机发送的发现报文后，就以单播方式向 DHCP 服务器转发此报文，并等待其回答。收到 DHCP 服务器回答的提供报文后，DHCP 中继代理再将此提供报文发回给主机。</p><img src="/2022/11/22/net/image-20230201173125701.png" class="" title="image-20230201173125701"><h2 id="6-6-简单网络管理协议-SNMP"><a href="#6-6-简单网络管理协议-SNMP" class="headerlink" title="6.6 简单网络管理协议 SNMP"></a>6.6 简单网络管理协议 SNMP</h2><p>一 点 也 不 简 单</p><p>网络管理包括对硬件、软件和人力的使用、综合与协调，以便对网络资源进行监视、测试、配置、分析、评价和控制，这样就能以合理的价格满足网络的一些需求，如实时运行性能，服务质量等。</p><p>网络管理常简称为网管。网络管理并不是指对网络进行行政上的管理。</p><img src="/2022/11/22/net/image-20230201173259704.png" class="" title="image-20230201173259704"><p>不想粘了，看ppt吧</p><h2 id="6-7-P2P文件系统"><a href="#6-7-P2P文件系统" class="headerlink" title="6.7 P2P文件系统"></a>6.7 P2P文件系统</h2><h3 id="工作方式概述"><a href="#工作方式概述" class="headerlink" title="工作方式概述"></a>工作方式概述</h3><p>自从互联网能够提供音频/视频服务后，用户数也急剧增长。很多用户使用宽带接入的目的就是为了更快地下载音频/视频文件。</p><p>P2P 方式受到广泛欢迎，因为它解决了集中式媒体服务器可能出现的瓶颈问题。</p><p>在P2P工作方式下，所有音频/视频文件都在普通的互联网用户之间传输。这相当于有很多分散在各地的媒体服务器向其他用户提供所需要下载的音频/视频文件。</p><p>在互联网流量中，P2P工作方式下的文件分发已占据了最大的份额，比万维网应用所占的比例大得多。 </p><h3 id="Napster"><a href="#Napster" class="headerlink" title="Napster"></a>Napster</h3><p>集中目录服务器的P2P</p><p>第一代P2P系统，提供音乐检索功能。将所有的音乐文件地址集中存放在一个 Napster 目录服务器中，用户要及时向 Napster 的目录服务器报告自己存有的音乐文件。</p><p>当用户想下载某个 MP3 文件时，就向目录服务器发出询问。目录服务器检索出结果后向用户返回存放此文件的 PC 机的 IP 地址，用户即可到存放资源的站点下载到所需要的 MP3 文件。</p><img src="/2022/11/22/net/image-20230201174027244.png" class="" title="image-20230201174027244"><p>Napster 的文件传输是分散的，但文件的定位是集中的。</p><p>这种集中式目录服务器的优点是：协议简单，查询速度快；<br> 但缺点是：中央服务器易成为单一故障点和性能瓶颈，可靠性和扩展性差。</p><p>Napster 被判决属于“间接侵害版权”，因此在 2000 年 7 月底 Napster 网站就被迫关闭了。</p><p>Snocap，尝试资源合法化，但免费共享是当时互联网的核心理念。</p><h3 id="Gnutella"><a href="#Gnutella" class="headerlink" title="Gnutella"></a>Gnutella</h3><p>全分布式结构的P2P</p><img src="/2022/11/22/net/image-20230201174721321.png" class="" title="image-20230201174721321"><img src="/2022/11/22/net/image-20230201174728332.png" class="" title="image-20230201174728332"><h3 id="BitTorrent"><a href="#BitTorrent" class="headerlink" title="BitTorrent"></a>BitTorrent</h3><p>2001年，Brahm Cohen开发的第三代P2P程序，混合结构。</p><p>参与某个文件分发的所有对等方集合称为一个洪流 (torrent) 。</p><p>每个洪流都有一个基础设施结点，叫做追踪器 (Tracer)，当一个对等方加入洪流时，必须向Tracer登记，并且周期的通知Tracer它仍在洪流中。因此， Tracer跟踪了所有的对等方，对所有对等方的信息进行维护。</p><p>当一个新的对等方 A 加入洪流时， Tracer就随机地从参与的对等方集合中选择若干个（例如，30 个），并把这些对等方的 IP 地址告诉 A。于是 A 就和这些对等方建立了 TCP 连接。所有与 A 建立了 TCP 连接的对等方为“相邻对等方”(neighboring peers)。</p><p>文件发布者生成一个. Torrent文件，即：种子文件（文本文件），包含：Tracer信息（Tracer的地址）和文件相关信息。</p><p>下载者B首先需得到种子文件，然后根据种子文件得到Tracer的地址；</p><p>B基于TCP与Tracer连接，注册，提供自己的信息，获取其他对等方信息，并且保持与Tracer进行通信，通知自己的在线情况。</p><p>B与所获得的其他对等方连接，交互文件片段。并且监听某端口，等待其他对等方与其建立连接，提供文件。</p><h3 id="分布式散列表DHT"><a href="#分布式散列表DHT" class="headerlink" title="分布式散列表DHT"></a>分布式散列表DHT</h3><p>有结构的P2P系统</p><img src="/2022/11/22/net/image-20230201174852246.png" class="" title="image-20230201174852246"><img src="/2022/11/22/net/image-20230201174859758.png" class="" title="image-20230201174859758"><h4 id="Chord算法"><a href="#Chord算法" class="headerlink" title="Chord算法"></a>Chord算法</h4><img src="/2022/11/22/net/image-20230202104842248.png" class="" title="image-20230202104842248"><p>哈希函数：一般哈希函数，在Chord中使用SHA-1来进行哈希计算。</p><p>节点ID：NID（node identifier），一个m位的数字，表示一个对等方，（m要足够大以保证不同节点的NID相同的几率小的可以忽略不计），由节点机器的IP地址和端口号通过哈希得到。</p><p>资源ID：KID（key identifiers），一个m位的数字，表示一个资源，（m要足够大以保证不同资源的KID相同的几率足够小），由Key（如：资源名）通过哈希得到。</p><p>Chord环：NID和KID被分配到一个大小为2m的环上，用于节点分布和资源分配（分给某一个节点），以及资源定位（注：在这个环上的ID为0–2m-1）。</p><p>资源分配：资源被分配到第一个NID&gt;=KID的节点上，这个节点成为k的后继节点，是环上从k起顺时针方向的第一个节点，记为successor(k)。而节点分布则顺时针将节点NID由大到小放在这个环上。</p><p>每个节点需维护自己的资源信息、前驱节点指针、后继节点指针。</p><img src="/2022/11/22/net/image-20230202110112905.png" class="" title="image-20230202110112905"><p>节点加入：将部分资源信息移至新节点，更新前驱指针，其原前驱更新后继指针。</p><p>资源加入：直接写入对应的节点即可。</p><p>节点移出：将资源信息移至后继节点，移除节点的原前驱更新后继指针，原后继更新前驱指针。</p><p>资源移出：在原节点删除记录即可。</p><h4 id="Chord资源定位"><a href="#Chord资源定位" class="headerlink" title="Chord资源定位"></a>Chord资源定位</h4><img src="/2022/11/22/net/image-20230202110712893.png" class="" title="image-20230202110712893"><img src="/2022/11/22/net/image-20230202110718446.png" class="" title="image-20230202110718446"><img src="/2022/11/22/net/image-20230202110725820.png" class="" title="image-20230202110725820"><ul><li>结构化的P2P算法，巧妙分配，快速定位资源。</li><li>特征：去中心，有结构，高可用，高伸缩性，负载平衡。</li><li>应用广泛：全球文件系统、命名服务、数据库请求处理、互联网级别的数据结构、通信服务、事件通知、文件共享。</li><li>作为一种DHT，只能精确匹配。</li></ul><h4 id="CAN"><a href="#CAN" class="headerlink" title="CAN"></a>CAN</h4><img src="/2022/11/22/net/image-20230202110803146.png" class="" title="image-20230202110803146"><p>每个节点维护：自己所对应的坐标空间、存放的资源信息、路由表，维系邻居之间的在线情况。</p><p>节点的路由表（coordinate routing table），储存坐标空间中相邻节点的IP 地址及所对应的空间信息。</p><p>当保存（key, value）时，使用哈希函数将资源key（如：文件名）映射为坐标空间的点P（坐标），将value保存到点P所在区域的节点上。</p><p>节点加入：首先，新加入的节点随机的选择系统中的一个节点，并向它发送加入消息；被选择到的节点收到加入消息时，将自己的坐标空间一分为二，分给新节点一半，将value数据库（档案）也分离对应的记录给新节点。</p><p>节点离开：将档案交给邻居，和邻居合并为一个大区域，或交给区域最小的邻居。</p><p>CAN 利用每个节点所拥有的路由表来搜寻文件。当需要文件查询时，先利用哈希函数计算出此文件所对应的坐标，然后从系统中任意选择一个节点，并将文件所对应的坐标发送给被选择的节点。被选择的节点收到坐标信息后，先查询档案数据是否存在节点中，如果存在，则返回文件信息（地址）；如果不存在，则节点会根据其路由表，按照贪婪算法（找出一个与文件坐标最接近的邻居节点，并转送此查询讯息），依此方式直到找到档案为止。</p><p>项目独特之处：采用多维的标识符空间来实现分布式散列算法。 CAN将所有结点映射到一个n维的笛卡尔空间中，并为每个结点尽可能均匀的分配一块区域。无中心、有结构、基于DHT，且具有良好可扩展性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;-1：寄——了——，虽然寄了，但是也挺喜欢这科的（&lt;/p&gt;
&lt;h1 id=&quot;Chapter1-概述&quot;&gt;&lt;a href=&quot;#Chapter1-概述&quot; class=&quot;headerlink&quot; title=&quot;Chapter1.概述&quot;&gt;&lt;/a&gt;Chapter1.概述&lt;/h1&gt;&lt;p&gt;1</summary>
      
    
    
    
    
    <category term="review" scheme="https://github.com/sterne012/sterne012.github.io/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>寄组成原理</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/06/26/cscomposition/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/06/26/cscomposition/</id>
    <published>2022-06-26T00:24:47.000Z</published>
    <updated>2022-06-26T03:45:46.222Z</updated>
    
    <content type="html"><![CDATA[<p>要背的整理</p><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p>摩尔定律：1965年摩尔，芯片上晶体管数量每年翻一番，1970年减慢成每18个月翻一番</p><p>计算机的性能指标：</p><ul><li>吞吐量TP</li><li>响应时间</li><li>处理机字长</li><li>总线宽度</li><li>存储器容量</li><li>存储器带宽 MB/s</li><li>主频/时钟周期</li><li>CPU执行时间：CPU时钟周期数xCPU时钟周期</li><li>CPI：每条指令周期数</li><li>MIPS：平均每秒执行多少百万条定点指令数</li><li>FLOPS：每秒执行浮点操作的次数，用来衡量机器浮点操作的性能</li></ul><p>硬件构成：运算器、控制器、存储器、输入输出设备、总线</p><p>冯诺依曼结构：存储程序并按地址顺序执行</p><p>取指周期-指令流，执行周期-数据流</p><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><p>原码和反码有+0和-0？什么的，补码只有0</p><p>奇校验C非=1、偶校验C=1</p><p>溢出：00正无溢出，01正溢出，10负溢出，11负无溢出</p><p>全加器&amp;进位加法器</p><p>浮点数运算：0操作数检查、对阶、尾数加减运算、结果规格化</p><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><p>程序的局部性原理：在某一段时间频繁访问某一局部的存储器空间，而对此范围以外的地址空间则很少访问的现象</p><p>时间局部性：最近被访问的信息很可能还要被访问</p><p>空间局部性：最近被访问的信息的临近地址信息可能被访问</p><p>多级存储器：cache、主存、外存</p><p>ROM只读，RAM随机（两者访问都是随机的）</p><p>存储容量=存储字数（存储单元数）x存储字长</p><p>1B=8bit</p><p>DRAM需要刷新：集中刷新、分散刷新、异步刷新</p><p>双端口存储器：两组相互独立的读写控制电路</p><p>多模块交叉存储器：顺序方式、交叉方式<br>$$<br>t=mT\<br>t=T+(m-1)t_0<br>$$<br>m：连续读取字数，T（一个字的）存储周期，t0总线传送周期</p><p>cache命中率P93</p><p>映射方式：全相联、直接映射、组相联</p><p>cache替换策略：LFU（换出访问次数最少）、LRU（换出长久未访问）、随机替换</p><p>cache写操作策略：写回法、全写法、写一次法</p><p>cache完全硬件完成，虚拟存储器需要软件（操作系统）配合</p><p>虚存：页式虚拟存储器，段式虚拟存储器、段页式虚拟存储器</p><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><p>指令格式：操作码OP、地址码字段</p><p>单字长指令：指令字长=机器字长</p><p>半字长指令：指令字长=机器字长/2</p><p>双字长指令：指令字长=机器字长*2</p><p>二地址指令中指令格式：RR型，SS型，RS型（操作数一个在寄存器，一个在存储器）</p><p>指令寻址方式：顺序寻址、跳跃寻址</p><p>操作数寻址方式：</p><ul><li><p>隐含寻址：操作数在专用寄存器</p></li><li><p>立即寻址：操作数=A</p></li><li><p>直接寻址：EA=A</p></li><li><p>间接寻址：EA=(A)</p></li><li><p>寄存器寻址：EA=R</p></li><li><p>寄存器间接寻址：EA=(R)</p></li><li><p>偏移寻址：EA=A+(R)</p><p>相对寻址：EA=A+(PC) 隐含的专用寄存器是PC</p><p>基址寻址：专用寄存器含有一个存储器地址（并行什么的？）</p><p>变址寻址：地址域引用一个主存地址（数组操作）</p></li><li><p>段寻址：EA=A+(R) 实质基址</p></li><li><p>堆栈寻址：EA=栈顶</p></li></ul><p>RISC/CISC特点</p><h1 id="5"><a href="#5" class="headerlink" title="5"></a>5</h1><p>CPU=运算器（ALU+DR+PSWR+通用寄存器）+控制器（PC+IR+OC操作控制器+指令译码器+时序产生器）</p><p>主要寄存器：DR数据缓冲寄存器、IR指令寄存器、PC程序计数器、AR数据地址寄存器、通用寄存器、PSWR程序状态字寄存器</p><p>数据通路：许多寄存器之间传送信息的通路</p><p>操作控制器：在各寄存器间建立数据通路</p><p>操作控制器分为硬布线控制器、微程序控制器</p><p>指令周期：取出一条指令并执行这条指令的时间</p><p>CPU周期=机器周期：用内存中读取一个字的最短时间规定CPU周期</p><p>时钟周期T：处理操作的最基本单位</p><p>单周期CPU：在一个T内完成从指令取出到得到结果的所有工作</p><p>多周期CPU：把指令执行分为多个阶段，每个阶段在一个时钟周期内完成，不同指令周期数可以不同</p><p>硬布线控制器时序信号：主状态周期-节拍电位-节拍脉冲</p><p>微程序控制器时序信号：节拍电位-节拍脉冲</p><p>时序信号控制方式：同步控制方式、异步控制方式、联合控制方式</p><p>微命令：控制部件通过控制线向执行部件发出各种控制命令</p><p>微操作：执行部件接收微命令后进行的操作</p><p>微指令：在一个CPU周期中，一组实现一定操作功能的微命令的组合</p><p>微程序：一条机器指令的功能是多条微指令组成的序列实现的，这个微指令序列称为微程序</p><p>相容性微操作：一个CPU周期内可以并行执行的微操作；相斥性微操作</p><p>微指令格式：水平型微指令（控制字段、判别测试字段、下地址字段）、垂直型微指令（指令功能简单，并行度差，实现一条微程序比水平型微指令编写的微程序长的多）</p><p>硬布线控制器：微操作控制信号C=指令操作码译码输出、时序信号、状态条件信号的逻辑函数</p><p>流水CPU：资源相关（争用同一部件冲突）（停顿一下再启动、增加存储器）、数据相关（SX锁RAW WAR WAW）（定向传送技术设置运算结果缓冲器）、控制相关（转移指令引起流水线断流）（延迟转移法、转移预测法）</p><h1 id="6"><a href="#6" class="headerlink" title="6"></a>6</h1><p>总线：内部总线（CPU内部）、系统总线、IO总线</p><p>单总线结构、多总线结构</p><p>系统总线：</p><ul><li>数据线（双向，传输数据）</li><li>地址线（单向，传送主存与设备的地址）：指定主存和IO设备接口电路的地址</li><li>控制线（指明数据传送方向，中断控制和定时控制）：提供主存、IO接口设备的控制信号和相应信号</li></ul><p>信息传送方式：串行传送/异步通信（低位在前）、并行传送/同步通信（上高下低）</p><p>波特率：每秒钟传送的比特位bit数</p><p>对多个主设备提出的占用总线请求，一般采用<strong>优先级</strong>或<strong>公平策略</strong>进行仲裁，主方持续控制总线的时间称为<strong>总线占用期</strong></p><p>按照总线仲裁电路的位置不同分为集中式仲裁和分布式仲裁</p><p>集中式仲裁：链式查询方式（对电路故障最敏感）、计数器定时查询方式、独立请求方式（相应时间最快）</p><p>总线的定时：同步总线定时协定、异步……、半同步……、周期分列式……</p><p>总线数据传送方式：读写操作，块传送操作，写后读、读修改写操作，广播、广集操作</p><p>PCI是一个与处理器无关的<strong>高速外围总线</strong>，又是至关重要的层间总线。采用<strong>同步时序协议</strong>和<strong>集中式仲裁策略</strong>，具有<strong>自动配置</strong>能力</p><p>PCI总线的基本传输机制是猝发式传送，利用<strong>桥</strong>可以实现总线间的<strong>猝发式传送</strong>，使所有的存取都按CPU的需要出现在总线上。PCI允许<strong>多条总线并行工作</strong></p><h1 id="8"><a href="#8" class="headerlink" title="8"></a>8</h1><p>为了与CPU交互信息的方便，在IO接口内部一般要设置一些可以被CPU直接访问的寄存器，称为端口</p><p>端口：命令口、状态口、数据口</p><p>端口编址方式：统一编址方式、IO独立编址方式</p><p>IO接口与外设间的数据传送方式：</p><ul><li>无条件传送方式：速度极慢或简单的外围设备</li><li>应答方式（异步传送方式）：慢速或中速的外围设备</li><li>同步传送方式：高速的外设</li></ul><p>CPU与IO接口的数据传送方式：</p><ul><li>无条件传送方式</li><li>程序查询方式</li><li>程序中断方式</li><li>DMA（直接内存访问）方式</li><li>通道和输入/输出处理器</li></ul><p>中断是一种程序随机切换的方式，也叫异常</p><p>8.3</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;要背的整理&lt;/p&gt;
&lt;h1 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1&quot;&gt;&lt;/a&gt;1&lt;/h1&gt;&lt;p&gt;摩尔定律：1965年摩尔，芯片上晶体管数量每年翻一番，1970年减慢成每18个月翻一番&lt;/p&gt;
&lt;p&gt;计算机的性能指标：&lt;</summary>
      
    
    
    
    
    <category term="review" scheme="https://github.com/sterne012/sterne012.github.io/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>数据库课设-英语学习助手</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/06/05/en-learning/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/06/05/en-learning/</id>
    <published>2022-06-05T03:04:59.000Z</published>
    <updated>2022-06-10T07:15:09.623Z</updated>
    
    <content type="html"><![CDATA[<p>javaweb/数据库课设/英语学习助手</p><p>本项目地址<a href="https://github.com/sterne012/en_learning_assistant/">https://github.com/sterne012/en_learning_assistant/</a></p><p>blog地址<a href="https://sterne012.github.io/">https://sterne012.github.io/</a></p><p>数据库部分代码在博客捏</p><p>html+javascript+jquery+boostrapv3+java+servlet+tomcat+beanutils+druid+jdbc+sql server=super 石山</p><p>音频资源（单词发音）来源百度翻译，图片来源网络、部分来自百词斩</p><p>结构显然不如spring框架等等，但是全手搓，感觉效果上还是不错的</p><p>似乎可能有一些小bug？</p><h2 id="界面展示："><a href="#界面展示：" class="headerlink" title="界面展示："></a>界面展示：</h2><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><img src="/2022/06/05/en-learning/image-20220605164600747.png" class="" title="image-20220605164600747"><p>有输入校验功能（写的有jquery有javascript，学的有点乱qwq）</p><img src="/2022/06/05/en-learning/image-20220605164617113.png" class="" title="image-20220605164617113"><h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><img src="/2022/06/05/en-learning/image-20220605164729288.png" class="" title="image-20220605164729288"><h4 id="home界面"><a href="#home界面" class="headerlink" title="home界面"></a>home界面</h4><p>上面的搜索框和词库中英文检索功能一致</p><p>复习即跳转熟词表</p><img src="/2022/06/05/en-learning/image-20220605164818493.png" class="" title="image-20220605164818493"><p>修改信息：</p><img src="/2022/06/05/en-learning/image-20220605165446599.png" class="" title="image-20220605165446599"><h4 id="词库"><a href="#词库" class="headerlink" title="词库"></a>词库</h4><p>音频和图片只有部分有，比如aback，cat，dog，等等一点点</p><p>词库数据tb五块钱买的（）</p><img src="/2022/06/05/en-learning/image-20220605165739600.png" class="" title="image-20220605165739600"><p>底下做了分页</p><img src="/2022/06/05/en-learning/image-20220605165829079.png" class="" title="image-20220605165829079"><p>查询后词频也会增加</p><img src="/2022/06/05/en-learning/image-20220605165851678.png" class="" title="image-20220605165851678"><img src="/2022/06/05/en-learning/image-20220605165916919.png" class="" title="image-20220605165916919"><p>前面选中后点加入可以放进生词表，如果重复加入，会提示</p><img src="/2022/06/05/en-learning/image-20220605170019927.png" class="" title="image-20220605170019927"><h4 id="修改学习计划"><a href="#修改学习计划" class="headerlink" title="修改学习计划"></a>修改学习计划</h4><img src="/2022/06/05/en-learning/image-20220605164842543.png" class="" title="image-20220605164842543"><p>保存修改后有相关反馈</p><img src="/2022/06/05/en-learning/image-20220605164901025.png" class="" title="image-20220605164901025"><h4 id="生词表界面"><a href="#生词表界面" class="headerlink" title="生词表界面"></a>生词表界面</h4><p>点rank的箭头可以更改排序，最大为10最小为0，超出范围调整会提示</p><p>点对号会把单词放到熟词表</p><img src="/2022/06/05/en-learning/image-20220605165058286.png" class="" title="image-20220605165058286"><p>如果熟练掌握数量到计划数，可以打卡</p><img src="/2022/06/05/en-learning/image-20220605165244744.png" class="" title="image-20220605165244744"><h4 id="打卡"><a href="#打卡" class="headerlink" title="打卡"></a>打卡</h4><p>咳咳，私货，左下角只是歌词而已</p><img src="/2022/06/05/en-learning/image-20220605165324907.png" class="" title="image-20220605165324907"><p>再学一会就是再来计划数的单词，修改计划在上面，退出就直接退出登录</p><h4 id="熟词表"><a href="#熟词表" class="headerlink" title="熟词表"></a>熟词表</h4><p>有显示掌握的时间，点前面按钮可以放回生词表</p><img src="/2022/06/05/en-learning/image-20220605170124030.png" class="" title="image-20220605170124030"><h4 id="单词测试"><a href="#单词测试" class="headerlink" title="单词测试"></a>单词测试</h4><p>通知只做了简单的alert</p><img src="/2022/06/05/en-learning/image-20220605170215207.png" class="" title="image-20220605170215207"><img src="/2022/06/05/en-learning/image-20220605170243973.png" class="" title="image-20220605170243973"><h3 id="管理员"><a href="#管理员" class="headerlink" title="管理员"></a>管理员</h3><p>测试账户admin，1</p><img src="/2022/06/05/en-learning/image-20220605170317670.png" class="" title="image-20220605170317670"><img src="/2022/06/05/en-learning/image-20220605170337159.png" class="" title="image-20220605170337159"><h4 id="管理员信息简单修改"><a href="#管理员信息简单修改" class="headerlink" title="管理员信息简单修改"></a>管理员信息简单修改</h4><img src="/2022/06/05/en-learning/image-20220605170755697.png" class="" title="image-20220605170755697"><h4 id="数据库备份"><a href="#数据库备份" class="headerlink" title="数据库备份"></a>数据库备份</h4><p>备份到一个设定的路径</p><img src="/2022/06/05/en-learning/image-20220605170352579.png" class="" title="image-20220605170352579"><h4 id="管理单词表"><a href="#管理单词表" class="headerlink" title="管理单词表"></a>管理单词表</h4><p>按钮功能有所不同</p><img src="/2022/06/05/en-learning/image-20220605170418353.png" class="" title="image-20220605170418353"><h4 id="添加-修改-删除单词"><a href="#添加-修改-删除单词" class="headerlink" title="添加/修改/删除单词"></a>添加/修改/删除单词</h4><p>也有相关校验（啊，标题忘了改），点保存即可保存</p><img src="/2022/06/05/en-learning/image-20220605170528882.png" class="" title="image-20220605170528882"><p>可以返回lib查看</p><img src="/2022/06/05/en-learning/image-20220605170613038.png" class="" title="image-20220605170613038"><p>勾选前面后可以修改</p><img src="/2022/06/05/en-learning/image-20220605170631304.png" class="" title="image-20220605170631304"><p>删除之后：</p><img src="/2022/06/05/en-learning/image-20220605170641266.png" class="" title="image-20220605170641266"><h4 id="用户表管理"><a href="#用户表管理" class="headerlink" title="用户表管理"></a>用户表管理</h4><img src="/2022/06/05/en-learning/image-20220605170658365.png" class="" title="image-20220605170658365"><h4 id="修改用户资料"><a href="#修改用户资料" class="headerlink" title="修改用户资料"></a>修改用户资料</h4><p>也有相关校验</p><img src="/2022/06/05/en-learning/image-20220605170716598.png" class="" title="image-20220605170716598"><p>大概就这</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;javaweb/数据库课设/英语学习助手&lt;/p&gt;
&lt;p&gt;本项目地址&lt;a href=&quot;https://github.com/sterne012/en_learning_assistant/&quot;&gt;https://github.com/sterne012/en_learning_a</summary>
      
    
    
    
    
    <category term="sql" scheme="https://github.com/sterne012/sterne012.github.io/tags/sql/"/>
    
    <category term="java" scheme="https://github.com/sterne012/sterne012.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>深度学习-邪神制造机</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/05/29/deep-gan/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/05/29/deep-gan/</id>
    <published>2022-05-29T09:01:30.000Z</published>
    <updated>2022-05-31T00:46:12.093Z</updated>
    
    <content type="html"><![CDATA[<p>21</p><p>完蛋跑完之后忘了存结果了T T折磨。。。难道真的要再跑6h吗</p><img src="/2022/05/29/deep-gan/00500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/01000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/01500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/02000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/02500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/03000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/03500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/04000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/04500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/05000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/05500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/06000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/06500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/07000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/07500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/08000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/08500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/09000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/09500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/10000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/10500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/11000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/11500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/12000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/12500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/13000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/13500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/14000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/14500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/15000.png" class="" width="00500"><img src="/2022/05/29/deep-gan/15500.png" class="" width="00500"><img src="/2022/05/29/deep-gan/16000.png" class="" width="00500">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;21&lt;/p&gt;
&lt;p&gt;完蛋跑完之后忘了存结果了T T折磨。。。难道真的要再跑6h吗&lt;/p&gt;
&lt;img src=&quot;/2022/05/29/deep-gan/00500.png&quot; class=&quot;&quot; width=&quot;00500&quot;&gt;

&lt;img src=&quot;/2022/05/29/dee</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
    <category term="deeplearning" scheme="https://github.com/sterne012/sterne012.github.io/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-恒星星系分类</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/05/19/deepTest/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/05/19/deepTest/</id>
    <published>2022-05-19T11:01:28.000Z</published>
    <updated>2022-06-02T10:02:20.366Z</updated>
    
    <content type="html"><![CDATA[<p>姑且存一下训练结果，后面应该还会改，比如20个epoch应该不太够</p><p>1</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br>Epoch 1/20<br>1038/1038 [==============================] - 22s 21ms/step - loss: 0.2031 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9348 - val<span class="hljs-emphasis">_loss: 0.1866 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9469<br>Epoch 2/20<br>1038/1038 [==============================] - 25s 24ms/step - loss: 0.1375 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9558 - val<span class="hljs-emphasis">_loss: 0.1296 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9620<br>Epoch 3/20<br>1038/1038 [==============================] - 24s 23ms/step - loss: 0.1155 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9632 - val<span class="hljs-emphasis">_loss: 0.1259 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9599<br>Epoch 4/20<br>1038/1038 [==============================] - 23s 22ms/step - loss: 0.1001 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9670 - val<span class="hljs-emphasis">_loss: 0.1430 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9612<br>Epoch 5/20<br>1038/1038 [==============================] - 23s 22ms/step - loss: 0.0953 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9686 - val<span class="hljs-emphasis">_loss: 0.1109 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9637<br>Epoch 6/20<br>1038/1038 [==============================] - 23s 22ms/step - loss: 0.0877 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9707 - val<span class="hljs-emphasis">_loss: 0.1097 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9648<br>Epoch 7/20<br>1038/1038 [==============================] - 23s 22ms/step - loss: 0.0796 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9744 - val<span class="hljs-emphasis">_loss: 0.1058 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9680<br>Epoch 8/20<br>1038/1038 [==============================] - 23s 22ms/step - loss: 0.0790 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9748 - val<span class="hljs-emphasis">_loss: 0.0977 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9707<br>Epoch 9/20<br>1038/1038 [==============================] - 23s 23ms/step - loss: 0.0696 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9772 - val<span class="hljs-emphasis">_loss: 0.1074 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9672<br>Epoch 10/20<br>1038/1038 [==============================] - 23s 22ms/step - loss: 0.0654 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9793 - val<span class="hljs-emphasis">_loss: 0.0979 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9707<br>Epoch 11/20<br>1038/1038 [==============================] - 23s 22ms/step - loss: 0.0658 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9783 - val<span class="hljs-emphasis">_loss: 0.1075 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9707<br>Epoch 12/20<br>1038/1038 [==============================] - 25s 24ms/step - loss: 0.0604 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9802 - val<span class="hljs-emphasis">_loss: 0.1040 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9680<br>Epoch 13/20<br>1038/1038 [==============================] - 25s 24ms/step - loss: 0.0595 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9802 - val<span class="hljs-emphasis">_loss: 0.1135 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9664<br>Epoch 14/20<br>1038/1038 [==============================] - 26s 25ms/step - loss: 0.0553 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9819 - val<span class="hljs-emphasis">_loss: 0.1049 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9680<br>Epoch 15/20<br>1038/1038 [==============================] - 25s 24ms/step - loss: 0.0546 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9821 - val<span class="hljs-emphasis">_loss: 0.1126 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9715<br>Epoch 16/20<br>1038/1038 [==============================] - 25s 24ms/step - loss: 0.0522 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9825 - val<span class="hljs-emphasis">_loss: 0.0917 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9713<br>Epoch 17/20<br>1038/1038 [==============================] - 25s 24ms/step - loss: 0.0470 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9842 - val<span class="hljs-emphasis">_loss: 0.1050 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9721<br>Epoch 18/20<br>1038/1038 [==============================] - 25s 24ms/step - loss: 0.0444 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9855 - val<span class="hljs-emphasis">_loss: 0.1025 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9686<br>Epoch 19/20<br>1038/1038 [==============================] - 25s 24ms/step - loss: 0.0503 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9830 - val<span class="hljs-emphasis">_loss: 0.1110 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9737<br>Epoch 20/20<br>1038/1038 [==============================] - 25s 24ms/step - loss: 0.0425 - sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9854 - val<span class="hljs-emphasis">_loss: 0.1055 - val_</span>sparse<span class="hljs-emphasis">_categorical_</span>accuracy: 0.9715<br>Model: &quot;sequential&quot;<br><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-emphasis">_</span><br><span class="hljs-emphasis">Layer (type)                 Output Shape              Param #   </span><br><span class="hljs-emphasis">=================================================================</span><br><span class="hljs-emphasis">flatten (Flatten)            (None, 12288)             0         </span><br><span class="hljs-emphasis"><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span>_</span><br>dense (Dense)                (None, 64)                786496    <br><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-emphasis">_</span><br><span class="hljs-emphasis">dense_</span>1 (Dense)              (None, 2)                 130       <br>=================================================================<br>Total params: 786,626<br>Trainable params: 786,626<br>Non-trainable params: 0<br><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-emphasis">_</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">Process finished with exit code 0</span><br><span class="hljs-emphasis"></span><br></code></pre></td></tr></table></figure><img src="/2022/05/19/deepTest/image-20220519190216184.png" class="" title="image-20220519190216184"><img src="/2022/05/19/deepTest/image-20220519190232323.png" class="" title="image-20220519190232323"><p>试了一圈还是这么存吧。。。</p><p>4</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs markdown">model = tf.keras.models.Sequential([<br><span class="hljs-code">    tf.keras.layers.Flatten(),</span><br><span class="hljs-code">    Dense(64, activation=&#x27;relu&#x27;),</span><br><span class="hljs-code">    Dropout(0.2),</span><br><span class="hljs-code">    Dense(32, activation=&#x27;relu&#x27;),</span><br><span class="hljs-code">    Dropout(0.2),</span><br><span class="hljs-code">    Dense(2, activation=&#x27;softmax&#x27;)</span><br><span class="hljs-code">])</span><br><span class="hljs-code"></span><br>D:\pyAnaconda\envs\pythonProject\python.exe D:/Code/pythonProject/work/sdss<span class="hljs-emphasis">_reco.py</span><br><span class="hljs-emphasis">Epoch 1/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 23s 21ms/step - loss: 0.2327 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9268 - val_</span>loss: 0.1805 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9447</span><br><span class="hljs-emphasis">Epoch 2/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 23s 22ms/step - loss: 0.1538 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9497 - val_</span>loss: 0.1279 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9596</span><br><span class="hljs-emphasis">Epoch 3/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 23s 22ms/step - loss: 0.1367 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9562 - val_</span>loss: 0.1220 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9607</span><br><span class="hljs-emphasis">Epoch 4/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 26s 25ms/step - loss: 0.1210 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9613 - val_</span>loss: 0.1104 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9607</span><br><span class="hljs-emphasis">Epoch 5/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 24s 23ms/step - loss: 0.1194 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9620 - val_</span>loss: 0.1141 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9642</span><br><span class="hljs-emphasis">Epoch 6/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 23s 22ms/step - loss: 0.1131 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9634 - val_</span>loss: 0.1064 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9637</span><br><span class="hljs-emphasis">Epoch 7/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 24s 23ms/step - loss: 0.1059 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9657 - val_</span>loss: 0.1019 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9691</span><br><span class="hljs-emphasis">Epoch 8/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 24s 23ms/step - loss: 0.1069 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9670 - val_</span>loss: 0.1052 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9648</span><br><span class="hljs-emphasis">Epoch 9/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 24s 23ms/step - loss: 0.1003 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9685 - val_</span>loss: 0.0998 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9680</span><br><span class="hljs-emphasis">Epoch 10/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 24s 23ms/step - loss: 0.0980 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9694 - val_</span>loss: 0.0965 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9696</span><br><span class="hljs-emphasis">Epoch 11/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 25s 24ms/step - loss: 0.1009 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9677 - val_</span>loss: 0.0952 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9683</span><br><span class="hljs-emphasis">Epoch 12/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 23s 22ms/step - loss: 0.0943 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9704 - val_</span>loss: 0.0933 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9710</span><br><span class="hljs-emphasis">Epoch 13/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 24s 23ms/step - loss: 0.0926 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9707 - val_</span>loss: 0.0978 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9699</span><br><span class="hljs-emphasis">Epoch 14/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 23s 22ms/step - loss: 0.0917 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9715 - val_</span>loss: 0.0914 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9699</span><br><span class="hljs-emphasis">Epoch 15/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 24s 23ms/step - loss: 0.0861 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9727 - val_</span>loss: 0.0938 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9713</span><br><span class="hljs-emphasis">Epoch 16/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 24s 23ms/step - loss: 0.0876 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9725 - val_</span>loss: 0.0984 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9691</span><br><span class="hljs-emphasis">Epoch 17/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 23s 22ms/step - loss: 0.0884 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9717 - val_</span>loss: 0.0990 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9686</span><br><span class="hljs-emphasis">Epoch 18/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 24s 23ms/step - loss: 0.0832 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9736 - val_</span>loss: 0.0985 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9686</span><br><span class="hljs-emphasis">Epoch 19/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 23s 23ms/step - loss: 0.0798 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9748 - val_</span>loss: 0.0892 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9734</span><br><span class="hljs-emphasis">Epoch 20/20</span><br><span class="hljs-emphasis">1038/1038 [==============================] - 24s 23ms/step - loss: 0.0799 - sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9755 - val_</span>loss: 0.0956 - val<span class="hljs-emphasis">_sparse_</span>categorical<span class="hljs-emphasis">_accuracy: 0.9683</span><br><span class="hljs-emphasis">Model: &quot;sequential&quot;</span><br><span class="hljs-emphasis"><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span>_</span><br><span class="hljs-section">Layer (type)                 Output Shape              Param #   </span><br><span class="hljs-section">=================================================================</span><br>flatten (Flatten)            (None, 12288)             0         <br><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-emphasis">_</span><br><span class="hljs-emphasis">dense (Dense)                (None, 64)                786496    </span><br><span class="hljs-emphasis"><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span>_</span><br>dropout (Dropout)            (None, 64)                0         <br><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-emphasis">_</span><br><span class="hljs-emphasis">dense_</span>1 (Dense)              (None, 32)                2080      <br><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-emphasis">_</span><br><span class="hljs-emphasis">dropout_</span>1 (Dropout)          (None, 32)                0         <br><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-emphasis">_</span><br><span class="hljs-emphasis">dense_</span>2 (Dense)              (None, 2)                 66        <br>=================================================================<br>Total params: 788,642<br>Trainable params: 788,642<br>Non-trainable params: 0<br><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-emphasis">_</span><br><span class="hljs-emphasis"></span><br></code></pre></td></tr></table></figure><p>5</p><p>训练集接近99，测试集差不多还那样，有点明显过拟合，感觉效果还算不错</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs gradle">model = tf.keras.models.Sequential([<br>    tf.keras.layers.<span class="hljs-keyword">Flatten</span>(),<br>    Dense(<span class="hljs-number">128</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>    Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>    Dense(<span class="hljs-number">32</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>    Dense(<span class="hljs-number">2</span>, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>)<br>])<br>D:\pyAnaconda\envs\pythonProject\python.exe D:<span class="hljs-regexp">/Code/</span>pythonProject<span class="hljs-regexp">/work/</span>sdss_reco.py<br>Epoch <span class="hljs-number">1</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 13s 12ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1989</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9375</span> - val_loss: <span class="hljs-number">0.1320</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9620</span><br>Epoch <span class="hljs-number">2</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 15s 15ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1232</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9612</span> - val_loss: <span class="hljs-number">0.1179</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9669</span><br>Epoch <span class="hljs-number">3</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 9s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1024</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9665</span> - val_loss: <span class="hljs-number">0.1009</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9683</span><br>Epoch <span class="hljs-number">4</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 5s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0898</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9708</span> - val_loss: <span class="hljs-number">0.1039</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9677</span><br>Epoch <span class="hljs-number">5</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 5s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0798</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9733</span> - val_loss: <span class="hljs-number">0.0972</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9680</span><br>Epoch <span class="hljs-number">6</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 5s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0747</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9748</span> - val_loss: <span class="hljs-number">0.0818</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9737</span><br>Epoch <span class="hljs-number">7</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 5s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0667</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9772</span> - val_loss: <span class="hljs-number">0.0849</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9740</span><br>Epoch <span class="hljs-number">8</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 5s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0611</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9788</span> - val_loss: <span class="hljs-number">0.0816</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9764</span><br>Epoch <span class="hljs-number">9</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 5s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0582</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9808</span> - val_loss: <span class="hljs-number">0.0859</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9715</span><br>Epoch <span class="hljs-number">10</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0558</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9805</span> - val_loss: <span class="hljs-number">0.1014</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9694</span><br>Epoch <span class="hljs-number">11</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0506</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9828</span> - val_loss: <span class="hljs-number">0.0815</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9745</span><br>Epoch <span class="hljs-number">12</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 5s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0510</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9824</span> - val_loss: <span class="hljs-number">0.1146</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9653</span><br>Epoch <span class="hljs-number">13</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0476</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9835</span> - val_loss: <span class="hljs-number">0.0982</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9724</span><br>Epoch <span class="hljs-number">14</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0433</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9856</span> - val_loss: <span class="hljs-number">0.0820</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9770</span><br>Epoch <span class="hljs-number">15</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0420</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9852</span> - val_loss: <span class="hljs-number">0.0855</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9737</span><br>Epoch <span class="hljs-number">16</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0376</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9868</span> - val_loss: <span class="hljs-number">0.1125</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9691</span><br>Epoch <span class="hljs-number">17</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0431</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9853</span> - val_loss: <span class="hljs-number">0.1019</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">18</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0356</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9877</span> - val_loss: <span class="hljs-number">0.0895</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9748</span><br>Epoch <span class="hljs-number">19</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0313</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9888</span> - val_loss: <span class="hljs-number">0.0921</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9759</span><br>Epoch <span class="hljs-number">20</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0294</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9897</span> - val_loss: <span class="hljs-number">0.1218</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9694</span><br>Model: <span class="hljs-string">&quot;sequential&quot;</span><br>_________________________________________________________________<br>Layer (type)                 Output Shape              Param #   <br>=================================================================<br><span class="hljs-keyword">flatten</span> (<span class="hljs-keyword">Flatten</span>)            (None, <span class="hljs-number">12288</span>)             <span class="hljs-number">0</span>         <br>_________________________________________________________________<br>dense (Dense)                (None, <span class="hljs-number">128</span>)               <span class="hljs-number">1572992</span>   <br>_________________________________________________________________<br>dense_1 (Dense)              (None, <span class="hljs-number">64</span>)                <span class="hljs-number">8256</span>      <br>_________________________________________________________________<br>dense_2 (Dense)              (None, <span class="hljs-number">32</span>)                <span class="hljs-number">2080</span>      <br>_________________________________________________________________<br>dense_3 (Dense)              (None, <span class="hljs-number">2</span>)                 <span class="hljs-number">66</span>        <br>=================================================================<br>Total params: <span class="hljs-number">1</span>,<span class="hljs-number">583</span>,<span class="hljs-number">394</span><br>Trainable params: <span class="hljs-number">1</span>,<span class="hljs-number">583</span>,<span class="hljs-number">394</span><br>Non-trainable params: <span class="hljs-number">0</span><br>_________________________________________________________________<br><br></code></pre></td></tr></table></figure><p>6</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs gradle">model = tf.keras.models.Sequential([<br>    tf.keras.layers.<span class="hljs-keyword">Flatten</span>(),<br>    Dense(<span class="hljs-number">128</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>    Dropout(<span class="hljs-number">0.2</span>),<br>    Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>    Dense(<span class="hljs-number">32</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>    Dense(<span class="hljs-number">2</span>, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>)<br>])<br>D:\pyAnaconda\envs\pythonProject\python.exe D:<span class="hljs-regexp">/Code/</span>pythonProject<span class="hljs-regexp">/work/</span>sdss_reco.py<br>Epoch <span class="hljs-number">1</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 9s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.2111</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9320</span> - val_loss: <span class="hljs-number">0.1328</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9599</span><br>Epoch <span class="hljs-number">2</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 8s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1339</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9560</span> - val_loss: <span class="hljs-number">0.1196</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9626</span><br>Epoch <span class="hljs-number">3</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 8s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1209</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9606</span> - val_loss: <span class="hljs-number">0.1059</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9658</span><br>Epoch <span class="hljs-number">4</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 8s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1100</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9645</span> - val_loss: <span class="hljs-number">0.1252</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9599</span><br>Epoch <span class="hljs-number">5</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1062</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9652</span> - val_loss: <span class="hljs-number">0.0966</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9686</span><br>Epoch <span class="hljs-number">6</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1027</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9663</span> - val_loss: <span class="hljs-number">0.1018</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9661</span><br>Epoch <span class="hljs-number">7</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0965</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9683</span> - val_loss: <span class="hljs-number">0.0893</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9696</span><br>Epoch <span class="hljs-number">8</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0938</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9699</span> - val_loss: <span class="hljs-number">0.0873</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9696</span><br>Epoch <span class="hljs-number">9</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0873</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9716</span> - val_loss: <span class="hljs-number">0.0977</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9658</span><br>Epoch <span class="hljs-number">10</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0869</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9717</span> - val_loss: <span class="hljs-number">0.0934</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9680</span><br>Epoch <span class="hljs-number">11</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 8s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0816</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9737</span> - val_loss: <span class="hljs-number">0.0905</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9705</span><br>Epoch <span class="hljs-number">12</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0797</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9745</span> - val_loss: <span class="hljs-number">0.0858</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">13</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0783</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9742</span> - val_loss: <span class="hljs-number">0.0815</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">14</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0766</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9748</span> - val_loss: <span class="hljs-number">0.0921</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9710</span><br>Epoch <span class="hljs-number">15</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0731</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9763</span> - val_loss: <span class="hljs-number">0.0839</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">16</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0732</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9761</span> - val_loss: <span class="hljs-number">0.0871</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9713</span><br>Epoch <span class="hljs-number">17</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0697</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9775</span> - val_loss: <span class="hljs-number">0.0992</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9694</span><br>Epoch <span class="hljs-number">18</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0721</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9771</span> - val_loss: <span class="hljs-number">0.0869</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">19</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 8s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0690</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9778</span> - val_loss: <span class="hljs-number">0.0870</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9748</span><br>Epoch <span class="hljs-number">20</span>/<span class="hljs-number">20</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0674</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9780</span> - val_loss: <span class="hljs-number">0.0876</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Model: <span class="hljs-string">&quot;sequential&quot;</span><br>_________________________________________________________________<br>Layer (type)                 Output Shape              Param #   <br>=================================================================<br><span class="hljs-keyword">flatten</span> (<span class="hljs-keyword">Flatten</span>)            (None, <span class="hljs-number">12288</span>)             <span class="hljs-number">0</span>         <br>_________________________________________________________________<br>dense (Dense)                (None, <span class="hljs-number">128</span>)               <span class="hljs-number">1572992</span>   <br>_________________________________________________________________<br>dropout (Dropout)            (None, <span class="hljs-number">128</span>)               <span class="hljs-number">0</span>         <br>_________________________________________________________________<br>dense_1 (Dense)              (None, <span class="hljs-number">64</span>)                <span class="hljs-number">8256</span>      <br>_________________________________________________________________<br>dense_2 (Dense)              (None, <span class="hljs-number">32</span>)                <span class="hljs-number">2080</span>      <br>_________________________________________________________________<br>dense_3 (Dense)              (None, <span class="hljs-number">2</span>)                 <span class="hljs-number">66</span>        <br>=================================================================<br>Total params: <span class="hljs-number">1</span>,<span class="hljs-number">583</span>,<span class="hljs-number">394</span><br>Trainable params: <span class="hljs-number">1</span>,<span class="hljs-number">583</span>,<span class="hljs-number">394</span><br>Non-trainable params: <span class="hljs-number">0</span><br>_________________________________________________________________<br><br></code></pre></td></tr></table></figure><p>6.1</p><p>epoch=50后</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs gradle">D:\pyAnaconda\envs\pythonProject\python.exe D:<span class="hljs-regexp">/Code/</span>pythonProject<span class="hljs-regexp">/work/</span>sdss_reco.py<br>Epoch <span class="hljs-number">1</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.2069</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9303</span> - val_loss: <span class="hljs-number">0.1715</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9466</span><br>Epoch <span class="hljs-number">2</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 8s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1347</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9559</span> - val_loss: <span class="hljs-number">0.1272</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9596</span><br>Epoch <span class="hljs-number">3</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1186</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9611</span> - val_loss: <span class="hljs-number">0.1345</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9561</span><br>Epoch <span class="hljs-number">4</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1087</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9640</span> - val_loss: <span class="hljs-number">0.0992</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9683</span><br>Epoch <span class="hljs-number">5</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0996</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9675</span> - val_loss: <span class="hljs-number">0.1021</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9661</span><br>Epoch <span class="hljs-number">6</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0962</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9671</span> - val_loss: <span class="hljs-number">0.0946</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9686</span><br>Epoch <span class="hljs-number">7</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0908</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9708</span> - val_loss: <span class="hljs-number">0.0886</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9694</span><br>Epoch <span class="hljs-number">8</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0874</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9708</span> - val_loss: <span class="hljs-number">0.0940</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9669</span><br>Epoch <span class="hljs-number">9</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0863</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9716</span> - val_loss: <span class="hljs-number">0.0917</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9715</span><br>Epoch <span class="hljs-number">10</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0817</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9720</span> - val_loss: <span class="hljs-number">0.0838</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9732</span><br>Epoch <span class="hljs-number">11</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0753</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9751</span> - val_loss: <span class="hljs-number">0.0930</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9699</span><br>Epoch <span class="hljs-number">12</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0752</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9753</span> - val_loss: <span class="hljs-number">0.0838</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9737</span><br>Epoch <span class="hljs-number">13</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0734</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9760</span> - val_loss: <span class="hljs-number">0.0904</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9710</span><br>Epoch <span class="hljs-number">14</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 8s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0712</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9764</span> - val_loss: <span class="hljs-number">0.0784</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9745</span><br>Epoch <span class="hljs-number">15</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0718</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9765</span> - val_loss: <span class="hljs-number">0.0915</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">16</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0691</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9775</span> - val_loss: <span class="hljs-number">0.1016</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9694</span><br>Epoch <span class="hljs-number">17</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0667</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9780</span> - val_loss: <span class="hljs-number">0.0810</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9745</span><br>Epoch <span class="hljs-number">18</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0659</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9780</span> - val_loss: <span class="hljs-number">0.0839</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9753</span><br>Epoch <span class="hljs-number">19</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0655</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9786</span> - val_loss: <span class="hljs-number">0.0829</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9756</span><br>Epoch <span class="hljs-number">20</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0634</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9791</span> - val_loss: <span class="hljs-number">0.0998</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9691</span><br>Epoch <span class="hljs-number">21</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0609</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9794</span> - val_loss: <span class="hljs-number">0.1092</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9680</span><br>Epoch <span class="hljs-number">22</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0627</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9794</span> - val_loss: <span class="hljs-number">0.0826</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9753</span><br>Epoch <span class="hljs-number">23</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0595</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9803</span> - val_loss: <span class="hljs-number">0.0938</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9724</span><br>Epoch <span class="hljs-number">24</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0575</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9813</span> - val_loss: <span class="hljs-number">0.0962</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9718</span><br>Epoch <span class="hljs-number">25</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 8s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0562</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9808</span> - val_loss: <span class="hljs-number">0.0936</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9718</span><br>Epoch <span class="hljs-number">26</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0564</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9812</span> - val_loss: <span class="hljs-number">0.0908</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9713</span><br>Epoch <span class="hljs-number">27</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0545</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9823</span> - val_loss: <span class="hljs-number">0.0820</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9753</span><br>Epoch <span class="hljs-number">28</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0542</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9831</span> - val_loss: <span class="hljs-number">0.0894</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9737</span><br>Epoch <span class="hljs-number">29</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0548</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9826</span> - val_loss: <span class="hljs-number">0.0934</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9740</span><br>Epoch <span class="hljs-number">30</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0490</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9835</span> - val_loss: <span class="hljs-number">0.0948</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9732</span><br>Epoch <span class="hljs-number">31</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0528</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9826</span> - val_loss: <span class="hljs-number">0.1016</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9707</span><br>Epoch <span class="hljs-number">32</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0520</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9827</span> - val_loss: <span class="hljs-number">0.1126</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9672</span><br>Epoch <span class="hljs-number">33</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0506</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9834</span> - val_loss: <span class="hljs-number">0.0868</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9740</span><br>Epoch <span class="hljs-number">34</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0513</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9829</span> - val_loss: <span class="hljs-number">0.0980</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9710</span><br>Epoch <span class="hljs-number">35</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0489</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9836</span> - val_loss: <span class="hljs-number">0.1010</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">36</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0453</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9844</span> - val_loss: <span class="hljs-number">0.0969</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9740</span><br>Epoch <span class="hljs-number">37</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0492</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9837</span> - val_loss: <span class="hljs-number">0.0982</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9737</span><br>Epoch <span class="hljs-number">38</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0459</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9855</span> - val_loss: <span class="hljs-number">0.1095</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9724</span><br>Epoch <span class="hljs-number">39</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0449</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9858</span> - val_loss: <span class="hljs-number">0.0932</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9740</span><br>Epoch <span class="hljs-number">40</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0426</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9852</span> - val_loss: <span class="hljs-number">0.1021</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9726</span><br>Epoch <span class="hljs-number">41</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0455</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9851</span> - val_loss: <span class="hljs-number">0.0996</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9742</span><br>Epoch <span class="hljs-number">42</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0429</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9859</span> - val_loss: <span class="hljs-number">0.1024</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9734</span><br>Epoch <span class="hljs-number">43</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0421</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9858</span> - val_loss: <span class="hljs-number">0.1048</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9732</span><br>Epoch <span class="hljs-number">44</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0436</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9857</span> - val_loss: <span class="hljs-number">0.1084</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9702</span><br>Epoch <span class="hljs-number">45</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0424</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9864</span> - val_loss: <span class="hljs-number">0.1064</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9724</span><br>Epoch <span class="hljs-number">46</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0398</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9869</span> - val_loss: <span class="hljs-number">0.1104</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9740</span><br>Epoch <span class="hljs-number">47</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0414</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9859</span> - val_loss: <span class="hljs-number">0.1193</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9718</span><br>Epoch <span class="hljs-number">48</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0404</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9861</span> - val_loss: <span class="hljs-number">0.1003</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9737</span><br>Epoch <span class="hljs-number">49</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0408</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9868</span> - val_loss: <span class="hljs-number">0.0993</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9734</span><br>Epoch <span class="hljs-number">50</span>/<span class="hljs-number">50</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0462</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9848</span> - val_loss: <span class="hljs-number">0.1090</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Model: <span class="hljs-string">&quot;sequential&quot;</span><br>_________________________________________________________________<br>Layer (type)                 Output Shape              Param #   <br>=================================================================<br><span class="hljs-keyword">flatten</span> (<span class="hljs-keyword">Flatten</span>)            (None, <span class="hljs-number">12288</span>)             <span class="hljs-number">0</span>         <br>_________________________________________________________________<br>dense (Dense)                (None, <span class="hljs-number">128</span>)               <span class="hljs-number">1572992</span>   <br>_________________________________________________________________<br>dropout (Dropout)            (None, <span class="hljs-number">128</span>)               <span class="hljs-number">0</span>         <br>_________________________________________________________________<br>dense_1 (Dense)              (None, <span class="hljs-number">64</span>)                <span class="hljs-number">8256</span>      <br>_________________________________________________________________<br>dense_2 (Dense)              (None, <span class="hljs-number">32</span>)                <span class="hljs-number">2080</span>      <br>_________________________________________________________________<br>dense_3 (Dense)              (None, <span class="hljs-number">2</span>)                 <span class="hljs-number">66</span>        <br>=================================================================<br>Total params: <span class="hljs-number">1</span>,<span class="hljs-number">583</span>,<span class="hljs-number">394</span><br>Trainable params: <span class="hljs-number">1</span>,<span class="hljs-number">583</span>,<span class="hljs-number">394</span><br>Non-trainable params: <span class="hljs-number">0</span><br>_________________________________________________________________<br></code></pre></td></tr></table></figure><p>6.2 epoch=100</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><code class="hljs gradle">D:\pyAnaconda\envs\pythonProject\python.exe D:<span class="hljs-regexp">/Code/</span>pythonProject<span class="hljs-regexp">/work/</span>sdss_reco.py<br>Epoch <span class="hljs-number">1</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 15s 14ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.2090</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9314</span> - val_loss: <span class="hljs-number">0.1482</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9566</span><br>Epoch <span class="hljs-number">2</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1369</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9558</span> - val_loss: <span class="hljs-number">0.1326</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9574</span><br>Epoch <span class="hljs-number">3</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 5s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1219</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9597</span> - val_loss: <span class="hljs-number">0.1185</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9637</span><br>Epoch <span class="hljs-number">4</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1108</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9641</span> - val_loss: <span class="hljs-number">0.1095</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9648</span><br>Epoch <span class="hljs-number">5</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 5s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1016</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9670</span> - val_loss: <span class="hljs-number">0.1094</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9637</span><br>Epoch <span class="hljs-number">6</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0973</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9687</span> - val_loss: <span class="hljs-number">0.1157</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9645</span><br>Epoch <span class="hljs-number">7</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 5s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0963</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9687</span> - val_loss: <span class="hljs-number">0.0963</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9702</span><br>Epoch <span class="hljs-number">8</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0917</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9711</span> - val_loss: <span class="hljs-number">0.0938</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9691</span><br>Epoch <span class="hljs-number">9</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 14s 13ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0854</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9726</span> - val_loss: <span class="hljs-number">0.0964</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9696</span><br>Epoch <span class="hljs-number">10</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 12s 11ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0843</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9727</span> - val_loss: <span class="hljs-number">0.1120</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9607</span><br>Epoch <span class="hljs-number">11</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 5s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0811</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9730</span> - val_loss: <span class="hljs-number">0.0926</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9707</span><br>Epoch <span class="hljs-number">12</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 5s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0783</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9751</span> - val_loss: <span class="hljs-number">0.0949</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9726</span><br>Epoch <span class="hljs-number">13</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 5s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0771</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9748</span> - val_loss: <span class="hljs-number">0.0901</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9713</span><br>Epoch <span class="hljs-number">14</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0756</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9758</span> - val_loss: <span class="hljs-number">0.0988</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9713</span><br>Epoch <span class="hljs-number">15</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0734</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9758</span> - val_loss: <span class="hljs-number">0.0970</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9715</span><br>Epoch <span class="hljs-number">16</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0714</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9763</span> - val_loss: <span class="hljs-number">0.1045</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9672</span><br>Epoch <span class="hljs-number">17</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0692</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9778</span> - val_loss: <span class="hljs-number">0.1101</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9669</span><br>Epoch <span class="hljs-number">18</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 8s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0731</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9770</span> - val_loss: <span class="hljs-number">0.0948</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9726</span><br>Epoch <span class="hljs-number">19</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0659</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9785</span> - val_loss: <span class="hljs-number">0.1006</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9696</span><br>Epoch <span class="hljs-number">20</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0667</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9783</span> - val_loss: <span class="hljs-number">0.1242</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9618</span><br>Epoch <span class="hljs-number">21</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0635</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9788</span> - val_loss: <span class="hljs-number">0.1007</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9713</span><br>Epoch <span class="hljs-number">22</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0705</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9771</span> - val_loss: <span class="hljs-number">0.0928</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9745</span><br>Epoch <span class="hljs-number">23</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0614</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9801</span> - val_loss: <span class="hljs-number">0.0957</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9734</span><br>Epoch <span class="hljs-number">24</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0613</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9805</span> - val_loss: <span class="hljs-number">0.0967</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9713</span><br>Epoch <span class="hljs-number">25</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0621</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9797</span> - val_loss: <span class="hljs-number">0.0828</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9726</span><br>Epoch <span class="hljs-number">26</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0597</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9807</span> - val_loss: <span class="hljs-number">0.1076</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9691</span><br>Epoch <span class="hljs-number">27</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0593</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9805</span> - val_loss: <span class="hljs-number">0.0948</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9732</span><br>Epoch <span class="hljs-number">28</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0613</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9808</span> - val_loss: <span class="hljs-number">0.0974</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9713</span><br>Epoch <span class="hljs-number">29</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 9s 9ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0552</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9821</span> - val_loss: <span class="hljs-number">0.1000</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9688</span><br>Epoch <span class="hljs-number">30</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0567</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9810</span> - val_loss: <span class="hljs-number">0.0922</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9726</span><br>Epoch <span class="hljs-number">31</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0575</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9820</span> - val_loss: <span class="hljs-number">0.0956</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9740</span><br>Epoch <span class="hljs-number">32</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0551</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9833</span> - val_loss: <span class="hljs-number">0.1317</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9620</span><br>Epoch <span class="hljs-number">33</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0560</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9822</span> - val_loss: <span class="hljs-number">0.0863</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9721</span><br>Epoch <span class="hljs-number">34</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0571</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9812</span> - val_loss: <span class="hljs-number">0.0888</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9748</span><br>Epoch <span class="hljs-number">35</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0527</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9823</span> - val_loss: <span class="hljs-number">0.1107</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9707</span><br>Epoch <span class="hljs-number">36</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0534</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9827</span> - val_loss: <span class="hljs-number">0.1104</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9721</span><br>Epoch <span class="hljs-number">37</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0533</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9822</span> - val_loss: <span class="hljs-number">0.1183</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9680</span><br>Epoch <span class="hljs-number">38</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0541</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9828</span> - val_loss: <span class="hljs-number">0.1079</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9713</span><br>Epoch <span class="hljs-number">39</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0522</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9831</span> - val_loss: <span class="hljs-number">0.1045</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9732</span><br>Epoch <span class="hljs-number">40</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0503</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9838</span> - val_loss: <span class="hljs-number">0.0964</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9715</span><br>Epoch <span class="hljs-number">41</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0500</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9836</span> - val_loss: <span class="hljs-number">0.0952</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9732</span><br>Epoch <span class="hljs-number">42</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0529</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9825</span> - val_loss: <span class="hljs-number">0.0954</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9715</span><br>Epoch <span class="hljs-number">43</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0475</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9844</span> - val_loss: <span class="hljs-number">0.1000</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9726</span><br>Epoch <span class="hljs-number">44</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0498</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9839</span> - val_loss: <span class="hljs-number">0.1020</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9688</span><br>Epoch <span class="hljs-number">45</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0486</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9833</span> - val_loss: <span class="hljs-number">0.1088</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9694</span><br>Epoch <span class="hljs-number">46</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0478</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9843</span> - val_loss: <span class="hljs-number">0.0983</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9726</span><br>Epoch <span class="hljs-number">47</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0469</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9852</span> - val_loss: <span class="hljs-number">0.1149</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9680</span><br>Epoch <span class="hljs-number">48</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0462</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9856</span> - val_loss: <span class="hljs-number">0.1039</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9721</span><br>Epoch <span class="hljs-number">49</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0462</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9852</span> - val_loss: <span class="hljs-number">0.1063</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">50</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0481</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9846</span> - val_loss: <span class="hljs-number">0.0931</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9742</span><br>Epoch <span class="hljs-number">51</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0461</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9851</span> - val_loss: <span class="hljs-number">0.1039</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9707</span><br>Epoch <span class="hljs-number">52</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0422</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9858</span> - val_loss: <span class="hljs-number">0.1228</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9680</span><br>Epoch <span class="hljs-number">53</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0446</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9855</span> - val_loss: <span class="hljs-number">0.1068</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9702</span><br>Epoch <span class="hljs-number">54</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0420</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9858</span> - val_loss: <span class="hljs-number">0.1050</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9715</span><br>Epoch <span class="hljs-number">55</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0446</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9851</span> - val_loss: <span class="hljs-number">0.1147</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9721</span><br>Epoch <span class="hljs-number">56</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0432</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9855</span> - val_loss: <span class="hljs-number">0.1015</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9745</span><br>Epoch <span class="hljs-number">57</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0463</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9851</span> - val_loss: <span class="hljs-number">0.1018</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9707</span><br>Epoch <span class="hljs-number">58</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0434</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9858</span> - val_loss: <span class="hljs-number">0.1078</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9696</span><br>Epoch <span class="hljs-number">59</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0443</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9854</span> - val_loss: <span class="hljs-number">0.1153</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9686</span><br>Epoch <span class="hljs-number">60</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0419</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9868</span> - val_loss: <span class="hljs-number">0.1222</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9664</span><br>Epoch <span class="hljs-number">61</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0409</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9865</span> - val_loss: <span class="hljs-number">0.1257</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9680</span><br>Epoch <span class="hljs-number">62</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0428</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9859</span> - val_loss: <span class="hljs-number">0.1155</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9710</span><br>Epoch <span class="hljs-number">63</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0440</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9850</span> - val_loss: <span class="hljs-number">0.1254</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9667</span><br>Epoch <span class="hljs-number">64</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0409</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9869</span> - val_loss: <span class="hljs-number">0.1135</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9691</span><br>Epoch <span class="hljs-number">65</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0423</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9867</span> - val_loss: <span class="hljs-number">0.1272</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9696</span><br>Epoch <span class="hljs-number">66</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0389</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9867</span> - val_loss: <span class="hljs-number">0.1229</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">67</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0400</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9870</span> - val_loss: <span class="hljs-number">0.0986</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9742</span><br>Epoch <span class="hljs-number">68</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0414</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9868</span> - val_loss: <span class="hljs-number">0.1165</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9726</span><br>Epoch <span class="hljs-number">69</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0416</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9866</span> - val_loss: <span class="hljs-number">0.1248</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9694</span><br>Epoch <span class="hljs-number">70</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0374</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9878</span> - val_loss: <span class="hljs-number">0.1092</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9713</span><br>Epoch <span class="hljs-number">71</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0408</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9872</span> - val_loss: <span class="hljs-number">0.1141</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9702</span><br>Epoch <span class="hljs-number">72</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 5ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0393</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9868</span> - val_loss: <span class="hljs-number">0.1115</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9718</span><br>Epoch <span class="hljs-number">73</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0384</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9882</span> - val_loss: <span class="hljs-number">0.1278</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9656</span><br>Epoch <span class="hljs-number">74</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0392</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9875</span> - val_loss: <span class="hljs-number">0.1134</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9715</span><br>Epoch <span class="hljs-number">75</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0371</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9883</span> - val_loss: <span class="hljs-number">0.1292</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9713</span><br>Epoch <span class="hljs-number">76</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0412</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9867</span> - val_loss: <span class="hljs-number">0.1344</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9664</span><br>Epoch <span class="hljs-number">77</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 8s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0351</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9881</span> - val_loss: <span class="hljs-number">0.1517</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9672</span><br>Epoch <span class="hljs-number">78</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0385</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9876</span> - val_loss: <span class="hljs-number">0.1131</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9691</span><br>Epoch <span class="hljs-number">79</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0387</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9870</span> - val_loss: <span class="hljs-number">0.1222</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9705</span><br>Epoch <span class="hljs-number">80</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0367</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9880</span> - val_loss: <span class="hljs-number">0.1233</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9718</span><br>Epoch <span class="hljs-number">81</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0340</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9888</span> - val_loss: <span class="hljs-number">0.1138</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9702</span><br>Epoch <span class="hljs-number">82</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0427</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9870</span> - val_loss: <span class="hljs-number">0.1517</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9593</span><br>Epoch <span class="hljs-number">83</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0424</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9863</span> - val_loss: <span class="hljs-number">0.1133</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9702</span><br>Epoch <span class="hljs-number">84</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0399</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9871</span> - val_loss: <span class="hljs-number">0.1268</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9724</span><br>Epoch <span class="hljs-number">85</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0394</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9874</span> - val_loss: <span class="hljs-number">0.1281</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9691</span><br>Epoch <span class="hljs-number">86</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0382</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9884</span> - val_loss: <span class="hljs-number">0.1268</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9710</span><br>Epoch <span class="hljs-number">87</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0375</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9879</span> - val_loss: <span class="hljs-number">0.1293</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9702</span><br>Epoch <span class="hljs-number">88</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0390</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9876</span> - val_loss: <span class="hljs-number">0.1538</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9694</span><br>Epoch <span class="hljs-number">89</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0361</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9883</span> - val_loss: <span class="hljs-number">0.1266</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9699</span><br>Epoch <span class="hljs-number">90</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0383</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9874</span> - val_loss: <span class="hljs-number">0.1244</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9718</span><br>Epoch <span class="hljs-number">91</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0323</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9901</span> - val_loss: <span class="hljs-number">0.1377</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9713</span><br>Epoch <span class="hljs-number">92</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 7s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0347</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9882</span> - val_loss: <span class="hljs-number">0.1412</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9705</span><br>Epoch <span class="hljs-number">93</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0339</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9894</span> - val_loss: <span class="hljs-number">0.1389</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9658</span><br>Epoch <span class="hljs-number">94</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0354</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9886</span> - val_loss: <span class="hljs-number">0.1223</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9699</span><br>Epoch <span class="hljs-number">95</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0352</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9887</span> - val_loss: <span class="hljs-number">0.1688</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9604</span><br>Epoch <span class="hljs-number">96</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0334</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9892</span> - val_loss: <span class="hljs-number">0.1383</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9661</span><br>Epoch <span class="hljs-number">97</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0318</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9902</span> - val_loss: <span class="hljs-number">0.1281</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9694</span><br>Epoch <span class="hljs-number">98</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0372</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9884</span> - val_loss: <span class="hljs-number">0.1387</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9702</span><br>Epoch <span class="hljs-number">99</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0400</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9871</span> - val_loss: <span class="hljs-number">0.1396</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9702</span><br>Epoch <span class="hljs-number">100</span>/<span class="hljs-number">100</span><br><span class="hljs-number">1038</span><span class="hljs-regexp">/1038 [==============================] - 6s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0339</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9890</span> - val_loss: <span class="hljs-number">0.1252</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9710</span><br>Model: <span class="hljs-string">&quot;sequential&quot;</span><br>_________________________________________________________________<br>Layer (type)                 Output Shape              Param #   <br>=================================================================<br><span class="hljs-keyword">flatten</span> (<span class="hljs-keyword">Flatten</span>)            (None, <span class="hljs-number">12288</span>)             <span class="hljs-number">0</span>         <br>_________________________________________________________________<br>dense (Dense)                (None, <span class="hljs-number">128</span>)               <span class="hljs-number">1572992</span>   <br>_________________________________________________________________<br>dropout (Dropout)            (None, <span class="hljs-number">128</span>)               <span class="hljs-number">0</span>         <br>_________________________________________________________________<br>dense_1 (Dense)              (None, <span class="hljs-number">64</span>)                <span class="hljs-number">8256</span>      <br>_________________________________________________________________<br>dense_2 (Dense)              (None, <span class="hljs-number">32</span>)                <span class="hljs-number">2080</span>      <br>_________________________________________________________________<br>dense_3 (Dense)              (None, <span class="hljs-number">2</span>)                 <span class="hljs-number">66</span>        <br>=================================================================<br>Total params: <span class="hljs-number">1</span>,<span class="hljs-number">583</span>,<span class="hljs-number">394</span><br>Trainable params: <span class="hljs-number">1</span>,<span class="hljs-number">583</span>,<span class="hljs-number">394</span><br>Non-trainable params: <span class="hljs-number">0</span><br>_________________________________________________________________<br></code></pre></td></tr></table></figure><p>6.4</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs gradle">D:\pyAnaconda\envs\pythonProject\python.exe D:<span class="hljs-regexp">/Code/</span>pythonProject<span class="hljs-regexp">/work/</span>sdss_reco.py<br>Epoch <span class="hljs-number">1</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.2239</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9276</span> - val_loss: <span class="hljs-number">0.1582</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9504</span><br>Epoch <span class="hljs-number">2</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1384</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9546</span> - val_loss: <span class="hljs-number">0.1269</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9604</span><br>Epoch <span class="hljs-number">3</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1186</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9612</span> - val_loss: <span class="hljs-number">0.1119</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9631</span><br>Epoch <span class="hljs-number">4</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1159</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9615</span> - val_loss: <span class="hljs-number">0.1103</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9639</span><br>Epoch <span class="hljs-number">5</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.1049</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9646</span> - val_loss: <span class="hljs-number">0.0992</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9677</span><br>Epoch <span class="hljs-number">6</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0989</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9675</span> - val_loss: <span class="hljs-number">0.1057</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9650</span><br>Epoch <span class="hljs-number">7</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0922</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9708</span> - val_loss: <span class="hljs-number">0.1037</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9658</span><br>Epoch <span class="hljs-number">8</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0916</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9698</span> - val_loss: <span class="hljs-number">0.1100</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9686</span><br>Epoch <span class="hljs-number">9</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0864</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9719</span> - val_loss: <span class="hljs-number">0.0980</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9688</span><br>Epoch <span class="hljs-number">10</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0812</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9736</span> - val_loss: <span class="hljs-number">0.0850</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">11</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0768</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9757</span> - val_loss: <span class="hljs-number">0.0868</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9724</span><br>Epoch <span class="hljs-number">12</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0743</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9756</span> - val_loss: <span class="hljs-number">0.0987</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9680</span><br>Epoch <span class="hljs-number">13</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0731</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9761</span> - val_loss: <span class="hljs-number">0.0906</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9718</span><br>Epoch <span class="hljs-number">14</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0711</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9771</span> - val_loss: <span class="hljs-number">0.0782</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9751</span><br>Epoch <span class="hljs-number">15</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0669</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9784</span> - val_loss: <span class="hljs-number">0.0904</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9734</span><br>Epoch <span class="hljs-number">16</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0750</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9755</span> - val_loss: <span class="hljs-number">0.0949</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9705</span><br>Epoch <span class="hljs-number">17</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0723</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9764</span> - val_loss: <span class="hljs-number">0.0831</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9761</span><br>Epoch <span class="hljs-number">18</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0639</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9794</span> - val_loss: <span class="hljs-number">0.0987</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9710</span><br>Epoch <span class="hljs-number">19</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0648</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9787</span> - val_loss: <span class="hljs-number">0.0897</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9734</span><br>Epoch <span class="hljs-number">20</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0637</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9793</span> - val_loss: <span class="hljs-number">0.0803</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9759</span><br>Epoch <span class="hljs-number">21</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0612</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9798</span> - val_loss: <span class="hljs-number">0.0770</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9783</span><br>Epoch <span class="hljs-number">22</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0574</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9820</span> - val_loss: <span class="hljs-number">0.0890</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9753</span><br>Epoch <span class="hljs-number">23</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0590</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9801</span> - val_loss: <span class="hljs-number">0.0872</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">24</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0581</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9806</span> - val_loss: <span class="hljs-number">0.1062</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9699</span><br>Epoch <span class="hljs-number">25</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0578</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9810</span> - val_loss: <span class="hljs-number">0.0894</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9721</span><br>Epoch <span class="hljs-number">26</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0529</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9828</span> - val_loss: <span class="hljs-number">0.0863</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9745</span><br>Epoch <span class="hljs-number">27</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0524</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9833</span> - val_loss: <span class="hljs-number">0.0928</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">28</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0540</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9820</span> - val_loss: <span class="hljs-number">0.0815</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9759</span><br>Epoch <span class="hljs-number">29</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0536</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9829</span> - val_loss: <span class="hljs-number">0.1091</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9686</span><br>Epoch <span class="hljs-number">30</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 5s 9ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0483</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9837</span> - val_loss: <span class="hljs-number">0.0886</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9756</span><br>Epoch <span class="hljs-number">31</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0484</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9843</span> - val_loss: <span class="hljs-number">0.0877</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">32</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 8ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0490</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9836</span> - val_loss: <span class="hljs-number">0.0902</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9740</span><br>Epoch <span class="hljs-number">33</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0491</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9839</span> - val_loss: <span class="hljs-number">0.0917</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9734</span><br>Epoch <span class="hljs-number">34</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0517</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9833</span> - val_loss: <span class="hljs-number">0.0899</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">35</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0478</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9840</span> - val_loss: <span class="hljs-number">0.0999</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9724</span><br>Epoch <span class="hljs-number">36</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0444</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9855</span> - val_loss: <span class="hljs-number">0.0949</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9726</span><br>Epoch <span class="hljs-number">37</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0480</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9843</span> - val_loss: <span class="hljs-number">0.0861</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9751</span><br>Epoch <span class="hljs-number">38</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 4s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0430</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9857</span> - val_loss: <span class="hljs-number">0.0805</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9756</span><br>Epoch <span class="hljs-number">39</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0415</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9868</span> - val_loss: <span class="hljs-number">0.0850</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9775</span><br>Epoch <span class="hljs-number">40</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0417</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9864</span> - val_loss: <span class="hljs-number">0.1631</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9547</span><br>Epoch <span class="hljs-number">41</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0526</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9826</span> - val_loss: <span class="hljs-number">0.0935</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9751</span><br>Epoch <span class="hljs-number">42</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0423</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9863</span> - val_loss: <span class="hljs-number">0.0992</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9718</span><br>Epoch <span class="hljs-number">43</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0403</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9861</span> - val_loss: <span class="hljs-number">0.0881</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9745</span><br>Epoch <span class="hljs-number">44</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 7ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0407</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9864</span> - val_loss: <span class="hljs-number">0.0972</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9729</span><br>Epoch <span class="hljs-number">45</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0413</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9863</span> - val_loss: <span class="hljs-number">0.0901</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9753</span><br>Epoch <span class="hljs-number">46</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0397</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9867</span> - val_loss: <span class="hljs-number">0.0934</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9745</span><br>Epoch <span class="hljs-number">47</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0408</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9865</span> - val_loss: <span class="hljs-number">0.1015</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9715</span><br>Epoch <span class="hljs-number">48</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0377</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9878</span> - val_loss: <span class="hljs-number">0.0932</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9748</span><br>Epoch <span class="hljs-number">49</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0384</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9871</span> - val_loss: <span class="hljs-number">0.0941</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9751</span><br>Epoch <span class="hljs-number">50</span>/<span class="hljs-number">50</span><br><span class="hljs-number">519</span><span class="hljs-regexp">/519 [==============================] - 3s 6ms/</span><span class="hljs-keyword">step</span> - loss: <span class="hljs-number">0.0395</span> - sparse_categorical_accuracy: <span class="hljs-number">0.9871</span> - val_loss: <span class="hljs-number">0.0971</span> - val_sparse_categorical_accuracy: <span class="hljs-number">0.9753</span><br>Model: <span class="hljs-string">&quot;sequential&quot;</span><br>_________________________________________________________________<br>Layer (type)                 Output Shape              Param #   <br>=================================================================<br><span class="hljs-keyword">flatten</span> (<span class="hljs-keyword">Flatten</span>)            (None, <span class="hljs-number">12288</span>)             <span class="hljs-number">0</span>         <br>_________________________________________________________________<br>dense (Dense)                (None, <span class="hljs-number">128</span>)               <span class="hljs-number">1572992</span>   <br>_________________________________________________________________<br>dropout (Dropout)            (None, <span class="hljs-number">128</span>)               <span class="hljs-number">0</span>         <br>_________________________________________________________________<br>dense_1 (Dense)              (None, <span class="hljs-number">64</span>)                <span class="hljs-number">8256</span>      <br>_________________________________________________________________<br>dense_2 (Dense)              (None, <span class="hljs-number">32</span>)                <span class="hljs-number">2080</span>      <br>_________________________________________________________________<br>dense_3 (Dense)              (None, <span class="hljs-number">2</span>)                 <span class="hljs-number">66</span>        <br>=================================================================<br>Total params: <span class="hljs-number">1</span>,<span class="hljs-number">583</span>,<span class="hljs-number">394</span><br>Trainable params: <span class="hljs-number">1</span>,<span class="hljs-number">583</span>,<span class="hljs-number">394</span><br>Non-trainable params: <span class="hljs-number">0</span><br>_________________________________________________________________<br><br>auc = <span class="hljs-number">0.992495791163834</span><br></code></pre></td></tr></table></figure><p>21</p><p>loss: 0.0612 - sparse_categorical_accuracy: 0.9798 - val_loss: 0.0770 - val_sparse_categorical_accuracy: 0.9783</p><p>39</p><p>519/519 [==============================] - 3s 6ms/step - loss: 0.0415 - sparse_categorical_accuracy: 0.9868 - val_loss: 0.0850 - val_sparse_categorical_accuracy: 0.9775</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;姑且存一下训练结果，后面应该还会改，比如20个epoch应该不太够&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
    <category term="deeplearning" scheme="https://github.com/sterne012/sterne012.github.io/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>软件工程复习</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/05/18/software/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/05/18/software/</id>
    <published>2022-05-18T11:43:31.000Z</published>
    <updated>2022-06-18T15:30:46.717Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Part1-软件工程概述"><a href="#Part1-软件工程概述" class="headerlink" title="Part1.软件工程概述"></a>Part1.软件工程概述</h1><h2 id="1-软件与软件工程的概念"><a href="#1-软件与软件工程的概念" class="headerlink" title="1.软件与软件工程的概念"></a>1.软件与软件工程的概念</h2><h3 id="1-1软件的概念、特性和分类"><a href="#1-1软件的概念、特性和分类" class="headerlink" title="1.1软件的概念、特性和分类"></a>1.1软件的概念、特性和分类</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>•软件是计算机系统中与硬件相互依存的另一部分，它是包括程序，数据及其相关文档的完整集合。</p><p>•程序是按事先设计的功能和性能要求执行的指令序列。</p><p>•数据是使程序能正常操纵信息的数据结构。</p><p>•文档是与程序开发，维护和使用有关的图文材料。</p><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>(1) 形态特性: 软件是无形的、不可见的逻辑实体。度量常规产品的几何尺寸、物理性质和化学成分对它却是毫无意义的。 </p><p>(2) 智能特性：软件是复杂的智力产品，它的开发凝聚了人们的大量脑力劳动，它本身也体现了知识实践经验和人类的智慧，具有一定的智能。它可以帮助我们解决复杂的计算、分析、判断和决策问题。</p><p>(3) 开发特性: 尽管已经有了一些工具（也是软件）来辅助软件开发工作，但到目前为止尚未实现自动化。软件开发中仍然包含了相当份量的个体劳动，使得这一大规模知识型工作充满了个人行为和个人因素。</p><p>(4) 质量特性：目前还无法得到完全没有缺陷的软件产品 。</p><p>(5) 生产特性:与硬件或传统的制造业产品的生产完全不同，软件一旦设计开发出来，如果需要提供多个用户，它的复制十分简单，其成本也极为有限 。 </p><p>(6) 管理特性：由于上述的几个特点，使得软件的开发管理显得更为重要，也更为独特 。</p><p>(7) 环境特性:软件的开发和运行都离不开相关的计算机系统环境，包括支持它的开发和运行的相关硬件和软件。软件对于计算机系统的环境有着不可摆脱的依赖性。 </p><p>(8) 维护特性：软件投入使用以后需要进行维护，但这种维护与传统产业产品的维护概念有着很大差别。</p><p>(9) 废弃特性: 与硬件不同，软件并不是由于被“用坏”而被废弃的 。</p><p>(10) 应用特性：软件的应用极为广泛，如今它已渗入国民经济和国防的各个领域，现已成为信息产业、先进制造业和现代服务业的核心，占据了无可取代的地位。</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>（1） 系统软件</p><p>•操作系统•数据库管理系统•设备驱动程序•通信和网络处理程序等 </p><p>（2）支撑软件（工具软件）</p><p>•纵向支撑软件：分析、设计、编码、测试工具等•横向支撑软件：项目管理工具，配置管理工具等</p><p>（3）应用软件</p><p>•工程与科学计算软件•商业数据处理软件•ERP软件•计算机辅助设计／制造软件•系统仿真软件•智能产品嵌入软件•事务管理、办公自动化软件</p><p>（4）可复用软件</p><p>•标准函数库、类库、构件库等</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>具有产品和产品生产载体的双重作用。</p><p>(1)作为产品，软件显示了由计算机硬件体现的计算能力，扮演着信息转换的角色：产生、管理、查询、修改、显示或者传递各种不同的信息。</p><p>(2)作为产品生产的载体，软件提供了计算机控制（操作系统）、信息通信（网络），以及应用程序开发和控制的基础平台（软件工具和环境）。 </p><h4 id="软件质量"><a href="#软件质量" class="headerlink" title="软件质量"></a>软件质量</h4><p>不同类型、不同应用领域、不同用户对软件质量要素的要求也有很大差别。从事办公和机要工作的软件对安全性要求比较高。实时嵌入式软件对正确性和可靠性要求比较高等等。软件开发过程必须根据软件的实际情况对软件质量要素的定位进行折衷和决策。</p><p>下面给出软件工程常用的八个质量要素的定义和解释。</p><p>(1)正确性(correctness)。</p><p> 软件满足需求规约及完成用户目标的程度。</p><p>(2)可用性(usability)。</p><p>学习和使用软件的难易程度，包括：操作软件、为软件准备输入数据，解释软件输出结果等。学习和使用困难的软件可用性差，符合人们习惯、传统的软件可用性好。</p><p>(3)可靠性(reliability)。</p><p>软件完成预期功能，成功运行的概率。软件可靠性反映了软件无故障工作的状况。为了提高可靠性必须提高软件开发、测试、维护的质量，减少软件潜伏的缺陷数量。对于实时嵌入式计算机系统，软件要实时地控制一个物理过程，如果可靠性得不到保证，一旦出现问题可能是灾难性的，后果不堪设想。</p><p>(4)有效性(efficiency)。</p><p>软件系统利用计算机的时间资源和空间资源完成系统功能的能力。各种计算机软件无不将系统的时／空开销和网络环境下的信息传输开销作为衡量软件质量的一项重要技术指标。很多场合，在追求时间有效性和空间有效性方面会发生矛盾，这时不得不牺牲时间效率换取空间有效性，或牺牲空间效率换取时间有效性。时／空折衷是经常出现的。有经验的软件设计人员会巧妙地利用折衷概念，在具体的物理环境中实现用户的需求和自己的设计。</p><p>(5)可维护性(maintainability)。</p><p>软件制品交付用户使用后，能够对它进行修改，以便改正潜伏的缺陷、改进性能和其他属性，使软件制品适应环境的变化等等。由于软件是逻辑产品，只要用户需要可以无限期地使用下去，软件维护是不可避免的。软件维护成本约占整个生命周期的40%至60%。软件维护费用高的问题今天仍然没有明显改变。</p><p>(6)可移植性(portability)。</p><p>将软件安装在不同计算机系统或环境的难易程度。为了获得比较高的可移植性，在软件设计过程中通常采用通用的程序设计语言和运行支撑环境。对依赖于计算机系统的低级(物理)特征部分，如编译系统的目标代码生成，应相对独立、集中。这样与处理机无关的部分就可以移植到其他系统上使用。</p><p>(7)安全性(security)。</p><p>控制或保护程序和数据不受破坏的机制，以防止程序和数据受到意外的或蓄意的存取、使用、修改、毁坏或泄密。在网络环境下计算机犯罪、恶作剧增多，软件安全受到人们的高度重视。软件的安全性已成为用户十分关心的质量要素，影响着软件开发、测试、维护各个方面。</p><p>(8)可复用性(reusebility)。</p><p>概念或功能相对独立的一个或一组相关模块定义为一个软构件。软构件可以在多种场合应用的程度称为构件的可复用性。可复用的软构件有的可以不加修改直接使用，有的需要修改才可使用。可复用软构件应具有清晰的结构和注解，应具有正确的编码和较低的时/空开销。各种可复用软构件还可以按照某种规则存放在软构件库中，供软件工程师们选用。可复用性有助于提高软件制品的质量和开发效率、有助于降低软件的开发和维护费用。</p><h3 id="1-2软件危机与软件工程"><a href="#1-2软件危机与软件工程" class="headerlink" title="1.2软件危机与软件工程"></a>1.2软件危机与软件工程</h3><p>软件危机暴发于上个世纪六十年代末。</p><p>主要表现为：软件的发展速度远远滞后于硬件的发展速度，不能满足社会日益增长的软件需求。软件开发周期长、成本高、质量差、维护困难。</p><p>原因：</p><p>缺乏软件开发的经验和有关软件开发数据的积累，使得开发工作的计划很难制定。</p><p>软件人员与用户的交流存在障碍，使得获取的需求不充分或存在错误 。</p><p>软件开发过程不规范。如，没有真正了解用户的需求就开始编程序。</p><p>随着软件规模的增大，其复杂性往往会呈指数级升高。需要很多人分工协作，不仅涉及技术问题，更重要的是必须有科学严格的管理。</p><p>缺少有效的软件评测手段，提交用户的软件质量不能完全保证。   </p><p>解决：</p><p>彻底消除“软件就是程序”的错误观念。</p><p>充分认识到软件开发应该是一种组织良好、管理严密、各类人员协同配合、共同完成的工程项目。</p><p>推广和使用在实践中总结出来的开发软件的成功技术、方法和工具。</p><p>按工程化的原则和方法组织软件开发工作。</p><p>软件工程概念的提出：</p><p>在NATO会议上，Fritz Bauer对软件工程的定义是：“软件工程就是为了经济地获得可靠的且能在实际机器上有效地运行的软件，而建立和使用完善的工程原理。”</p><p>1993年IEEE给出的定义：“软件工程是：① 把系统的、规范的、可度量的途径应用于软件开发、运行和维护过程，也就是把工程应用于软件；② 研究①中提到的途径。”。</p><p>•概括地说，软件工程是指导计算机软件开发和维护的工程学科。<br> 采用工程的概念、原理、技术和方法来开发与维护软件，把经过时间考验而证明正确的管理技术和当前能够得到的最好的技术方法结合起来，以经济地开发出高质量的软件并有效地维护它，这就是软件工程。</p><h3 id="1-3软件工程的目标"><a href="#1-3软件工程的目标" class="headerlink" title="1.3软件工程的目标"></a>1.3软件工程的目标</h3><p>软件工程的目标是运用先进的软件开发技术和管理方法来提高软件的质量和生产率，也就是要以较短的周期、较低的成本生产出高质量的软件产品，并最终实现软件的工业化生产。 </p><p> 付出较低的开发成本</p><p> 达到要求的软件功能</p><p> 取得较好的软件性能</p><p> 开发的软件易于移植</p><p> 需要较低的维护费用</p><p> 能按时完成开发工作，及时交付使用</p><img src="/2022/05/18/software/image-20220603095340882.png" class="" title="image-20220603095340882"><h3 id="1-4软件生存期"><a href="#1-4软件生存期" class="headerlink" title="1.4软件生存期"></a>1.4软件生存期</h3><p>软件也有一个孕育、诞生、成长、成熟和衰亡的生存过程，我们称这个过程为软件生命周期或软件生存期。</p><p>软件生存期分为三个时期</p><h4 id="软件定义"><a href="#软件定义" class="headerlink" title="软件定义"></a>软件定义</h4><p>问题定义：关键问题是：“要解决的问题是什么”。提交的内容为关于问题性质、工程目标和工程规模的书面报告。</p><p>可行性研究：回答的关键问题是：“上一个阶段所确定的问题是否有行得通的解决办法”。提交的内容为可行性研究报告，即从技术、经济和社会因素等方面研究各方案的可行性</p><p>需求分析：对用户提出的要求进行分析并给出详细的定义</p><p>准确地回答“目标系统必须做什么”这个问题。也就是对目标系统提出完整、准确、清晰、具体的要求。</p><p>编写软件需求说明书或系统功能说明书及初步的系统用户手册</p><p>提交管理机构评审</p><h4 id="软件开发"><a href="#软件开发" class="headerlink" title="软件开发"></a>软件开发</h4><p>任务：具体设计和实现前一个时期即软件定义时期定义的软件。</p><p>执行人：系统设计员，高级程序员，程序员，测试工程师和辅助人员等</p><p>阶段划分：分为概要设计、详细设计、编码和单元测试、集成测试和系统测试。其中前两个阶段又称为系统设计，后两个阶段又称为系统实现。</p><h5 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h5><p>概括地回答“怎样实现目标系统?”。</p><p>设计程序的体系结构，也就是确定程序由哪些模块组成以及模块间的关系。</p><p>提交的文档是概要设计说明书。</p><h5 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h5><p>回答“应该怎样具体地实现这个系统”。</p><p>详细地设计每个模块，确定实现模块功能所需要的算法和数据结构。</p><p>提交的文档是软件的详细设计说明书。</p><h5 id="程序编码和单元测试"><a href="#程序编码和单元测试" class="headerlink" title="程序编码和单元测试"></a>程序编码和单元测试</h5><p>写出正确的容易理解、容易维护的程序模块。</p><p>提交的文档为源程序、详尽的程序说明和单元测试报告。</p><h5 id="集成测试和系统测试"><a href="#集成测试和系统测试" class="headerlink" title="集成测试和系统测试"></a>集成测试和系统测试</h5><p>通过各种类型的测试(及相应的调试)使软件达到预定的要求。（黑盒白盒测试等）</p><p>提交的文档为测试计划、详细测试方案以及实际测试结果等。</p><h4 id="运行维护"><a href="#运行维护" class="headerlink" title="运行维护"></a>运行维护</h4><p>改正性维护，也就是诊断和改正在使用过程中发现的软件错误；</p><p>适应性维护，即修改软件以适应环境的变化；</p><p>完善性维护，即根据用户的要求改进或扩充软件，使它更完善；</p><p>预防性维护，即修改软件为将来的维护活动预先做准备。</p><h3 id="1-5软件工程方法概述"><a href="#1-5软件工程方法概述" class="headerlink" title="1.5软件工程方法概述"></a>1.5软件工程方法概述</h3><p>软件工程包含技术和管理两方面的内容，是技术和管理紧密结合所形成的工程学科。</p><p>通常将软件开发全过程中使用的一整套技术方法的集合称为方法学(methedology)，也称为范型(paradigm)。</p><p>目前使用最广泛的软件工程方法学：传统方法学（<strong>结构化方法学</strong>），<strong>面向对象方法学</strong>。</p><h4 id="三要素：方法、工具和过程。"><a href="#三要素：方法、工具和过程。" class="headerlink" title="三要素：方法、工具和过程。"></a>三要素：方法、工具和过程。</h4><p>软件工程方法为软件开发提供了 “如何做” 的技术;</p><p>软件工具为软件工程方法提供了自动的或半自动的软件支撑环境;</p><p>过程是为了获得高质量的软件所需要完成的一系列任务框架，它规定了完成各项任务的工作步骤。</p><h3 id="1-6软件工具概述"><a href="#1-6软件工具概述" class="headerlink" title="1.6软件工具概述"></a>1.6软件工具概述</h3><p>软件工具的概念</p><p>软件工具是指能支持软件生存周期中某一阶段（如系统定义、需求分析、设计、编码、测试或维护等）的需要而使用的软件工具。</p><p>早期的软件工具主要用来辅助程序员编程，如编辑程序、编译程序、排错程序等。</p><p>软件工具的分类：支持软件开发过程的工具、支持软件维护过程的工具、支持软件管理过程和支持过程的工具</p><h3 id="1-7软件工程知识体系及知识域"><a href="#1-7软件工程知识体系及知识域" class="headerlink" title="1.7软件工程知识体系及知识域"></a>1.7软件工程知识体系及知识域</h3><p>似乎不太重要</p><h2 id="2-软件生存期模型"><a href="#2-软件生存期模型" class="headerlink" title="2.软件生存期模型"></a>2.软件生存期模型</h2><h3 id="2-1瀑布模型"><a href="#2-1瀑布模型" class="headerlink" title="2.1瀑布模型"></a>2.1瀑布模型</h3><img src="/2022/05/18/software/image-20220603101635795.png" class="" title="image-20220603101635795"><p>瀑布模型(waterfall model)也称软件生存周期模型，是W.Royce在1970年首先提出的。</p><p>瀑布模型将软件开发过程分解为<strong>可行性研究、软件需求、设计、编码、测试、运行与维护、退役</strong>。</p><p>它们既是软件开发过程的分解，也是软件生存周期的阶段划分。</p><p>瀑布模型按照各阶段的目标和任务逐步进行开发，直至通过确认测试，向用户交付最终软件制品为止。</p><p>面对较大的复杂系统，人们细化了瀑布模型的阶段或过程划分，如下图所示。</p><img src="/2022/05/18/software/image-20220603101810065.png" class="" title="image-20220603101810065"><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>阶段间具有顺序性和依赖性。其中包含两重含义：</p><p>① 必须等前一阶段的工作完成之后，才能开始后一阶段的工作；</p><p>② 前一阶段的输出文档就是后一阶段的输入文档。</p><p>推迟实现的观点</p><p>① 瀑布模型在编码之前设置了系统分析和系统设计的各个阶段，分析与设计阶段的基本任务规定，在这两个阶段主要考虑目标系统的逻辑模型，不涉及软件的物理实现。</p><p>② 清楚地区分逻辑设计与物理设计，尽可能推迟程序的物理实现，是按照瀑布模型开发软件的一条重要的指导思想</p><p>质量保证的观点</p><p>① 每个阶段都必须完成规定的文档，没有交出合格的文档就是没有完成该阶段的任务。</p><p>② 每个阶段结束前都要对所完成的文档进行评审，以便尽早发现问题，改正错误。</p><p>实际的瀑布模型</p><p>实际的瀑布模型是带“反馈环”的，如图所示。实现代表开发过程，虚线代表维护过程。</p><img src="/2022/05/18/software/image-20220603101930531.png" class="" title="image-20220603101930531"><p>•V模型：瀑布模型的一个变体</p><p>V模型描述了测试阶段的活动与开发阶段相关活动（包括需求建模、概要设计、详细设计、编码）之间的关系。</p><img src="/2022/05/18/software/image-20220603102002610.png" class="" title="image-20220603102002610"><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>可强迫开发人员采用规范化的方法。</p><p>严格地规定了每个阶段必须提交的文档。</p><p>要求每个阶段交出的所有产品都必须是经过验证的。</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>由于瀑布模型几乎完全依赖于书面的规格说明，很可能导致最终开发出的软件产品不能真正满足用户的需要。如果需求规格说明与用户需求之间有差异，就会发生这种情况。</p><p>瀑布模型只适用于项目开始时需求已确定的情况。（需求不确定→不适合）</p><h3 id="2-2快速原型模型"><a href="#2-2快速原型模型" class="headerlink" title="2.2快速原型模型"></a>2.2快速原型模型</h3><p>快速原型是快速建立起来的可以在计算机上运行的程序，它所能完成的功能往往是最终产品能完成的功能的一个子集。</p><img src="/2022/05/18/software/image-20220603102113100.png" class="" title="image-20220603102113100"><p>原型有两类。</p><img src="/2022/05/18/software/image-20220603102257320.png" class="" title="image-20220603102257320"><p>(1)抛弃型原型(实验性原型)</p><p> 利用原型定义和确认了软件需求后，原型就完成了任务。</p><p> 开发人员就可以按照确认的需求进行软件设计、编码、测试。</p><p>(2)应用型原型(进化性原型)</p><p> 利用原型确认软件需求后，对原型进一步加工、完善，使之成为系统的一部分。</p><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><p>(1)有助于满足用户的真实需求。</p><p>(2)原型系统已经通过与用户的交互而得到验证，据此产生的规格说明文档能够正确地描述用户需求。</p><p>(3)软件产品的开发基本上是按线性顺序进行。</p><p>(4)因为规格说明文档正确地描述了用户需求，因此，在开发过程的后续阶段不会因为发现规格说明文档的错误而进行较大的返工。</p><p>(5)开发人员通过建立原型系统已经学到了许多东西，因此，在设计和编码阶段发生错误的可能性也比较小，这自然减少了在后续阶段需要改正前面阶段所犯错误的可能性。</p><p>(6) 快速原型的突出特点是“快速”。开发人员应该尽可能快地建造出原型系统，以加速软件开发过程，节约软件开发成本。原型的用途是获知用户的真正需求，一旦需求确定了，原型可以抛弃，当然也可以在原型的基础上进行开发。</p><h3 id="2-3增量模型"><a href="#2-3增量模型" class="headerlink" title="2.3增量模型"></a>2.3增量模型</h3><img src="/2022/05/18/software/image-20220603102515586.png" class="" title="image-20220603102515586"><p>使用增量模型开发软件时，把软件产品作为一系列的增量构件来设计、编码、集成和测试。</p><p>每个构件由多个相互作用的模块构成，并且能够完成特定的功能。</p><p>每个增量构件应当实现某种系统功能，因此增量构件的开发可以采用瀑布模型的方式</p><img src="/2022/05/18/software/image-20220603102620177.png" class="" title="image-20220603102620177"><p>采用增量模型需注意的问题 </p><p>(1)在把每个新的增量构件集成到现有软件体系结构中时，必须不破坏原来已经开发出的产品。</p><p>(2)软件体系结构必须是开放的，即向现有产品中加入新构件的过程必须简单、方便。</p><p> 因此，采用增量模型比采用瀑布模型和快速原型模型更需要精心的设计。</p><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><p>(1)能在较短时间内向用户提交可完成一些有用的工作产品，即从第1个构件交付之日起，用户就能做一些有用的工作。</p><p>(2)逐步增加产品的功能可以使用户有较充裕的时间学习和适应新产品，从而减少一个全新的软件可能给用户组织带来的冲击。</p><p>(3)项目失败的风险较低，虽然在某些增量构件中可能遇到一些问题，但其他增量构件将能够成功地交付给客户。</p><p>(4)优先级最高的服务首先交付，然后再将其他增量构件逐次集成进来。因此，最重要的系统服务将接受最多的测试。 </p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="2-4螺旋模型"><a href="#2-4螺旋模型" class="headerlink" title="2.4螺旋模型"></a>2.4螺旋模型</h3><p>采用增量模型需注意的问题 </p><p>(1)在把每个新的增量构件集成到现有软件体系结构中时，必须不破坏原来已经开发出的产品。</p><p>(2)软件体系结构必须是开放的，即向现有产品中加入新构件的过程必须简单、方便。</p><p> 因此，采用增量模型比采用瀑布模型和快速原型模型更需要精心的设计。</p><p>理解这种模型的一个简便方法，是把它看做在每个阶段之前都增加了风险分析过程的快速原型模型。 </p><img src="/2022/05/18/software/image-20220603102736394.png" class="" title="image-20220603102736394"><img src="/2022/05/18/software/image-20220603102750586.png" class="" title="image-20220603102750586"><h4 id="完整的螺旋模型"><a href="#完整的螺旋模型" class="headerlink" title="完整的螺旋模型"></a>完整的螺旋模型</h4><p>在螺旋模型中，软件过程表示成一个螺线，而不是像以往的模型那样表示为一个具有回溯的活动序列。</p><p>在螺线上的每一个循环表示过程的一个阶段。</p><p>每个阶段开始时的任务是确定该阶段的目标、为完成这些目标选择方案及设定这些方案的约束条件。接下来的任务是，从风险角度分析上一步的工作结果，努力排除各种潜在的风险，通常用建造原型的方法来排除风险。如果成功地排除了所有风险，则启动下一步开发步骤，在这个步骤的工作过程相当于纯粹的瀑布模型。最后是评价该阶段的工作成果并计划下一个阶段的工作。</p><p>螺旋模型适合大型软件开发，特别是目前应用广泛的电子商务、电子政务一类的业务软件系统。</p><p>开发这类系统时，软件需求往往不能完全确定。</p><p>项目开始时开发人员与用户协商，将能够确定的需求、暂时不能确定的需求划分为一系列的增量，并为增量排序，确定的、急需的增量排在前面，暂时不能确定或不急需的放在后面。</p><p>采用螺旋模型开发这类软件具有边学习、边建模，边开发、边使用、边改进的优点。</p><h4 id="螺旋模型的4项活动"><a href="#螺旋模型的4项活动" class="headerlink" title="螺旋模型的4项活动"></a>螺旋模型的4项活动</h4><p>螺线上的每一个循环可划分为4个象限，分别表达了4个方面的活动。</p><p>(1)目标设定——定义在该阶段的目标，弄清对过程和产品的限制条件，制订详细的管理计划，识别项目风险，可能还要计划与这些风险有关的对策。</p><p>(2)风险估计与弱化——针对每一个风险进行详细分析，设想弱化风险的步骤。</p><p>(3)开发与验证——评价风险之后选择系统开发模型。</p><p>(4)计划——评价开发工作，确定是否继续进行螺线的下一个循环。如果确定要继续，则计划项目的下一个阶段的工作</p><h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><p>对可选方案和约束条件的强调有利于已有软件的重用，也有助于把软件质量作为软件开发的一个重要目标。</p><p>减少了过多测试或测试不足所带来的风险。</p><p>在螺旋模型中维护只是模型的另一个周期，因而在维护和开发之间并没有本质区别。</p><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>螺旋模型是风险驱动的，因此要求软件开发人员必须具有丰富的风险评估经验和这方面的专门知识，否则将出现真正的风险：当项目实际上正在走向灾难时，开发人员可能还以为一切正常。</p><h3 id="2-5喷泉模型"><a href="#2-5喷泉模型" class="headerlink" title="2.5喷泉模型"></a>2.5喷泉模型</h3><img src="/2022/05/18/software/image-20220603103357522.png" class="" title="image-20220603103357522"><p>喷泉模型是典型的面向对象生命周期模型。</p><p>“喷泉”一词体现了迭代和无间隙特性。图中代表不同阶段的圆圈相互重叠，这明确表示两个活动之间存在重叠。用面向对象方法开发软件时，在分析、设计和编码等项开发活动之间不存在明显的边界，而各阶段在表示方法上的一致性也保证了各项开发活动之间的无缝过度。途中一个阶段内的向下箭头代表该阶段中的迭代或求精。</p><h3 id="2-6统一过程"><a href="#2-6统一过程" class="headerlink" title="2.6统一过程"></a>2.6统一过程</h3><img src="/2022/05/18/software/image-20220603103602073.png" class="" title="image-20220603103602073"><h4 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h4><p>在统一过程中，有6个核心工作流。</p><p>① 业务建模工作流。用商业用例为商业过程建立文档。</p><p>② 需求工作流。目标是描述系统应该做什么，确保开发人员构建正确的系统。为此，需明确系统的功能需求和非功能需求（约束）。</p><p>③ 分析和设计工作流。其目标是说明如何做。结果是分析模型和设计模型。</p><p>④ 实现工作流。用分层的方式组织代码的结构，用构件的形式来实现类，对构件进行单元测试，将构件集成到可执行的系统中。</p><p>⑤ 测试工作流。验证对象之间的交互、是否所有的构件都集成了、是否正确实现了所有需求、查错并改正。</p><p>⑥ 部署工作流。制作软件的外部版本、软件打包、分发、为用户提供帮助和支持。</p><h4 id="阶段"><a href="#阶段" class="headerlink" title="阶段"></a>阶段</h4><p>统一过程有4个阶段，分别是初始阶段、细化阶段、构造阶段和移交阶段。</p><p>① 初始阶段。初始阶段主要关注项目计划和风险评估，其目的是确定是否值得开发目标信息系统。</p><p>② 细化阶段。细化阶段关心定义系统的总体框架，其目标是：细化初始需求（用况）、细化体系结构、监控风险并细化它们的优先级、细化业务案例以及制订项目管理计划。</p><p>③ 构造阶段。构造阶段是建立系统，构造信息系统的第1个具有操作质量的版本，以能够交付给客户进行b测试的版本结束，有时称为测试版本。</p><p>④ 移交阶段。移交阶段包含b测试时期，以发布完整的系统而终止，其目标是确保信息系统真正满足客户的需求。</p><img src="/2022/05/18/software/image-20220603103733823.png" class="" title="image-20220603103733823"><h3 id="2-7基于构件的开发模型"><a href="#2-7基于构件的开发模型" class="headerlink" title="2.7基于构件的开发模型"></a>2.7基于构件的开发模型</h3><p>强调使用可复用的软件“构件”来设计和构造基于计算机的系统的过程。</p><p>考虑的焦点是集成，而不是实现。</p><img src="/2022/05/18/software/image-20220603103810050.png" class="" title="image-20220603103810050"><p>不考虑构件的开发技术，基于构件的开发模型由以下步骤组成：</p><p>(1)对于该问题领域的基于构件的可用产品进行研究和评估。</p><p>(2)考虑构件集成的问题。</p><p>(3)设计软件架构以容纳这些构件。</p><p>(4)将构件集成到架构中。</p><p>(5)进行充分的测试以保证功能正常。</p><h3 id="2-8敏捷过程"><a href="#2-8敏捷过程" class="headerlink" title="2.8敏捷过程"></a>2.8敏捷过程</h3><p>2001年，Kent Beck等17名编程大师发表“敏捷软件开发”宣言：</p><p> 我们正在通过亲身实践以及帮助他人实践的方式来揭示更好的软件开发之路，通过这项工作，我们认为：</p><p>   个体和交互胜过过程和工具；</p><p>   可工作软件胜过宽泛的文档；</p><p>   客户合作胜过合同谈判；</p><p>   响应变化胜过遵循计划。 </p><p>任何一个敏捷过程都可以由所强调的3个关键假设识别出来，这3个假设可适用于大多数软件项目。</p><p>(1) 提前预测哪些需求是稳定的、哪些需求会变化非常困难。同样的，预测项目进行中客户优先级的变化也很困难。</p><p>(2) 对很多软件，设计和构建是交错进行的。事实上，两种活动应当顺序开展以保证通过构建实施来验证设计模型，而在通过构建验证之前很难估计应该设计到什么程度。</p><p>(3) 从制订计划的角度来看，分析、设计、构建和测试并不像我们所设想的那么容易预测。</p><h4 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h4><p>(1)我们最优先要做的是通过尽早、持续交付有价值的软件来使客户满意。</p><p>(2)即使在开发的后期，也欢迎需求变更。敏捷过程利用变更为客户创造竞争优势。</p><p>(3)经常交付可运行软件，交付的间隔可以从几个星期到几个月，交付的时间间隔越短越好。</p><p>(4)在整个项目开发期间，业务人员和开发人员必须天天都在一起工作。 </p><p>(5)围绕有积极性的个人构建项目。给他们提供所需的环境和支持，并且信任他们能够完成工作。</p><p>(6)在团队内部，最富有效果和效率的信息传递方法是面对面交谈。</p><p>(7)可运行软件是进度的首要度量标准。</p><p>(8)敏捷过程提倡可持续的开发速度。责任人、开发者和用户应该能够保持一种长期、稳定的开发速度。</p><p>(9)不断地关注优秀的技能和好的设计会增强敏捷能力。</p><p>(10)简单是必要的。</p><p>(11)好的架构、需求和设计出自于自组织团队。</p><p>(12)每隔一定时间，团队会反省如何才能更有效地工作，并相应调整自己的行为</p><h4 id="使用范围"><a href="#使用范围" class="headerlink" title="使用范围"></a>使用范围</h4><p>敏捷软件开发过程适合小型一般软件的开发</p><p>适合建造原型系统</p><p>适合开发需求不确定的易变的业务处理系统</p><p>适合负责任的专业用户能加入开发团队并一直在开发现场工作的软件项目（多数场合，这一点是困难的）。</p><p>用敏捷软件开发过程快速构建原型，进行人机界面设计将是十分有效的。</p><p>生命攸关的实时系统，如空中交通指挥控制系统，机载、弹载、星载、船载的导航和武器控制系统的关键软件采用敏捷软件开发过程是不适宜的。这些软件需求定义严格、开发责任分明、必须有严格的测试和标准的文档，对安全性和保密性有更严格的规定。</p><h4 id="极限编程（eXtreme-Programming，XP）"><a href="#极限编程（eXtreme-Programming，XP）" class="headerlink" title="极限编程（eXtreme Programming，XP）"></a>极限编程（eXtreme Programming，XP）</h4><p>使用最广泛的敏捷过程，最初由Kent Beck提出。XP包含了策划、设计、编码和测试4个框架活动的规则和实践。 </p><img src="/2022/05/18/software/image-20220603105423453.png" class="" title="image-20220603105423453"><h4 id="自适应软件开发"><a href="#自适应软件开发" class="headerlink" title="自适应软件开发"></a>自适应软件开发</h4><p>自适应软件开发（adaptive software development，ASD）是由Jim Highsmith提出的；</p><p>它可作为构建复杂软件和系统的一项技术，其基本概念着眼于人员合作和团队自组织。</p><img src="/2022/05/18/software/image-20220603105603747.png" class="" title="image-20220603105603747"><h1 id="Part2-结构化分析与设计方法"><a href="#Part2-结构化分析与设计方法" class="headerlink" title="Part2.结构化分析与设计方法"></a>Part2.结构化分析与设计方法</h1><h2 id="3-软件需求获取与结构化分析方法"><a href="#3-软件需求获取与结构化分析方法" class="headerlink" title="3.软件需求获取与结构化分析方法"></a>3.软件需求获取与结构化分析方法</h2><h3 id="3-1需求获取与需求分析阶段的任务"><a href="#3-1需求获取与需求分析阶段的任务" class="headerlink" title="3.1需求获取与需求分析阶段的任务"></a>3.1需求获取与需求分析阶段的任务</h3><p>需求获取的主要任务是与客户或用户沟通，了解系统或产品的目标是什么？客户或用户想要实现什么？系统和产品如何满足业务的要求，最终系统或产品如何用于日常工作？</p><p>获取并理解用户的需求是软件工程师所面对的最困难的任务之一。</p><p>导出需求变得如此困难的原因归为以下几个方面的问题：</p><p>系统的目标或范围问题；</p><p>需求不准确性问题 ；</p><p>需求的易变问题 ；</p><p>需求获取除了需要有专业的系统分析师，还需要通过有效的客户／开发者的合作才能成功。 </p><h4 id="1-需求获取的任务和原则"><a href="#1-需求获取的任务和原则" class="headerlink" title="1.需求获取的任务和原则"></a>1.需求获取的任务和原则</h4><p>需求获取的任务</p><p>(1) 发现和分析问题，并分析问题的原因/结果关系。</p><p>(2) 与用户进行各种方式的交流，并使用调查研究方法收集信息。</p><p>(3) 按照三个成分观察问题的不同侧面：即数据、过程和接口。</p><p>(4) 将获取的需求文档化，形式有用例、决策表、需求表等。</p><p>需求获取应遵循的原则</p><p>(1) 深入浅出的原则。就是说，需求获取要尽可能全面、细致。获取的需求是个全集，目标系统真正实现的是个子集。</p><p>(2) 以流程为主线的原则。在与用户交流的过程中，应该用流程将所有的内容串起来。如信息、组织结构、处理规则等。这样便于交流沟通。流程的描述既有宏观描述，也有微观描述。</p><h4 id="2-需求获取的过程"><a href="#2-需求获取的过程" class="headerlink" title="2.需求获取的过程"></a>2.需求获取的过程</h4><h5 id="开发高层的业务模型"><a href="#开发高层的业务模型" class="headerlink" title="开发高层的业务模型"></a>开发高层的业务模型</h5><h5 id="定义项目范围和高层需求"><a href="#定义项目范围和高层需求" class="headerlink" title="定义项目范围和高层需求"></a>定义项目范围和高层需求</h5><h5 id="识别用户类和用户代表"><a href="#识别用户类和用户代表" class="headerlink" title="识别用户类和用户代表"></a>识别用户类和用户代表</h5><p>系统的不同用户之间在很多方面存在差异，例如：</p><p>(1) 使用产品的频率；</p><p>(2) 用户在应用领域的经验和使用计算机系统的技能；</p><p>(3) 所用到的产品功能；</p><p>(4) 为支持业务过程所进行的工作；</p><p>(5) 访问权限和安全级别</p><h5 id="获取具体的需求"><a href="#获取具体的需求" class="headerlink" title="获取具体的需求"></a>获取具体的需求</h5><p>  确定了项目范围和高层需求，并确定了用户类及用户代表后，就需要获取更具体、完整和详细的需求。具体需求的来源可以来自以下几种典型的途径。</p><p> (1) 与用户进行交流。 </p><p> (2) 现有产品或竞争产品的描述文档。  </p><p> (3) 系统需求规格说明。</p><p> (4) 当前系统的问题报告和改进要求。</p><p> (5) 市场调查和用户问卷调查。</p><p> (6) 观察用户如何工作。   </p><h5 id="确定目标系统的业务工作流"><a href="#确定目标系统的业务工作流" class="headerlink" title="确定目标系统的业务工作流"></a>确定目标系统的业务工作流</h5><p>  具体到当前待开发的应用系统，确定系统的业务工作流和主要的业务规则，采取需求调研的方法获取所需的信息.</p><h5 id="需求整理与总结"><a href="#需求整理与总结" class="headerlink" title="需求整理与总结"></a>需求整理与总结</h5><p>必须对上面步骤取得的需求资料进行整理和总结，确定对软件系统的综合要求，即软件的需求。</p><p>并提出这些需求实现条件，以及需求应达到的标准。</p><p>这些需求包括功能需求、性能需求、环境需求、可靠性需求、安全保密要求、用户界面需求、资源使用需求、软件成本消耗与开发进度需求等。</p><h4 id="3-软件需求分析阶段的任务"><a href="#3-软件需求分析阶段的任务" class="headerlink" title="3.软件需求分析阶段的任务"></a>3.软件需求分析阶段的任务</h4><img src="/2022/05/18/software/image-20220603112747635.png" class="" title="image-20220603112747635"><p>可以把软件需求分析阶段的工作分为4个步骤，即获取需求、分析需求、定义需求和验证需求，如图所示。 </p><h5 id="需求获取"><a href="#需求获取" class="headerlink" title="需求获取"></a>需求获取</h5><p>  通过启发、引导从客户（或用户）那里得到的原始需求是他们的业务要求（needs），简称为N。</p><p>  这是分析之前获取的需求，其中可能存在一些实际问题，这些问题只有通过分析才能得到解决，直接把获取的需求作为软件设计阶段的依据将会导致严重的后果。 </p><h5 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h5><p>  认真研究获取的需求，必须考虑以下几方面：</p><p>  (1) 完整性：每项获取的需求都应给出清楚的描述，使得软件开发工作能够取得设计和实现该功能所需要的全部必要信息。</p><p>  (2) 正确性：获取的每项需求必须是准确无误的，并且需求描述无歧义性。</p><p>  (3) 合理性：各项需求之间、软件需求与系统需求之间应是协调一致的，不应存在矛盾和冲突。</p><p>  (4) 可行性：包括技术可行性 、经济可行性 、社会可行性 。</p><p>  (5) 充分性：获取的需求是否全面、周到。 </p><p>由于分析的过程会对获取的需求做部分调整，也即从获取的需求N中去掉了一些a，又补充了一些c，从而得到的是分析的需求R1（b+c）。</p><img src="/2022/05/18/software/image-20220603112918627.png" class="" title="image-20220603112918627"><h5 id="需求定义"><a href="#需求定义" class="headerlink" title="需求定义"></a>需求定义</h5><p>  将已经过分析的需求清晰、全面、系统、准确地描述成为正式的文档，这一步定义需求的工作就是编写需求规格说明。 </p><h5 id="需求验证"><a href="#需求验证" class="headerlink" title="需求验证"></a>需求验证</h5><p>  为了确保已定义的需求（需求规格说明）准确无误，并能为客户（或用户）理解和接受，需要对其进行严格的评审。 </p><h3 id="3-2结构化分析方法"><a href="#3-2结构化分析方法" class="headerlink" title="3.2结构化分析方法"></a>3.2结构化分析方法</h3><p>•结构化分析模型</p><p>  结构化分析方法是一种建模技术，它建立的分析模型如图所示。</p><img src="/2022/05/18/software/image-20220603113107619.png" class="" title="image-20220603113107619"><h4 id="1-功能建模（数据流图）"><a href="#1-功能建模（数据流图）" class="headerlink" title="1.功能建模（数据流图）"></a>1.功能建模（数据流图）</h4><h5 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h5><p>  功能建模的思想就是用抽象模型的概念，按照软件内部数据传递、变换的关系，自顶向下逐层分解，直到找到满足功能要求的所有可实现的软件为止。功能模型用数据流图来描述。</p><p>基本图形符号：（注意命名的词性）</p><img src="/2022/05/18/software/image-20220603113745154.png" class="" title="image-20220603113745154"><p>数据源或数据汇点表示图中要处理数据的输入来源或处理结果要送往何处，数据源或数据汇点不是目标系统的一部分，只是目标系统的外围环境中的实体部分，因此称为外部实体。实际问题中可能是组织、部门、人、相关的软件系统或硬件设备。</p><p>数据流表示数据沿箭头方向的流动。数据流可表示在加工之间被传送的有名数据，也可表示未命名数据；这些数据虽然没有命名，但因其所连接的是有名加工和有名数据存储，所以含义也是清楚的。</p><p>加工是对数据对象的处理或变换，加工的名字是动词短语，以表明所完成的加工。一个加工可能需要多个数据流，也可能产生多个数据流。</p><p>数据存储在数据流图中起保存数据的作用，可以是数据库文件或任何形式的数据组织。从数据存储中引出的数据流可理解为从数据存储读取数据或得到查询结果，指向数据存储的数据流理解为向数据存储写入数据。</p><p>多个数据流之间关系：</p><img src="/2022/05/18/software/image-20220603113825262.png" class="" title="image-20220603113825262"><h5 id="环境图"><a href="#环境图" class="headerlink" title="环境图"></a>环境图</h5><p>环境图（context diagram）也称为顶层数据流图（或0层数据流图），它仅包括一个数据处理过程，也就是要开发的目标系统。</p><p>环境图的作用是确定系统在其环境中的位置，通过确定系统的输入和输出与外部实体的关系确定其边界。</p><img src="/2022/05/18/software/image-20220603113853438.png" class="" title="image-20220603113853438"><img src="/2022/05/18/software/image-20220603113906285.png" class="" title="image-20220603113906285"><h5 id="数据流图的分层"><a href="#数据流图的分层" class="headerlink" title="数据流图的分层"></a>数据流图的分层</h5><p>对于稍微复杂一些的实际问题，在数据流图上常常出现十几个甚至几十个加工，这样的数据流图看起来不直观，不易理解，分层的数据流图能很好地解决这一问题。</p><p>按照系统的层次结构进行逐步分解，并以分层的数据流图反映这种结构关系，能清楚地表达和容易理解整个系统。 </p><img src="/2022/05/18/software/image-20220603113931039.png" class="" title="image-20220603113931039"><p>招生系统的S0分解为S1-S4：</p><img src="/2022/05/18/software/image-20220603114022687.png" class="" title="image-20220603114022687"><h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><p>银行储蓄系统的业务流程：</p><p>储户填写的存款单或取款单由业务员键入系统；</p><p>如果是存款则系统记录存款人姓名、住址（或电话号码）、身份证号码、存款类型、存款日期、到期日期、利率、密码（可选）等信息，并印出存单给储户；</p><p>如果是取款而且开户时留有密码，则系统首先核对储户密码，若密码正确或存款时未留密码，则系统计算利息并印出利息清单给储户。</p><p>要求画出分层的数据流图，并细化到2层数据流图。</p><p>答案</p><p>(1) 识别外部实体及输入输出数据流。</p><p>外部实体：储户、业务员。</p><p>输入数据：如果需要储户输入密码，储户才直接与系统进行交互。储户填写的存款或取款信息通过业务员键入系统，可以将存款及取款信息抽象为事务。</p><p>输出数据：存款单，利息清单。 </p><p>(2) 画出环境图（顶层数据流图） </p><img src="/2022/05/18/software/image-20220603114710718.png" class="" title="image-20220603114710718"><p>(3) 画出一层数据流图 </p><img src="/2022/05/18/software/image-20220603114722278.png" class="" title="image-20220603114722278"><p>对环境图中的银行储蓄系统进行分解，从大的方面分解为接收事务、处理存款、处理取款3部分，得到1层数据流图。</p><p>接收事务的主要功能是判断一个事务（输入数据流）的类型，其结果或者是存款业务，或者是取款业务。</p><p>存款信息需要使用外部文件或数据库的方式来存储 。</p><p>(4) 画出二层数据流图</p><p>  对一层图中的“处理存款”及“处理取款”进行进一步分解，得到二层数据流图，即处理存款的数据流图和处理取款的数据流图。 </p><img src="/2022/05/18/software/image-20220603114819410.png" class="" title="image-20220603114819410"><img src="/2022/05/18/software/image-20220603114824342.png" class="" title="image-20220603114824342"><h4 id="2-数据建模（ER图）"><a href="#2-数据建模（ER图）" class="headerlink" title="2.数据建模（ER图）"></a>2.数据建模（ER图）</h4><p>在结构化分析方法中，使用实体—关系建模技术来建立数据模型。</p><p>这种技术是在较高的抽象层次（概念层）上对数据库结构进行建模的流行技术。</p><p>实体—关系模型表示为可视化的实体—关系图（entity-relationship diagram，ERD），也称为ER图。</p><p>ER图中仅包含3种相互关联的元素：数据对象（实体）、描述数据对象的属性及数据对象彼此间相互连接的关系。 </p><h5 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h5><p>数据对象是目标系统所需要的复合信息的表示，所谓复合信息是具有若干不同属性的信息。在ER图中用矩形表示数据对象。</p><p>在实际问题中，数据对象（实体）可以是外部实体、事物、角色、行为或事件、组织单位、地点或结构等。  </p><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><p>属性定义数据对象的特征，如数据对象学生的学号、姓名、性别、专业等，课程的课程编号、课程名称、学分等。</p><p>在ER图中用椭圆或圆角矩形表示属性，并用无向边将属性与相关的数据对象连接在一起。</p><h5 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h5><p>不同数据对象的实例之间是有关联关系的，在ER图上用无向边表示。在无向边的两端应标识出关联实例的数量，也称为关联的重数。从关联重数的角度可以将关联分为３种。</p><p>(1) 一对一（1:1）关联</p><p>(2) 一对多（1:m）关联</p><p>(3) 多对多（m:n）关联</p><p>实例关联还有“必须”和“可选”之分。 </p><p>关联数量的表示</p><p>在ER图中用圆圈表示所关联的实例是可选的，隐含表示“0”，没有出现圆圈就意味着是必须的。出现在连线上的短竖线可以看成是“1”。 </p><img src="/2022/05/18/software/image-20220603115019362.png" class="" title="image-20220603115019362"><img src="/2022/05/18/software/image-20220603115023829.png" class="" title="image-20220603115023829"><h5 id="关系的属性"><a href="#关系的属性" class="headerlink" title="关系的属性"></a>关系的属性</h5><p>关系本身也可能有属性，这在多对多的关系中尤其常见，如学生和课程之间的关系可起名为“选课”，其属性应该有学期、成绩等。</p><p>关系属性的表示：在表示关系的无向边上再加一个菱形框，并在菱形框中标明关系的名字，关系的属性同样用椭圆形或圆角矩形表示，并用无向边将关系与其属性连接起来。  </p><img src="/2022/05/18/software/image-20220603115042845.png" class="" title="image-20220603115042845"><p>银行储蓄系统ER图：</p><img src="/2022/05/18/software/image-20220603115055590.png" class="" title="image-20220603115055590"><h4 id="3-行为建模（状态图）"><a href="#3-行为建模（状态图）" class="headerlink" title="3.行为建模（状态图）"></a>3.行为建模（状态图）</h4><p>没大看懂？什么事件？什么守卫表达式？</p><p>状态转换图（简称状态图）通过描绘系统的状态及引起系统状态转换的事件，来表示系统的行为。状态图中使用的主要符号如图所示。</p><img src="/2022/05/18/software/image-20220603115121625.png" class="" title="image-20220603115121625"><h5 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h5><p>状态是任何可以被观察到的系统行为模式，一个状态代表系统的一种行为模式，状态规定了系统对事件的响应方式。</p><p>状态可能有：初态（初始状态）、终态（最终状态）和中间态。</p><p>在一张状态图中只能有一个初态，而终态则可以有多个，也可以没有。 </p><h5 id="状态的表示"><a href="#状态的表示" class="headerlink" title="状态的表示"></a>状态的表示</h5><p>初态用实心圆表示，终态用牛眼图形表示，中间态用圆角矩形表示。</p><img src="/2022/05/18/software/image-20220603115158805.png" class="" title="image-20220603115158805"><h5 id="状态转换"><a href="#状态转换" class="headerlink" title="状态转换"></a>状态转换</h5><p>状态图中两个状态之间带箭头的连线称为状态转换。</p><p>状态的变迁通常是由事件触发的，在这种情况下应在表示状态转换的箭头线上标出触发转换的事件表达式。</p><p>如果在箭头线上未标明事件，则表示在源状态的内部活动执行完之后自动触发转换。</p><h5 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h5><p>事件是在某个特定时刻发生的事情，它是对引起系统做动作或从一个状态转换到另一个状态的外部事件的抽象。事件表达式的语法如下：</p><p>​    <strong>事件说明（守卫条件）/动作表达式</strong></p><p>(1) 事件说明的语法如下：</p><p>​    事件名（参数表）</p><p>(2) 守卫条件是一个布尔表达式。如果同时使用守卫条件和事件说明，则当且仅当事件发生且布尔表达式成立时，状态转换才发生。如果只有守卫条件没有事件说明，则只要守卫条件为真，状态转换就发生。</p><p>(3) 动作表达式是一个过程表达式，当状态转换开始时执行该表达式。</p><p>存款过程的状态图：</p><img src="/2022/05/18/software/image-20220603115739467.png" class="" title="image-20220603115739467"><p>取款过程的状态图：</p><img src="/2022/05/18/software/image-20220603120002763.png" class="" title="image-20220603120002763"><h4 id="4-数据字典"><a href="#4-数据字典" class="headerlink" title="4.数据字典"></a>4.数据字典</h4><p>数据字典以词条方式定义在数据模型、功能模型和行为模型中出现的数据对象及控制信息的特性，给出它们的准确定义，包括数据流、加工、数据文件、数据元素，以及数据源点、数据汇点等。 </p><p>数据字典成为把3种分析模型黏合在一起的“黏合剂”，是分析模型的“核心”。</p><h5 id="词条描述"><a href="#词条描述" class="headerlink" title="词条描述"></a>词条描述</h5><p>对于在数据流图中每一个被命名的图形元素均加以定义；</p><p>其内容包括图形元素的名字，图形元素的别名或编号，图形元素类别（如加工、数据流、数据文件、数据元素、数据源点或数据汇点等）、描述、定义、位置等。 </p><h6 id="数据流词条"><a href="#数据流词条" class="headerlink" title="数据流词条"></a>数据流词条</h6><p>数据流是数据结构在系统内传播的路径，数据流词条应包括以下几项内容。</p><p>①数据流名：要求与数据流图中该图形元素的名字一致。</p><p>②简述：简要介绍它产生的原因和结果。</p><p>③组成：数据流的数据结构。</p><p>④来源：数据流来自哪个加工或作为哪个数据源的外部实体。</p><p>⑤去向：数据流流向哪个加工或作为哪个数据汇点的外部实体。</p><p>⑥流通量：单位时间数据的流通量。</p><p>⑦峰值：流通量的极限值。</p><h6 id="数据元素词条"><a href="#数据元素词条" class="headerlink" title="数据元素词条"></a>数据元素词条</h6><p>数据流图中的每个数据结构都是由数据元素构成的，数据元素是数据处理中最小的、不可再分的单位，它直接反映事物的某一特征。</p><p>① 类型：数据元素分为数字型与文字型。数字型又分为离散值和连续值，文字的类型用编码类型和长度区分。</p><p>② 取值范围：离散值的取值或是枚举的（如3，17，21），或是介于上下界的一组数（如2..100）；连续值一般是有取值范围的实数集（如0.0..100.0）。对于文字型，文字的取值需加以定义。</p><p>③ 相关的数据元素及数据结构。 </p><h6 id="数据存储文件词条"><a href="#数据存储文件词条" class="headerlink" title="数据存储文件词条"></a>数据存储文件词条</h6><p>数据存储文件是数据保存的地方。一个数据存储文件词条应有以下几项内容。</p><p>① 文件名：要求与数据流图中该图形元素的名字一致。</p><p>② 简述：简要介绍存放的是什么数据。</p><p>③ 组成：文件的数据结构。</p><p>④ 输入：从哪些加工获取数据。</p><p>⑤ 输出：由哪些加工使用数据。</p><p>⑥ 存取方式：分为顺序、直接、关键码等不同存取方式。</p><p>⑦ 存取频率：单位时间的存取次数。</p><h6 id="加工词条"><a href="#加工词条" class="headerlink" title="加工词条"></a>加工词条</h6><p>加工可以使用诸如判定表、判定树、结构化语言等形式表达，主要描述如下。</p><p>① 加工名：要求与数据流图中该图形元素的名字一致。</p><p>② 编号：用以反映该加工的层次和父子关系。</p><p>③ 简述：加工逻辑及功能简述。</p><p>④ 输入：加工的输入数据流。</p><p>⑤ 输出：加工的输出数据流。</p><p>⑥ 加工逻辑：简述加工程序和加工顺序。</p><h6 id="数据源点及数据汇点词条"><a href="#数据源点及数据汇点词条" class="headerlink" title="数据源点及数据汇点词条"></a>数据源点及数据汇点词条</h6><p>对于一个数据处理系统来说，数据源点和数据汇点应比较少。 </p><p>① 名称：要求与数据流图中该外部实体的名字一致。</p><p>② 简述：简要描述是什么外部实体。</p><p>③ 有关数据流：该实体与系统交互时涉及哪些数据流。</p><p>④ 数目：该实体与系统交互的次数。</p><h5 id="数据结构描述"><a href="#数据结构描述" class="headerlink" title="数据结构描述"></a>数据结构描述</h5><p>在数据字典的编制中，分析员最常用的描述数据结构的方式有定义式、Warnier图等。</p><p>定义式。在数据流图中，数据流和数据文件都具有一定的数据结构，因此，必须以一种清晰、准确、无二义性的方式来描述数据结构。</p><p>Warnier图。Warnier图是表示数据结构的另一种图形工具，它用树形结构来描绘数据结构。</p><img src="/2022/05/18/software/image-20220603151231384.png" class="" title="image-20220603151231384"><p>存折的定义格式</p><p>存折＝户名＋所号＋账号＋开户日＋性质＋（印密）＋  1{存取行}50</p><p>所号＝“001”..“999”</p><p>户名＝2{字母}24</p><p>账号＝“00000000001”..“99999999999”</p><p>开户日＝年＋月＋日</p><p>性质＝“1”..“6”          </p><p>印密＝（“0”|“000001”..“999999”）  </p><p>存取行＝日期＋（摘要）＋支出＋存入＋余额＋操作＋复核</p><p>日期＝年＋月＋日</p><p>年＝“0001”..“9999”</p><p>月＝“01”..“12”</p><p>日＝“01”..“31”</p><p>Warnier图</p><img src="/2022/05/18/software/image-20220603151317289.png" class="" title="image-20220603151317289"><h4 id="5-加工规格说明"><a href="#5-加工规格说明" class="headerlink" title="5.加工规格说明"></a>5.加工规格说明</h4><p>在对数据流图的分解中，位于层次树最低层的加工也称为基本加工或原子加工，对于每一个基本加工都需要进一步说明，这称为加工规格说明。</p><p>在编写基本加工的规格说明时，主要目的是要表达“做什么”，而不是“怎样做”。</p><p>加工规格说明应满足如下的要求：</p><p>(1) 对数据流图的每一个基本加工，必须有一个加工规格说明。</p><p>(2) 加工规格说明必须描述基本加工如何把输入数据流变换为输出数据流的加工规则。</p><p>(3) 加工规格说明必须描述实现加工的策略而不是实现加工的细节。</p><p>(4) 加工规格说明中包含的信息应是充足的，完备的，有用的，没有重复的多余信息。</p><h5 id="决策表"><a href="#决策表" class="headerlink" title="决策表"></a>决策表</h5><p>决策表由4个部分组成：</p><p>左上部分是条件茬，在此区域列出了各种可能的单个条件；</p><p>左下部分是动作茬，在此区域列出了可能采取的单个动作；</p><p>右上部分是条件项，在此区域列出了针对各种条件的每一组条件取值的组合；</p><p>右下部分是动作项，这些动作项与条件项紧密相关，它指出了在条件项的各组取值的组合情况下应采取的动作。</p><p>建立决策表的步骤</p><p>(1) 列出与一个具体过程（或模块）有关的所有处理。</p><p>(2) 列出过程执行期间的所有条件（或所有判断）。</p><p>(3) 将特定条件取值组合与特定的处理相匹配，消去不可能发生的条件取值组合。</p><p>(4) 将右部每一纵列规定为一个处理规则，即对于某一条件取值组合将有什么动作。</p><img src="/2022/05/18/software/image-20220603151450854.png" class="" title="image-20220603151450854"><p>决策表的改进：如果表中有两条或更多的处理规则具有相同的动作，并且其条件项之间存在着某种关系，就可设法将它们合并。 </p><img src="/2022/05/18/software/image-20220603151514659.png" class="" title="image-20220603151514659"><h5 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h5><p>决策树（decision tree）也是用来表达加工逻辑的一种工具，有时侯它比决策表更直观。</p><p>检查订货单的决策树 </p><img src="/2022/05/18/software/image-20220603151600923.png" class="" title="image-20220603151600923"><h3 id="3-3系统需求规格说明"><a href="#3-3系统需求规格说明" class="headerlink" title="3.3系统需求规格说明"></a>3.3系统需求规格说明</h3><p>这三节看课本</p><h3 id="3-4需求评审"><a href="#3-4需求评审" class="headerlink" title="3.4需求评审"></a>3.4需求评审</h3><h3 id="3-5需求管理"><a href="#3-5需求管理" class="headerlink" title="3.5需求管理"></a>3.5需求管理</h3><h2 id="4-结构化设计方法"><a href="#4-结构化设计方法" class="headerlink" title="4.结构化设计方法"></a>4.结构化设计方法</h2><h3 id="4-1软件设计的概念及原则"><a href="#4-1软件设计的概念及原则" class="headerlink" title="4.1软件设计的概念及原则"></a>4.1软件设计的概念及原则</h3><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><p>设计是一项核心的工程活动。</p><p>“什么是设计？设计是你站在两个世界——技术世界和人类的目标世界——而你尝试将这两个世界结合在一起……”。</p><p>“设计良好的建筑应该展示出坚固、适用和令人赏心悦目”。</p><h4 id="原则-1"><a href="#原则-1" class="headerlink" title="原则"></a>原则</h4><h5 id="1-分而治之"><a href="#1-分而治之" class="headerlink" title="(1) 分而治之"></a>(1) 分而治之</h5><p>分而治之是人们解决大型复杂问题时通常采用的策略。将大型复杂的问题分解为许多容易解决的小问题，原来的问题也就容易解决了。</p><p>软件的体系结构设计、模块化设计都是分而治之策略的具体表现。</p><p>模块是构成软件的基本构件。模块化是将整体软件划分成独立命名且可以独立访问的模块，不同的模块通常具有不同的功能或指责，每个模块可独立地开发吗、测试，最后组装成完整的软件。</p><p>尽管模块分解可以简化要解决的问题，但模块分解并不是越小越好。</p><p>当模块数目增加时，每个模块的规模将减小，开发单个模块的成本确实减少了；但是，随着模块数目增加，模块之间关系的复杂程度也会增加，设计模块间接口所需要的工作量也将增加，如图所示。</p><img src="/2022/05/18/software/image-20220603155004206.png" class="" title="image-20220603155004206"><h5 id="2-模块独立性"><a href="#2-模块独立性" class="headerlink" title="(2) 模块独立性"></a>(2) 模块独立性</h5><p>定义: 是指软件系统中每个模块只涉及软件要求的具体的子功能, 而和软件系统中其它模块的接口是简单的。</p><p>有效的模块化使软件便于分工协作开发。</p><p>独立的模块比较容易测试和维护。</p><p>模块独立性的度量准则</p><p>内聚:是模块功能强度(一个模块内部各个元素彼此结合的紧密程度)的度量。</p><p>耦合:是模块之间的互相连接的紧密程度的度量。</p><p>模块独立性比较强的模块应是<strong>高内聚低耦合</strong>的模块。</p><h6 id="耦合"><a href="#耦合" class="headerlink" title="耦合"></a>耦合</h6><img src="/2022/05/18/software/image-20220603155242879.png" class="" title="image-20220603155242879"><h6 id="非直接耦合-Nondirect-Coupling"><a href="#非直接耦合-Nondirect-Coupling" class="headerlink" title="非直接耦合(Nondirect Coupling)"></a>非直接耦合(Nondirect Coupling)</h6><p>两个模块之间没有直接关系，它们之间的联系完全是通过主模块的控制和调用来实现的。</p><p>非直接耦合的模块独立性最强。</p><img src="/2022/05/18/software/image-20220603155419800.png" class="" title="image-20220603155419800"><h6 id="数据耦合-Data-Coupling"><a href="#数据耦合-Data-Coupling" class="headerlink" title="数据耦合 (Data Coupling)"></a>数据耦合 (Data Coupling)</h6><p>一个模块访问另一个模块时，彼此之间是通过简单数据参数 (不是控制参数、公共数据结构或外部变量) 来交换输入、输出信息的。也是较理想的耦合。</p><img src="/2022/05/18/software/image-20220603155527500.png" class="" title="image-20220603155527500"><h6 id="特征耦合-Stamp-Coupling"><a href="#特征耦合-Stamp-Coupling" class="headerlink" title="特征耦合 (Stamp Coupling)"></a>特征耦合 (Stamp Coupling)</h6><p>一组模块通过<strong>参数表</strong>传递记录信息，就是特征耦合。这个记录是某一数据结构的子结构，而不是简单变量。</p><h6 id="控制耦合-Control-Coupling"><a href="#控制耦合-Control-Coupling" class="headerlink" title="控制耦合 (Control Coupling)"></a>控制耦合 (Control Coupling)</h6><p>如果一个模块通过传送开关、标志、名字等控制信息，明显地控制选择另一模块的功能，就是控制耦合。</p><img src="/2022/05/18/software/image-20220603155642366.png" class="" title="image-20220603155642366"><h6 id="公共耦合（Common-Coupling）"><a href="#公共耦合（Common-Coupling）" class="headerlink" title="公共耦合（Common Coupling）"></a>公共耦合（Common Coupling）</h6><p>若一组模块都访问同一个公共数据环境，则它们之间的耦合就称为公共耦合。公共的数据环境可以是全局数据结构、共享的通信区、内存的公共覆盖区等。</p><p>公共数据区为全局变量/数组等</p><img src="/2022/05/18/software/image-20220603155707112.png" class="" title="image-20220603155707112"><h6 id="内容耦合-Content-Coupling"><a href="#内容耦合-Content-Coupling" class="headerlink" title="内容耦合 (Content Coupling)"></a>内容耦合 (Content Coupling)</h6><p>一个模块直接访问另一个模块的内部数据。</p><p>一个模块不通过正常入口转到另一模块内部。</p><p>两个模块有一部分程序代码重迭。(只可能出现在汇编语言中)。</p><p>一个模块有多个入口。</p><img src="/2022/05/18/software/image-20220603155804255.png" class="" title="image-20220603155804255"><p>设计原则</p><ul><li>尽量使用数据耦合</li><li>少用控制耦合</li><li>限制使用公共耦合（除非传递大量数据）</li><li>完全不用内容耦合</li></ul><p>实际上，两个模块之间的耦合不只是一种类型，而是多种类型的混合。这就要求设计人员进行分析、比较，逐步加以改进，以提高模块的独立性。</p><h6 id="内聚"><a href="#内聚" class="headerlink" title="内聚"></a>内聚</h6><img src="/2022/05/18/software/image-20220603155955925.png" class="" title="image-20220603155955925"><h6 id="偶然内聚（Coincidental-Cohesion）"><a href="#偶然内聚（Coincidental-Cohesion）" class="headerlink" title="偶然内聚（Coincidental Cohesion）"></a>偶然内聚（Coincidental Cohesion）</h6><p>当模块内各部分之间没有联系，或者即使有联系，这种联系也很松散，则称这种模块为偶然内聚模块，内聚程度最低。</p><p>缺点：</p><p> 1）内容不易理解，很难描述其功能。</p><p> 2）把完整的程序分割到多个模块中，在程序运行时会频繁地互相调用。</p><img src="/2022/05/18/software/image-20220603160108583.png" class="" title="image-20220603160108583"><h6 id="逻辑内聚（Logical-Cohesion）"><a href="#逻辑内聚（Logical-Cohesion）" class="headerlink" title="逻辑内聚（Logical Cohesion）"></a>逻辑内聚（Logical Cohesion）</h6><p>把几种相关的功能组合在一起，每次被调用时，由传送给模块的判定参数来确定该模块应执行哪个功能。</p><p>缺点</p><p> 1）不易修改，因包含多个功能</p><p> 2）需传递控制参数——控制耦合</p><p> 3）未用部分调入内存，影响效率</p><p>但是如果程序只是由一堆if或case和调用其他子程序的语句组成，这种逻辑内聚也是很好的。例如：事件处理器。</p><img src="/2022/05/18/software/image-20220603160127680.png" class="" title="image-20220603160127680"><h6 id="时间内聚（Classical-Cohesion）"><a href="#时间内聚（Classical-Cohesion）" class="headerlink" title="时间内聚（Classical Cohesion）"></a>时间内聚（Classical Cohesion）</h6><p>时间内聚模块大多为多功能模块，但模块的各个功能的执行与时间有关，通常要求所有功能必须在同一时间段内执行。</p><p>例如：</p><p>1.初始化模块和终止模块。</p><p>2.紧急故障处理模块：关闭文件、报警、保留现场必须无中断地同时处理</p><p>时间内聚模块比逻辑内聚模块的内聚程度又稍高一些。在一般情形下，各部分可以以任意的顺序执行，所以它的内部逻辑更简单。</p><h6 id="过程内聚（Procedural-Cohesion）"><a href="#过程内聚（Procedural-Cohesion）" class="headerlink" title="过程内聚（Procedural Cohesion）"></a>过程内聚（Procedural Cohesion）</h6><p>如果一个模块内的处理是相关的，而且必须以特定次序执行，则是过程内聚。</p><p>使用流程图做为工具设计程序时，把流程图中的某一部分划出组成模块，就得到过程内聚模块。<br> 例如，把流程图中的循环部分、判定部分、计算部分分成三个模块，这三个模块都是过程内聚模块。</p><p> 过程内聚仅包含完整功能的一部分。</p><h6 id="通信内聚（Communicational-Cohesion-亦称数据内聚"><a href="#通信内聚（Communicational-Cohesion-亦称数据内聚" class="headerlink" title="通信内聚（Communicational Cohesion) 亦称数据内聚"></a>通信内聚（Communicational Cohesion) 亦称数据内聚</h6><p>一个模块中所有处理元素都使用同一个输入数据和产生同一个输出数据。</p><p>例如：模块A:从文件file读取数据</p><p>​      由数据产生报表A</p><p>​      由数据产生报表B</p><h6 id="顺序内聚"><a href="#顺序内聚" class="headerlink" title="顺序内聚"></a>顺序内聚</h6><p>一个模块中的处理元素和同一功能密切相关，而且这些处理必须顺序执行，则称为顺序内聚。</p><p>根据数据流图划分模块时，通常得到顺序内聚的模块。</p><img src="/2022/05/18/software/image-20220603160607276.png" class="" title="image-20220603160607276"><h6 id="功能内聚-Functional-Cohesion"><a href="#功能内聚-Functional-Cohesion" class="headerlink" title="功能内聚 (Functional Cohesion)"></a>功能内聚 (Functional Cohesion)</h6><p>一个模块中各个部分都是完成某一具体功能必不可少的组成部分，或者说该模块中所有部分都是为了完成一项具体功能而协同工作，紧密联系，不可分割的。则称该模块为功能内聚模块。</p><p>优点：容易修改和维护</p><h5 id="3-提高抽象层次"><a href="#3-提高抽象层次" class="headerlink" title="(3) 提高抽象层次"></a>(3) 提高抽象层次</h5><p>抽象是指忽视一个主题中与当前目标无关的那些方面，以便更充分地注意与当前目标有关的方面。</p><p>当我们进行软件设计时，设计开始时应尽量提高软件的抽象层次，按抽象级别从高到低进行软件设计。</p><h5 id="4-复用性设计"><a href="#4-复用性设计" class="headerlink" title="(4) 复用性设计"></a>(4) 复用性设计</h5><p>复用是指同一事物不做修改或稍加修改就可以多次重复使用。将复用的思想用于软件开发，称为软件复用。</p><p>我们将软件的重用部分称为软构件。</p><p>也就是说，在构造新的软件系统时不必从零做起，可以直接使用已有的软构件即可组装（或加以合理修改）成新的系统。</p><h5 id="5-灵活性设计"><a href="#5-灵活性设计" class="headerlink" title="(5) 灵活性设计"></a>(5) 灵活性设计</h5><p>保证软件灵活性设计的关键是抽象。</p><p>面向对象系统中的类结构类似一座金字塔，越接近金字塔的顶端，抽象程度就越高。</p><p>“抽象”的反义词是“具体”。理想情况下，一个系统的任何代码、逻缉、概念在这个系统中都应该是唯一的，也就是说不存在重复的代码。</p><p>在设计中引入灵活性的方法有：</p><ol><li>降低耦合并提高内聚（易于提高替换能力）； </li><li>建立抽象（创建有多态操作的接口和父类）；</li><li>不要将代码写死（消除代码中的常数）； </li><li>抛出异常（由操作的调用者处理异常）；</li><li>使用并创建可复用的代码。</li></ol><h3 id="4-2结构化设计"><a href="#4-2结构化设计" class="headerlink" title="4.2结构化设计"></a>4.2结构化设计</h3><h4 id="结构化软件设计的任务"><a href="#结构化软件设计的任务" class="headerlink" title="结构化软件设计的任务"></a>结构化软件设计的任务</h4><p>从工程管理的角度，可以将软件设计分为概要设计阶段和详细设计阶段。</p><p>从技术的角度，传统的结构化方法将软件设计划分为<strong>体系结构设计、数据设计、接口设计和过程设计</strong>4部分；</p><p>面向对象方法则将软件设计划分为体系结构设计、类设计/数据设计、接口设计和构件级设计4部分。</p><img src="/2022/05/18/software/image-20220603161041687.png" class="" title="image-20220603161041687"><p>体系结构设计：体系结构设计定义软件的主要结构元素及其之间的关系。通常称为模块设计。</p><p>接口设计（内部、外部接口）：接口设计描述用户界面，软件和其他硬件设备、其他软件系统及使用人员的外部接口，以及各种构件之间的内部接口。</p><p>数据设计：传统方法主要根据需求阶段所建立的实体—关系图（ER图）来确定软件涉及的文件系统的结构及数据库的表结构。 </p><p>过程设计：过程设计的主要工作是确定软件各个组成部分内的算法及内部数据结构，并选定某种过程的表达形式来描述各种算法。</p><h4 id="结构化设计与结构化分析的关系"><a href="#结构化设计与结构化分析的关系" class="headerlink" title="结构化设计与结构化分析的关系"></a>结构化设计与结构化分析的关系</h4><img src="/2022/05/18/software/image-20220603161117041.png" class="" title="image-20220603161117041"><p>结构化设计方法的实施要点</p><p>(1) 研究、分析和审查数据流图。</p><p>(2) 根据数据流图决定问题的类型：变换型和事务型。针对两种不同的类型分别进行分析处理。</p><p>(3) 由数据流图推导出系统的初始结构图。</p><p>(4) 利用一些启发式原则来改进系统的初始结构图，直到得到符合要求的结构图为止。</p><p>(5) 根据分析模型中的实体关系图和数据字典进行数据设计，包括数据库设计或数据文件的设计。</p><p>(6) 在上面设计的基础上，并依据分析模型中的加工规格说明、状态转换图进行过程设计。</p><p>(7) 制定测试计划。</p><h4 id="模块结构及表示"><a href="#模块结构及表示" class="headerlink" title="模块结构及表示"></a>模块结构及表示</h4><p>一般通过功能划分过程来完成软件结构设计。功能划分过程从需求分析确立的目标系统的模型出发，对整个问题进行分割，使其每一部分用一个或几个软件模块加以解决，整个问题就解决了。</p><img src="/2022/05/18/software/image-20220603161953508.png" class="" title="image-20220603161953508"><h5 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h5><p>一个软件系统通常由很多模块组成，结构化程序设计中的函数和子程序都可称为模块，它是程序语句按逻辑关系建立起来的组合体。</p><p>模块用矩形框表示，并用模块的名字标记它。</p><img src="/2022/05/18/software/image-20220603162026214.png" class="" title="image-20220603162026214"><p>大模块还可以分解，不能分解的最小模块称为原子模块。如果一个软件系统的全部数据计算或处理都由原子模块完成，其他非原子模块仅执行控制或协调功能，这样的系统就是完全因子分解的系统。完全因子分解的系统被认为是最好的系统。但实际上大多数做不到。</p><h5 id="模块分类"><a href="#模块分类" class="headerlink" title="模块分类"></a>模块分类</h5><img src="/2022/05/18/software/image-20220603162404141.png" class="" title="image-20220603162404141"><h5 id="模块的结构"><a href="#模块的结构" class="headerlink" title="模块的结构"></a>模块的结构</h5><p>模块结构最普通的形式就是树状结构和网状结构，如图所示。</p><img src="/2022/05/18/software/image-20220603163158886.png" class="" title="image-20220603163158886"><h5 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h5><p>结构图（structure chart，SC）是精确表达模块结构的图形表示工具。</p><p>(1) 模块的调用关系和接口：在结构图中，两个模块之间用单向箭头连接。</p><p>(2) 模块间的信息传递：当一个模块调用另一个模块时，调用模块把数据或控制信息传送给被调用模块，以使被调用模块能够运行。 </p><p>模块间的调用关系和接口表示 </p><img src="/2022/05/18/software/image-20220603163259211.png" class="" title="image-20220603163259211"><p>(3) 条件调用和循环调用 ：<strong>当模块A有条件地调用另一个模块B时，在模块A的箭头尾部标以一个菱形符号</strong>；当一个模块<strong>A反复地调用</strong>模块C和模块D时，在调用箭头尾部则标以一个弧形符号。</p><img src="/2022/05/18/software/image-20220603163334550.png" class="" title="image-20220603163334550"><p>(4) 结构图的形态特征。在图中，上级模块调用下级模块，它们之间存在主从关系。相关概念：宽度、深度、扇入、扇出。</p><img src="/2022/05/18/software/image-20220603163405446.png" class="" title="image-20220603163405446"><p>深度: 表示软件结构中从顶层模块到最底层模块的层数</p><p>宽度: 是软件结构在同一层次上的模块总数的最大值.一般来说,宽度越大系统就越复杂.</p><p>扇出: 指一个模块直接控制的下属模块个数,经验表明,一个设计的好的典型系统的平均扇出通常是3或4个,太多或太少都不好.</p><p>扇入: 指一个模块的直接上属模块个数</p><h4 id="数据结构及表示"><a href="#数据结构及表示" class="headerlink" title="数据结构及表示"></a>数据结构及表示</h4><p>数据结构是数据的各个元素之间逻辑关系的一种表示。</p><p>数据结构设计应确定数据的组织、存取方式、相关程度，以及信息的不同处理方法。</p><p>数据结构的组织方法和复杂程度可以灵活多样，但典型的数据结构种类是有限的，它们是构成一些更复杂结构的基本构件块。</p><img src="/2022/05/18/software/image-20220603163518942.png" class="" title="image-20220603163518942"><h3 id="4-3体系结构设计"><a href="#4-3体系结构设计" class="headerlink" title="4.3体系结构设计"></a>4.3体系结构设计</h3><h4 id="基于数据流方法的设计过程"><a href="#基于数据流方法的设计过程" class="headerlink" title="基于数据流方法的设计过程"></a>基于数据流方法的设计过程</h4><p>基于数据流的设计方法也称为过程驱动的设计方法；</p><p>这种方法与软件需求分析阶段的结构化分析方法相衔接，可以很方便地将用数据流图表示的信息转换成程序结构的设计描述；</p><p>这种方法还能和编码阶段的“结构化程序设计方法”相适应，成为常用的结构化设计方法。</p><img src="/2022/05/18/software/image-20220603163639268.png" class="" title="image-20220603163639268"><h4 id="典型的数据流类型和系统结构"><a href="#典型的数据流类型和系统结构" class="headerlink" title="典型的数据流类型和系统结构"></a>典型的数据流类型和系统结构</h4><p>典型的数据流类型有变换型数据流和事务型数据流，数据流的类型不同，得到的系统结构也不同。</p><p>通常，一个系统中的所有数据流都可以认为是变换流，但是，当遇到有明显事务特性的数据流时，建议采用事务型映射方法进行设计。</p><h5 id="变换型数据流和变换型系统结构图"><a href="#变换型数据流和变换型系统结构图" class="headerlink" title="变换型数据流和变换型系统结构图"></a>变换型数据流和变换型系统结构图</h5><p>变换型数据处理问题的工作过程大致分为3步，即取得数据、变换数据和给出数据，如图所示。</p><img src="/2022/05/18/software/image-20220603163711094.png" class="" title="image-20220603163711094"><p>变换型系统的结构图由输入、中心变换和输出3部分组成。</p><img src="/2022/05/18/software/image-20220603163812405.png" class="" title="image-20220603163812405"><h5 id="事务型数据流和事务型系统结构图"><a href="#事务型数据流和事务型系统结构图" class="headerlink" title="事务型数据流和事务型系统结构图"></a>事务型数据流和事务型系统结构图</h5><p>通常接受一项事务，根据事务处理的特点和性质，选择分派一个适当的处理单元，然后给出结果。</p><p>完成选择分派任务的部分称为事务处理中心，或分派部件。</p><img src="/2022/05/18/software/image-20220603163959630.png" class="" title="image-20220603163959630"><p>结构图</p><img src="/2022/05/18/software/image-20220603164006927.png" class="" title="image-20220603164006927"><p>简化的事务型系统结构图</p><p>事务型系统的结构图可以有多种不同的形式，如有多层操作层或没有操作层。</p><p>如果调度模块并不复杂，可将其归入事务中心模块。</p><img src="/2022/05/18/software/image-20220603164021844.png" class="" title="image-20220603164021844"><h4 id="变换型映射方法"><a href="#变换型映射方法" class="headerlink" title="变换型映射方法"></a>变换型映射方法</h4><p>系统数据处理问题的处理流程总能表示为变换型数据流图，进一步可采用变换型映射方法建立系统的结构图。</p><p>也可能遇到明显的事务数据处理问题，这时可采用事务型映射方法。</p><p>变换分析方法的步骤</p><p>(1) 重画数据流图。在需求分析阶段得到的数据流图侧重于描述系统如何加工数据，而重画数据流图的出发点是描述系统中的数据是如何流动的。</p><p>(2)在数据流图上区分系统的逻辑输入、逻辑输出和中心变换部分。</p><img src="/2022/05/18/software/image-20220603164215622.png" class="" title="image-20220603164215622"><p>(3) 进行一级分解，设计系统模块结构的顶层和第一层。自顶向下设计的关键是找出系统树形结构图的根或顶层模块。</p><p>首先设计一个主模块，并用程序的名字为它命名，然后将它画在与中心变换相对应的位置上。</p><p>第1层设计：为每个逻辑输入设计一个输入模块，它的功能是为主模块提供数据；为每个逻辑输出设计一个输出模块，它的功能是将主模块提供的数据输出；为中心变换设计一个变换模块，它的功能是将逻辑输入转换成逻辑输出。 第一层模块与主模块之间传送的数据应与数据流图相对应，如图所示。</p><img src="/2022/05/18/software/image-20220603164338830.png" class="" title="image-20220603164338830"><p>(4) 进行二级分解，设计中、下层模块。</p><p>这一步工作是自顶向下，逐层细化，为每一个输入模块、输出模块、变换模块设计它们的从属模块。</p><p>设计下层模块的顺序是任意的。但一般是先设计输入模块的下层模块。</p><h4 id="事务型映射方法"><a href="#事务型映射方法" class="headerlink" title="事务型映射方法"></a>事务型映射方法</h4><p>事务分析也是从分析数据流图开始，自顶向下，逐步分解，建立系统的结构图。</p><img src="/2022/05/18/software/image-20220603164404468.png" class="" title="image-20220603164404468"><p>事务分析方法的步骤</p><p>(1) 识别事务源。利用数据流图和数据词典，从问题定义和需求分析的结果中，找出各种需要处理的事务。</p><p>(2) 规定适当的事务型结构。在确定了该数据流图具有事务型特征之后，根据模块划分理论，建立适当的事务型结构。</p><p>(3) 识别各种事务和它们定义的操作。</p><p>(4) 注意利用公用模块。</p><p>(5) 建立事务处理模块。对每一事务，或对联系密切的一组事务，建立一个事务处理模块。</p><p>(6) 对事务处理模块规定它们全部的下层操作模块。</p><p>(7) 对操作模块规定它们的全部细节模块。</p><p>大型的软件系统通常是变换型结构和事务型结构的混合结构，所以，我们通常利用以变换分析为主，事务分析为辅的方式进行软件结构设计。</p><p>混合结构的例子</p><img src="/2022/05/18/software/image-20220603164444157.png" class="" title="image-20220603164444157"><h4 id="软件模块结构的改进方法"><a href="#软件模块结构的改进方法" class="headerlink" title="软件模块结构的改进方法"></a>软件模块结构的改进方法</h4><h5 id="1-模块功能的完善化。"><a href="#1-模块功能的完善化。" class="headerlink" title="(1)模块功能的完善化。"></a>(1)模块功能的完善化。</h5><p>一个完整的功能模块，不仅能够完成指定的功能，而且还应当能够告诉使用者完成任务的状态，以及不能完成的原因。也就是说，一个完整的模块应当有以下几部分。</p><p>① 执行规定的功能的部分。</p><p>② 出错处理的部分。 当模块不能完成规定的功能时，必须回送出错标志，向它的调用者报告出现这种例外情况的原因。</p><p>③ 如果需要返回一系列数据给它的调用者，在完成数据加工或结束时，应当给它的调用者返回一个“结束标志”。</p><h5 id="2-消除重复功能，改善软件结构。"><a href="#2-消除重复功能，改善软件结构。" class="headerlink" title="(2) 消除重复功能，改善软件结构。"></a>(2) 消除重复功能，改善软件结构。</h5><p>① 完全相似。在结构上完全相似，可能只是在数据类型上不一致。此时可以采取完全合并的方法。图a</p><p>② 局部相似：此时，不可以把两者合并为一，如图(b)所示，因为这样在合并后的模块内部必须设置许多查询开关，如图(f)所示。 </p><img src="/2022/05/18/software/image-20220603164558998.png" class="" title="image-20220603164558998"><h5 id="3-模块的作用范围应在控制范围之内。"><a href="#3-模块的作用范围应在控制范围之内。" class="headerlink" title="(3) 模块的作用范围应在控制范围之内。"></a>(3) 模块的作用范围应在控制范围之内。</h5><p>模块的控制范围包括它本身及其所有的从属模块。</p><p>模块的作用范围是指模块内一个判定的作用范围，凡是受这个判定影响的所有模块都属于这个判定的作用范围。</p><p>如果一个判定的作用范围包含在这个判定所在模块的控制范围之内，则这种结构是简单的。 </p><img src="/2022/05/18/software/image-20220603164618732.png" class="" title="image-20220603164618732"><p>图(b)表明作用范围不在控制范围之内。模块G做出一个判定之后，若需要模块 C工作，则必须把信号回送给模块D，再由D把信号回送给模块B。图中加黑框表示判定的作用范围。</p><img src="/2022/05/18/software/image-20220603164655052.png" class="" title="image-20220603164655052"><p>图(c)虽然表明模块的作用范围是在控制范围之内，可是判定所在模块TOP所处层次太高，这样也需要经过不必要的信号传送，增加了数据的传送量。</p><img src="/2022/05/18/software/image-20220603164634972.png" class="" title="image-20220603164634972"><p>图(d) 表明作用范围在控制范围之内，只有一个判定分支有一个不必要的穿越，是一个较好的结构；</p><img src="/2022/05/18/software/image-20220603165055924.png" class="" title="image-20220603165055924"><p>图(e)所示为一个比较理想的结构。</p><img src="/2022/05/18/software/image-20220603165100837.png" class="" title="image-20220603165100837"><p>如果在设计过程中，发现作用范围不在控制范围内，可采用如下办法把作用范围移到控制范围之内。</p><p>① 将判定所在模块合并到父模块中，使判定处于较高层次。</p><p>② 将受判定影响的模块下移到控制范围内。</p><p>③ 将判定上移到层次中较高的位置。</p><h5 id="4-尽可能减少高扇出结构，随着深度增大扇入。"><a href="#4-尽可能减少高扇出结构，随着深度增大扇入。" class="headerlink" title="(4) 尽可能减少高扇出结构，随着深度增大扇入。"></a>(4) 尽可能减少高扇出结构，随着深度增大扇入。</h5><p>模块的扇出数是指模块调用子模块的个数。如果一个模块的扇出数过大，就意味着该模块过分复杂，需要协调和控制过多的下属模块。</p><p>出现这种情况是由于缺乏中间层次，所以应当适当增加中间层次的控制模块。如图所示。 </p><img src="/2022/05/18/software/image-20220603165146140.png" class="" title="image-20220603165146140"><p>一个模块的扇入数越大，则共享该模块的上级模块数目越多。扇入大，是有好处的。</p><p>但如果一个模块的扇入数太大，如超过8，而它又不是公用模块，说明该模块可能具有多个功能。</p><p>在这种情况下应当对它进一步分析并将其功能分解。</p><img src="/2022/05/18/software/image-20220603165213083.png" class="" title="image-20220603165213083"><h5 id="5-避免或减少使用病态连接。"><a href="#5-避免或减少使用病态连接。" class="headerlink" title="(5) 避免或减少使用病态连接。"></a>(5) 避免或减少使用病态连接。</h5><p>应限制使用如下3种病态连接。</p><img src="/2022/05/18/software/image-20220603165227117.png" class="" title="image-20220603165227117"><h5 id="6-模块的大小要适中。"><a href="#6-模块的大小要适中。" class="headerlink" title="(6) 模块的大小要适中。"></a>(6) 模块的大小要适中。</h5><p>模块的大小，可以用模块中所含语句的数量的多少来衡量。</p><p>通常规定其语句行数为50～100，保持在一页纸之内，最多不超过500行。 </p><h5 id="例-银行储蓄系统"><a href="#例-银行储蓄系统" class="headerlink" title="例 银行储蓄系统"></a>例 银行储蓄系统</h5><p>1.对银行储蓄系统的数据流图进行复查并精化，得到如图所示的数据流图。</p><img src="/2022/05/18/software/image-20220603165308254.png" class="" title="image-20220603165308254"><p>2.确定数据流图具有变换特性还是事务特性。通过对精化后的数据流图进行分析，可以看到整个系统是对存款及取款两种不同的事务进行处理，因此具有事务特性。</p><p>3.确定输入流和输出流的边界</p><img src="/2022/05/18/software/image-20220603165414332.png" class="" title="image-20220603165414332"><p>4.完成第一级分解。分解后的结构图如图所示。</p><img src="/2022/05/18/software/image-20220603165431148.png" class="" title="image-20220603165431148"><p>5.完成第二级分解。对上图中的“输入数据”、“输出数据”和“调度”模块进行分解，得到未经精化的输入结构、输出结构和事务结构，分别如图(a)、(b)和(c)所示。将上面的3部分合在一起，得到初始的软件结构，如图所示。</p><img src="/2022/05/18/software/image-20220603165515230.png" class="" title="image-20220603165515230"><img src="/2022/05/18/software/image-20220603165536301.png" class="" title="image-20220603165536301"><p>第6步：对软件结构进行精化。</p><p>(1) 由于调度模块下只有两种事务，因此，可以将调度模块合并到上级模块中，如图所示。</p><img src="/2022/05/18/software/image-20220603165711758.png" class="" title="image-20220603165711758"><p>(2) “检查密码”模块的作用范围不在其控制范围之内（即“输入密码”模块不在“检查密码”模块的控制范围之内），需对其进行调整，如图所示。</p><img src="/2022/05/18/software/image-20220603165827354.png" class="" title="image-20220603165827354"><p>(3) 提高模块的独立性，并对“输入事务”模块进行细化。也可以将“检查密码”功能合并到其上级模块中。</p><img src="/2022/05/18/software/image-20220603165855910.png" class="" title="image-20220603165855910"><h3 id="4-4接口设计"><a href="#4-4接口设计" class="headerlink" title="4.4接口设计"></a>4.4接口设计</h3><h4 id="接口设计概述"><a href="#接口设计概述" class="headerlink" title="接口设计概述"></a>接口设计概述</h4><p>接口设计的依据是数据流图中的自动化系统边界。</p><p>接口设计主要包括3个方面：</p><ol><li>模块或软件构件间的接口设计；</li><li>软件与其他软硬件系统之间的接口设计；</li><li>软件与人（用户）之间的交互设计。人机交互（用户）界面是人机交互的主要方式</li></ol><h4 id="人机交互界面"><a href="#人机交互界面" class="headerlink" title="人机交互界面"></a>人机交互界面</h4><p>在设计阶段，必须根据需求把交互细节加入到用户界面设计中，包括人机交互所必须的实际显示和输入。</p><p>人机交互界面是给用户使用的，为了设计好人机交互界面，设计者需要了解以下信息：</p><p>（１）用户界面应具有的特性？</p><p>（２）使用软件的用户是什么人？</p><p>（３）用户怎样学习与新的计算机系统进行交互？</p><p>（４）用户需要完成哪些工作？</p><h5 id="用户界面应具备的特性"><a href="#用户界面应具备的特性" class="headerlink" title="用户界面应具备的特性"></a>用户界面应具备的特性</h5><p>可使用性：是用户界面设计最重要的目标．包括使用简单、界面一致、拥有help帮助功能、快速的系统响应和低的系统成本、具有容错能力等。</p><p>灵活性：考虑到用户的特点、能力和知识水平，应该使用户接口满足不同用户的要求。因此，对不同的用户，应有不同的界面形式，但不同的界面形式不应影响任务的完成。</p><p>可靠性：用户界面的可靠性是指无故障使用的间隔时间。用户界面应能保证用户正确、可靠地使用系统，保证有关程序和数据的安全性。</p><h5 id="用户类型"><a href="#用户类型" class="headerlink" title="用户类型"></a>用户类型</h5><p>外行型：以前从未使用过计算机系统的用户。</p><p>初学型：尽管对新的系统不熟悉，但对计算机还有一些使用经验的用户。</p><p>熟练型：对一个系统有相当多的经验，能够熟练操作的用户。</p><p>专家型：这一类用户了解系统内部的构造，有关于系统工作机制的专业知识，具有维护和修改基本系统的能力。专家型需要为他们提供能够修改和扩充系统能力的复杂界面。</p><h5 id="界面设计类型"><a href="#界面设计类型" class="headerlink" title="界面设计类型"></a>界面设计类型</h5><img src="/2022/05/18/software/image-20220603170300997.png" class="" title="image-20220603170300997"><p>在选用界面形式的时候，应当考虑每种类型的优点和限制，可以从以下几个方面来考察：</p><p>(1) 使用的难易程度：对于没有经验的用户，该界面使用的难度有多大。</p><p>(2) 学习的难易程度：学习该界面的命令和功能的难度有多大。</p><p>(3) 操作速度：在完成一个指定操作时，该界面在操作步骤、击键和反应时间等方面效率有多高。</p><p>(4) 复杂程度：该界面提供了什么功能、能否用新的方式组合这些功能以增强界面的功能。</p><p>(5) 控制：人机交互时，是由计算机还是由人发起和控制对话。</p><p>(6) 开发的难易程度：该界面设计是否有难度、开发工作量有多大。</p><h5 id="设计详细的交互"><a href="#设计详细的交互" class="headerlink" title="设计详细的交互"></a>设计详细的交互</h5><p>人机交互的设计有若干准则，包括以下内容：</p><p>(1) 一致性。采用一致的术语、一致的步骤和一致的活动。</p><p>(2) 操作步骤少。使击键或点击鼠标的次数减到最少，甚至要减少做某些事所需的下拉菜单的距离。</p><p>(3) 不要“哑播放”。</p><p>(4) 提供Undo功能。</p><p>(5) 减少人脑的记忆负担。不应该要求人从一个窗口中记住某些信息，然后在另一个窗口中使用。</p><p>(6) 提高学习效率。为高级特性提供联机帮助，以便用户在需要时容易找到。</p><h3 id="4-5数据设计"><a href="#4-5数据设计" class="headerlink" title="4.5数据设计"></a>4.5数据设计</h3><h4 id="文件设计"><a href="#文件设计" class="headerlink" title="文件设计"></a>文件设计</h4><p>以下几种情况适合于选择文件存储。</p><p>(1) 数据量较大的非结构化数据，如多媒体信息。</p><p>(2) 数据量大，信息松散，如历史记录、档案文件等。</p><p>(3) 非关系层次化数据，如系统配置文件。</p><p>(4) 对数据的存取速度要求极高的情况。</p><p>(5) 临时存放的数据。</p><p>一般要根据文件的特性，来确定文件的组织方式。</p><p>(1) 顺序文件：这类文件分两种，一种是连续文件，另一种是串联文件。  </p><p>(2) 直接存取文件：可根据记录关键字的值，通过计算直接得到记录的存放地址。</p><p>(3) 索引顺序文件：其基本数据记录按顺序文件组织，记录排列顺序必须按关键字值升序或降序安排，且具有索引部分，索引部分也按同一关键字进行索引。 </p><p>(4) 分区文件：这类文件主要用于存放程序。它由若干称为成员的顺序组织的记录组和索引组成。每一个成员就是一个程序，由于各个程序的长度不同，所以各个成员的大小也不同，需要利用索引给出各个成员的程序名、开始存放位置和长度。 </p><p>(5) 虚拟存储文件：这是基于操作系统的请求页式存储管理功能而建立的索引顺序文件。 </p><h4 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h4><p>根据数据库的组织，可以将数据库分为网状数据库、层次数据库、关系数据库、面向对象数据库、文档数据库、多维数据库等。</p><p>关系数据库最成熟，应用也最广泛，一般情况下，大多数设计者都会选择关系数据库。</p><p>在结构化设计方法中，很容易将结构化分析阶段建立的实体—关系模型映射到关系数据库中。  </p><h5 id="数据对象实体的映射"><a href="#数据对象实体的映射" class="headerlink" title="数据对象实体的映射"></a>数据对象实体的映射</h5><p>一个数据对象（实体）可以映射为一个表或多个表，当分解为多个表时，可以采用横切和竖切的方法。</p><p>竖切常用于实例较少而属性很多的对象。通常将经常使用的属性放在主表中，而将其他一些次要的属性放到其他表中。</p><p>横切常常用于记录与时间相关的对象。往往在主表中只记录最近的对象，而将以前的记录转到对应的历史表中。</p><h5 id="关系的映射"><a href="#关系的映射" class="headerlink" title="关系的映射"></a>关系的映射</h5><p>一对一关系的映射：可以在两个表中都引入外键，进行双向导航。也可以将两个数据对象组合成一张单独的表。</p><p>一对多关系的映射：可以将关联中的“一”端毫无变化地映射到一张表，将关联中表示“多”的端上的数据对象映射到带有外键的另一张表，使外键满足关系引用的完整性。</p><p>多对多关系的映射：为了表示多对多关系，关系模型必须引入一个关联表，将两个数据实体之间的多对多关系转换成两个一对多关系。</p><h3 id="4-6过程设计"><a href="#4-6过程设计" class="headerlink" title="4.6过程设计"></a>4.6过程设计</h3><p>表达过程规格说明的工具称为过程描述工具，可以将过程描述工具分为以下3类。</p><p>(1) 图形工具：把过程的细节用图形方式描述出来，如程序流程图、N-S图、PAD图、决策树等。</p><p>(2) 表格工具：用一张表来表达过程的细节。这张表列出了各种可能的操作及其相应的条件，即描述了输入、处理和输出信息，如决策表。</p><p>(3) 语言工具：用某种类高级语言（称为伪代码）来描述过程的细节，如很多数据结构教材中使用类Pascal、类C语言来描述算法。</p><h4 id="结构化程序设计"><a href="#结构化程序设计" class="headerlink" title="结构化程序设计"></a>结构化程序设计</h4><p>最早由E. W. Dijkstra提出;建议从高级语言中取消GOTO语句；1966年，Bohm和Jacopini证明：只用三种基本的控制结构“顺序”、“选择”和“循环”就能实现任何单入口和单出口的没有“死循环”的程序。</p><p>概念：如果一个程序的代码块仅仅通过顺序、选择和循环这三种基本控制结构进行连接，并且每个代码块只有一个入口和一个出口，则称这个程序是结构化的。</p><p>结构程序设计的主要原则</p><p>(1)使用语言中的顺序、选择、重复等有限的基本控制结构表示程序逻辑。</p><p>(2)选用的控制结构只准许有一个入口和一个出口。</p><p>(3)程序语句组成容易识别的块（Block），每块只有一个入口和一个出口。</p><p>(4)复杂结构应该用基本控制结构进行组合嵌套来实现。</p><p>(5)语言中没有的控制结构，可用一段等价的程序段模拟， 但要求该程序段在整个系统中应前后一致。</p><p>(6) 严格控制GOTO语句，仅在下列情形才可使用：</p><p>用非结构化的程序设计语言去实现结构化的构造。</p><p>若不使用GOTO语句就会使程序功能模糊。</p><p>在某种可以改善而不是损害程序可读性的情况下。例如，在查找结束时，文件访问结束时，出现错误情况要从循环中转出时，使用布尔变量和条件结构来实现就不如用GOTO语句来得简洁易懂。</p><p>(7) 在程序设计过程中，尽量采用自顶向下(Top－Down)、逐步细化(Stepwise Refinement)的原则，由粗到细，一步步展开。</p><h4 id="程序流程图"><a href="#程序流程图" class="headerlink" title="程序流程图"></a>程序流程图</h4><p>程序流程图也称为程序框图，是软件开发者最熟悉的算法表达工具。</p><p>早期的流程图也存在一些缺点。特别是表示程序控制流程的箭头，使用的灵活性极大，程序员可以不受任何约束，随意转移控制，这将不符合结构化程序设计的思想。</p><p>为使用流程图描述结构化程序，必须对流程图加以限制。</p><p>程序流程图的基本控制结构</p><p>(1) 顺序型：几个连续的加工步骤依次排列构成。</p><p>(2) 选择型：由某个逻辑判断式的取值决定选择两个加工中的一个。</p><p>(3) 先判定（while）型循环：在循环控制条件成立时，重复执行特定的加工。</p><p>(4) 后判定（until）型循环：重复执行某些特定的加工，直至控制条件成立。</p><p>(5) 多情况（case）型选择：列举多种加工情况，根据控制变量的取值，选择执行其一。</p><p>基本控制结构</p><img src="/2022/05/18/software/image-20220603171046082.png" class="" title="image-20220603171046082"><img src="/2022/05/18/software/image-20220603171053365.png" class="" title="image-20220603171053365"><p>符号</p><img src="/2022/05/18/software/image-20220603171100021.png" class="" title="image-20220603171100021"><p>循环标准符号</p><img src="/2022/05/18/software/image-20220603171129259.png" class="" title="image-20220603171129259"><p>注释符号使用</p><img src="/2022/05/18/software/image-20220603171141332.png" class="" title="image-20220603171141332"><p>多选择判断</p><img src="/2022/05/18/software/image-20220603171235164.png" class="" title="image-20220603171235164"><h4 id="N-S图"><a href="#N-S图" class="headerlink" title="N-S图"></a>N-S图</h4><p>Nassi和Shneiderman 提出了一种符合结构化程序设计原则的图形描述工具，叫做盒图 （box-diagram），也叫做N-S图。</p><p>在N-S图中，为了表示5种基本控制结构，规定了5种图形构件。</p><img src="/2022/05/18/software/image-20220603171322961.png" class="" title="image-20220603171322961"><img src="/2022/05/18/software/image-20220603171326493.png" class="" title="image-20220603171326493"><h4 id="PAD图"><a href="#PAD图" class="headerlink" title="PAD图"></a>PAD图</h4><p>PAD（problem analysis diagram）是日本日立公司提出，由程序流程图演化来的，用结构化程序设计思想表现程序逻辑结构的图形工具。</p><p>PAD也设置了5种基本控制结构的图式，并允许递归使用。</p><img src="/2022/05/18/software/image-20220603171352726.png" class="" title="image-20220603171352726"><img src="/2022/05/18/software/image-20220603171357563.png" class="" title="image-20220603171357563"><h4 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h4><p>伪代码是一种介于自然语言和形式化语言之间的半形式化语言，是一种用于描述功能模块的算法设计和加工细节的语言，也称为程序设计语言（Program Design Language，PDL）。</p><p>伪码的语法规则分为“外语法”和“内语法”。</p><p>外语法应当符合一般程序设计语言常用语句的语法规则；</p><p>内语法可以用英语中一些简单的句子、短语和通用的数学符号来描述程序应执行的功能。</p><p>简单陈述句结构：避免复合语句。</p><p>判定结构：IF_THEN_ELSE或CASE_OF结构。</p><p>重复结构：WHILE_DO或REPEAT_UNTIL结构。</p><img src="/2022/05/18/software/image-20220603171513748.png" class="" title="image-20220603171513748"><p>(1) 有固定的关键字外语法，提供全部结构化控制结构、数据说明和模块特征。外语法的关键字是有限的词汇集，它们能对伪代码正文进行结构分割，使之变得易于理解。</p><p>(2) 内语法使用自然语言来描述处理特性，为开发者提供方便，提高可读性。</p><p>(3) 有数据说明机制，包括简单的（如标量和数组）与复杂的（如链表和层次结构）的数据结构。</p><p>(4) 有子程序定义与调用机制，用以表达各种方式的接口说明。</p><h4 id="自顶向下、逐步细化的设计过程"><a href="#自顶向下、逐步细化的设计过程" class="headerlink" title="自顶向下、逐步细化的设计过程"></a>自顶向下、逐步细化的设计过程</h4><p>主要包括两个方面：</p><p>一是将复杂问题的解法分解和细化成由若干个模块组成的层次结构；</p><p>二是将每个模块的功能逐步分解细化为一系列的处理。</p><p>在处理较大的复杂任务时，常采取“模块化”的方法，即在程序设计时不是将全部内容都放在同一个模块中，而是分成若干个模块，每个模块实现一个功能。</p><p>模块分解完成后，下一步的任务就是将每个模块的功能逐步分解细化为一系列的处理。</p><p>在概要设计阶段，我们已经采用自顶向下、逐步细化的方法，把复杂问题的解法分解和细化成了由许多功能模块组成的层次结构的软件系统。</p><p>在详细设计和编码阶段，我们还应当采取自顶向下、逐步求精的方法，把模块的功能逐步分解，细化为一系列具体的步骤，进而翻译成一系列用某种程序设计语言写成的程序。</p><p>自顶向下、逐步细化方法举例</p><p>用筛选法求100以内的素数。所谓的筛选法，就是从2到100中去掉2,3,5,7的倍数，剩下的就是100以内的素数。</p><p>1.首先按程序功能写出一个框架</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">main （） &#123; <br> 建立<span class="hljs-number">2</span>到<span class="hljs-number">100</span>的数组A[ ]，其中A[i]＝i；- - - - - <span class="hljs-number">1</span> <br> 建立<span class="hljs-number">2</span>到<span class="hljs-number">10</span>的素数表B[ ]，存放<span class="hljs-number">2</span>到<span class="hljs-number">10</span>以内的素数；- - <span class="hljs-number">2</span><br> 若A[i]＝i是B[ ]中任一数的倍数，则剔除A[i]； - - <span class="hljs-number">3</span> <br> 输出A[ ]中所有没有被剔除的数； - - - - - - - <span class="hljs-number">4</span> <br> &#125; <br></code></pre></td></tr></table></figure><p>2.上述框架中每一个加工语句都可进一步细化成一个循环语句 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">main （） &#123;<br>   <span class="hljs-comment">/*建立2到100的数组A[ ]，其中A[i]＝i*/</span>    - -  <span class="hljs-number">1</span><br>   <span class="hljs-keyword">for</span> （i = <span class="hljs-number">2</span>；i &lt;= <span class="hljs-number">100</span>；i++）A[i] = i；<br>   <span class="hljs-comment">/* 建立2到10的素数表B[ ]，存放2到10以内的素数*/</span>  - <span class="hljs-number">2</span><br>   B[<span class="hljs-number">1</span>] =<span class="hljs-number">2</span>；  B[<span class="hljs-number">2</span>] = <span class="hljs-number">3</span>；  B[<span class="hljs-number">3</span>] = <span class="hljs-number">5</span>；  B[<span class="hljs-number">4</span>] = <span class="hljs-number">7</span>；<br>   <span class="hljs-comment">/*若A[i]＝i是B[ ]中任一数的倍数，则剔除A[i]*/</span>  - - <span class="hljs-number">3</span><br>   <span class="hljs-keyword">for</span> （j = <span class="hljs-number">1</span>； j &lt;= <span class="hljs-number">4</span>； j++）<br>     检查A[ ]所有的数能否被B[j]整除并将能被整除的数从A[]中剔除； <br>   <span class="hljs-comment">/*输出A[ ]中所有没有被剔除的数*/</span>   - - - - - - - <span class="hljs-number">4</span><br>   <span class="hljs-keyword">for</span> （i = <span class="hljs-number">2</span>； i &lt;= <span class="hljs-number">100</span>； i++）<br>     若A[i]没有被剔除，则输出之<br> &#125;<br><br></code></pre></td></tr></table></figure><p>自顶向下、逐步求精的方法的优点 </p><p>(1) 自顶向下、逐步求精方法符合人们解决复杂问题的普遍规律。可提高软件开发的成功率和生产率。</p><p>(2) 用先全局后局部，先整体后细节，先抽象后具体的逐步求精的过程开发出来的程序具有清晰的层次结构，因此程序容易阅读和理解。</p><p>(3) 程序自顶向下、逐步细化，分解成树形结构。 在同一层的结点上做细化工作，相互之间没有关系，因此它们之间的细化工作相互独立。在任何一步发生错误，一般只影响它下层的结点，同一层的其他结点不受影响。 </p><p>(4) 程序清晰和模块化，使得在修改和重新设计一个软件时，可复用的代码量最大。</p><p>(5) 程序的逻辑结构清晰，有利于程序正确性证明。</p><p>(6) 每一步工作仅在上层结点的基础上做不多的设计扩展，便于检查。</p><p>(7) 有利于设计的分工和组织工作。</p><h3 id="4-7软件设计规格说明"><a href="#4-7软件设计规格说明" class="headerlink" title="4.7软件设计规格说明"></a>4.7软件设计规格说明</h3><p>国家标准GB/T 8567—2006《计算机软件文档编制规范》中有关软件总体设计的文档是《系统/子系统设计（结构设计）说明（SSDD）》， 描述了系统或子系统的系统级或子系统级设计与体系结构设计。 </p><h3 id="4-8软件设计评审"><a href="#4-8软件设计评审" class="headerlink" title="4.8软件设计评审"></a>4.8软件设计评审</h3><h1 id="Part3-面向对象分析与设计方法"><a href="#Part3-面向对象分析与设计方法" class="headerlink" title="Part3.面向对象分析与设计方法"></a>Part3.面向对象分析与设计方法</h1><h2 id="5-面向对象方法与UML"><a href="#5-面向对象方法与UML" class="headerlink" title="5.面向对象方法与UML"></a>5.面向对象方法与UML</h2><h3 id="5-1面向对象的概念与开发方法"><a href="#5-1面向对象的概念与开发方法" class="headerlink" title="5.1面向对象的概念与开发方法"></a>5.1面向对象的概念与开发方法</h3><p>面向对象的定义：面向对象＝对象＋类＋继承＋消息通信</p><p>如果一个系统是使用这样4个概念设计和实现的，则可认为这个系统是面向对象的。</p><h4 id="1-对象"><a href="#1-对象" class="headerlink" title="1.对象"></a>1.对象</h4><p>对象是包含现实世界物体特征的抽象实体，它反映了系统为之保存信息和（或）与它交互的能力。</p><p>例如，Student对象的数据可能有姓名、性别、出生日期、家庭住址、电话号码等，其操作可能是对这些数据值的赋值及更改。</p><img src="/2022/05/18/software/image-20220520095244946.png" class="" title="image-20220520095244946"><p>对象名有下列三种表示格式：</p><p>(1) 第一种格式是对象名在前，类名在后，中间用冒号连接。形如：</p><p>​      <u>对象名：类名</u></p><p>(2) 第二种格式形如：</p><p>​      <u>：类名</u></p><p> 这种格式用于尚未给对象命名的情况，注意，类名前的冒号不能省略。</p><p>(3) 第三种格式形如：</p><p>​      <u>对象名</u></p><p>对象有两个层次的概念：</p><p>(1) 现实生活中对象指的是客观世界的实体。可以是可见的有形对象，如人、学生、汽车、房屋等；也可以是抽象的逻辑对象，如银行帐号，生日。</p><p>(2) 程序中对象就是一组变量和相关方法的集合，其中变量表明对象的状态，方法表明对象所具有的行为。</p><p>可以将程序中的对象分为5类：物理对象，角色，事件，交互，规格说明。</p><ol><li><p><strong>物理对象</strong>（Physical Objects）── 物理对象是最易识别的对象，通常可以在问题领域的描述中找到，它们的属性可以标识和测量。</p><p>例如，大学课程注册系统中的学生对象；一个网络管理系统中各种网络物理资源对象（如开关、CPU和打印机）都是物理对象。</p></li><li><p><strong>角色</strong>（Roles）── 一个实体的角色也可以抽象成一个单独的对象。角色对象的操作是由角色提供的技能。</p><p>例如，一个退休教师同时扮演退休者和教师的角色。</p></li><li><p> <strong>事件</strong>（Events）── 一个事件是某种活动的一次“出现”。</p></li></ol><p>   例如“鼠标”事件。一个事件对象通常是一个数据实体，它管理“出现”的重要信息。事件对象的操作主要用于对数据的存取。</p><ol start="4"><li><p><strong>交互</strong>（Interactions）── 交互表示了在两个对象之间的关系，这种类型的对象类似于在数据库设计时所涉及的“关系”实体。当实体之间是多对多的关系时，利用交互对象可将其简化为两个一对多的关系。</p><p>例如，在大学课程注册系统中，学生和课程之间的关系是多对多的关系，可设置一个“选课”交互对象来简化它们之间的关系。</p></li><li><p><strong>规格说明</strong>（specification）规格说明对象表名组合某些实体时的要求。</p></li></ol><h4 id="2-类与封装"><a href="#2-类与封装" class="headerlink" title="2.类与封装"></a>2.类与封装</h4><p>类</p><p>可以将现实生活中的对象经过抽象，映射为程序中的对象。对象在程序中是通过一种抽象数据类型来描述的，这种抽象数据类型称为类（Class）。 </p><p>为了让计算机创建对象，必须先提供对象的定义，也就是先定义对象所属的类。例如，可以将学生对象所属的类定义为Student。类的图形表示如图所示。</p><img src="/2022/05/18/software/image-20220520100441732.png" class="" title="image-20220520100441732"><p>封装</p><p>面向对象的封装特性与其抽象特性密切相关。封装是一种信息隐蔽技术，就是利用抽象数据类型将数据和基于数据的操作封装在一起。用户只能看到对象的封装界面信息，对象的内部细节对用户是隐蔽的。</p><p>封装的定义是：</p><p>(1) 清楚的边界，所有对象的内部信息被限定在这个边界内；</p><p>(2) 接口，即对象向外界提供的方法，外界可以通过这些方法与对象进行交互；</p><p>(3) 受保护的内部实现，即软件对象功能的实现细节，实现细节不能从类外访问。</p><h4 id="3-继承"><a href="#3-继承" class="headerlink" title="3.继承"></a>3.继承</h4><p>继承是一种联结类的层次模型，为类的重用提供了方便，它提供了明确表述不同类之间共性的方法。</p><h4 id="4-多态"><a href="#4-多态" class="headerlink" title="4.多态"></a>4.多态</h4><p>根据为请求提供服务的对象不同可以得到不同的行为，这种现象称为多态。通过在子类中覆盖父类的方法实现多态。</p><h4 id="5-消息通信"><a href="#5-消息通信" class="headerlink" title="5.消息通信"></a>5.消息通信</h4><p>消息是一个对象与另一个对象的通信单元，是要求某个对象执行类中定义的某个操作的规格说明。</p><p>发送给一个对象的消息定义了一个方法名和一个参数表（可能是空的），并指定某一个对象。</p><p>一个对象接收到消息，则调用消息中指定的方法，并将形式参数与参数表中相应的值结合起来。</p><h4 id="6-面向对象软件开发方法"><a href="#6-面向对象软件开发方法" class="headerlink" title="6.面向对象软件开发方法"></a>6.面向对象软件开发方法</h4><p>方法的唯一性：即方法是对软件开发过程所有阶段进行综合考虑而得到的。</p><p>从生存期的一个阶段到下一个阶段的高度连续性，即生存期后一阶段的成果只是在前一阶段成果的补充和修改。</p><p>将面向对象分析(OOA)、面向对象设计(OOD)和面向对象程序设计(OOP)集成到生存期的相应阶段。</p><h5 id="Booch方法"><a href="#Booch方法" class="headerlink" title="Booch方法"></a>Booch方法</h5><p>包含“微开发过程”和“宏开发过程”两个过程。OOA 宏观开发过程如下：</p><p>标识类和对象；标识类和对象的语义；标识类和对象间的关系；进行一系列精化；实现类和对象。</p><h5 id="Rumbaugh方法"><a href="#Rumbaugh方法" class="headerlink" title="Rumbaugh方法"></a>Rumbaugh方法</h5><p> Rumbaugh和他的同事提出的对象模型化技术(OMT)用于分析、系统设计和对象级设计。分析活动建立三个模型：</p><p>对象模型(描述对象、类、层次和关系)；动态模型(描述对象和系统的行为)；功能模型(类似于高层的DFD，描述穿越系统的信息流)。</p><h5 id="Coad和Yourdon方法"><a href="#Coad和Yourdon方法" class="headerlink" title="Coad和Yourdon方法"></a>Coad和Yourdon方法</h5><p> Coad和Yourdon方法常常被认为是最容易学习的OOA方法。建模符号相当简单，其OOA过程如下：</p><p>(1) 使用“要找什么”准则标识对象；</p><p>(2) 定义对象之间的一般化/特殊化结构（又称为分类结构）；</p><p>(3) 定义对象之间的整体/部分结构（又称为组合结构）； </p><p>(4) 标识主题；</p><p>(5) 定义对象的属性及对象之间的实例连接；</p><p>(6) 定义服务及对象之间的消息连接。</p><h5 id="Jacobson方法"><a href="#Jacobson方法" class="headerlink" title="Jacobson方法"></a>Jacobson方法</h5><p>也称为OOSE(面向对象软件工程)，其特点是特别强调使用用例——用以描述用户和产品或系统间如何交互的场景。过程如下：</p><p>标识系统的用户和他们的整体责任；构造需求模型；构造分析模型 。</p><h3 id="5-2UML简介"><a href="#5-2UML简介" class="headerlink" title="5.2UML简介"></a>5.2UML简介</h3><p>统一建模语言(UML，Unified Modeling Language)；</p><p>它将Booch、Rumbaugh和Jacobson等各自独立的OOA和OOD方法中最优秀的特色组合成一个统一的方法。</p><h4 id="1-UML特点"><a href="#1-UML特点" class="headerlink" title="1.UML特点"></a>1.UML特点</h4><ol><li>统一标准</li><li>面向对象</li><li>可视化，表达能力强大</li><li>独立于过程</li><li>容易掌握使用</li><li>与编程语言的关系</li></ol><h4 id="2-UML基本模型"><a href="#2-UML基本模型" class="headerlink" title="2.UML基本模型"></a>2.UML基本模型</h4><p>UML符号为开发者或开发工具使用这些图形符号和文本语法为系统建模提供了标准。这些图形符号和文字所表达的是应用级的模型，在语义上它是UML元模型的实例。UML模型由事物、关系和图组成 。 </p><img src="/2022/05/18/software/image-20220520101945101.png" class="" title="image-20220520101945101"><h3 id="5-3UML事物"><a href="#5-3UML事物" class="headerlink" title="5.3UML事物"></a>5.3UML事物</h3><p>事物是对模型中最具代表性成分的抽象，在UML中，可以分为结构事物、行为事物、分组事物和注释事物4类。 </p><img src="/2022/05/18/software/image-20220520102017668.png" class="" title="image-20220520102017668"><h4 id="1-结构事物"><a href="#1-结构事物" class="headerlink" title="1.结构事物"></a>1.结构事物</h4><p>结构事物是UML模型的静态部分，主要用来描述概念的或物理的元素，包括类、主动类、接口、对象、用例、参与者、协作、构件和节点等。</p><ol><li><p>类（class）── 类用带有类名、属性和操作的矩形框来表示。</p></li><li><p>主动类（active class）── 主动类的实例应具有一个或多个进程或线程，能够启动控制活动。</p></li><li><p>接口（interface）── 描述了一个类或构件的一组外部可用的服务（操作）集。</p><p>接口定义的是一组操作的描述，而不是操作的实现。 一般将接口画成从实现它的类或构件引出的圆圈，接口体现了使用与实现分离的原则。</p></li><li><p>对象（object）── 对象是类的实例，其名字下边加下划线，对象的属性值需明确给出。</p></li><li><p>用例（use case）── 也称用况，用于表示系统想要实现的行为，即描述一组动作序列（即场景）。而系统执行这组动作后将产生一个对特定参与者有价值的结果。</p></li><li><p>参与者（actor）── 也称角色，是指与系统有信息交互关系的人、软件系统或硬件设备，在图形上用简化的小木头人表示。</p></li><li><p>协作（collaboration）── 用例仅描述要实现的行为，不描述这些行为的实现。这种实现用协作描述。</p><p>协作定义交互，描述一组角色实体和其他实体如何通过协同工作来完成一个功能或行为。类可以参与几个协作。</p></li><li><p>构件（component）── 也称组件，是系统中物理的、可替代的部件。它通常是描述一些逻辑元素的物理包。</p></li><li><p>节点（node）── 是在运行时存在的物理元素。它代表一种可计算的资源，通常具有一定的记忆能力和处理能力。</p></li></ol><h4 id="2-行为事物"><a href="#2-行为事物" class="headerlink" title="2.行为事物"></a>2.行为事物</h4><p>行为事物是UML模型的动态部分，包括两类：</p><ol><li><p>交互（interaction）── 交互由在特定的上下文环境中共同完成一定任务的一组对象之间传递的消息组成。如图所示。交互涉及的元素包括消息、动作序列（由一个消息所引起的行为）和链（对象间的连接）。</p><img src="/2022/05/18/software/image-20220520102433994.png" class="" title="image-20220520102433994"></li><li><p>状态机（state machine）── 描述了一个对象或一个交互在生存周期内响应事件所经历的状态序列，单个类或者一组类之间协作的行为都可以用状态机来描述。状态机涉及到状态、变迁和活动，其中状态用圆角矩形来表示。</p><img src="/2022/05/18/software/image-20220520102538708.png" class="" title="image-20220520102538708"></li></ol><h4 id="3-分组事物"><a href="#3-分组事物" class="headerlink" title="3.分组事物"></a>3.分组事物</h4><p>分组事物是UML模型的组织部分。它的作用是为了降低模型复杂性。</p><p>UML中的分组事物是包（package）。</p><p>包是把模型元素组织成组的机制，结构事物、行为事物甚至其他分组事物都可以放进包内。</p><img src="/2022/05/18/software/image-20220520102605149.png" class="" title="image-20220520102605149"><h4 id="4-注释事物"><a href="#4-注释事物" class="headerlink" title="4.注释事物"></a>4.注释事物</h4><p>注释事物是UML模型的解释部分，它们用来描述和标注模型的任何元素。</p><p>通常可以用注释修饰带有约束或者解释的图。</p><img src="/2022/05/18/software/image-20220520102629220.png" class="" title="image-20220520102629220"><h3 id="5-4UML关系"><a href="#5-4UML关系" class="headerlink" title="5.4UML关系"></a>5.4UML关系</h3><img src="/2022/05/18/software/image-20220520102638588.png" class="" title="image-20220520102638588"><h4 id="1-依赖关系"><a href="#1-依赖关系" class="headerlink" title="1.依赖关系"></a>1.依赖关系</h4><p>依赖(Dependency)是两个事物之间的语义关系，其中一个事物发生变化会影响到另一个事物的语义，它用一个虚线箭头表示。</p><p>虚线箭头的方向从源事物指向目标事物，表示源事物依赖于目标事物。</p><p>CourseSchedule依赖Course</p><img src="/2022/05/18/software/image-20220520103017732.png" class="" title="image-20220520103017732"><img src="/2022/05/18/software/image-20220520103026022.png" class="" title="image-20220520103026022"><img src="/2022/05/18/software/image-20220520103154412.png" class="" title="image-20220520103154412"><h4 id="2-关联关系"><a href="#2-关联关系" class="headerlink" title="2.关联关系"></a>2.关联关系</h4><p>关联(association)是一种结构关系，它描述了两个或多个类的实例之间的连接关系，是一种<strong>特殊的依赖</strong>。</p><h5 id="普通关联"><a href="#普通关联" class="headerlink" title="普通关联"></a>普通关联</h5><p>普通关联是最常见的关联关系，只要类与类之间存在连接关系就可以用普通关联表示。普通关联又分为二元关联和多元关联。</p><p>二元关联描述两个类之间的关联，用两个类之间的一条直线来表示，直线上可写上关联名，并用实心三角指示关联名指的是哪一个方向。如果关联含义清晰的话可以不写。如图先生类和学徒类之间的关联，该关联表明一位先生教授多名学徒，这些学徒受教于一位先生。</p><img src="/2022/05/18/software/image-20220520103233355.png" class="" title="image-20220520103233355"><p>关联与两端的类连接的地方叫关联端点，在关联两端连接的类各自充当了某种角色，有关的信息（角色名、可见性、多重性等）可附加到各个端点上。</p><p>多重性（multiplicity）：多重性表明在一个关联的两端连接的类实例个数的对应关系，即一端的类的多少个实例对象可以与另一端的类的一个实例相关。如果图中没有明确标出关联的多重性，则默认的多重性为1</p><img src="/2022/05/18/software/image-20220520103903516.png" class="" title="image-20220520103903516"><p>角色：关联端点上还可以附加角色名，表示类的实例在这个关联中扮演的角色（驾驶员、运输车）。</p><img src="/2022/05/18/software/image-20220520104037278.png" class="" title="image-20220520104037278"><p>UML还允许一个类与它自身关联。航班与乘务组是多对多的关联，乘务长与乘务员是1对多的关联，乘务长与乘务员之间存在管理关系。</p><img src="/2022/05/18/software/image-20220520104039475.png" class="" title="image-20220520104039475"><h5 id="多元关联"><a href="#多元关联" class="headerlink" title="多元关联"></a>多元关联</h5><p>多元关联是指3个或3个以上类之间的关联。</p><p>多元关联由一个菱形，以及由菱形引出的通向各个相关类的直线组成，关联名可标在菱形的旁边，在关联的端点也可以标上多重性等信息。</p><p>图表示哪个程序员用哪种程序语言开发了哪个项目</p><img src="/2022/05/18/software/image-20220520104107005.png" class="" title="image-20220520104107005"><h5 id="限定关联"><a href="#限定关联" class="headerlink" title="限定关联"></a>限定关联</h5><p>限定关联通常用在一对多或多对多的关联关系中，可以把模型中的多重性从一对多变成一对一，或将多对多简化成多对一。</p><p>在类图中把限定词（qualifier）放在关联关系末端的一个小方框内。</p><p>例如,某操作系统中一个目录下有许多文件,一个文件仅属于一个目录,在一个目录内文件名确定了唯一的一个文件。利用限定词“文件名”表示了目录与文件之间的关系,这样就利用限定词把一对多关系简化成了一对一关系。注意,限定词“文件名”应该放在靠近目录的那一端。</p><img src="/2022/05/18/software/image-20220520104439375.png" class="" title="image-20220520104439375"><h5 id="关联类"><a href="#关联类" class="headerlink" title="关联类"></a>关联类</h5><p>在关联关系比较简单的情况下，关联关系的语义用关联关系的名字来概括。但在某些情况下，需要对关联关系的语义做详细的定义、存储和访问，为此可以建立关联类（association class），用来描述关联的属性。关联中的每个链与关联类的一个实例相联系。关联类通过一条虚线与关联连接。</p><p>如图是一个公司类与属下一个或多个员工之间的关联，通过关联类给出关联“job”的细节。</p><img src="/2022/05/18/software/image-20220520105405540.png" class="" title="image-20220520105405540"><h5 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h5><p>聚合（Aggregation）也称为聚集，是一种特殊的关联。它描述了整体和部分之间的结构关系。</p><p>两种特殊的聚合关系：共享聚合（shared aggregation）和复合聚合（composition aggregation）。</p><ol><li><p>如果在聚合关系中处于部分方的实例可同时参与多个处于整体方实例的构成，则该聚合称为共享聚合。 </p><img src="/2022/05/18/software/image-20220520105555283.png" class="" title="image-20220520105555283"></li><li><p>如果部分类完全隶属于整体类，部分类需要与整体类共存，一旦整体类不存在了，则部分类也会随之消失，或失去存在价值，则这种聚合称为复合聚合。 </p><img src="/2022/05/18/software/image-20220520105638179.png" class="" title="image-20220520105638179"></li></ol><h5 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h5><p>导航（navigability）是关联关系的一种特性，它通过在关联的一个端点上加箭头来表示导航的方向。导航主要在设计阶段使用，当关联具有双向可导航性时，可以省略指示导航方向的箭头，此时隐指双向可导航。</p><p>在图a所示的关联中，课程与学生之间是多对多的关系，这个关联的链由一组 (课程实例，学生实例）对组成的元组组成。如果想知道某门课程有哪些学生选修，或某个学生选修了哪些课程，就需遍历该链的所有元组。UML通过在关联端点加一个箭头来表示导航，导航能从该链的所有元组中得到给定的元组。</p><p>例如，图b给出的学生和课程之间的导航表明，当指定一门课程时，就能直接导航出选修这门课程的所有学生，不用遍历全部元组，但当指定一个学生时，不能直接导航出该学生选修的所有课程，只能通过遍历全部元组才能得到结果。这种导航是单向的。</p><p>同样，图c给出了学生到课程的（单向）导航，即当指定一个学生时就能直接导航出该学生所选的所有课程。</p><p>图d则表示学生与课程之间的导航是双向。</p><img src="/2022/05/18/software/image-20220520105749517.png" class="" title="image-20220520105749517"><h4 id="3-泛化关系"><a href="#3-泛化关系" class="headerlink" title="3.泛化关系"></a>3.泛化关系</h4><p>•泛化(generalization)关系就是一般类和特殊类之间的继承关系。</p><p>•在UML中，一般类亦称泛化类，特殊类亦称特化类。</p><p>•泛化针对类型而不针对实例，因为一个类可以继承另一个类，但一个对象不能继承另一个对象。</p><h5 id="普通泛化"><a href="#普通泛化" class="headerlink" title="普通泛化"></a>普通泛化</h5><p>普通泛化与前面讲过的继承基本相同。但在泛化关系中常遇到抽象类。一般称没有具体对象的类为抽象类。抽象类通常作为父类，用于描述其他类（子类）的公共属性和行为。</p><p>在图形上，抽象类的类名下附加一个标签值{abstract}，如图所示。下方的两个折角矩形是注释，分别说明了两个子类的drive操作功能。抽象类中的操作用于指定它的所有具体子类应具有的行为。这些操作在每个具体子类中有具体的实现。每一个具体子类可创建自己的实例。</p><img src="/2022/05/18/software/image-20220520111932137.png" class="" title="image-20220520111932137"><p>•普通泛化可以分为多重继承和单继承。多重继承是指一个子类可同时继承多个上层父类。</p><img src="/2022/05/18/software/image-20220520112446593.png" class="" title="image-20220520112446593"><h5 id="受限泛化"><a href="#受限泛化" class="headerlink" title="受限泛化"></a>受限泛化</h5><p>•受限泛化关系是指泛化具有约束条件。</p><p>一般有4种约束：交叠（overlapping）、不相交（disjoint）、完全（complete）和不完全（incomplete）</p><img src="/2022/05/18/software/image-20220520112530852.png" class="" title="image-20220520112530852"><h4 id="4-实现关系"><a href="#4-实现关系" class="headerlink" title="4.实现关系"></a>4.实现关系</h4><p>•实现(implement)是泛化关系和依赖关系的结合，也是类之间的语义关系，通常在以下两种情况出现实现关系：</p><p>(1)接口和实现它们的类或构件之间；</p><p>(2)用例和实现它们的协作之间。</p><p>图用TV类和Radio类来实现接口ElectrialEquipment中规定的所有动作的情形</p><img src="/2022/05/18/software/image-20220520112557588.png" class="" title="image-20220520112557588"><h3 id="5-5UML的图"><a href="#5-5UML的图" class="headerlink" title="5.5UML的图"></a>5.5UML的图</h3><p>这位更是重量级，分两大类：结构图、行为图</p><img src="/2022/05/18/software/image-20220520112721540.png" class="" title="image-20220520112721540"><h4 id="1-用例图"><a href="#1-用例图" class="headerlink" title="1.用例图"></a>1.用例图</h4><p>用例模型描述的是参与者(actor)所理解的系统功能。用例模型用于需求分析阶段，它的建立是系统开发者和用户反复讨论的结果，描述了开发者和用户对需求规格达成的共识。在UML中，一个用例模型由若干个用例图来描述，用例图的主要元素是用例和执行者。用例图是包括执行者、由系统边界（一个矩形）封闭的一组用例，执行者和用例之间的关联、用例间关系以及执行者的泛化的图。</p><img src="/2022/05/18/software/image-20220520151908896.png" class="" title="image-20220520151908896"><p> 用例之间可以有泛化、扩展、使用（包含）三种关系。</p><ol><li>泛化关系：用例泛化是指一个用例可以被特别列举为一个或多个子用例。</li><li>扩展关系：向一个用例中加入一些新的动作后构成了另一个用例，这两个用例之间的关系就是扩展关系，后者通过继承前者的一些行为得来，通常把后者称为扩展用例。</li><li>使用（包含）关系：当一个用例使用另一个用例时，这两个用例之间就构成了使用关系。当有一大块相似的动作存在于几个用例，又不想重复描述该动作，将重复的部分分离为一个用例，两用例间关系称为使用关系。</li></ol><img src="/2022/05/18/software/image-20220520153201507.png" class="" title="image-20220520153201507"><h4 id="2-类图"><a href="#2-类图" class="headerlink" title="2.类图"></a>2.类图</h4><p>类图描述类和类与类之间的静态关系，它是从静态角度表示系统的，因此类图属于一种静态模型。类图是构建其他图的基础，没有类图就没有状态图、协作图等其他图，也就无法表示系统其他方面的特性。   </p><p>类图显示了类（及其接口）、类的内部结构以及与其他类的联系。联系是指类元之间的联系，在类的建模中可以使用<strong>关联、聚合和泛化</strong>（继承）关系。</p><img src="/2022/05/18/software/image-20220520154357262.png" class="" title="image-20220520154357262"><img src="/2022/05/18/software/image-20220520154402767.png" class="" title="image-20220520154402767"><p>关联类是指表示其他类之间关联关系的类。当一个关联具有自己的属性并需要存储它们时，就需要用关联类建模。关联类用虚线连接在两个类之间的联系上。</p><img src="/2022/05/18/software/image-20220520154416726.png" class="" title="image-20220520154416726"><h4 id="3-顺序图和通信图"><a href="#3-顺序图和通信图" class="headerlink" title="3.顺序图和通信图"></a>3.顺序图和通信图</h4><img src="/2022/05/18/software/image-20220520160324655.png" class="" title="image-20220520160324655"><p>•通信图是顺序图的一种变化形式，用于描述相互协作的对象间的交互关系和链接关系。</p><img src="/2022/05/18/software/image-20220520160338774.png" class="" title="image-20220520160338774"><h4 id="4-状态图"><a href="#4-状态图" class="headerlink" title="4.状态图"></a>4.状态图</h4><p>状态图描述一个特定对象的所有可能的状态以及引起状态转换的事件。大多数面向对象技术都用状态图表示单个对象在其生命期中的行为。一个状态图包括一系列状态、事件以及状态之间的转移。</p><p>•所有对象都具有状态，状态是对象执行了一系列活动的结果。当某个事件发生后，对象的状态将发生变化。在状态图中定义的状态可能有：初态(初始状态)、终态(最终状态)、中间状态和复合状态。</p><p>•在一张状态图中只能有<strong>一个初态</strong>，而<strong>终态则可以有多个</strong>。</p><img src="/2022/05/18/software/image-20220520160444022.png" class="" title="image-20220520160444022"><p>中间状态用圆角矩形表示，可能包含三个部分，第一部分为状态的名称；第二部分为状态变量的名字和值，这部分是可选的；第三部分是活动表，这部分也是可选的。</p><img src="/2022/05/18/software/image-20220520160526541.png" class="" title="image-20220520160526541">中间状态<img src="/2022/05/18/software/image-20220520160633030.png" class="" title="image-20220520160633030">电梯的状态图(状态图没有终点)<img src="/2022/05/18/software/image-20220520160728415.png" class="" title="image-20220520160728415">带有事件说明的状态转换<h4 id="5-活动图"><a href="#5-活动图" class="headerlink" title="5.活动图"></a>5.活动图</h4><p>活动图用来捕捉用例的活动，使用框图的方式显示动作及其结果。</p><p>活动图是一个流图，描述了从活动到活动的流。</p><p>它是另一种描述交互的方式，它描述采取何种动作，动作的结果是什么(动作状态改变)，何时发生(动作序列)，以及在何处发生(泳道)。 </p><img src="/2022/05/18/software/image-20220520161228352.png" class="" title="image-20220520161228352"><h4 id="6-构件图和部署图"><a href="#6-构件图和部署图" class="headerlink" title="6.构件图和部署图"></a>6.构件图和部署图</h4><p>构件图描述软件构件及构件之间的依赖关系，显示代码的静态结构。</p><p>构件是逻辑架构中定义的概念和功能(例如，类、对象及它们之间的关系)在物理架构中的实现。典型情况下，构件是开发环境中的实现文件。</p><p>软件构件可以是下述的任何一种构件。</p><p>•源构件：源构件仅在编译时才有意义。典型情况下，它是实现一个或多个类的源代码文件。</p><p>•二进制构件：典型情况下，二进制构件是对象代码，它是源构件的编译结果。</p><p>•可执行构件：可执行构件是一个可执行的程序文件，它是链接所有二进制构件所得到的结果。一个可执行构件代表在处理器(计算机)上运行的可执行单元。</p><p>画图系统的构件图</p><img src="/2022/05/18/software/image-20220520161421245.png" class="" title="image-20220520161421245"><p>银行储蓄系统的构件图</p><img src="/2022/05/18/software/image-20220520161432807.png" class="" title="image-20220520161432807"><p>•部署图描述处理器、设备和连接，它显示系统硬件的物理拓扑结构及在此结构上执行的软件。</p><p>•部署图可以显示计算节点的拓扑结构和通信路径、节点上运行的软件以及软件包含的逻辑单元。</p><img src="/2022/05/18/software/image-20220520161453359.png" class="" title="image-20220520161453359"><h4 id="？"><a href="#？" class="headerlink" title="？"></a>？</h4><p>•UML中有两种类型的交互图：顺序图和协作图。</p><p>•顺序图描述对象之间的动态交互关系，着重表现对象间消息传递的时间顺序。顺序图中的符号如下:  </p><img src="/2022/05/18/software/image-20220520160236079.png" class="" title="image-20220520160236079"><p>UML定义的三种消息：</p><p><strong>简单消息</strong>：表示简单的控制流，它只是表示控制从一个对象传给另一个对象，而没有描述通信的任何细节。</p><p><strong>同步消息</strong>：表示嵌套的控制流，操作的调用是一种典型的同步消息。调用者发出消息后必须等待消息返回，只有当处理消息的操作执行完毕后，调用者才可以继续执行自己的操作。</p><p><strong>异步消息</strong>：表示异步控制流，发送者发出消息后不用等待消息处理完就可以继续执行自己的操作。异步消息主要用于描述实时系统中的并发行为</p><img src="/2022/05/18/software/image-20220520160250925.png" class="" title="image-20220520160250925"><h3 id="5-6使用和扩展UML"><a href="#5-6使用和扩展UML" class="headerlink" title="5.6使用和扩展UML"></a>5.6使用和扩展UML</h3><h4 id="使用UML的准则"><a href="#使用UML的准则" class="headerlink" title="使用UML的准则"></a>使用UML的准则</h4><p>1.不要试图使用所有的图形和符号</p><p>应该根据项目的特点，选用最适用的图形和符号。一般来说，应该优先选用简单的图形和符号，例如，用例、类、关联、属性和继承等概念是最常用的。</p><p>2.不要为每个事物都画一个模型</p><p>应该把精力集中于关键的领域。最好只画几张关键的图，经常使用并不断更新、修改这几张图。</p><p>3.应该分层次地画模型图</p><p>根据项目进展的不同阶段，用正确的观点画模型图。如果处于分析阶段，应该画概念层模型图；当开始着手进行软件设计时，应该画设计层模型图；当考察某个特定的实现方案时，则应画实现层模型图。</p><p>使用UML的最大危险是过早地陷入实现细节。为了避免这一危险，应该把重点放在概念层和说明层。 </p><p>4.模型应该具有协调性</p><p>模型必须在每个抽象层次内和不同的抽象层次之间协调</p><p>5.模型和模型元素的大小应该适中</p><p>过于复杂的模型和模型元素难于理解也难于使用，这样的模型和模型元素很难生存下去。如果要建模的问题相当复杂，则可以把该问题分解成若干个子问题，分别为每个子问题建模，每个子模型构成原模型中的一个包，以降低建模的难度和模型的复杂性。</p><h4 id="扩展UML的机制"><a href="#扩展UML的机制" class="headerlink" title="扩展UML的机制"></a>扩展UML的机制</h4><p>•为避免使UML变得过于复杂，UML并没有吸收所有面向对象的建模技术和机制，而是设计了适当的扩展机制，使得它能很容易地适应某些特定的方法、机构或用户的需要。利用扩展机制，用户可以定义和使用自己的模型元素。</p><p>•扩展的基础是UML的模型元素，利用扩展机制可以给这些元素的变形加上新的语义。新语义可以有三种形式：重新定义，增加新语义或者对某种元素的使用增加一些限制。相应地，有下述三种扩展机制。</p><p><strong>构造型</strong> <strong>(stereotype)</strong></p><p>构造型是在一个已定义的模型元素的基础上构造的一种新的模型元素。构造型的信息内容和形式与已存在的基本模型元素相同，但是含义和使用不同。 </p><img src="/2022/05/18/software/image-20220604102954189.png" class="" title="image-20220604102954189"><p><strong>标记值</strong> <strong>(tagged vaue)</strong></p><p>标记值可以用来存储元素的任意信息，对于存储项目管理信息尤其有用的，如元素的创建日期、开发状态、截止日期和测试状态。</p><p>标记值用字符串表示，字符串有标记名、等号和值。它们被规则地放置在大括弧内。 </p><img src="/2022/05/18/software/image-20220604103257390.png" class="" title="image-20220604103257390"><p><strong>约束</strong> <strong>(constraint)</strong></p><p>约束是用文字表达式表示的语义限制。约束用大括弧内的字符串表达式表示。约束可以附加在表元素、依赖关系，或注释上。 </p><img src="/2022/05/18/software/image-20220604103306516.png" class="" title="image-20220604103306516"><h2 id="6-面向对象分析"><a href="#6-面向对象分析" class="headerlink" title="6.面向对象分析"></a>6.面向对象分析</h2><h3 id="6-1面向对象分析概述"><a href="#6-1面向对象分析概述" class="headerlink" title="6.1面向对象分析概述"></a>6.1面向对象分析概述</h3><p>面向对象分析就是抽取和整理用户需求并建立问题域精确模型的过程。</p><h4 id="1-确定系统边界"><a href="#1-确定系统边界" class="headerlink" title="1.确定系统边界"></a>1.确定系统边界</h4><p>系统边界是系统的所有内部成分与系统以外各种事物的分界线。系统只通过边界上有限数量的接口与外部的系统参与者（人员、组织、设备或外系统）进行交互。</p><img src="/2022/05/18/software/image-20220520213124618.png" class="" title="image-20220520213124618"><h4 id="2-三种模型"><a href="#2-三种模型" class="headerlink" title="2.三种模型"></a>2.三种模型</h4><p>用例模型：用例和场景表示的功能模型；</p><p>对象模型：用类和对象表示的静态模型；</p><p>交互模型：由状态图和顺序图表示的动态模型。</p><p>用例模型从用户角度描述系统功能，是整个后续工作的基础，也是测试与验收的依据 ；对象模型是核心模型，解决任何问题，几乎都需要从客观世界实体及实体间相互联系中抽象出极有价值的对象模型；当问题涉及交互作用和时序时，交互模型是重要的。</p><h3 id="6-2建立用例模型"><a href="#6-2建立用例模型" class="headerlink" title="6.2建立用例模型"></a>6.2建立用例模型</h3><img src="/2022/05/18/software/image-20220604105029110.png" class="" title="image-20220604105029110"><p>建立用例模型的过程</p><ol><li><p>确定业务参与者──标识目标系统将支持的不同类型的用户，可以是人、事件或其他系统。</p><p>通过关注系统的业务参与者，我们可以将重点放在如何使用系统，而不是如何构造系统上，并且有助于进一步明确系统的范围和边界。</p><p>当系统比较庞大和复杂时，要搞清楚系统的需求往往比较困难，通过明确参与者，可以针对参与者确定系统需求，有助于保证系统需求的完整性</p><p>从以下三个方面识别参与者：</p><p> 人员或组织：直接使用系统的人员或组织</p><p> 外部系统：所有与本系统交互的外部系统</p><p> 设备：所有与系统交互的设备</p><p>可通过以下资料来确定系统的参与者：</p><p>标识系统范围和边界的环境图；</p><p>现有系统（如果有的话）的文档和用户手册；</p><p>项目会议和研讨会的记录；</p><p>现有的需求文档、工作手册等。</p><img src="/2022/05/18/software/image-20220520213602061.png" class="" title="image-20220520213602061"><p>•环境图是分析参与者和发现潜在用例的极好来源，它不仅可以用在结构化分析方法中，也可以用于面向对象的分析方法中。</p><p>•通过环境图，可以确定系统的主要输入输出，通过提交和接收输入输出的各方确定潜在的用例。</p><p>•对用例的完整描述包括用例名称、执行者、前置条件、后置条件、一个主事件流、零到多个备选事件流。</p><p>•主事件流表示正常情况下执行者与系统之间的信息交互及动作序列，备选事件流则表示特殊情况或异常情况下的信息交互及动作序列。</p><p>•应给出每个用例的规格说明。</p><p>•用例图是若干个参与者和用例，以及它们间的关系构成的图形表示。</p><p>•每个系统通常都有一个总体视图（Global View of Actors and Use Cases），如果总体视图过于复杂，则可以创建多个用例图，每个用例图关注系统的某一方面。</p><p>•通常是围绕参与者创建用例图。 </p></li><li><p>确定业务需求用例──参与者需要系统提供的完整功能。</p><p>环境图是分析参与者和发现潜在用例的极好来源，它不仅可以用在结构化分析方法中，也可以用于面向对象的分析方法中。</p><p>通过环境图，可以确定系统的主要输入输出，通过提交和接收输入输出的各方确定潜在的用例。</p><img src="/2022/05/18/software/image-20220604105259726.png" class="" title="image-20220604105259726"></li><li><p>创建用例图──标识参与者与用例之间、用例与用例之间的关系。</p><p>用例图是若干个参与者和用例，以及它们间的关系构成的图形表示。</p><p>每个系统通常都有一个总体视图（Global View of Actors and Use Cases），如果总体视图过于复杂，则可以创建多个用例图，每个用例图关注系统的某一方面。</p><p>通常是围绕参与者创建用例图。 </p></li></ol><h3 id="6-3建立对象模型"><a href="#6-3建立对象模型" class="headerlink" title="6.3建立对象模型"></a>6.3建立对象模型</h3><p>在系统分析阶段，对象建模的主要任务是建立问题域的概念模型。</p><p>这个模型描述了现实世界中的“类与对象”以及它们之间的关系。</p><p>在UML中，通过建立类图来表示对象模型。</p><h4 id="对象模型的5个层次"><a href="#对象模型的5个层次" class="headerlink" title="对象模型的5个层次"></a>对象模型的5个层次</h4><p>Coad &amp; Yourdon提出，复杂问题(大型系统)的对象模型应该由下述5个层次组成：主题层(也称为范畴层)、类-对象层、结构层、属性层和服务层，如图所示。 </p><img src="/2022/05/18/software/image-20220604105929380.png" class="" title="image-20220604105929380"><h4 id="划分主题"><a href="#划分主题" class="headerlink" title="划分主题"></a>划分主题</h4><p>在开发大型、复杂系统的过程中，为了降低复杂程度，人们习惯于把系统再进一步划分成几个不同的主题。</p><p>应该按问题领域而不是用功能分解方法来确定主题。此外，应该按照使不同主题内的对象相互间依赖和交互最少的原则来确定主题。</p><p>主题可以采用UML中的包来展现。</p><h4 id="确定类与对象"><a href="#确定类与对象" class="headerlink" title="确定类与对象"></a>确定类与对象</h4><h5 id="1-找出候选的类与对象"><a href="#1-找出候选的类与对象" class="headerlink" title="1.找出候选的类与对象"></a>1.找出候选的类与对象</h5><p>类与对象是对问题域中有意义的事物的抽象，它们既可能是可见的物理实体，也可能是抽象的概念。我们可以将客观事物分为以下五类：</p><p>可感知的物理实体，如教学楼、教室等。</p><p>人或组织的角色，如教师、计算机系等。</p><p>应该记忆的事件，如演出、交通事故等。</p><p>两个或多个对象的相互作用，通常带有交易或接触的性质，如购买、教学等。</p><p>需要说明的概念，如保险法、政策等。</p><p>另一种更简单的非正式分析方法，是以自然语言书写的需求陈述为依据，把陈述中的名词作为类与对象的候选者，用形容词作为确定属性的线索，把动词作为服务(操作)的候选者。</p><p>例如，在选课系统中，可以初步确定Teacher（教师）、Student（学生）、Course（课程）、CourseTask（课程任务，指一门课程划分为多个任务）、StudentList（学生名册）、ScoreReport（成绩单）等类与对象。</p><h5 id="2-筛选出正确的类与对象"><a href="#2-筛选出正确的类与对象" class="headerlink" title="2.筛选出正确的类与对象"></a>2.筛选出正确的类与对象</h5><p>严格考察每个候选对象，从中去掉不正确的或不必要的类与对象，仅保留确实应该记录其信息或需要其提供服务的那些类与对象。</p><h5 id="3-区分实体类、边界类和控制类"><a href="#3-区分实体类、边界类和控制类" class="headerlink" title="3.区分实体类、边界类和控制类"></a>3.区分实体类、边界类和控制类</h5><p>在类分析时首先从问题域的实体类入手，如果在建立分析对象模型时区分实体类、边界类和控制类，将有助于理解系统。</p><p>实体类表示系统将跟踪的持久信息；边界类表示参与者与系统之间的交互；控制类负责用例的实现。其图形表示如图所示。</p><h4 id="确定结构"><a href="#确定结构" class="headerlink" title="确定结构"></a>确定结构</h4><h5 id="1-确定泛化（继承）关系"><a href="#1-确定泛化（继承）关系" class="headerlink" title="1.确定泛化（继承）关系"></a>1.确定泛化（继承）关系</h5><p>学习当前领域的分类学知识。领域分类法往往比较正确地反映了事物的特征、类别以及各种概念的一般性与特殊性。</p><p>按常识考虑事物的分类。如果问题域没有可供参考的分类方法，可以按自己的常识，从各种不同的角度考虑事物的分类，从而发现泛化（继承）关系。</p><p>考察类的属性与操作，“自上而下”地从一般类发现特殊类。</p><img src="/2022/05/18/software/image-20220604111728788.png" class="" title="image-20220604111728788"><p>“自下而上”地从特殊类抽取出一般类</p><img src="/2022/05/18/software/image-20220604111823668.png" class="" title="image-20220604111823668"><h5 id="2-确定关联"><a href="#2-确定关联" class="headerlink" title="2.确定关联"></a>2.确定关联</h5><p>标识关联的启发式准则如下：</p><p>(1) 识别各类对象之间的静态关系</p><p>(2) 识别关联的属性与操作</p><p>(3) 分析关联的多重性</p><p>(4) 进一步分析关联的性质</p><h4 id="确定属性"><a href="#确定属性" class="headerlink" title="确定属性"></a>确定属性</h4><p>应该仅考虑与具体应用直接相关的属性，不要考虑那些超出所要解决的问题范围的属性。</p><p>在分析过程中应该首先找出最重要的属性，以后再逐渐把其余属性增添进去。</p><p>在分析阶段不要考虑那些纯粹用于实现的属性。</p><p>标识属性的启发性准则如下：</p><p>(1) 每个对象至少需包含一个属性，例如_id。</p><p>(2) 属性取值必需适合对象类的所有实例。例如，属性“会飞”并不属于所有的鸟，有的鸟不会飞，因此可以建立鸟的泛化结构，把不同的鸟划分到“会飞的鸟”和“不会飞的鸟”两个子类中。</p><p>(3) 出现在泛化关系中的对象所继承的属性必须与泛化关系一致。</p><p>(4) 系统的所有存储数据必须定义为属性；</p><p>(5) 对象的导出属性应当略去。例如，“年龄”是由属性“出生日期”导出，它不能作为基本属性存在。</p><p>(6) 在分析阶段，如果某属性描述了对象的外部不可见状态，应将该属性从分析模型中删去。</p><p>选课系统中类与对象的属性</p><img src="/2022/05/18/software/image-20220604112028721.png" class="" title="image-20220604112028721"><h4 id="确定服务"><a href="#确定服务" class="headerlink" title="确定服务"></a>确定服务</h4><h3 id="6-4建立动态模型"><a href="#6-4建立动态模型" class="headerlink" title="6.4建立动态模型"></a>6.4建立动态模型</h3><h4 id="顺序图"><a href="#顺序图" class="headerlink" title="顺序图"></a>顺序图</h4><p>用例图中的事件流是由文本表示的，事件流描述的是用例实现的过程，也称为场景（scenarios），可以用顺序图表示场景。</p><p>顺序图按照时间顺序显示对象之间的交互关系。它描述场景中的对象和类以及在完成场景中定义的功能时对象间要交换的信息。</p><h4 id="通信图"><a href="#通信图" class="headerlink" title="通信图"></a>通信图</h4><p>协作图也称通信图，是顺序图的另一种表示形式，用于描述相互协作的对象间的交互关系和链接关系。</p><p>一般情况下，当表示涉及很多对象的模型时，协作图比顺序图更形象。</p><p>另外，与顺序图不同，对象之间的实线可能表明这些对象的类之间需要关联。</p><img src="/2022/05/18/software/image-20220604112641626.png" class="" title="image-20220604112641626"><h4 id="状态图"><a href="#状态图" class="headerlink" title="状态图"></a>状态图</h4><p>状态图由对象的各个状态和连接这些状态的转换组成。 </p><p>通常，用一张状态图描绘一类对象的行为，它确定了由事件序列引出的状态序列。</p><p>不是任何一个类都需要有一张状态图描绘它的行为，只针对具有明显的状态特征并且具有比较复杂的状态—事件—响应行为的类，才需要画状态图。</p><p>在选课系统中，CourseTask类的对象具有比较明显的状态特征，其状态有：初始状态、可选状态、人满状态、关闭状态。</p><img src="/2022/05/18/software/image-20220604113001041.png" class="" title="image-20220604113001041"><h2 id="7-软件体系结构与设计模式"><a href="#7-软件体系结构与设计模式" class="headerlink" title="7.软件体系结构与设计模式"></a>7.软件体系结构与设计模式</h2><h3 id="7-1软件体系结构的基本概念"><a href="#7-1软件体系结构的基本概念" class="headerlink" title="7.1软件体系结构的基本概念"></a>7.1软件体系结构的基本概念</h3><h4 id="1-什么是体系结构"><a href="#1-什么是体系结构" class="headerlink" title="1.什么是体系结构"></a>1.什么是体系结构</h4><p>一个程序或计算机系统的软件体系结构是指系统的一个或者多个结构。结构中包括软件的构件、构件的外部可见属性以及它们之间的相互关系。外部可见属性则是指软件构件提供的服务、性能、使用特性、错误处理、共享资源使用等。</p><p>这一定义强调在任一体系结构表述中“软件构件”的角色。</p><p>软件体系结构是具有一定形式的结构化元素，即构件的集合，包括处理构件、数据构件和连接构件。处理构件负责对数据进行加工，数据构件是被加工的信息，连接构件把体系结构的不同部分组合连接起来。</p><p>这一定义注重区分处理构件、数据构件和连接构件。</p><p>虽然软件体系结构的定义在变化，但其意图是清晰的。体系结构设计是一系列决策和基本原理的集合，这些决策的目标在于开发高效的软件体系结构。在体系结构设计中所强调的基本原理是系统的可理解性、可维护性和可扩展性。 </p><h4 id="2-体系结构模式、风格和框架的概念"><a href="#2-体系结构模式、风格和框架的概念" class="headerlink" title="2.体系结构模式、风格和框架的概念"></a>2.体系结构模式、风格和框架的概念</h4><h5 id="1．模式"><a href="#1．模式" class="headerlink" title="1．模式"></a>1．模式</h5><p>软件设计模式是从软件设计过程中总结出来的，是针对特定问题的解决方案。建筑师C.Alexander对模式给出的经典定义是：每个模式都描述了一个在我们的环境中不断出现的问题及该问题解决方案的核心。在软件系统中，可以将模式划分为以下3类。</p><p>（1）体系结构模式（architectural pattern）：表达了软件系统的基本结构组织形式或者结构方案，包含了一组预定义的子系统，规定了这些子系统的责任，同时还提供了用于组织和管理这些子系统的规则和向导。典型的体系结构模式如OSI参考模型。</p><p>（2）设计模式（design pattern）：为软件系统的子系统、构件或者构件之间的关系提供一个精炼之后的解决方案，描述了在特定环境下，用于解决通用软件设计问题的构件以及这些构件相互通信时的各种结构。有代表性的设计模式是Erich Gamma及其同事提出的23种设计模式。</p><p>（3）惯用法（idiom）：是与编程语言相关的低级模式，描述如何实现构件的某些功能，或者利用编程语言的特性来实现构件内部要素之间的通信功能。</p><h5 id="2．风格"><a href="#2．风格" class="headerlink" title="2．风格"></a>2．风格</h5><p>风格是带有一种倾向性的模式。同一个问题可以有不同的解决问题的方案或模式，但我们根据经验，通常会强烈倾向于采用特定的模式，这就是风格。</p><p>每种风格描述一种系统范畴，该范畴包括：</p><p>（1）一组构件（如数据库、计算模块）完成系统需要的某种功能；</p><p>（2）一组连接件，它们能使构件间实现“通信”、“合作”和“协调”；</p><p>（3）约束，定义构件如何集成为一个系统；</p><p>（4）语义模型，它能使设计者通过分析系统的构成成分的性质来理解系统的整体性质。 </p><p>体系结构风格定义了一个系统家族，即一个体系结构定义一个词汇表和一组约束。词汇表中包含一些构件和连接件类型，而这组约束指出系统是如何将这些构件和连接件组合起来的。体系结构风格反映了领域中众多系统所共有的结构和语义特性，并指导如何将各个模块和子系统有效地组织成一个完整的系统。对体系结构风格的研究和实践为大粒度的软件复用提供了可能。</p><h5 id="3．框架"><a href="#3．框架" class="headerlink" title="3．框架"></a>3．框架</h5><p>随着应用的发展和完善，某些带有整体性的应用模式被逐渐固定下来，形成特定的框架，包括基本构成元素和关系。框架是特定应用领域问题的体系结构模式，框架定义了基本构成单元和关系后，开发者就可以集中精力解决业务逻辑问题。</p><p>在组织形式上，框架是一个待实例化的完整系统，定义了软件系统的元素和关系，创建了基本的模块，定义了涉及功能更改和扩充的插件位置。典型的框架例子有MFC框架和Struts框架。</p><h4 id="3-体系结构的重要作用"><a href="#3-体系结构的重要作用" class="headerlink" title="3.体系结构的重要作用"></a>3.体系结构的重要作用</h4><p>体系结构的重要作用体现在以下三个方面 ：</p><p>（1）体系结构的表示有助于风险承担者（项目干系人）进行交流。 </p><p>（2）体系结构突出了早期设计决策。</p><p>（3）软件体系结构是可传递和可复用的模型。</p><h3 id="7-2典型的软件体系结构风格"><a href="#7-2典型的软件体系结构风格" class="headerlink" title="7.2典型的软件体系结构风格"></a>7.2典型的软件体系结构风格</h3><h4 id="1-数据流风格"><a href="#1-数据流风格" class="headerlink" title="1.数据流风格"></a>1.数据流风格</h4><p>当输入数据经过一系列的计算和操作构件的变换形成输出数据时，可以应用这种体系结构。管道/过滤器、批处理序列都属于数据流风格。 管道/过滤器结构如下图所示。</p><img src="/2022/05/18/software/image-20220604114058013.png" class="" title="image-20220604114058013"><p>   从上图可看出，管道/过滤器结构拥有一组被称为过滤器（filter）的构件，这些构件通过管道（pipe）连接，管道将数据从一个构件传送到下一个构件。每个过滤器独立于其上游和下游的构件而工作，过滤器的设计要针对某种形式的数据输入，并且产生某种特定形式的数据输出。</p><p>   如果数据流退化成为单线的变换，则称为批处理序列（batch sequential）。这种结构接收一批数据，然后应用一系列连续的构件（过滤器）变换它。</p><p>管道/过滤器风格具有以下优点：</p><p>（1）使得软构件具有良好的隐蔽性和高内聚、低耦合的特点。</p><p>（2）允许设计者将整个系统的输入/输出行为看成是多个过滤器的行为的简单合成。 </p><p>（3）支持软件复用。只要提供适合在两个过滤器之间传送的数据，任何两个过滤器都可被连接起来。</p><p>（4）系统维护和增强系统性能简单。新的过滤器可以添加到现有系统中来；旧的可以被改进的过滤器替换掉。</p><p>（5）允许对一些如吞吐量、死锁等属性的分析。</p><p>（6）支持并行执行。每个过滤器是作为一个单独的任务完成，因此可与其他任务并行执行。</p><p>管道/过滤器风格主要缺点如下：</p><p>（1）通常导致进程成为批处理的结构。这是因为虽然过滤器可增量式地处理数据，但它们是独立的，所以设计者必须将每个过滤器看成一个完整的从输入到输出的转换。</p><p>（2）不适合处理交互的应用。当需要增量地显示改变时，这个问题尤为严重。</p><p>（3）因为在数据传输上没有通用的标准，每个过滤器都增加了解析和合成数据的工作，这样就导致了系统性能下降，并增加了编写过滤器的复杂性。</p><h4 id="2-调用—返回风格"><a href="#2-调用—返回风格" class="headerlink" title="2.调用—返回风格"></a>2.调用—返回风格</h4><h5 id="1-主程序-子程序体系结构"><a href="#1-主程序-子程序体系结构" class="headerlink" title="1.主程序/子程序体系结构"></a>1.主程序/子程序体系结构</h5><p>这种传统的程序结构将功能分解为一个控制层次，其中“主”程序调用一组程序构件，这些程序构件又去调用别的程序构件，如下图所示。这种结构总体上为树状结构，可以在底层存在公共模块。</p><img src="/2022/05/18/software/image-20220604114249752.png" class="" title="image-20220604114249752"><p>主程序/子程序体系结构的优点如下:</p><p>（1）可以使用自顶向下，逐步分解的方法得到体系结构图，典型的拓扑结构为树状结构。基于定义—使用关系对子程序进行分解，使用过程调用作为程序之间的交互机制。</p><p>（2）采用程序设计语言支持的单线程控制。</p><p>其主要缺点如下:</p><p>（1）子程序的正确性难于判断。需要运用层次推理来判断子程序的正确性，因为子程序的正确性取决于它调用的子程序的正确性。</p><p>（2）子系统的结构不清晰。通常可以将多个子程序合成为模块。</p><h5 id="2-向对象风格"><a href="#2-向对象风格" class="headerlink" title="2.向对象风格"></a>2.向对象风格</h5><p>系统的构件封装了数据和必须应用到该数据上的操作，构件间通过消息传递进行通信与合作。与主程序/子程序的体系结构相比，面向对象风格中的对象交互会复杂一些。面向对象风格与网络应用的需求在分布性、自治性、协作性、演化性等方面具有内在的一致性。</p><p>面向对象风格具有以下优点:</p><p>（1）因为对象对其他对象隐藏它的表示，所以可以改变一个对象的表示，而不影响其他对象。</p><p>（2）设计者可将一些数据存取操作的问题分解成一些交互的代理程序的集合。</p><p>其缺点如下:</p><p>（1）为了使一个对象和另一个对象通过过程调用等进行交互，必须知道对象的标识。只要一个对象的标识 改变了，就必须修改所有其他明确调用它的对象。</p><p>（2）必须修改所有显式调用它的其他对象，并消除由此带来的一些副作用。例如，如果A使用了对象B，C也使用了对象B，那么，C对B的使用所造成的对A的影响可能是料想不到的。</p><h5 id="3-层次结构"><a href="#3-层次结构" class="headerlink" title="3.层次结构"></a>3.层次结构</h5><p>层次结构的基本结构如下图所示。在这种体系结构中，整个系统被组织成一个分层结构，每一层为上层提供服务，并作为下一层的客户。</p><img src="/2022/05/18/software/image-20220604114521480.png" class="" title="image-20220604114521480"><p>这种风格支持基于可增加抽象层的设计。允许将复杂问题分解成一个增量步骤序列的实现。由于每一层最多只影响两层，同时只要给相邻层提供相同的接口，允许每层用不同的方法实现，同样为软件复用提供了强大的支持。</p><p>层次结构具有以下优点:</p><p>（1）支持基于抽象程度递增的系统设计，使设计者可以把一个复杂系统按递增的步骤进行分解。 </p><p>（2）支持功能增强，因为每一层至多和相邻的上下层交互，因此，功能的改变最多影响相邻的内外层。</p><p>（3）支持复用。只要提供的服务接口定义不变，同一层的不同实现可以交换使用。这样，就可以定义一组标准的接口，从而允许各种不同的实现方法。</p><p>其缺点如下:</p><p>（1）并不是每个系统都可以很容易地划分为分层的模式，甚至即使一个系统的逻辑结构是层次化的，出于对系 统性能的考虑，系统设计师不得不把一些低级或高级的功能综合起来。</p><p>（2）很难找到一个合适的、正确的层次抽象方法。</p><h4 id="3-仓库风格"><a href="#3-仓库风格" class="headerlink" title="3.仓库风格"></a>3.仓库风格</h4><p>数据库系统、超文本系统和黑板系统都属于仓库风格。在这种风格中，数据仓库（如文件或数据库）位于这种体系结构的中心，其他构件会经常访问该数据仓库，并对仓库中的数据进行增加、修改或删除操作。右图为一个典型的仓库风格的体系结构。</p><img src="/2022/05/18/software/image-20220604114716342.png" class="" title="image-20220604114716342"><p>上图中,可把中心存储库变换成“黑板”，黑板构件负责协调信息在客户间的传递，当用户感兴趣的数据发生变化时，它将通知客户软件。黑板系统的组成如下图所示。黑板系统的传统应用是信号处理领域，如语音和模式识别。另一应用是松耦合代理数据共享存取。</p><img src="/2022/05/18/software/image-20220604114817871.png" class="" title="image-20220604114817871"><h3 id="7-3特定领域的软件体系结构"><a href="#7-3特定领域的软件体系结构" class="headerlink" title="7.3特定领域的软件体系结构"></a>7.3特定领域的软件体系结构</h3><p>特定的应用还需要特定的体系结构模型。这些体系结构模型称为领域相关的体系结构。</p><p>有两种领域相关的体系结构模型：类属模型（generic model）和参考模型（reference model）。</p><h4 id="1-类属模型"><a href="#1-类属模型" class="headerlink" title="1.类属模型"></a>1.类属模型</h4><p>类属模型是从许多实际系统中抽象出来的一般模型，它封装了这些系统的主要特征。</p><p>例如，许多图书馆开发了自己的图书馆馆藏/流通系统，若把它们的共同功能抽取出来并创建一个让所有图书馆都认可的系统体系结构模型，这就是类属模型。</p><p>类属模型的一个最著名的例子是编译器模型，由这个模型已开发出了数以千计的编译器。</p><img src="/2022/05/18/software/image-20220604115049999.png" class="" title="image-20220604115049999"><h4 id="2-参考模型"><a href="#2-参考模型" class="headerlink" title="2.参考模型"></a>2.参考模型</h4><p>参考模型源于对应用领域的研究，它描述了一个理想化的包含了系统应具有的所有特征的软件体系结构。</p><p>它是更抽象且是描述一大类系统的模型，并且也是对设计者有关某类系统的一般结构的指导。</p><p>参考模型的典型例子是开放式系统互联（OSI）参考模型。</p><img src="/2022/05/18/software/image-20220604115129610.png" class="" title="image-20220604115129610"><p>以上两种不同类型的模型之间并不存在严格的区别，也可以将类属模型视为参考模型。</p><p>区别之一是类属模型可以直接在设计中复用，而参考模型一般是用于领域概念间的交流和对可能的体系结构做出比较。</p><p>另外，类属模型通常是经过“自下而上”地对已有系统的抽象，而参考模型是“由上到下”地产生的。</p><h3 id="7-4分布式系统结构"><a href="#7-4分布式系统结构" class="headerlink" title="7.4分布式系统结构"></a>7.4分布式系统结构</h3><p>在集中式计算技术时代广泛使用的是大型机/小型机计算模型。</p><p>20世纪80年代以后，集中式结构逐渐被以PC为主的微机网络所取代。个人计算机和工作站的采用，改变了大型机/小型机计算模型，从而产生了分布式计算模型。</p><p>分布式计算模型主要具有以下优点：</p><p>(1) 资源共享。分布式系统允许硬件、软件等资源共享使用。</p><p>(2) 经济性。</p><p>(3) 性能与可扩展性。 </p><p>(4) 固有分布性。</p><p>(5) 健壮性。 </p><h4 id="1-多处理器体系结构"><a href="#1-多处理器体系结构" class="headerlink" title="1.多处理器体系结构"></a>1.多处理器体系结构</h4><p>分布式系统的一个最简单的模型是多处理器系统，系统由许多进程组成，这些进程可以在不同的处理器上并行运行，可以极大地提高系统的性能。</p><p>由于大型实时系统对响应时间要求较高，这种模型在大型实时系统中比较常见。大型实时系统需要实时采集信息，并利用采集到的信息进行决策，然后发送信号给执行机构。虽然，信息采集、决策制定和执行控制这些进程可以在同一台处理器上统一调度执行，但使用多处理器能够提高系统性能。</p><h4 id="2-客户-服务器体系结构"><a href="#2-客户-服务器体系结构" class="headerlink" title="2.客户/服务器体系结构"></a>2.客户/服务器体系结构</h4><p>客户机/服务器（client/server，C/S）体系结构是基于资源不对等，且为实现共享而提出来的，由服务器、客户机和网络三部分组成。</p><p>在C/S体系结构中，客户机可以通过远程调用来获取服务器提供的服务，因此，客户机必须知道可用的服务器的名字及它们所提供的服务，而服务器不需要知道客户机的身份，也不需要知道有多少台服务器在运行。</p><p>传统的C/S体系结构分为两层。在这种体系结构中，一个应用系统被划分为客户机和服务器两部分。典型的两层C/S体系结构如下图所示。</p><img src="/2022/05/18/software/image-20220604115504509.png" class="" title="image-20220604115504509"><p>两层C/S体系结构可以有两种形态：</p><p>（1）瘦客户机模型。在瘦客户机模型中，数据管理部分和应用逻辑都在服务器上执行，客户机只负责表示部分。瘦客户机模型的主要缺点：它将繁重的处理负荷都放在了服务器和网络上，服务器负责所有的计算，这将增加客户机和服务器之间的网络流量。目前个人计算机所具有的处理能力在瘦客户机模型中用不上。</p><p>（2）胖客户机模型。在这种模型中，服务器只负责对数据的管理。客户机上的软件实现应用逻辑和与系统用户的交互。胖客户机模型能够利用客户机的处理能力，比瘦客户机模型在分布处理上更有效。但另一方面，随着企业规模的日益扩大，软件的复杂程度不断提高，胖客户机模型逐渐暴露出了以下缺点：</p><ul><li><p>开发成本较高。</p></li><li><p>用户界面风格不一，使用繁杂，不利于推广使用。</p></li><li><p>软件移植困难。</p></li><li><p>软件维护和升级困难。</p><p>为了解决以上问题，三层C/S体系结构应运而生。三层C/S体系结构中增加了应用服务器。可以将整个应用逻辑驻留在应用服务器上，而只有表示层存在于客户机上。</p></li></ul><img src="/2022/05/18/software/image-20220604115552748.png" class="" title="image-20220604115552748"><p>  三层C/S体系结构将整个系统分成表示层、应用逻辑层和数据层三个部分，其数据处理流程如下图所示。</p><img src="/2022/05/18/software/image-20220604115607152.png" class="" title="image-20220604115607152"><p>（1）表示层：表示层是应用系统的用户界面部分，担负着用户与应用程序之间的对话功能。它用于检查用户从键盘等输入的数据，显示应用程序输出的数据，一般采用图形用户界面（graphic user interface， GUI）。</p><p>（2）应用逻辑层：应用逻辑层为应用系统的主体部分，包含具体的业务处理逻辑。通常在功能层中包含有确认用户对应用和数据库存取权限的功能以及记录系统处理日志的功能。</p><p>（3）数据层：数据层主要包括数据的存储及对数据的存取操作，一般选择关系型数据库管理系统（RDBMS）。</p><p>  浏览器/服务器（browser/server，B/S）风格是三层体系结构的一种实现方式，其具体结构为浏览器/Web服务器/数据库服务器。B/S体系结构如下图所示。</p><img src="/2022/05/18/software/image-20220604115639880.png" class="" title="image-20220604115639880"><p>   B/S体系结构主要是利用不断成熟的WWW浏览器技术，结合浏览器的多种脚本语言，用通用浏览器就实现了原来需要复杂的专用软件才能实现的强大功能，并节约了开发成本。从某种程度上来说，B/S结构是一种全新的软件体系结构。</p><p>B/S体系结构具有以下优点：</p><p>（1）基于B/S体系结构的软件，系统安装、修改和维护全在服务器端解决。</p><p>（2）B/S体系结构还提供了异种机、异种网、异种应用服务的联机、联网和统一服务的最现实的开放性基础。</p><p>与C/S体系结构相比，B/S体系结构也有许多不足之处。</p><p>（1）B/S体系结构缺乏对动态页面的支持能力，没有集成有效的数据库处理功能。</p><p>（2）采用B/S体系结构的应用系统，在数据查询等响应速度上，要远远地低于C/S体系结构。</p><p>（3）B/S体系结构的数据提交一般以页面为单位，数据的动态交互性不强，不利于在线事务处理（OLTP）应用。 </p><h4 id="3-分布式对象体系结构"><a href="#3-分布式对象体系结构" class="headerlink" title="3.分布式对象体系结构"></a>3.分布式对象体系结构</h4><p>在客户机/服务器模型中，客户机和服务器的地位是不同的。为了消除客户机与服务器之间的差别，提高系统的伸缩性以及有效地均衡负载，可采用分布式对象体系结构来设计系统。</p><p>分布式对象的实质是在分布式异构环境下建立应用系统框架和对象构件，它将应用服务分割成具有完整逻辑含义的独立子模块（称为构件），各个子模块可放在同一台服务器或分布在多台服务器上运行，模块之间通过中间件互相通信。</p><p>通常将这个中间件称为软件总线或对象请求代理，它的作用是在对象之间提供一个无缝接口。</p><img src="/2022/05/18/software/image-20220604115833096.png" class="" title="image-20220604115833096"><p>分布式对象技术的应用目的是为了降低主服务器的负荷、共享网络资源、平衡网络中计算机业务处理的分配，提高计算机系统协同处理的能力，从而使应用的实现更为灵活。</p><p>分布式对象技术的基础是构件。构件是一些独立的代码封装体，在分布计算的环境下可以是一个简单的对象，但大多数情况下是一组相关的对象组合体，提供一定的服务。</p><p>分布式环境下，构件是一些灵活的软件模块，它们可以位置透明、语言独立和平台独立地互相发送消息，实现请求服务。</p><p>构件之间并不存在客户机与服务器的界限，接受服务者扮演客户机的角色，提供服务者就是服务器。</p><h4 id="4-代理"><a href="#4-代理" class="headerlink" title="4.代理"></a>4.代理</h4><p>代理可以用于构建带有隔离组件的分布式软件系统，该软件通过远程服务调用进行交互。代理者负责协调通信，诸如转发请求以及传递结果和异常等。</p><p>1991年，OMG基于面向对象技术，给出了以对象请求代理（ORB）为中心的分布式应用体系结构。</p><img src="/2022/05/18/software/image-20220604120024495.png" class="" title="image-20220604120024495"><p>  在OMG的对象管理结构中，ORB是一个关键的通信机制，它以实现互操作性为主要目标，处理对象之间的消息分布。在ORB之上有4个对象接口：</p><p>（1）对象服务：定义加入ORB的系统级服务，如安全性、命名和事务处理，它们是与应用领域无关的。</p><p>（2）公共设施：水平级的服务，定义应用程序级服务。</p><p>（3）领域接口：面向特定的领域。</p><p>（4）应用接口：面向指定的现实世界应用。是指供应商或用户借助于ORB、公共对象服务及公共设施而开发的特定产品。</p><h3 id="7-5体系结构框架"><a href="#7-5体系结构框架" class="headerlink" title="7.5体系结构框架"></a>7.5体系结构框架</h3><h4 id="1-MVC框架"><a href="#1-MVC框架" class="headerlink" title="1.MVC框架"></a>1.MVC框架</h4><p>MVC框架即模型—视图—控制器（model-view-controller）框架，它强调将用户输入、数据模型和数据表示的方式分开设计，一个交互式应用系统由模型、视图和控制器3个部件组成，分别对应于内部数据、数据表示和输入/输出控制部分。</p> <img src="/2022/05/18/software/image-20220604120151797.png" class="" title="image-20220604120151797"><h5 id="1-模型对象"><a href="#1-模型对象" class="headerlink" title="1.模型对象"></a>1.模型对象</h5><p>  模型对象独立于外在显示内容和形式，代表应用领域中的业务实体和业务规则，是整个模型的核心。模型对象的变化通过事件处理通知视图和控制器对象。</p><h5 id="2-视图对象"><a href="#2-视图对象" class="headerlink" title="2.视图对象"></a>2.视图对象</h5><p>  视图对象代表GUI对象，并且以用户需要的格式表示模型状态，是交互系统与外界的接口。视图对象可以包含子视图，子视图用于显示模型的不同部分。通常，每个视图对象对应一个控制器对象。</p><h5 id="3-控制器对象"><a href="#3-控制器对象" class="headerlink" title="3.控制器对象"></a>3.控制器对象</h5><p>  控制器对象代表鼠标和键盘事件。它处理用户的输入行为并给模型发送业务事件，再将业务事件解析为模型应执行的动作；同时，模型的更新与修改也将通过控制器来通知视图，从而保持各个视图与模型的一致性。</p><p>  MVC的处理过程为：首先控制器接收用户的请求，并决定应该调用哪个模型来进行处理；然后模型用业务逻辑来处理用户的请求并返回数据；最后控制器用相应的视图格式化模型返回的数据，并通过表示层呈现给用户。</p><p> 其中，模型是核心数据和功能，视图只关心显示数据，控制只关心用户输入，这种结构由于将数据和业务规则从表示层分开，因此可以最大化地重用代码。</p><h4 id="2-J2EE体系结构框架"><a href="#2-J2EE体系结构框架" class="headerlink" title="2.J2EE体系结构框架"></a>2.J2EE体系结构框架</h4><p>  J2EE的核心体系结构就是在MVC框架的基础上进行扩展得到的，如下图所示。</p><img src="/2022/05/18/software/image-20220604145300290.png" class="" title="image-20220604145300290"><p>从上图可看出，J2EE模型是分层结构，中间的3层（表示层，业务层，集成层）包含应用程序构件，客户层和资源层处于应用程序的外围。</p><p>客户层：用户通过客户层与系统交互。该层可以是各种类型的客户端。例如，可编程客户端（如基于Java Swing的客户端或applet），纯Web浏览器客户端，WML移动客户端等。</p><p>资源层：资源层可以是企业数据库，电子商务解决方案中的外部企业系统，或者是外部SOA服务。数据可以分布在多个服务器上。</p><p>表示层：也称为Web层或服务器端表示层，用户通过表示层来访问应用程序。在基于Web的应用系统中，表示层由用户界面代码和运行于Web服务器或应用服务器上的过程组成。参考MVC框架，表示层包括视图构件和控制器构件。</p><p>业务层：业务层包含表示层中的控制器构件没有实现的一部分应用逻辑。它负责确认和执行企业范围内的业务规则和事务，并管理从资源层加载到应用程序高速缓存中的业务对象。</p><p>集成层：集成层负责建立和维护与数据源的连接。例如，通过JDBC与数据库进行通信，利用Java消息服务（JMS）与外部系统联合。</p><h4 id="3-PCMEF与PCBMER框架"><a href="#3-PCMEF与PCBMER框架" class="headerlink" title="3.PCMEF与PCBMER框架"></a>3.PCMEF与PCBMER框架</h4><h5 id="PCMEF框架"><a href="#PCMEF框架" class="headerlink" title="PCMEF框架"></a>PCMEF框架</h5><p>   表示—控制—中介者—实体—基础（presentation-control-mediator-entity-foundation，PCMEF）是一个垂直层次的分层体系结构框架。每一层是可以包含其他包的包。PCMEF框架包含4层：表示层、控制层、领域层和基础层。领域层包含两个预定义包：实体（entity）包和中介者（mediator）包。</p><p>   PCMEF框架中包的依赖性主要是向下依赖性。表示层依赖于控制层，控制层依赖于领域层，中介者包依赖于实体包和基础层, 如下图所示。 </p><p>表示层:包含定义GUI对象的类。</p><p>控制层:处理表示层的请求，负责大多数程序逻辑、算法、主要计算以及为每个用户维持会话状态。</p><p>领域层:其实体包处理控制请求,中介者包用于创建一个协调实体类和基础类的通信通道。</p><p>基础层:负责与数据库和Web服务的所有通信。</p><img src="/2022/05/18/software/image-20220604145410017.png" class="" title="image-20220604145410017"><h5 id="PCBMER框架"><a href="#PCBMER框架" class="headerlink" title="PCBMER框架"></a>PCBMER框架</h5><p>PCBMER 框架由PCMEF框架扩展而成, 代表着表示—控制器—Bean—中介者—实体—资源（presentation-control-bean-mediator-entity-resource，PCBMER）。其核心体系结构框架如右图所示。</p><img src="/2022/05/18/software/image-20220604145433849.png" class="" title="image-20220604145433849"><p>在上图中，把层表示为UML包（子系统，层），带箭头的虚线表示依赖关系。例如，表示层依赖控制器层和bean层，控制器层依赖bean层。PCBMER的层次不是严格线性的，上层可以依赖多个相邻下层。</p><p>bean层：表示那些预先确定要呈现在用户界面上的数据类和值对象。除了用户输入外，bean数据由实体对象（实体层）创建。</p><p>表示层：表示屏幕以及呈现bean对象的UI对象。</p><p>控制器层：表示应用逻辑。</p><p>实体层：响应控制器和中介者。</p><p>中介者层：建立了充当实体类和资源类媒介的通信管道。</p><p>资源层：负责所有与外部持久数据资源（数据库、Web服务等）的通信。</p><h3 id="7-6设计模式"><a href="#7-6设计模式" class="headerlink" title="7.6设计模式"></a>7.6设计模式</h3><p>面向对象设计模式最初出现于70年代末80年代初。</p><p>Erich Gamma等4人合著的“Design Patterns: Elements of Reusable Object-Oriented Software”被认为是设计模式方面的经典著作。</p><p>目前，设计模式已经被广泛应用于多种领域的软件设计和构造中，许多当代的先进软件中已大量采用了软件设计模式的概念。</p><p>一般来说，一个模式有4个基本的要素：</p><p>(1)模式名称：用于描述模式的名字，说明模式的问题、解决方案和效果。</p><p>(2)问题：说明在何种场合使用模式。</p><p>(3)解决方案：描述设计的组成成分、它们之间的相互关系、各自的职责和合作方式。</p><p>(4)效果：描述了模式使用的效果及使用模式应当权衡的问题。  </p><p>看ppt设计模式，很清楚的</p><h4 id="1-创建型模式"><a href="#1-创建型模式" class="headerlink" title="1.创建型模式"></a>1.创建型模式</h4><h5 id="1-1抽象工厂模式"><a href="#1-1抽象工厂模式" class="headerlink" title="1.1抽象工厂模式"></a>1.1抽象工厂模式</h5><h5 id="1-2单例模式"><a href="#1-2单例模式" class="headerlink" title="1.2单例模式"></a>1.2单例模式</h5><h4 id="2-结构型模式"><a href="#2-结构型模式" class="headerlink" title="2.结构型模式"></a>2.结构型模式</h4><h5 id="2-1适配器模式"><a href="#2-1适配器模式" class="headerlink" title="2.1适配器模式"></a>2.1适配器模式</h5><h5 id="2-2外观模式"><a href="#2-2外观模式" class="headerlink" title="2.2外观模式"></a>2.2外观模式</h5><h4 id="3-行为型模式"><a href="#3-行为型模式" class="headerlink" title="3.行为型模式"></a>3.行为型模式</h4><h5 id="3-1责任链模式"><a href="#3-1责任链模式" class="headerlink" title="3.1责任链模式"></a>3.1责任链模式</h5><h5 id="3-2中介者模式"><a href="#3-2中介者模式" class="headerlink" title="3.2中介者模式"></a>3.2中介者模式</h5><h5 id="3-3观察者模式"><a href="#3-3观察者模式" class="headerlink" title="3.3观察者模式"></a>3.3观察者模式</h5><h2 id="8-面向对象设计"><a href="#8-面向对象设计" class="headerlink" title="8.面向对象设计"></a>8.面向对象设计</h2><p>怎么感觉完全没学过这节？？</p><h3 id="8-1面向对象设计过程与准则"><a href="#8-1面向对象设计过程与准则" class="headerlink" title="8.1面向对象设计过程与准则"></a>8.1面向对象设计过程与准则</h3><h4 id="面向对象设计过程"><a href="#面向对象设计过程" class="headerlink" title="面向对象设计过程"></a>面向对象设计过程</h4><p>(1) 建立系统环境模型。在设计的初始阶段，系统设计师用系统环境图对软件与外部实体交互的方式进行建模。下图给出了系统环境图的一般的结构。</p><img src="/2022/05/18/software/image-20220604155653692.png" class="" title="image-20220604155653692"><p>(2) 设计系统体系结构。体系结构设计可以自底向上进行，如将关系紧密的对象组织成子系统或层；也可以自顶向下进行，尤其是使用设计模式或遗产系统时，会从子系统的划分入手。 </p><p>(3) 对各个子系统进行设计。对于面向对象的系统，典型的子系统有问题域子系统、人机交互子系统和任务管理子系统。</p><p>(4) 对象设计及优化。对象设计以问题领域的对象设计为核心，其结果是一个详细的对象模型。对象设计过程包括使用模式设计对象、接口规格说明、对象模型重构、对象模型优化4组活动。</p><h4 id="面向对象设计准则"><a href="#面向对象设计准则" class="headerlink" title="面向对象设计准则"></a>面向对象设计准则</h4><h5 id="1-模块化"><a href="#1-模块化" class="headerlink" title="1.模块化"></a>1.模块化</h5><p>传统的面向过程方法中的模块通常是函数、过程及子程序等，而面向对象方法中的模块则是类、对象、接口、构件等。</p><p>在面向过程的方法中，数据及在数据上的处理是分离的；而在面向对象方法中，数据及其上的处理是封装在一起的，具有更好的独立性，也能够更好地支持复用。</p><h5 id="2-抽象"><a href="#2-抽象" class="headerlink" title="2.抽象"></a>2.抽象</h5><p>面向对象方法不仅支持过程抽象，而且支持数据抽象。类实际上就是一种抽象数据类型。可以将类的抽象分为规格说明抽象及参数化抽象。</p><p>类对外开放的公共接口构成了类的规格说明，即协议。这种接口规定了外部可以使用的服务，使用者无需知道这些服务的具体实现算法。通常将这类抽象称为规格说明抽象。</p><p>参数化抽象是指当描述类的规格说明时并不具体指定所要操作的数据类型，而是将数据类型作为参数。</p><h5 id="3-信息隐藏"><a href="#3-信息隐藏" class="headerlink" title="3.信息隐藏"></a>3.信息隐藏</h5><p>在面向对象方法中，信息隐藏通过对象的封装性实现。对于类的用户来说，属性的表示方法和操作的实现算法都应该是隐藏的。</p><h5 id="4-弱耦合"><a href="#4-弱耦合" class="headerlink" title="4.弱耦合"></a>4.弱耦合</h5><p>耦合是指一个软件结构内不同模块之间互连的紧密程度。在面向对象方法中，对象是最基本的模块，因此，耦合主要指不同对象之间相互关联的紧密程度。 </p><h5 id="5-强内聚"><a href="#5-强内聚" class="headerlink" title="5.强内聚"></a>5.强内聚</h5><p>内聚衡量一个模块内各个元素彼此结合的紧密程度。在面向对象设计中存在以下3种内聚：</p><p>(1) 服务内聚：一个服务应该完成一个且仅完成一个功能。</p><p>(2) 类内聚：设计类的原则是，一个类应该只有一个用途，它的属性和服务应该是高内聚的。类的属性和服务应该全都是完成该类对象的任务所必需的，其中不包含无用的属性或服务。如果某个类有多个用途，通常应该把它分解成多个专用的类。</p><p>(3) 一般—特殊内聚：设计出的一般—特殊结构，应该符合多数人的概念，更准确地说，这种结构应该是对相应的领域知识的正确抽取。</p><h5 id="6-可重用"><a href="#6-可重用" class="headerlink" title="6.可重用"></a>6.可重用</h5><p>软件重用是提高软件开发生产率和目标系统质量的重要途径。</p><p>重用基本上从设计阶段开始。重用有两方面的含义：</p><p>一是尽量使用已有的类(包括开发环境提供的类库，及以往开发类似系统时创建的类)， </p><p>二是如果确实需要创建新类，则在设计这些新类的协议时，应该考虑将来的可重复使用性。</p><h3 id="8-2体系结构模块及依赖性"><a href="#8-2体系结构模块及依赖性" class="headerlink" title="8.2体系结构模块及依赖性"></a>8.2体系结构模块及依赖性</h3><p>体系结构设计描述了建立计算机系统所需的数据结构和程序构件。一个好的体系结构设计要求软件模块的分层及编程标准的执行。</p><p>在面向对象软件中，常见的软件模块有类、接口、包和构件。</p><p>在设计阶段我们往往关注类、接口和包，在实现阶段关注构件，而在部署阶段则关注构件的部署，也就是将构件部署在哪些结点上。</p><h4 id="1-类及其依赖性"><a href="#1-类及其依赖性" class="headerlink" title="1.类及其依赖性"></a>1.类及其依赖性</h4><h5 id="1-1类"><a href="#1-1类" class="headerlink" title="1.1类"></a>1.1类</h5><p> 在面向对象的程序设计中，类和接口是程序的基本组成单元。</p><p> 一个典型程序需要界面类专门负责表示用户界面信息，需要数据库类负责与数据库进行交互，需要有业务逻辑类负责算法计算等。</p><p> 在计算机程序中，要设计和实现的所有类都具有唯一的名字，在不同的阶段或从不同的角度可以将它们称为设计类、实现类、系统类、应用类等。</p><h5 id="1-2继承依赖性"><a href="#1-2继承依赖性" class="headerlink" title="1.2继承依赖性"></a>1.2继承依赖性</h5><p>  依赖性管理中最棘手的问题是由于继承所引起的依赖性。继承是一种在父类和子类之间共享属性和行为的方式，所以运行时可以用一个子类对象代替其父类对象。程序中凡是使用父类对象的地方，都可以用子类对象来代替。一个子类对象是一种特殊的父类对象，它继承父类的所有特征，同时它又可以覆盖父类的方法，从而改变从父类继承的一些特征，并可以在子类中增加一些新的功能。这样，从客户的角度看，在继承树中为请求提供服务的特定对象不同，系统的运行行为可能会有所不同。</p><h5 id="（1）多态继承"><a href="#（1）多态继承" class="headerlink" title="（1）多态继承"></a>（1）多态继承</h5><p>  根据为请求提供服务的对象不同可以得到不同的行为，这种现象称为多态。在运行时对类进行实例化，并调用与实例化对象相应的方法，称为动态绑定、后期绑定或运行时绑定。相应地，如果方法的调用是在编译时确定的，则称为是静态绑定、前期绑定或编译时绑定。</p><p>  多态并不是伴随着继承而出现。如果在子类中不覆盖父类中的任何方法，就不会产生多态行为。</p><p>  很明显，继承会带来类和方法之间的依赖性。继承带来的依赖性有编译时继承依赖性和运行时继承依赖性。</p><h6 id="①-编译时继承依赖性"><a href="#①-编译时继承依赖性" class="headerlink" title="① 编译时继承依赖性"></a>① 编译时继承依赖性</h6><p>  右图所示的例子说明了一棵树中类之间的编译时依赖性。在这个例子中，B继承A，但没有覆盖A中的方法do1( )。因此，B和A之间没有运行时继承依赖性。也就是说，由于编译时依赖性的存在，A中do1( )方法的任何变化，都会被B在编译时（静态地）继承。</p><p>  一般来说，所有的继承都会引入编译时依赖性。依赖性是可传递的，也就是说，如果C依赖B，B依赖A，那么C也依赖A。</p><img src="/2022/05/18/software/image-20220604160631631.png" class="" title="image-20220604160631631"><h6 id="②-运行时继承依赖性"><a href="#②-运行时继承依赖性" class="headerlink" title="② 运行时继承依赖性"></a>② 运行时继承依赖性</h6><p>  下图举例说明了在一棵继承树中涉及客户对象访问类服务的运行时继承依赖性。图中类B的do1( )方法是从父类A继承来的，因此Test与B没有运行时继承依赖性，只是一个静态依赖性，通过从Test到A的关联来表明。如果在doTest方法中调用的是do2( )方法，或者在B中覆盖了A的do1( )方法，则从Test到A和B就会存在运行时依赖性。</p><img src="/2022/05/18/software/image-20220604160707195.png" class="" title="image-20220604160707195"><h5 id="（2）无多态继承"><a href="#（2）无多态继承" class="headerlink" title="（2）无多态继承"></a>（2）无多态继承</h5><p>  使用继承最简单的方式是子类不覆盖从父类继承来的方法，这样就不存在多态性继承问题。虽然无多态的继承有时并不是十分有用，但理解和管理起来是最容易的。</p><h5 id="（3）扩展继承和约束继承"><a href="#（3）扩展继承和约束继承" class="headerlink" title="（3）扩展继承和约束继承"></a>（3）扩展继承和约束继承</h5><p>  扩展继承是指子类继承父类的属性，并且提供额外属性来增强类定义。子类是父类的一种，如果子类覆盖了父类的方法，那么被覆盖的方法应该实现该方法的定义，并且能够在子类的语境中工作。</p><p>  当一个类覆盖了继承来的方法，并对一些继承来的功能进行了限制，这时就产生了约束继承。这时，子类不再是父类的一种。有时，限制会造成继承方法的完全禁止。当方法的实现是空时，就会发生这种情况。</p><h5 id="1-3交互依赖性"><a href="#1-3交互依赖性" class="headerlink" title="1.3交互依赖性"></a>1.3交互依赖性</h5><p>  交互依赖性也称为方法依赖性，是通过消息连接产生的。如下图所示。</p><img src="/2022/05/18/software/image-20220604160821766.png" class="" title="image-20220604160821766"><p>  图中，CActioner使用方法do1( )来发送一条消息do3( )给EEmployee，因此，do1( )依赖于do3( )。依赖性向上传递给所属的类，因此，CActioner依赖于EEmployee。类似地，EOutMessage的do2( )调用EEmployee的方法do3( )，因此，EOutMessage依赖于EEmployee。</p><h4 id="2-接口及其依赖性"><a href="#2-接口及其依赖性" class="headerlink" title="2.接口及其依赖性"></a>2.接口及其依赖性</h4><h5 id="2-1接口"><a href="#2-1接口" class="headerlink" title="2.1接口"></a>2.1接口</h5><p>  在UML2.0中，接口是不可直接实例化的特性集合的声明，即其对象不能直接实例化，需要通过类来实现，实现接口的类需要实现接口中声明的方法。UML2.0对流行编程语言中的接口概念进行了扩展。接口中不仅可以声明操作，还可以声明属性。</p><p>  由于允许在接口中存在属性，因此，在接口之间或者接口和类之间可能会产生关联。用另一个接口或类作为属性的类型可以表示关联。</p><p>在UML2.0中，可以通过关联实现从接口到类的导航。但在Java中是无法实现的，因为Java规定接口中的数据元素必须是常量。</p><p>接口与抽象类有相似之处，抽象类是至少包含一个没有实现的方法的类，如果在一个抽象类中所有的方法都没有实现，则称其为纯抽象类，从这一点上，接口和纯抽象类似乎没有区别。但实际上，接口和抽象类还是有着本质的区别。在只支持单继承的语言中，一个类只能有一个直接父类，但是却可以实现多个接口。</p><h5 id="2-2实现依赖性"><a href="#2-2实现依赖性" class="headerlink" title="2.2实现依赖性"></a>2.2实现依赖性</h5><p>  一个类可以实现多个接口，由类实现的接口集合称为该类的供给接口。在UML2.0中，将一个类和该类实现的接口之间的依赖性称为实现依赖性。</p><p>  右图所示为实现依赖性的UML符号，在箭头末端的类实现了箭头所指向的接口。从图中可以看到，Class1实现了Interface1接口和Interface2接口，而Class2只实现了Interface2接口。</p><img src="/2022/05/18/software/image-20220604161434242.png" class="" title="image-20220604161434242"><h5 id="2-3使用依赖性"><a href="#2-3使用依赖性" class="headerlink" title="2.3使用依赖性"></a>2.3使用依赖性</h5><p>  一个接口可以为其他类或接口提供服务，同时也可能需要其他接口的服务。一个接口所需要的其他接口所提供的服务称为这个类的需求接口。需求接口详细说明一个类或接口需要的服务，从而可以为其客户提供服务。在UML2.0中，通过类（接口）和它所需接口之间的依赖关系来说明需求接口，这称为使用依赖性。</p><p>  下图所示为使用依赖性的UML符号，在箭头尾部的类或接口使用在箭头头部的接口。Class1使用Interface1，Interface1使用Interface2。在Java语言中，不允许接口之间的使用，只允许接口间的扩展继承。 </p><img src="/2022/05/18/software/image-20220604161510604.png" class="" title="image-20220604161510604"><p>   Class1包含方法do1( )，而do1( )调用操作op1( )。在静态代码中，并不清楚需求接口的哪个实现提供了所需的服务，可以是实现Interface1的任何一个类实例。当Class1的一个执行实例设置数据成员myInterface的值时，具体实例才能确定，从而可以引用具体类的一个具体对象。 </p><h4 id="3-包及其依赖性"><a href="#3-包及其依赖性" class="headerlink" title="3.包及其依赖性"></a>3.包及其依赖性</h4><h5 id="3-1包"><a href="#3-1包" class="headerlink" title="3.1包"></a>3.1包</h5><p>  包（package）又可称为层或子系统，是表示组织类的一种方式，用于划分应用程序的逻辑模型。包是高度相关的类的聚合，这些类本身是内聚的，但相对于其他聚合来说又是松散耦合的。</p><p>  包可以嵌套。外层包可以直接访问包括在它的嵌套包中的任何类。包还可以导入其他包，例如，在包A中导入了包B，这意味着包A或者包A的元素可以引用包B或者包B的元素。因此，虽然一个类只属于一个包，但是它可以被导入其他包。包的导入操作会引入包之间的依赖性以及它们的元素之间的依赖性。</p><p>  下图为UML包的例子。一个包可以不暴露任何成员，也可以明确标明它所包含的成员，或者用符号“Å”来表示。图中，包 B拥有类 X，包C拥有包 D，包E拥有包 F，包 F拥有类Y和类Z。</p><img src="/2022/05/18/software/image-20220604161553901.png" class="" title="image-20220604161553901"><p>如果包A的一些成员在某种程度上引用了包B的某些成员（包A导入了包B的一些成员），这隐含着双重含义。</p><p>•包B的变化可能会影响包A，通常需要对包A重新进行编译和测试。</p><p>•包A只能和包B一起使用。</p><h5 id="3-2包依赖性"><a href="#3-2包依赖性" class="headerlink" title="3.2包依赖性"></a>3.2包依赖性</h5><p>  本质上，两个包之间的依赖性来自于两个包中类之间的依赖性。类之间的循环依赖性是个特别棘手的问题，好在大多数情况下可以通过重新设计避免循环依赖性。</p><img src="/2022/05/18/software/image-20220604161620365.png" class="" title="image-20220604161620365"><p>  通过在上图中增加新包可以消除包之间的循环依赖性。方法为：在第1个例子中将包B依赖的包A的元素从包A中分离出来，组成包C，使得包B不再依赖包A，而是依赖包C；</p><h4 id="4-构件及其依赖性"><a href="#4-构件及其依赖性" class="headerlink" title="4.构件及其依赖性"></a>4.构件及其依赖性</h4><p>  在面向对象的软件工程环境中，面向对象技术已达到了类级复用，而构件级复用则是比类级复用更高一级的复用，它是对一组类的组合进行封装（当然，在某些情况下，一个构件可能只包含一个单独的类），并代表完成一个或多个功能的特定服务，也为用户提供了多个接口。</p><p>  一个构件可以是一个编译的类，可以是一组编译的类，也可以是其他独立的部署单元，如一个文本文件、一个图片、一个数据文件、一个脚本等。</p><h3 id="8-3系统分解"><a href="#8-3系统分解" class="headerlink" title="8.3系统分解"></a>8.3系统分解</h3><h3 id="8-4问题域部分的设计"><a href="#8-4问题域部分的设计" class="headerlink" title="8.4问题域部分的设计"></a>8.4问题域部分的设计</h3><h3 id="8-5人机交互部分的设计"><a href="#8-5人机交互部分的设计" class="headerlink" title="8.5人机交互部分的设计"></a>8.5人机交互部分的设计</h3><h3 id="8-6任务管理部分的设计"><a href="#8-6任务管理部分的设计" class="headerlink" title="8.6任务管理部分的设计"></a>8.6任务管理部分的设计</h3><h3 id="8-7数据管理部分的设计"><a href="#8-7数据管理部分的设计" class="headerlink" title="8.7数据管理部分的设计"></a>8.7数据管理部分的设计</h3><h3 id="8-8对象设计"><a href="#8-8对象设计" class="headerlink" title="8.8对象设计"></a>8.8对象设计</h3><h1 id="Part4-软件实现与测试"><a href="#Part4-软件实现与测试" class="headerlink" title="Part4.软件实现与测试"></a>Part4.软件实现与测试</h1><h2 id="9-软件实现"><a href="#9-软件实现" class="headerlink" title="9.软件实现"></a>9.软件实现</h2><h2 id="10-软件测试方法"><a href="#10-软件测试方法" class="headerlink" title="10.软件测试方法"></a>10.软件测试方法</h2><h3 id="10-1软件测试的基本概念"><a href="#10-1软件测试的基本概念" class="headerlink" title="10.1软件测试的基本概念"></a>10.1软件测试的基本概念</h3><h4 id="什么是软件测试"><a href="#什么是软件测试" class="headerlink" title="什么是软件测试"></a>什么是软件测试</h4><p>软件测试是在软件投入生产性运行之前，对软件需求分析、设计规格说明和编码的最终复审，是软件质量控制的关键步骤。</p><p>软件测试是为了发现错误而执行程序的过程。</p><p>或者说，软件测试是根据软件开发各阶段的规格说明和程序的内部结构而精心设计一批测试用例（即输入数据及其预期的输出结果），并利用这些测试用例去运行程序，以发现程序错误的过程。 </p><h4 id="软件测试的目的和原则"><a href="#软件测试的目的和原则" class="headerlink" title="软件测试的目的和原则"></a>软件测试的目的和原则</h4><p>  基于不同的立场，存在着两种完全不同的测试目的。</p><p>从用户的角度出发，普遍希望通过软件测试检验软件中隐藏的错误和缺陷，以考虑是否可以接受该产品。</p><p>从软件开发者的角度出发，则希望测试成为表明软件产品中不存在错误的过程，验证该软件已正确地实现了用户的要求，确立人们对软件质量的信心。</p><img src="/2022/05/18/software/image-20220604162312469.png" class="" title="image-20220604162312469"><p>根据以上测试目的，软件测试的原则如下：</p><p>（1）应当把“尽早地和不断地进行软件测试”作  为软件开发者的座右铭。</p><p>（2）测试用例应由测试输入数据和与之对应的预期输出结果这两部分组成。</p><p>（3）程序员应避免检查自己的程序。</p><p>（4）在设计测试用例时，应当包括合理的输入条件和不合理的输入条件。</p><p>（5）充分注意测试中的群集现象。把Pareto原理应用于软件测试。Pareto原理：测试发现的错误中的80%很可能是由程序中20%的模块造成的。</p><p>（6）严格执行测试计划，排除测试的随意性。</p><p>（7）应当对每一个测试结果作全面检查。</p><p>（8）妥善保存测试计划、测试用例、出错统计和最终分析报告，为维护提供方便。 </p><h4 id="测试工作量和测试人员"><a href="#测试工作量和测试人员" class="headerlink" title="测试工作量和测试人员"></a>测试工作量和测试人员</h4><p>在整个软件开发中，测试工作量一般占30%～40%，甚至≥50%。</p><p>在人命关天的软件(如飞机控制、核反应堆等）中，测试所花费的时间往往是其它软件工程活动时间之和的三到五倍。</p><p>ex:Windows2000开发人员中：</p><p>项目经理约250人</p><p>开发人员约1700人</p><p>测试人员约3200人</p><h4 id="软件测试的对象"><a href="#软件测试的对象" class="headerlink" title="软件测试的对象"></a>软件测试的对象</h4><p>  软件测试应贯穿于软件定义与开发的整个期间。需求分析、概要设计、详细设计、程序编码等各阶段所得到的文档资料，包括需求规格说明、概要设计规格说明、详细设计规格说明以及源程序，都应成为软件测试的对象。 </p><p>  到程序的测试为止，软件开发工作已经经历了许多环节，每个环节都可能发生问题。为了把握各个环节的正确性，人们需要进行各种确认和验证工作。 </p><p> 确认（validation），是一系列的活动和过程，其目的是想证实在一个给定的外部环境中软件的逻辑正确性。它包括需求规格说明的确认和程序的确认，而程序的确认又分为静态确认与动态确认。</p><p> 验证（verification），则试图证明在软件生存期各个阶段，以及阶段间的逻辑协调性、完备性和正确性。下图为软件生存期各个重要阶段之间所要保持的正确性。</p><h4 id="测试方法与技术"><a href="#测试方法与技术" class="headerlink" title="测试方法与技术"></a>测试方法与技术</h4><p>机器测试与人工测试</p><p> 机器测试<br> 在设定的测试数据上执行被测程序的过程。又称动态测试。</p><p>人工测试<br> 采用人工方法进行，目的在于检查程序的静态结构，找出编译不能发现的错误。</p><p>人工测试的分类</p><p>代码审查</p><p> 以小组会的形式，发现程序在结构、功能、编码风格等方面存在的问题。可查出30%~70%的错误</p><p>走查</p><p> 以小组会的形式进行，把测试数据“输入”到被测程序，并在纸上跟踪监视程序的执行情况，让人代替机器沿着程序的逻辑走一遍。</p><p>桌前检查</p><p> 设计模块时，程序员自己检查。</p><h4 id="测试信息流"><a href="#测试信息流" class="headerlink" title="测试信息流"></a>测试信息流</h4><img src="/2022/05/18/software/image-20220604164435508.png" class="" title="image-20220604164435508"><h4 id="测试与软件开发各阶段的关系"><a href="#测试与软件开发各阶段的关系" class="headerlink" title="测试与软件开发各阶段的关系"></a>测试与软件开发各阶段的关系</h4><p>  软件开发过程是一个自顶向下、逐步细化的过程，而测试过程则是依相反的顺序安排的自底向上、逐步集成的过程。低一级测试为上一级测试准备条件。</p><p> 当然不排除两者平行地进行测试。　</p><img src="/2022/05/18/software/image-20220604164534403.png" class="" title="image-20220604164534403"><p>黑盒测试</p><p> 黑盒测试是把测试对象看做一个黑盒子，测试人员完全不考虑程序内部的逻辑结构和内部特性，只依据程序的需求规格说明书，检查程序的功能是否符合它的功能说明。</p><p>黑盒穷举测试<br> 对所有输入数据的各种可能值的排列组合都进行测试，来检查程序是否都能产生正确的输出。</p><p>实际上这是不可能的。</p><p>白盒测试</p><p>白盒测试是对软件的过程性细节做细致的检查。</p><p>这一方法是把测试对象看做一个打开的盒子或透明的盒子，它允许测试人员利用程序内部的逻辑结构及有关信息，设计或选择测试用例，对程序所有逻辑路径进行测试。</p><p>通过在不同点检查程序的状态，确定实际的状态是否与预期的状态一致。</p><p>因此，白盒测试又称为结构测试或逻辑驱动测试。</p><p>白盒测试主要是对程序模块进行检查：</p><p>对程序模块的所有独立的执行路径至少测试一次；</p><p>对所有的逻辑判定，取“真”与取“假”的两种情况都能至少测试一次；</p><p>在循环的边界和运行界限内执行循环体；测试内部数据结构的有效性等。</p><h3 id="10-2白盒测试的测试用例设计"><a href="#10-2白盒测试的测试用例设计" class="headerlink" title="10.2白盒测试的测试用例设计"></a>10.2白盒测试的测试用例设计</h3><img src="/2022/05/18/software/image-20220605155428922.png" class="" title="image-20220605155428922"><h4 id="逻辑覆盖"><a href="#逻辑覆盖" class="headerlink" title="逻辑覆盖"></a>逻辑覆盖</h4><p>逻辑覆盖是以程序内部的逻辑结构为基础的设计测试用例的技术，它属于白盒测试。</p><img src="/2022/05/18/software/image-20220604201925347.png" class="" title="image-20220604201925347"><p>由于覆盖测试的目标不同，逻辑覆盖又可分为：</p><h5 id="语句覆盖"><a href="#语句覆盖" class="headerlink" title="语句覆盖"></a>语句覆盖</h5><p>语句覆盖就是设计若干个测试用例，运行被测程序，使得每一<strong>可执行语句</strong>至少执行一次。</p><p>在图例中，正好所有的可执行语句都在路径L1上，所以选择路径 L1设计测试用例，就可以覆盖所有的可执行语句。</p><p>满足语句覆盖的测试用例是:<br> 【(2, 0, 4)，(2, 0, 3)】 </p><p>虽然语句覆盖检验了每一个可执行语句，但可能发现不了判断中逻辑运算的错误。语句覆盖是最弱的逻辑覆盖标准。</p><p>如将A&gt;1&amp;&amp;B= =0 错写成 A&gt;1||B= =0，测试用例【(2, 0, 4)，(2, 0, 3)】依然成立。</p><h5 id="判定覆盖（分支覆盖）"><a href="#判定覆盖（分支覆盖）" class="headerlink" title="判定覆盖（分支覆盖）"></a>判定覆盖（分支覆盖）</h5><p>判定覆盖就是设计若干个测试用例，运行被测程序，使得程序中<strong>每个判断的取真分支和取假分支</strong>至少经历一次。判定覆盖又称为分支覆盖。</p><p>【(2, 0, 4)，(2, 0, 3)】覆盖 ace【L1】</p><p>【(1, 1, 1)，(1, 1, 1)】覆盖 abd【L2】</p><p>如果选择路径L3和L4，还可得另一组可用的测试用例:</p><p> 【(2, 1, 1)，(2, 1, 2)】覆盖 abe【L3】</p><p> 【(3, 0, 3)，(3, 1, 1)】覆盖 acd【L4】</p><p>只是判定覆盖，还不能保证一定能查出在判断的条件中存在的错误。</p><p>若将第二个判断中的条件x&gt;1错写成x&lt;1，上面两组测试用例，仍能得到同样结果。</p><h5 id="条件覆盖"><a href="#条件覆盖" class="headerlink" title="条件覆盖"></a>条件覆盖</h5><p>条件覆盖就是设计若干个测试用例，运行被测程序，使得程序中<strong>每个判断的每个条件</strong>的可能取值至少执行一次。</p><img src="/2022/05/18/software/image-20220604202631346.png" class="" title="image-20220604202631346"><img src="/2022/05/18/software/image-20220604202643050.png" class="" title="image-20220604202643050"><p>这组测试用例不但覆盖了所有判断的取真分支和取假分支, 而且覆盖了判断中所有条件的可能取值;</p><img src="/2022/05/18/software/image-20220604202707066.png" class="" title="image-20220604202707066"><p>这组测试用例虽满足了条件覆盖, 但只覆盖了第一个判断的取假分支和第二个判断的取真分支。</p><p>因此，<strong>满足条件覆盖，并不一定能满足分支覆盖</strong>。</p><h5 id="判定—条件覆盖"><a href="#判定—条件覆盖" class="headerlink" title="判定—条件覆盖"></a>判定—条件覆盖</h5><p>什么垃圾定义，就是判定（每个判定取真和取假）+条件（每个条件取真和取假）</p><p><del>所谓判定-条件覆盖就是设计足够的测试用例，使得判断中每个条件的所有可能取值至少执行一次，同时每个判断本身的所有可能判断结果至少执行一次。</del></p><img src="/2022/05/18/software/image-20220604203559174.png" class="" title="image-20220604203559174"><p>判定-条件覆盖也有缺陷。从表面上看，它测试了所有条件的取值，但事实并非如此。因为往往某些条件掩盖了另一些条件。</p><p>对于表达式(A&gt;1) and (B=0)来说，若(A&gt;1)的测试结果为假，往往就不再测试(B=0)的取值了。</p><p> 为彻底检查所有条件的取值，可将多重条件判定分解，形成由多个基本判断组成的流程图。这样就可以有效检查所有的条件是否正确了。</p><img src="/2022/05/18/software/image-20220604203735391.png" class="" title="image-20220604203735391"><h5 id="条件组合覆盖"><a href="#条件组合覆盖" class="headerlink" title="条件组合覆盖"></a>条件组合覆盖</h5><p>条件组合覆盖就是设计足够的测试用例，运行被测程序，使得<strong>每个判断的所有可能的条件取值组合</strong>至少执行一次。</p><img src="/2022/05/18/software/image-20220605154730674.png" class="" title="image-20220605154730674"><img src="/2022/05/18/software/image-20220605154908188.png" class="" title="image-20220605154908188"><p>路径漏掉了L4</p><p> 条件组合覆盖是一种相当强的覆盖准则，可以有效地检查各种可能的条件取值的组合是否正确。</p><p> 它不但可覆盖所有条件的可能取值的组合，还可覆盖所有判断的可取分支，但可能有的路径会遗漏掉。</p><p> 因此，满足条件组合覆盖的测试还不完全。</p><h5 id="路径覆盖"><a href="#路径覆盖" class="headerlink" title="路径覆盖"></a>路径覆盖</h5><p>路径测试是设计足够的测试用例，覆盖程序中<strong>所有可能的路径</strong>。若仍以最初的图为例，则可以选择如下的一组测试用例，覆盖该程序段的全部路径。</p><img src="/2022/05/18/software/image-20220605155415774.png" class="" title="image-20220605155415774"><h3 id="10-3基本路径覆盖"><a href="#10-3基本路径覆盖" class="headerlink" title="10.3基本路径覆盖"></a>10.3基本路径覆盖</h3><p>基本路径测试是在程序控制流图的基础上，通过分析控制构造的环路复杂性，导出基本可执行路径集合，从而设计测试用例的方法。</p><p>设计出的测试用例要保证在测试中程序的每一个可执行语句至少执行一次。</p><p>语句覆盖发现错误能力最弱。判定覆盖包含了语句覆盖， 但它可能会使一些条件得不到测试。条件覆盖对每一条件进行单独检查，一般情况它的检错能力较判定覆盖强，但有时达不到判定覆盖的要求。判定/条件覆盖包含了判定覆盖和条件覆盖的要求，但由于计算机系统软件实现方式的限制，实际上不一定达到条件覆盖的标准。条件组合覆盖发现错误能力较强， 凡满足其标准的测试用例，也必然满足前 4 种覆盖标准。 </p><p>前 5 种覆盖标准把注意力集中在单个判定或判定的各个条件上，可能会使程序某些路径没有执行到。路径测试根据各判定表达式取值的组合，使程序沿着不同的路径执行，查错能力强。 </p><p>实施基本路径测试需要利用程序环路复杂性计算的McCabe方法。基本路径测试法适用于模块的详细设计及源程序，其主要步骤如下：</p><p>（1）以详细设计或源代码作为基础，导出程序的控制流图；</p><p>（2）计算得到的控制流图G的环路复杂性V（G）；</p><p>（3）确定线性无关的基本路径集；</p><p>（4）生成测试用例，确保基本路径集中每条路径的执行。</p><p>程序的控制流图：描述程序控制流的一种图示方法。</p><p>流图只有二种图形符号：</p><p>图中的每一个圆称为流图的结点，代表一条或多条语句。</p><p>流图中的箭头称为边或连接，代表控制流</p><p>任何过程设计都要被翻译成控制流图。</p><p>如何根据程序流程图画出控制流程图?</p><p>在将程序流程图简化成控制流图时，应注意：</p><p>（1）在选择或多分支结构中，分支的汇聚处应有一个汇聚结点。</p><p>（2）边和结点圈定的区域叫做区域，当对区域计数时，图形外的区域也应记为一个区域。</p><p>（3）如果判断中的条件表达式是由一个或多个逻辑运算符 (OR, AND, NAND, NOR) 连接的复合条件表达式，则需要改为一系列只有单条件的嵌套的判断。</p><p>　　例如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> <span class="hljs-selector-tag">a</span> or <span class="hljs-selector-tag">b</span><br>x<br><span class="hljs-keyword">else</span><br>y<br></code></pre></td></tr></table></figure><img src="/2022/05/18/software/image-20220605161143269.png" class="" title="image-20220605161143269"><img src="/2022/05/18/software/image-20220605161158057.png" class="" title="image-20220605161158057"><img src="/2022/05/18/software/image-20220605161202891.png" class="" title="image-20220605161202891"><p>程序环路复杂性</p><p>给定控制流图G的环路复杂性V(G)的计算方法定义为V(G)=E-N+2，E是流图中边的数量，N是流图中结点的数量;</p><p>或者</p><p>　V(G)=P+1，P是流图G中判定结点的数量。</p><p>独立路径：包括一组以前没有处理的语句或条件的一条路径。或至少沿一条新的边移动的路径 ，即一条新的路径必须包含一条新边。</p><img src="/2022/05/18/software/image-20220605161354553.png" class="" title="image-20220605161354553"><p>下例程序流程图描述了最多输入50个值(以–1作为输入结束标志)，计算其中有效的学生分数的个数、总分数和平均值。</p><img src="/2022/05/18/software/image-20220605161533138.png" class="" title="image-20220605161533138"><p>1.由过程描述导出控制流图</p><img src="/2022/05/18/software/image-20220605161607384.png" class="" title="image-20220605161607384"><p>2.计算得到的控制流图的环路复杂性</p><p>　　1)V(G)= 6 (个区域)</p><p>　　2)V(G)=E–N+2=16–12+2=6</p><p>　　其中E为流图中的边数，N为结点数;</p><p>　　3)V(G)=P+1=5+1=6</p><p>​    其中P为判定节点数</p><p>3.确定线性无关的基本路径集 </p><p>  计算出的环路复杂性的值，就是该图已有的线性无关基本路径集中路径的数目。该图所有的6条路径是：</p><p>​       路径1：1-2-9-10-12</p><p>　　路径2：1-2-9-11-12</p><p>　　路径3：1-2-3-9-10-12</p><p>　　路径4：1-2-3-4-5-8-2…</p><p>　　路径5：1-2-3-4-5-6-8-2…</p><p>　　路径6：1-2-3-4-5-6-7-8-2…</p><p>4.准备测试用例，确保基本路径集中的每一条路径的执行 </p><p>1)路径1(1-2-9-10-12)的测试用例：</p><p>　　score[k]=有效分数值，当k &lt; i ;</p><p>　　score[i]=–1, 2≤i≤50;</p><p>　　期望结果：根据输入的有效分数算出正确的分数个数n1、总分sum和平均分average。</p><p>2)路径2(1-2-9-11-12)的测试用例：</p><p>　　score[ 1 ]= – 1 ;</p><p>　　期望的结果：average = – 1 ，其他量保持初值。</p><p>3)路径3(1-2-3-9-10-12)的测试用例：</p><p>　　输入多于50个有效分数，即试图处理51个分数，要求前51个为有效分数;</p><p>　　期望结果：n1=50、且算出正确的总分和平均分。</p><p>4)路径4(1-2-3-4-5-8-2…)的测试用例：</p><p>　　score[i]=有效分数，当i&lt;50;</p><p>　　score[k]&lt;0， k&lt; i ;</p><p>　　期望结果：根据输入的有效分数算出正确的分数个数n1、总分sum和平均分average。</p><p>5)路径5的测试用例：</p><p>　　score[i]=有效分数， 当i&lt;50;</p><p>　　score[k]&gt;100， k&lt; i ;</p><p>　　期望结果：根据输入的有效分数算出正确的分数个数n1、总分sum和平均分average。</p><p>6)路径6(1-2-3-4-5-6-7-8-2…)的测试用例：</p><p>　　score[i]=有效分数， 当i&lt;50;</p><p>　　期望结果：根据输入的有效分数算出正确的分数个数n1、总分sum和平均分average。</p><p>5.图形矩阵 </p><p>图形矩阵是在基本路径测试中起辅助作用的软件工具，利用它可以实现自动地确定一个基本路径集。</p><p>一个图形矩阵是一个方阵，其行/列数等于控制流图中的结点数。</p><p>每行和每列依次对应到一个被标识的结点，矩阵元素对应到结点间的连接（即边）。</p><img src="/2022/05/18/software/image-20220605162204446.png" class="" title="image-20220605162204446"><p>在控制流图中对每一条边加上一个连接权，图形矩阵就成为测试过程中评价程序控制结构的工具。连接权提供了关于控制流的附加信息。最简单的情形，连接权为“1”，表示存在一个连接，或者为“0”，表示不存在一个连接。但在其他情况，连接权可以表示如下特性：连接（边）执行的可能性（概率）、通过一个连接需花费的时间、在通过一个连接时所需的存储、在通过一个连接时所需的资源。</p><p>   为了举例说明，用最简单的权限（0或者1）来表明连接。下图为上图图形矩阵改画后的结果。每个字母用“1”取代，表明存在一个连接。在图中，“0”未画出。采用这种表示时，图形矩阵称为连接矩阵。</p><p>   图中，若一行有2个或更多的元素，则这行所代表的结点一定是判定结点。因而通过计算排列在连接矩阵右边的算式，可以得到确定该图环路复杂性的另一种方法。 </p><img src="/2022/05/18/software/image-20220605162316445.png" class="" title="image-20220605162316445"><img src="/2022/05/18/software/image-20220605162321602.png" class="" title="image-20220605162321602"><img src="/2022/05/18/software/image-20220605162330594.png" class="" title="image-20220605162330594"><img src="/2022/05/18/software/image-20220605162346674.png" class="" title="image-20220605162346674"><p>确定线性无关的基本路径集 </p><p>  计算出的环路复杂性的值，就是该图已有的线性无关基本路径集中路径的数目。该图所有的4条路径是：</p><p>路径1：4-14</p><p>路径2：4-6-7-14</p><p>路径3：4-6-8-10-13-4-14</p><p>路径4：4-6-8-11-13-4-14</p><img src="/2022/05/18/software/image-20220605162400194.png" class="" title="image-20220605162400194"><h3 id="10-4黑盒测试的测试用例设计"><a href="#10-4黑盒测试的测试用例设计" class="headerlink" title="10.4黑盒测试的测试用例设计"></a>10.4黑盒测试的测试用例设计</h3><h4 id="等价类划分"><a href="#等价类划分" class="headerlink" title="等价类划分"></a>等价类划分</h4><p>等价类划分是一种典型的黑盒测试方法，也是一种非常实用的重要测试方法,它是用来解决如何选择适当的子集，使其尽可能多地发现错误。</p><p>使用这一方法设计测试用例要经历划分等价类（列出等价类表）和选取测试用例两步。</p><h5 id="1-划分等价类"><a href="#1-划分等价类" class="headerlink" title="1.划分等价类"></a>1.划分等价类</h5><p>所谓等价类是指某个输入域的子集合。在该子集合中，各个输入数据对于揭露程序中的错误都是等效的，并合理地假定：测试某等价类的代表值等价于对这一类其他值的测试。</p><p>或者说，如果某个等价类中的一个数据作为测试数据进行测试查出了错误，那么使用这一等价类中的其他数据进行测试也会查出同样的错误；</p><p>反之，若使用某个等价类中的一个数据作为测试数据进行测试没有查出错误，则使用这个等价类中的其他数据也同样查不出错误。</p><p> 等价类的划分有两种不同的情况:</p><p> （1）有效等价类：是指对于程序的规格说明来说，是合理 的、有意义的输入数据构成的集合。利用它，可以检 验程序是否实现了规格说明预先规定的功能和性能。</p><p> （2）无效等价类：是指对于程序的规格说明来说，是不合 理的、无意义的输入数据构成的集合。程序员主要利用这一类测试用例检查程序中功能和性能的实现是否有不符合规格说明要求的地方。</p><p>在设计测试用例时，要同时考虑有效等价类和无效等价类的设计。</p><p>以下结合具体实例给出几条划分等价类的原则。</p><p>（1）如果输入数据规定了取值范围或值的个数，则可以确 定一个有效等价类和两个无效等价类。例如，在程序 的规格说明中，对输入数据有一句话：</p><p>​          “……项数可以从1到999……”</p><p> 则有效等价类是“1≤项数≤999”，两个无效等价类是  “项数&lt;1”及“项数&gt;999”。在数轴上表示为</p><img src="/2022/05/18/software/image-20220605163544844.png" class="" title="image-20220605163544844"><p>（2）如果规格说明规定了数据值的集合，或者是规定了“必须如何”的条件，这时可确定一个有效等价类和  一 个无效等价类。例如，在PASCAL语言中对变量标识符规定为“以字母打头的……串”，那么所有以字母打    头的串构成有效等价类，而不在此集合内（不以字母打头）的串归于无效等价类。</p><p>（3）如果规格说明中规定的是一个条件数据，则可确定一个有效等价类和一个无效等价类。例如：“……成人（年满18岁）须……”，则考虑成人为一有效等价类；未满18岁者为无效等价类。</p><p>（4）如果我们确知，已划分的等价类中各元素在程序中的处理方式不同，则应将此等价类进一步划分成更小的 等价类。  </p><h5 id="2-确定测试用例"><a href="#2-确定测试用例" class="headerlink" title="2.确定测试用例"></a>2.确定测试用例</h5><p>  在确定了等价类之后，建立等价类表，列出所有划分出的</p><p>  等价类如下：</p><img src="/2022/05/18/software/image-20220605163644620.png" class="" title="image-20220605163644620"><p>再从划分出的等价类中按以下原则选择测试用例。</p><p>（1）为每一个等价类规定一个唯一的编号。</p><p>（2）设计一个新的测试用例，使其尽可能多地覆盖尚未被覆盖的有效等价类，重复这一步，直到所有的有效等价类都被覆盖为止。</p><p>（3）设计一个新的测试用例，使其仅覆盖一个尚未被覆盖的无效等价类，重复这一步，直到所有的无效等价类都被覆盖为止。</p><h5 id="3-用等价类划分法设计测试用例的实例"><a href="#3-用等价类划分法设计测试用例的实例" class="headerlink" title="3.用等价类划分法设计测试用例的实例"></a>3.用等价类划分法设计测试用例的实例</h5><p>  在某一PASCAL语言版本中规定：“标识符是由字母开头、后跟字母或数字的任意组合构成。有效字符数为8个，最大字符数为80个。”并且规定：“标识符必须先说明，再使用。”“在同一说明语句中，标识符至少必须有一个。”</p><p>  为用等价类划分的方法得到上述规格说明所规定的要求，本着前述的划分原则，建立输入等价类表，如下表所示（表中括号中的数字为等价类编号）。</p><img src="/2022/05/18/software/image-20220605164035648.png" class="" title="image-20220605164035648"><img src="/2022/05/18/software/image-20220605164058352.png" class="" title="image-20220605164058352"><h4 id="边界值分析"><a href="#边界值分析" class="headerlink" title="边界值分析"></a>边界值分析</h4><h5 id="1-边界值分析方法的考虑"><a href="#1-边界值分析方法的考虑" class="headerlink" title="1.边界值分析方法的考虑"></a>1.边界值分析方法的考虑</h5><p>边界值分析也是一种黑盒测试方法，是对等价类划分方法的补充。人们从长期的测试工作经验中得知，大量的错误是发生在输入或输出范围的边界上，而不是在输入范围的内部。</p><p>这里所说的边界是指，相当于输入等价类和输出等价类而言，稍高于其边界值及稍低于其边界值的一些特定情况。</p><h5 id="2-选择测试用例的原则"><a href="#2-选择测试用例的原则" class="headerlink" title="2.选择测试用例的原则"></a>2.选择测试用例的原则</h5><p>（1）如果输入数据规定了值的范围，则应取刚达到这个范围的边界的值，以及刚刚超越这个范围边界的值作为测试输入数据。</p><p> 例如，若输入值的范围是“−1.0～1.0”，则可选取“−1.0”，“1.0”，“−1.001”，“1.001”作为测试输入数据。</p><p>（2）如果输入数据规定了值的个数，则用最大个数、最小个数、比最大个数多1、比最小个数少1的数作为测试数据。例如，一个输入文件有1～255个记录，设计测试用例时则可以分别设计有1个记录、255个记录以及0个记录和256个记录的输入文件。</p><p>（3）根据规格说明的每个输出数据，使用前面的原则(1)。</p><p>  例如，某程序的功能是计算折扣量，最低折扣量是0元，最高折扣量是1 050元，则设计一些测试用例，使它们恰好产生0元和1 050元 的结果。</p><p>  此外，还可考虑设计结果为负值或大于1 050元的测试用例。</p><p>  由于输入值的边界不与输出值的边界相对应，所以要检查输出值的边界不一定可能，要产生超出输出值值域之外的结果也不一定办得到。尽管如此，必要时还需一试。</p><p>（4）根据规格说明的每个输出数据，使用前面的原则(2)。</p><p> 例如，一个信息检索系统根据用户打入的命令，显示有关文献的摘要，但最多只显示4篇摘要。</p><p> 这时可设计一些测试用例，使得程序分别显示1篇、4篇、0篇摘要，并设计一个有可能使程序错误地显示5篇摘要的测试用例。</p><p>（5）如果程序的规格说明给出的输入域或输出域是有序集合（如有序表，顺序文件等），则应选取集合的第一个元素和最后一个元素作为测试用例。</p><p>（6）如果程序中使用了一个内部数据结构，则应当选择这个内部数据结构的边界上的值作为测试用例。例如，如果程序中定义了一个数组，其元素下标的下界是0，上界是100，那么应选择达到这个数组下标边界的值，如0与100，作为测试用例。</p><p>（7）分析规格说明，找出其他可能的边界条件。</p><img src="/2022/05/18/software/image-20220607092728338.png" class="" title="image-20220607092728338"><p>有二元函数f(x,y)，其中x∈[1,12]，y∈[1,31]。 则采用边界值分析法设计的测试用例是：</p><p>  { &lt;1,15&gt;, &lt;0,15&gt;, &lt;12,15&gt;, &lt;13,15&gt;, &lt;6,15&gt;, &lt;6,1&gt;, &lt;6,0&gt;, &lt;6,31&gt;, &lt;6,32&gt;}</p><p>推论：对于一个含有n个变量的程序，采用边界值分析法测试程序，会产生4n+1个测试用例。</p><h3 id="10-5软件测试的策略"><a href="#10-5软件测试的策略" class="headerlink" title="10.5软件测试的策略"></a>10.5软件测试的策略</h3><p>​    通常软件测试过程按4个步骤进行，即单元测试、组装测试、确认测试和系统测试。如下图所示。</p><img src="/2022/05/18/software/image-20220607092821937.png" class="" title="image-20220607092821937"><h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h4><p>单元测试（unit testing）又称模块测试，是针对软件设计的最小单位—程序模块，进行正确性检验的测试工作。其目的在于发现各模块内部可能存在的各种差错。单元测试需要从程序的内部结构出发设计测试用例。多个模块可以平行地独立进行单元测试。</p><h5 id="1-单元测试的内容"><a href="#1-单元测试的内容" class="headerlink" title="1.单元测试的内容"></a>1.单元测试的内容</h5><p>单元测试主要采用白盒测试方法设计测试用例，辅之以黑盒测试的测试用例，使之对任何合理的输入和不合理的输入，都能鉴别和响应。在单元测试中进行的测试工作如下图所示，需要在5个方面对被测模块进行检查。 </p><img src="/2022/05/18/software/image-20220607092845316.png" class="" title="image-20220607092845316"><p>（1）模块接口测试。在单元测试的开始，应对通过被测模块的数据流进行测试。对模块接口可能需要如下的测试项目：调用本模块时的输入参数与模块的形式参数的匹配情况；本模块调用子模块时，它输入给子模块的参数与子模块中的形式参数的匹配情况；是否修改了只作输入用的形式参数；全局量的定义在各模块中是否一致；限制是否通过形式参数来传送。</p><p>（2）局部数据结构测试。模块的局部数据结构是最常见的错误来源，应设计测试用例以检查以下各种错误：不正确或不一致的数据类型说明；使用尚未赋值或尚未初始化的变量；错误的初始值或错误的默认值；变量名拼写错；不一致的数据类型。可能的话，除局部数据之外的全局数据对模块的影响也需要查清。</p><p>（3）路径测试。选择适当的测试用例，对模块中重要的执行路径进行测试。应当设计测试用例查找由于错误的计算、不正确的比较或不正常的控制流而导致的错误。对基本执行路径和循环进行测试可以发现大量的路径错误。</p><p>（4）错误处理测试。比较完善的模块设计要求能预见出错的条件，并设置适当的出错处理，以便在一旦程序出错时，能对出错程序重作安排，保证其逻辑上的正确性。若出现下列情况之一，则表明模块的错误处理功能包含有错误或缺陷：出错的描述难以理解；出错的描述不足以对错误定义，不足以确定出错的原因；显示的错误与实际的错误不符；对错误条件的处理不正确；在对错误进行处理之前，错误条件已经引起系统的干预等。</p><p>（5）边界测试。在边界上出现错误是常见的, 要特别注意数据流、控制流中刚好等于、大于或小于确定的比较值时出错的可能性，对这些地方要仔细地选择测试用例，认真加以测试。</p><h5 id="2-单元测试的步骤"><a href="#2-单元测试的步骤" class="headerlink" title="2.单元测试的步骤"></a>2.单元测试的步骤</h5><p>  通常单元测试是在编码阶段进行的。在源程序代码编制完成，经过评审和验证，肯定没有语法错误之后，就开始进行单元测试的测试用例设计。 </p><p>  模块并不是一个独立的程序，在考虑测试模块时，同时要考虑它和外界的联系，用一些辅助模块去模拟与被测模块相联系的其他模块。这些辅助模块分为如下两种。</p><p>（1）驱动模块（driver）——相当于被测模块的主程序，它接收测试数据，并把这些数据传送给被测模块，最后再输出实测结果。 </p><p>（2）桩模块（stub）——也叫做存根模块，用以代替被测模块调用的子模块。桩模块可以做少量的数据操作，不需要把子模块所有功能都带进来，但不允许什么事情也不做。被测模块、与它相关的驱动模块及桩模块共同构成了一个“测试环境”，如下图所示。</p><img src="/2022/05/18/software/image-20220607092936589.png" class="" title="image-20220607092936589"><h4 id="组装测试"><a href="#组装测试" class="headerlink" title="组装测试"></a>组装测试</h4><p>组装测试（integrated testing）也叫做集成测试或联合测试。通常，在单元测试的基础上，需要将所有模块按照设计要求组装成为系统，把模块组装为系统的方式有两种：一次性组装方式（big bang）和增值式组装方式。</p><h5 id="1-一次性组装方式"><a href="#1-一次性组装方式" class="headerlink" title="1.一次性组装方式"></a>1.一次性组装方式</h5><p>它是一种非增值式组装方式，也叫做整体拼装。使用这种方式，首先对每个模块分别进行模块测试，然后再把所有模块组装在一起进行测试，最终得到要求的软件系统。例如，有一个模块系统结构，如下图（a）所示，其单元测试和组装顺序（b）所示。  </p><img src="/2022/05/18/software/image-20220607093014288.png" class="" title="image-20220607093014288"><p>   上图中，模块d1，d2，d3，d4，d5是对各个模块作单元测试时建立的驱动模块，s1，s2，s3，s4，s5是为单元测试而建立的桩模块。这种一次性组装方式试图在辅助模块的协助下，在分别完成模块单元测试的基础上，将被测模块连接起来进行测试。但是，由于程序中不可避免地存在涉及模块间接口、全局数据结构等方面的问题，所以一次试运行成功的可能性不很大。 </p><h5 id="2-增值式组装方式"><a href="#2-增值式组装方式" class="headerlink" title="2.增值式组装方式"></a>2.增值式组装方式</h5><p>   这种组装方式又称渐增式组装，首先是对一个个模块进行模块测试，然后将这些模块逐步组装成较大的系统，在组装的过程中边连接边测试，以发现连接过程中产生的问题。最后通过增值逐步组装成为要求的软件系统。增值组装有以下3种做法。</p><h6 id="（1）自顶向下的增值方式。"><a href="#（1）自顶向下的增值方式。" class="headerlink" title="（1）自顶向下的增值方式。"></a>（1）自顶向下的增值方式。</h6><p>这种组装方式是将模块按系统程序结构，沿控制层次自顶向下进行组装，其步骤如下：</p><p>  ① 以主模块为被测模块兼驱动模块，所有直属于主模块的下属模块全部用桩模块代替，对主模块进行测试。</p><p>  ② 采用深度优先（如下图）或宽度优先的策略，逐步用实际模块替换已用过的桩模块，再用新的桩模块代替它们的直接下属模块，与已测试的模块或子系统组装成新的子系统。</p><img src="/2022/05/18/software/image-20220607093050471.png" class="" title="image-20220607093050471"><p>③ 进行回归测试（即重新执行以前做过的全部测试或部分测试），排除组装过程中引入新的错误的可能。</p><p>④ 判断是否所有的模块都已组装到系统中，若是则结束测试，否则转到②去执行。</p><p>自顶向下的组装和测试存在一个逻辑次序问题。在为了充分测试较高层的处理而需要较低层处理的信息时，就会出现这类问题。在自顶向下组装阶段，还需要用桩模块代替较低层的模块，根据不同情况，桩模块的编写，可能如下所示的几种选择。</p><img src="/2022/05/18/software/image-20220607093119179.png" class="" title="image-20220607093119179"><p>  为了能够准确地实施测试，应当让桩模块正确而有效地模拟子模块的功能和合理的接口，不能是只包含返回语句或只显示该模块已调用信息，不执行任何功能的哑模块。</p><h6 id="（2）自底向上的增值方式。"><a href="#（2）自底向上的增值方式。" class="headerlink" title="（2）自底向上的增值方式。"></a>（2）自底向上的增值方式。</h6><p>这种组装方式是从程序模块结构的最底层的模块开始组装和测试。因为模块是自底向上进行组装，对于一个给定层次的模块，它的子模块（包括子模块的所有下属模块）已经组装并测试完成，所以不再需要桩模块。在模块的测试过程中需要从子模块得到的信息可以由直接运行子模块得到。</p><p>  自底向上增值的步骤如下：</p><p>① 由驱动模块控制最底层模块的并行测试；也可以把最底层模块组合成实现某一特定软件功能的簇，由驱动模块控制它进行测试。</p><p>② 用实际模块代替驱动模块，与它已测试的直属子模块组装成为子系统。 </p><p>③ 为子系统配备驱动模块，进行新的测试。</p><p>④ 判断是否已组装到达主模块。若是则结束测试，否则执行②。 </p><p>  自底向上进行组装和测试时，需要为被测模块或子系统编制相应的驱动模块。常见的几种类型的驱动模块如下图所示。 </p><img src="/2022/05/18/software/image-20220607093209949.png" class="" title="image-20220607093209949"><h6 id="（3）混合增值式测试。"><a href="#（3）混合增值式测试。" class="headerlink" title="（3）混合增值式测试。"></a>（3）混合增值式测试。</h6><p>自顶向下增值的方式和自底向上增值的方式各有优缺点。自顶向下增值方式的缺点是需要建立桩模块。自底向上增值方式的缺点是“程序一直未能作为一个实体存在，直到最后一个模块加上去后才形成一个实体”。也就是说，在自底向上组装和测试的过程中，对主要的控制直到最后才接触到。</p><p>鉴于此，通常是把以上两种方式结合起来进行组装和测试。下面简单介绍3种常见的综合增值方式测试。</p><p>① 衍变的自顶向下的增值测试：它的基本思想是强化对输入/输出模块和引入新算法模块的测试，并自底向上组装成为功能相当完整且相对独立的子系统，然后由主模块开始自顶向下进行增值测试。</p><p>② 自底向上—自顶向下的增值测试：它首先对含读操作的子系统自底向上直至根结点模块进行组装和测试，然后对含写操作的子系统作自顶向下的组装与测试。</p><p>③ 回归测试：这种方式采取自顶向下的方式测试被修改的模块及其子模块，然后将这一部分视为子系统，再自底向上测试，以检查该子系统与其上级模块的接口是否适配。</p><h5 id="3．组装测试的组织和实施"><a href="#3．组装测试的组织和实施" class="headerlink" title="3．组装测试的组织和实施"></a>3．组装测试的组织和实施</h5><p>  组装测试是一种正规测试过程，必须精心计划，并与单元测试的完成时间协调起来。在制定测试计划时，应考虑如下因素：</p><p>（1）采用何种系统组装方法进行组装测试。</p><p>（2）组装测试过程中连接各个模块的顺序。</p><p>（3）模块代码编制和测试进度是否与组装测试的顺序一 致。</p><p>（4）测试过程中是否需要专门的硬件设备。</p><p>​    解决了上述问题之后，就可以列出各个模块的编制、测试计划表，标明每个模块单元测试完成的日期、首次组装测试的日期、组装测试全部完成的日期，以及需要的测试用例和所期望的测试结果。</p><p>​    在完成预定的组装测试工作之后，测试小组应负责对测试结果进行整理、分析，形成测试报告。测试报告中要记录实际的测试结果，在测试中发现的问题，解决这些问题的方法以及解决之后再次测试的结果。此外，还应提出目前不能解决、还需要管理人员和开发人员注意的一些问题，提供测试评审和最终决策，以提出处理意见。 </p><h4 id="确认测试"><a href="#确认测试" class="headerlink" title="确认测试"></a>确认测试</h4><p>确认测试（validation testing）又称有效性测试。它的任务是验证软件的有效性，即验证软件的功能和性能及其他特性是否与用户的要求一致。在确认测试阶段需要做的工作如下图所示。 </p><img src="/2022/05/18/software/image-20220607093308024.png" class="" title="image-20220607093308024"><p>  从上图中可看出，首先要进行有效性测试以及软件配置复审，然后进行验收测试和安装测试，在通过了专家鉴定之后，才能成为可交付的软件。</p><h5 id="1-进行有效性测试（黑盒测试）"><a href="#1-进行有效性测试（黑盒测试）" class="headerlink" title="1.进行有效性测试（黑盒测试）"></a>1.进行有效性测试（黑盒测试）</h5><p>有效性测试是在模拟的环境（可能就是开发的环境）下，运用黑盒测试的方法，验证被测软件是否满足需求规格说明书列出的需求。为此，需要首先制订测试计划，规定要进行测试的种类。还需要制订一组测试步骤，描述具体的测试用例。通过实施预定的测试计划和测试步骤，确定软件的特性是否与需求相符，确保所有的软件功能需求都能得到满足，所有的软件性能需求都能达到，所有的文档都正确且便于使用。同时，对其他软件需求，如可移植性、兼容性、出错自动恢复、可维护性等，也都要进行测试，确认是否满足。 </p><h5 id="2-软件配置复查"><a href="#2-软件配置复查" class="headerlink" title="2.软件配置复查"></a>2.软件配置复查</h5><p>  软件配置复查的目的是保证软件配置的所有成分都齐全，各方面的质量都符合要求，具有维护阶段所必须的细节，而且已经编排好分类的目录。</p><p>  除了按合同规定的内容和要求，由人工审查软件配置之外，在确认测试的过程中，应当严格遵守用户手册和操作手册中规定的使用步骤，以便检查这些文档资料的完整性和正确性。必须仔细记录发现的遗漏和错误，并且适当地补充和改正。 </p><h5 id="3-a测试和b测试"><a href="#3-a测试和b测试" class="headerlink" title="3.a测试和b测试"></a>3.a测试和b测试</h5><p>  在软件交付使用之后，用户将如何实际使用程序，对于开发者来说是无法预测的。如果软件是为多个用户开发的产品，让每个用户逐个执行正式的验收测试是不切实际的。很多软件产品生产者采用一种称之为a测试和b测试的测试方法，以发现可能只有最终用户才能发现的错误。</p><p>  a测试是由一个用户在开发环境下进行的测试，也可以是公司内部的用户在模拟实际操作环境下进行的测试。软件在一个自然设置状态下使用，开发者坐在用户旁边，随时记下错误情况和使用中的问题。 a测试的目的是评价软件产品的FLURPS（即功能、局域化、可使用性、可靠性、性能和支持），尤其注重产品的界面和特色。</p><p>  b测试是由软件的多个用户在一个或多个用户的实际使用环境下进行的测试。这些用户是与公司签定了支持产品预发行合同的外部客户。与a测试不同的是，开发者通常不在测试现场，由用户记下遇到的所有问题。开发者在综合用户的报告之后进行修改，最后将软件产品交付给全体用户使用。b测试主要衡量产品的FLURPS，着重于产品的支持性，包括文档、客户培训和支持产品生产能力。只有当a测试达到一定的可靠程度时，才能开始b测试。 </p><p>  由于b测试的主要目标是测试可支持性，所以b测试应尽可能由主持产品发行的人员管理。 </p><h5 id="4-验收测试"><a href="#4-验收测试" class="headerlink" title="4.验收测试"></a>4.验收测试</h5><p>  在通过了系统的有效性测试及软件配置审查之后，应开始系统的验收测试（acceptance testing）。验收测试是以用户为主的测试，软件开发人员和QA（质量保证）人员也应参加。由用户参加设计测试用例，使用用户界面输入测试数据，并分析测试的输出结果。一般使用生产中的实际数据进行测试，在测试过程中，除了考虑软件的功能和性能外，还应对软件的可移植性、兼容性、可维护性、错误的恢复功能等进行确认。</p><h5 id="5-确认测试的结果"><a href="#5-确认测试的结果" class="headerlink" title="5.确认测试的结果"></a>5.确认测试的结果</h5><p>  在全部确认测试的测试用例运行完后，所有的测试结果可以分为两类。</p><p>（1）测试结果与预期的结果相符，这说明软件的这部分功能或性能特征与需求规格说明书相符合，从而这部分程序可以接受。</p><p>（2）测试结果与预期的结果不符，这说明软件的这部分功能或性能特征与需求规格说明不一致，因此，需要开列一张软件各项缺陷表或软件问题报告，通过与用户的协商，解决所发现的缺陷和错误。 </p><h4 id="系统测试"><a href="#系统测试" class="headerlink" title="系统测试"></a>系统测试</h4><p>  系统测试（system testing）是将通过确认测试的软件，作为整个计算机系统的一个元素，与计算机硬件、外设、某些支持软件、数据、人员等其他系统元素结合在一起，在实际运行（使用）环境下，对计算机系统进行一系列的组装测试和确认测试。</p><p>  系统测试的目的在于通过与系统的需求定义作比较，发现软件与系统定义不符合或与之矛盾的地方。系统测试的测试用例应根据系统的需求分析说明书设计，并在实际使用环境下运行。</p><h4 id="测试的类型"><a href="#测试的类型" class="headerlink" title="测试的类型"></a>测试的类型</h4><p> 软件测试实际上是由一系列不同的测试组成。几种常见的软件测试及它们与各个测试步骤中的关系如右图所示。</p><img src="/2022/05/18/software/image-20220607093436113.png" class="" title="image-20220607093436113"><p>上图中各类测试的定义如下：</p><p>（1）功能测试（function testing）：功能测试是在规定的一段时间内运行软件系统的所有功能，以验证这个软件系统有无严重错误。</p><p>（2）回归测试（regression testing）：这种测试用于验证对软件修改后有没有引出新的错误，或者说，验证修改后的软件是否仍然满足系统的需求规格说明。</p><p>（3）可靠性测试（reliability testing）：如果系统需求说明书中有对可靠性的要求，则需进行可靠性测试。通常使用平均失效间隔时间（MTBF）与因故障而停机的时间（MTTR）来度量系统的可靠性。 </p><p>（4）强度测试（stress testing）：也称压力测试，是要检查在系统运行环境恶劣的情况下，系统可以运行到何种程度的测试。因此，进行强度测试，需要提供非正常数量、频率或总量资源来运行系统。实际上，这是对软件的“超负荷”环境或临界环境的运行检验。</p><p>（5）性能测试（performance testing）：是要检查系统是否满足在需求说明书中规定的性能。特别是对于实时系统或嵌入式系统，软件只满足要求的功能而达不到要求的性能是不可接受的，所以还需要进行性能测试。</p><p>（6）恢复测试（recovery testing）：恢复测试是要证实在克服硬件故障（包括掉电、硬件或网络出错等）后，系统能否正常地继续进行工作，并不对系统造成任何损害。</p><p>（7）启动/停止测试（startup/shutdown testing）：这类测试的目的是验证在机器启动及关机阶段，软件系统正确处理的能力。包括反复启动软件系统（例如，操作系统自举、网络的启动、应用程序的调用等），以及在尽可能多的情况下关机。</p><p>（8）配置测试（configuration testing）：这类测试是要检查计算机系统内各个设备或各种资源之间的相互连接和功能分配中的错误。配置测试主要包括以下3种。</p><p>  ① 配置命令测试：验证全部配置命令的可操作性（有效性）；特别对最大配置和最小配置要进行测试。软件配置  和硬件配置都要测试。</p><p>  ② 循环配置测试：证明对每个设备物理与逻辑的、逻辑 与功能的每次循环置换配置都能正常工作。</p><p>  ③ 修复测试：检查每种配置状态及哪个设备是坏的，并 用自动的或手工的方式进行配置状态间的转换。</p><p>（9）安全性测试（security testing）：检验在系统中已经存在的系统安全性和保密性措施是否发挥作用，有无漏洞。为此要了解破坏安全性的方法和工具，并设计一些模拟测试用例对系统进行测试，力图破坏系统的保护机构以进入系统。</p><p>（10）可使用性测试（usability testing）：可使用性测试主要从使用的合理性、方便性等角度对软件系统进行检查，以发现人为因素或使用上的问题。</p><p>（11）可支持性测试（supportability testing）：验证系统的支持策略对于公司与用户方面是否切实可行。它所采用的方法是试运行支持过程（如对有错部分打补丁的过程，热线界面等），对其结果进行质量分析，评审诊断工具、维护过程、内部维护文档；衡量修复一个明显错误所需的平均最少时间。还有一种常用的方法是，在发行前把产品交给用户，向用户提供支持服务的计划，从用户处得到对支持服务的反馈。</p><p>（12）安装测试（installation testing）：安装测试的目的不是查找软件错误，而是查找安装错误。在安装软件系统时，会有多种选择。要分配和装入文件与程序库，布置适用的硬件配置，进行程序的连接。而安装测试是要查找出在这些安装过程中出现的错误。</p><p>（13）互连测试（interoperability testing）：验证两个或多个不同的系统之间的互连性。这类测试对支持标准规格说明，或承诺支持与其他系统互连的软件系统有效。</p><p>（14）兼容性测试（compatibility testing）：验证软件产品在不同版本之间的兼容性。有两类基本的兼容性测试：向下兼容和交错兼容。向下兼容测试是测试软件新版本，保留它早期版本的功能的情况；交错兼容测试是要验证共同存在的两个相关但不同的产品之间的兼容性。</p><p>（15）容量测试（volume testing）：容量测试是要检验系统的能力最高能达到什么程度。 </p><p>（16）文档测试（documentation testing）：检查用户文档（如用户手册）的清晰性和精确性。用户文档中所使用的例子必须在测试中一一试过，确保叙述正确无误。</p><h3 id="10-6人工测试"><a href="#10-6人工测试" class="headerlink" title="10.6人工测试"></a>10.6人工测试</h3><p>​    人工测试不要求在计算机上实际执行被测程序，而是以一些人工的模拟技术和一些类似动态分析所使用的方法对程序进行分析和测试。</p><h4 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h4><p>  静态分析是要对源程序进行静态检验。通常采用以下方法进行。</p><h5 id="1-生成各种引用表"><a href="#1-生成各种引用表" class="headerlink" title="1.生成各种引用表"></a>1.生成各种引用表</h5><p>   在源程序编制完成后生成各种引用表，这是为了支持对源程序进行静态分析。这些表可用手工方式从源程序中提取所需的信息，也可借助于专用的软件工具自动生成。引用表按功能分类，有以下3种。 </p><p>（1）直接从表中查出说明/使用错误，如循环层次表、变量交叉引用表、标号交叉引用表等。</p><p>（2）为用户提供辅助信息，如子程序（宏、函数）引用表、等价（变量、标号）表、常数表等。</p><p>（3）用来作错误预测和程序复杂度计算，如操作符和操作数的统计表等。</p><p>  常用的引用表有如下几种：</p><p>（1）标号交叉引用表：它列出在各模块中出现的全部标号。在表中标出标号的属性：已说明、未说明、已使用和未使用。表中还有在模块以外的全局标号、计算标号等。</p><p>（2）变量交叉引用表：即变量定义与引用表。在表中标明各变量的属性：已说明、未说明、隐式说明，以及类型及使用情况。进一步还可区分是否出现在赋值语句的右边，是否属于COMMON变量、全局变量或特权变量等。</p><p>（3）子程序、宏和函数表：在表中，各个子程序、宏和函数的属性：已定义、未定义和定义类型；参数表：输入参数的个数、顺序和类型；输出参数的个数、顺序和类型；已引用、未引用、引用次数等。</p><p>（4）等价表：表中列出在等价语句或等值语句中出现的全部变量和标号。</p><p>（5）常数表：在表中列出全部数字常数和字符常数，并指出它们在哪些语句中首先被定义，即首先出现在哪些赋值语句的左部或哪些数据语句或参数语句中。 </p><h5 id="2-静态错误分析"><a href="#2-静态错误分析" class="headerlink" title="2.静态错误分析"></a>2.静态错误分析</h5><p>  静态错误分析用于确定在源程序中是否有某类错误或“危险”结构，它有以下几种。</p><p>（1）类型和单位分析：为了发现源程序中数据类型、单位上的不一致性，建立一些程序语言的预处理程序，分析程序中在“下标”类型及循环控制变量方面的类型错误，以及通过使用一般的组合/消去规则，确定表达式的单位错误。</p><p>（2）引用分析：沿着程序的控制路径，检查程序变量的引用异常问题。</p><p>（3）表达式分析：对表达式进行分析，以发现和纠正在表达式中出现的错误，包括： </p><p>  ① 在表达式中不正确地使用了括号造成错误；</p><p>  ② 数组下标越界造成错误；</p><p>  ③ 除式为零造成错误；</p><p>  ④ 对负数开平方，或对p求正切值造成错误；</p><p>  ⑤ 浮点数计算的误差。</p><p>（4）接口分析：分析接口的一致性错误，包括：</p><p>  ① 模块之间接口的一致性和模块与外部数据库之间接口 的一致性；</p><p>  ② 过程和函数过程之间接口的一致性，全局变量和公共数据区在使用上的一致性。 </p><h4 id="人工测试的几种形式"><a href="#人工测试的几种形式" class="headerlink" title="人工测试的几种形式"></a>人工测试的几种形式</h4><p>  静态分析中进行人工测试的主要方法有桌前检查、代码评审和走查。经验表明，使用这种方法能够有效地发现30%～70%的逻辑设计和编码错误。</p><h5 id="1-桌前检查"><a href="#1-桌前检查" class="headerlink" title="1.桌前检查"></a>1.桌前检查</h5><p>桌前检查（desk checking）是一种传统的检查方法，由程序员自己检查自己编写的程序。程序员在程序通过编译之后，进行单元测试设计之前，对源程序代码进行分析、检验并补充相关的文档，目的是发现程序中的错误。检查项目包括如下内容：</p><p>（1）检查变量的交叉引用； </p><p>（2）检查标号的交叉引用； </p><p>（3）检查子程序、宏结构、函数； </p><p>（4）常量检查； </p><p>（5）标准检查；              </p><p>（6）风格检查；</p><p>（7）比较控制流；          </p><p>（8）选择、激活路径；</p><p>（9）对照程序的规格说明，详细阅读源代码； </p><p>（10）补充文档； </p><h5 id="2-代码评审"><a href="#2-代码评审" class="headerlink" title="2.代码评审"></a>2.代码评审</h5><p>  代码评审（code reading review）是由若干程序员和测试员组成一个评审小组，通过阅读、讨论和争议，对程序进行静态分析的过程。</p><p>  代码评审分两步： </p><p>小组负责人提前把设计规格说明书、控制流程图、程序文本及有关要求、规范等分发给小组成员，作为评审的依据； </p><p>召开程序评审会。在会上，由程序员逐句讲解程序的逻辑。在此过程中，程序员或其他小组成员可以提出问题，展开讨论，审查错误是否存在。</p><p>  在会前，应当给评审小组每个成员准备一份常见错误的清单。这个常见错误清单也叫做检查表，它把程序中可能发生的各种错误进行分类，对每一类列举出尽可能多的典型错误，然后把它们制成表格，供会审时使用。这种检查表类似于本章单元测试中给出的检查表。在代码评审之后，需要做以下几件事。</p><p>（1）把发现的错误登记造表，并交给程序员。</p><p>（2）若发现错误较多，或发现重大错误，则在改正之后，再次组织代码评审。</p><p>（3）对错误登记表进行分析、归类、精练，以提高审议效果。</p><h5 id="3-走查"><a href="#3-走查" class="headerlink" title="3.走查"></a>3.走查</h5><p>   走查（walkthroughs）与代码评审基本相同，其过程分为两步。</p><p>（1）把材料先发给走查小组每个成员，让他们认真研究程序，然后再开会。开会的议程与代码评审不同，不是简单地读程序和对照错误检查表进行检查，而是让与会者“充当”计算机，即首先由测试组成员为被测程序准备一批有代表性的测试用例，提交给走查小组。走查小组开会，集体扮演计算机角色，让测试用例沿程序的逻辑运行一遍，随时记录程序的踪迹，供分析和讨论用。</p><p>（2）人们借助于测试用例的媒介作用，对程序的逻辑和功能提出各种疑问，结合问题开展热烈的讨论和争议，能够发现更多的问题。</p><h3 id="10-7调试"><a href="#10-7调试" class="headerlink" title="10.7调试"></a>10.7调试</h3><p>​    调试（debug）也称排错或纠错，它是紧跟在测试之后要做的工作，但与测试不同之处在于：测试着重于发现软件中有错，发现异常或软件运行的可疑之处；而调试的任务在于为错误确切地定位，找到出错的根源，并且通过修改程序将其排除。</p><p>一般地，调试的步骤如下：</p><p>（1）针对测试提供的信息，分析错误的外部表现形式，确定程序出错的位置。</p><p>（2）研究程序的相关部分，找出导致错误的内在原因。</p><p>（3）修改相关的程序段，如果是设计导致的错误，则需修改相关的设计，以排除错误。 </p><p>（4）重复执行以前发现错误的测试，以确认：</p><p>​    ① 该错误确已通过修改而消除；</p><p>​    ② 这次修改并未引进新的错误。</p><p>（5）如果重新测试表明修改无效，发生错误的现象仍然出现，则要撤销上述修改，再次进行信息分析，实施上述过程，直至修改有效为止。</p><h1 id="Part5-软件维护与软件管理"><a href="#Part5-软件维护与软件管理" class="headerlink" title="Part5.软件维护与软件管理"></a>Part5.软件维护与软件管理</h1><h2 id="11-软件维护"><a href="#11-软件维护" class="headerlink" title="11.软件维护"></a>11.软件维护</h2><h3 id="11-1软件维护的概念"><a href="#11-1软件维护的概念" class="headerlink" title="11.1软件维护的概念"></a>11.1软件维护的概念</h3><p>软件维护在软件运行/维护阶段对软件产品所进行的修改就是所谓的维护。根据维护工作的性质，软件维护的活动可以分为以下4种类型。</p><h4 id="1．改正性维护"><a href="#1．改正性维护" class="headerlink" title="1．改正性维护"></a>1．改正性维护</h4><p> 改正性维护（corrective maintenance）为了识别和纠正软件错误、改正软件性能上的缺陷、排除实施中的误使用，应进行的诊断和改正错误的过程。例如，改正性维护可以是改正原来程序中开关使用的错误；解决开发时未能测试各种可能情况带来的问题等。</p><h4 id="2．适应性维护"><a href="#2．适应性维护" class="headerlink" title="2．适应性维护"></a>2．适应性维护</h4><p>   随着信息技术的飞速发展，软件运行的外部环境（新的硬、软件配置）或数据环境（数据库、数据格式、数据输入/输出方式、数据存储介质）可能发生变化，为了使软件适应这种变化，而修改软件的过程叫做适应性维护（adaptive maintenance）。例如，需要对已运行的软件进行改造，以适应网络环境或已升级改版的操作系统要求。</p><h4 id="3．完善性维护"><a href="#3．完善性维护" class="headerlink" title="3．完善性维护"></a>3．完善性维护</h4><p>  为了满足新的功能与性能要求，需要修改或再开发软件，以扩充软件功能、增强软件性能、改进加工效率、提高软件的可维护性。这种情况下进行的维护活动叫做完善性维护（perfective maintenance）。例如，完善性维护可能是修改一个计算工资的程序，使其增加新的扣除项目；缩短系统的应答时间，使其达到特定的要求等。</p><h4 id="4．预防性维护"><a href="#4．预防性维护" class="headerlink" title="4．预防性维护"></a>4．预防性维护</h4><p>  预防性维护（preventive maintenance）是指把今天的方法学用于昨天的系统以满足明天的需要。也就是说，采用先进的软件工程方法对需要维护的软件或软件中的某一部分（重新）进行设计、编码和测试。</p><p>各类维护占总维护工作量的比例</p><p>在整个软件维护阶段花费的全部工作量中，预防性维护只占很小的比例，而完善性维护占了几乎一半的工作量。</p><img src="/2022/05/18/software/image-20220618231446324.png" class="" title="image-20220618231446324"><p>维护工作量在软件生存期中所占比例</p><p>软件维护活动花费的工作量占整个生存期工作量的70%以上（工作量的比例直接反映了成本的比例）</p><img src="/2022/05/18/software/image-20220618231506127.png" class="" title="image-20220618231506127"><h4 id="影响维护工作量的因素"><a href="#影响维护工作量的因素" class="headerlink" title="影响维护工作量的因素"></a>影响维护工作量的因素</h4><p>  在软件维护中，影响维护工作量的因素主要有以下6种:</p><p>（1）系统规模。</p><p>（2）程序设计语言。</p><p>（3）系统年龄大小。</p><p>（4）数据库技术的应用水平。</p><p>（5）所采用的软件开发技术及软件开发工程化的程度。</p><p>（6）其他：如应用的类型、数学模型、任务的难度、IF嵌套深度、索引或下标数等，对维护工作量都有影响。</p><h4 id="软件维护的策略"><a href="#软件维护的策略" class="headerlink" title="软件维护的策略"></a>软件维护的策略</h4><p>  根据影响软件维护工作量的各种因素，针对3种典型维护，James Martin等提出了一些策略，以控制维护成本。</p><p>1．改正性维护</p><p>  应用一些诸如数据库管理系统、软件开发环境、程序自动生成系统和高级（第四代）语言等新技术可大大提高可靠性，并减少进行改正性维护的需要。此外，还可考虑利用应用软件包、防错性程序设计、通过周期性维护审查等策略。</p><p>2．适应性维护</p><p>  这一类的维护不可避免，但可以采用以下策略加以控制。</p><p>（1）在配置管理时，把硬件、操作系统和其他相关环境因素的可能变化考虑在内，可以减少某些适应性维护的工作量。</p><p>（2）把与硬件、操作系统，以及其他外围设备有关的程序归到特定的程序模块中。可把因环境变化而必须修改的程序局部于某些程序模块之中。</p><p>（3）使用内部程序列表、外部文件，以及处理的例行程序包，可为维护时修改程序提供方便。</p><p>（4）使用面向对象技术，增强软件系统的稳定性，易于修改和移植。</p><p>3．完善性维护</p><p>  利用前两类维护中列举的方法，也可以减少这一类维护。特别是数据库管理系统、程序生成器、应用软件包，可减少系统或程序员的维护工作量。</p><p>  此外，建立软件系统的原型，把它在实际系统开发之前提供给用户。用户通过研究原型，进一步完善他们的功能要求，可以减少以后完善性维护的需要。</p><h3 id="11-2软件维护活动"><a href="#11-2软件维护活动" class="headerlink" title="11.2软件维护活动"></a>11.2软件维护活动</h3><h4 id="软件维护申请报告"><a href="#软件维护申请报告" class="headerlink" title="软件维护申请报告"></a>软件维护申请报告</h4><p>  所有软件维护申请应按规定的方式提出。软件维护组织通常提供维护申请报告（maintenance request form，MRF），或称软件问题报告，由申请维护的用户填写。</p><p>如果遇到一个错误，用户必须完整地说明产生错误的情况，包括输入数据、错误清单以及其他有关材料。</p><p>如果申请的是适应性维护或完善性维护，用户必须提出一份修改说明书，列出所有希望的修改。维护申请报告将由维护管理员和系统监督员来研究处理。</p><p>  维护申请报告是由软件组织外部提交的文档，它是计划维护工作的基础。软件组织内部应相应地做出软件修改报告（software change report，SCR），指明：</p><p>● 所需修改变动的性质；</p><p>● 申请修改的优先级；</p><p>● 为满足某个维护申请报告，所需的工作量；</p><p>● 预计修改后的状况。</p><p>  软件修改报告应提交修改负责人，经批准后才能开始进一步安排维护工作。</p><h4 id="软件维护工作流程"><a href="#软件维护工作流程" class="headerlink" title="软件维护工作流程"></a>软件维护工作流程</h4><img src="/2022/05/18/software/image-20220618231920896.png" class="" title="image-20220618231920896"><p>在每次软件维护任务完成后，最好进行一次情况评审，对以下问题做一总结：</p><p>在目前情况下，设计、编码、测试中的哪一方面可以改进？</p><p>哪些维护资源应该有，但没有？</p><p>工作中主要的或次要的障碍是什么？</p><p>从维护申请的类型来看是否应当有预防性维护？</p><p>情况评审对将来的维护工作如何进行会产生重要的影响，并可为软件机构的有效管理提供重要的反馈信息。</p><h4 id="维护档案记录"><a href="#维护档案记录" class="headerlink" title="维护档案记录"></a>维护档案记录</h4><p>  内容包括程序名称、源程序语句条数、机器代码指令条数、所用的程序设计语言、程序安装的日期、程序安装后的运行次数、与程序安装后运行次数有关的处理故障次数、程序改变的层次及名称、修改程序所增加的源程序语句条数、修改程序所减少的源程序语句条数、每次修改所付出的“人时”数、修改程序的日期、软件维护人员的姓名、维护申请报告的名称、维护类型、维护开始时间和维护结束时间、花费在维护上的累计“人时”数、维护工作的净收益等。对每项维护任务都应该收集上述数据。</p><h4 id="维护评价"><a href="#维护评价" class="headerlink" title="维护评价"></a>维护评价</h4><p>评价维护活动可参考的度量值有：</p><ol><li>每次程序运行时的平均出错次数；</li><li>花费在每类维护上的总“人时”数；</li><li>每个程序、每种语言、每种维护类型的程序平均修改次数；</li><li>因为维护，增加或删除每个源程序语句所花费的平均“人时”数；</li><li>用于每种语言的平均“人时”数；</li><li>维护申请报告的平均处理时间；</li><li>各类维护申请的百分比。</li></ol><h3 id="11-3程序修改的步骤及副作用"><a href="#11-3程序修改的步骤及副作用" class="headerlink" title="11.3程序修改的步骤及副作用"></a>11.3程序修改的步骤及副作用</h3><p>  为了正确、有效地进行程序修改，需要经历3个步骤：分析和理解程序、实施修改以及重新验证程序。</p><h4 id="分析和理解程序"><a href="#分析和理解程序" class="headerlink" title="分析和理解程序"></a>分析和理解程序</h4><p>  经过分析，全面、准确、迅速地理解程序是决定维护成败和质量好坏的关键。在这方面，软件的可理解性和文档的质量非常重要。为此必须：</p><p>（1）研究程序的使用环境及有关资料，尽可能得到更多的背景信息；</p><p>（2）理解程序的功能和目标；</p><p>（3）掌握程序的结构信息，即从程序中细分出若干结构成分，如程序系统结构、控制结构、数据结构和输入/输出结构等； </p><p>（4）了解数据流信息，即所涉及的数据来自何处，在哪里被使用；</p><p>（5）了解控制流信息，即执行每条路径的结果；</p><p>（6）如果设计存在，则可利用它们来帮助画出结构图和高层流程图；</p><p>（7）理解程序的操作（使用）要求。</p><p>  为了容易地理解程序，要求自顶向下地理解现有源程序的程序结构和数据结构，为此可采用如下几种方法。</p><p>（1）分析程序结构图。</p><p>（2）数据跟踪。</p><p>（3）控制跟踪。可采用符号执行或实际动态跟踪的方法，了解数据是如何从一个输入源到达输出点的。</p><p>（4）在分析的过程中，应充分阅读和使用源程序清单和文档，分析现有文档的合理性。</p><p>（5）充分使用由编译程序或汇编程序提供的交叉引用表、符号表，以及其他有用的信息。</p><p>（6）如有可能，争取参加开发工作。</p><h4 id="修改程序"><a href="#修改程序" class="headerlink" title="修改程序"></a>修改程序</h4><p>  对程序的修改，必须事先做出计划，有准备地、周密有效</p><p>地实施修改。</p><h5 id="1．设计程序的修改计划"><a href="#1．设计程序的修改计划" class="headerlink" title="1．设计程序的修改计划"></a>1．设计程序的修改计划</h5><p>  程序的修改计划要考虑人员和资源的安排。修改计划的内容主要包括以下几项：</p><p>（1）规格说明信息：数据修改、处理修改、作业控制语言修改、系统之间接口的修改等。</p><p>（2）维护资源：新程序版本、测试数据、所需的软件系统、计算机时间等。</p><p>（3）人员：程序员、用户相关人员、技术支持人员、厂家联系人、数据录入员等。</p><p>（4）提供：纸质、计算机媒体等。</p><p>针对以上每一项，要说明必要性、从何处着手、是否接受、日期等。通常，可采用自顶向下的方法，在理解程序的基础上做如下工作：</p><p>（1）研究程序的各个模块、模块的接口及数据库，从全局的观点提出修改计划。</p><p>（2）依次把要修改的、以及那些受修改影响的模块和数据结构分离出来。 </p><p>（3）详细地分析要修改的，以及那些受变更影响的模块和数据结构的内部细节，设计修改计划，标明新逻辑及 要改动的现有逻辑。</p><p>（4）向用户提供回避措施。用户的某些业务因软件中发生问题而中断，为不让系统长时间停止运行，需把问题局部化，在可能的范围内继续开展业务。</p><h5 id="2．修改代码，以适应变化"><a href="#2．修改代码，以适应变化" class="headerlink" title="2．修改代码，以适应变化"></a>2．修改代码，以适应变化</h5><p>（1）正确、有效地编写修改代码；</p><p>（2）要谨慎地修改程序，尽量保持程序的风格及格式，要在程序清单上注明改动的指令；</p><p>（3）不要匆忙删除程序语句，除非完全肯定它是无用的；</p><p>（4）不要试图共用程序中已有的临时变量或工作区，为了避免冲突或混淆用途，应自行设置自己的变量；</p><p>（5）插入错误检测语句；</p><p>（6）保持详细的维护活动和维护结果记录；</p><p>（7）如果程序结构混乱，修改受到干扰，可抛弃程序重新编写。 </p><h4 id="修改程序的副作用及其控制"><a href="#修改程序的副作用及其控制" class="headerlink" title="修改程序的副作用及其控制"></a>修改程序的副作用及其控制</h4><p>  所谓程序修改的副作用是指因修改软件而造成的错误或其他不希望发生的情况，有以下3种副作用：</p><h5 id="1．修改代码的副作用"><a href="#1．修改代码的副作用" class="headerlink" title="1．修改代码的副作用"></a>1．修改代码的副作用</h5><p>  在使用程序设计语言修改源代码时，都可能引入新的错误。例如，删除或修改一个子程序、删除或修改一个标号、删除或修改一个标识符、改变程序代码的时序关系、改变占用存储的大小、改变逻辑运算符、修改文件的打开或关闭、改进程序的执行效率，以及把设计上的改变翻译成代码的改变、为边界条件的逻辑测试做出改变时，都容易引入错误。</p><h5 id="2．修改数据的副作用"><a href="#2．修改数据的副作用" class="headerlink" title="2．修改数据的副作用"></a>2．修改数据的副作用</h5><p>  在修改数据结构时，有可能造成软件设计与数据结构不匹配，因而导致软件出错。修改数据的副作用是修改软件信息结构导致的结果。例如，在重新定义局部的或全局的常量、重新定义记录或文件的格式、增大或减小一个数组或高层数据结构的大小、修改全局或公共数据、重新初始化控制标志或指针、重新排列输入/输出或子程序的参数时，容易导致设计与数据不相容的错误。数据副作用可以通过详细的设计文档加以控制。</p><h5 id="3．修改文档的副作用"><a href="#3．修改文档的副作用" class="headerlink" title="3．修改文档的副作用"></a>3．修改文档的副作用</h5><p>  对数据流、软件结构、模块逻辑或任何其他有关特性进行修改时，必须对相关技术文档进行相应修改。如果对可执行软件的修改不反映在文档里，会产生文档的副作用。例如，对交互输入的顺序或格式进行修改，如果没有正确地记入文档中，可能引起重大的问题。过时的文档内容、索引和文本可能造成冲突，引起用户业务的失败和不满。因此，必须在软件交付之前对整个软件配置进行评审，以减少文档的副作用。</p><p>  为了控制因修改而引起的副作用，要做到：</p><p>（1）按模块把修改分组；</p><p>（2）自顶向下地安排被修改模块的顺序；</p><p>（3）每次修改一个模块；</p><p>（4）对于每个修改了的模块，在安排修改下一个模块之前，要确定这个修改的副作用，可以使用交叉引用表、存储映象表、执行流程跟踪等。</p><h4 id="重新验证程序"><a href="#重新验证程序" class="headerlink" title="重新验证程序"></a>重新验证程序</h4><h5 id="1．静态确认"><a href="#1．静态确认" class="headerlink" title="1．静态确认"></a>1．静态确认</h5><p>  修改的软件，通常伴随着引起新的错误的危险。为了能够做出正确的判定，验证修改后的程序至少需要两个人参加。要检查：</p><p>（1）修改是否涉及规格说明？修改结果是否符合规格说明？有没有歪曲规格说明？</p><p>（2）程序的修改是否足以修正软件中的问题？源程序代码有无逻辑错误？修改时有无修补失误？ </p><p>（3）修改部分对其他部分有无不良影响（副作用）？对软件进行修改，常常会引发别的问题，因此，有必要 检查修改的影响范围。</p><h5 id="2．确认测试"><a href="#2．确认测试" class="headerlink" title="2．确认测试"></a>2．确认测试</h5><p>  在充分进行了以上确认的基础上，要用计算机对修改程 序进行确认测试。</p><p>（1）确认测试顺序：先对修改部分进行测试，然后隔离修改部分，测试程序的未修改部分，最后再把它们集成起来进行测试。这种测试称为回归测试。</p><p>（2）准备标准的测试用例。</p><p>（3）充分利用软件工具帮助重新验证过程。</p><p>（4）在重新确认过程中，需邀请用户参加。</p><h5 id="3．维护后的验收"><a href="#3．维护后的验收" class="headerlink" title="3．维护后的验收"></a>3．维护后的验收</h5><p>  在交付新软件之前，维护主管部门要检验：</p><p>（1）全部文档是否完备，并已更新；</p><p>（2）所有测试用例和测试结果已经正确记载；</p><p>（3）记录软件配置所有副本的工作已经完成；</p><p>（4）维护工序和责任是明确的。</p><h3 id="11-4软件的维护性"><a href="#11-4软件的维护性" class="headerlink" title="11.4软件的维护性"></a>11.4软件的维护性</h3><h4 id="软件维护性的定义"><a href="#软件维护性的定义" class="headerlink" title="软件维护性的定义"></a>软件维护性的定义</h4><p> 软件维护性是指当对软件实施各种类型的维护而进行修改时，软件产品可被修改的能力。</p><p>许多软件的维护十分困难，原因在于这些软件的文档和源程序难于理解，又难于修改。从原则上讲，软件开发工作应严格按照软件工程的要求，遵循特定的软件标准或规范进行。但实际上往往由于种种原因并不能真正做到，如文档不全、质量差、开发过程不注意采用先进的方法，忽视程序设计风格等，因此，造成软件维护工作量加大，成本上升，修改出错率升高。此外，许多维护要求并不是因为程序中出错而提出的，而是为适应环境变化或需求变化而提出的。由于维护工作面广，维护难度大，稍有不慎，就会在修改中给软件带来新的问题或引入新的差错，所以，为了使得软件能够易于维护，必须考虑使软件具有可维护性。</p><p> 软件维护的子特性：  </p><img src="/2022/05/18/software/image-20220618232642948.png" class="" title="image-20220618232642948"><p>软件维护性度量的任务是对软件产品的维护性给出量化的评价。</p><p>软件维护的度量也分为内部维护性度量和外部维护性度量，两者的差别如下表。</p><img src="/2022/05/18/software/image-20220618232705710.png" class="" title="image-20220618232705710"><h3 id="11-5提高软件维护性的方法"><a href="#11-5提高软件维护性的方法" class="headerlink" title="11.5提高软件维护性的方法"></a>11.5提高软件维护性的方法</h3><h4 id="使用提高软件质量的技术和工具"><a href="#使用提高软件质量的技术和工具" class="headerlink" title="使用提高软件质量的技术和工具"></a>使用提高软件质量的技术和工具</h4><h5 id="1．模块化"><a href="#1．模块化" class="headerlink" title="1．模块化"></a>1．模块化</h5><p>  模块化技术的优点是如果需要改变某个模块的功能，则只要改变这个模块，对其他模块影响很小；如果需要增加程序的某些功能，则仅需增加完成这些功能的新的模块或模块层；程序的测试与重复测试比较容易；程序错误易于定位和纠正；容易提高程序效率。</p><h5 id="2．结构化程序设计"><a href="#2．结构化程序设计" class="headerlink" title="2．结构化程序设计"></a>2．结构化程序设计</h5><p>  结构化程序设计不仅使得模块结构标准化，而且将模块间的相互作用也标准化了，因而把模块化又向前推进了一步。采用结构化程序设计可以获得良好的程序结构。</p><h5 id="3．使用结构化程序设计技术，提高现有系统的可维护性"><a href="#3．使用结构化程序设计技术，提高现有系统的可维护性" class="headerlink" title="3．使用结构化程序设计技术，提高现有系统的可维护性"></a>3．使用结构化程序设计技术，提高现有系统的可维护性</h5><p>（1）采用备用件的方法——当要修改某一个模块时，用一个新的结构良好的模块替换掉整个模块。 </p><p>（2）采用自动重建结构和重新格式化的工具（结构更新技术）。</p><p>（3）改进现有程序的不完善的文档。</p><p>（4）使用结构化程序设计方法实现新的子系统。</p><p>（5）采用结构化小组。</p><h4 id="实施开发阶段产品的维护性审查"><a href="#实施开发阶段产品的维护性审查" class="headerlink" title="实施开发阶段产品的维护性审查"></a>实施开发阶段产品的维护性审查</h4><p>  质量保证审查除了保证软件得到适当的质量外，还可以用来检测在开发和维护阶段内发生的质量变化。一旦检测出问题来，就可以采取措施纠正，以控制不断增长的软件维护成本。为了保证软件的可维护性，有4种类型的软件审查。</p><h5 id="1．检查点审查"><a href="#1．检查点审查" class="headerlink" title="1．检查点审查"></a>1．检查点审查</h5><p>保证软件质量的最佳方法是在软件开发的最初阶段就把质量要求考虑进去，并在开发过程每一个阶段的终点，设置检查点进行检查。</p><p>检查的目的是要证实，已开发的软件是否符合标准，是否满足规定的质量需求。</p><p>在不同的检查点，检查的重点不完全相同，例如，在设计阶段，检查重点是可理解性、可修改性、可测试性。可理解性检查的重点是程序的复杂性。如下图所示。</p><img src="/2022/05/18/software/image-20220618232852548.png" class="" title="image-20220618232852548"><h5 id="2．验收检查"><a href="#2．验收检查" class="headerlink" title="2．验收检查"></a>2．验收检查</h5><p>  验收检查是一个特殊的检查点的检查，是交付使用前的最后一次检查，是软件投入运行之前保证可维护性的最后机会。以下是验收检查必须遵循的最小验收标准。</p><p>（1）需求和规范标准</p><p>① 需求应当以可测试的术语进行书写，按优先次序排列和定义。</p><p>② 区分必须的、任选的、将来的需求。</p><p>③ 包括对系统运行时的计算机设备的需求；对维护、测试、操作，以及维护人员的需求；对测试工具等的需求。</p><p>（2）设计标准</p><p>① 程序应设计成分层的模块结构。每个模块应完成唯一的功能，并达到高内聚、低耦合。</p><p>② 通过一些知道预期变化的实例，说明设计的可扩充性、可缩减性和可适应性。</p><p>（3）源代码标准</p><p>① 尽可能使用程序设计语言的标准版本。</p><p>② 所有的代码都必须具有良好的结构。</p><p>③ 所有的代码都必须文档化，在注释中说明它的输入、输出，以及便于测试/再测试的一些特点与风格。</p><p>（4）文档标准</p><p> 文档中应说明程序的输入/输出、使用的方法/算法、错误恢复方法、所有参数的范围、默认条件等。</p><h5 id="3．周期性地维护审查"><a href="#3．周期性地维护审查" class="headerlink" title="3．周期性地维护审查"></a>3．周期性地维护审查</h5><p>检查点复查和验收检查，可用来保证新软件系统的可维护性。对已有的软件系统，则应当进行周期性的维护检查。</p><p> 软件在运行期间，必须对软件做周期性的维护审查，以跟踪软件质量的变化。</p><p>周期性维护审查实际上是开发阶段检查点复查的继续，并且采用的检查方法、检查内容都是相同的。</p><h5 id="4．对软件包进行检查"><a href="#4．对软件包进行检查" class="headerlink" title="4．对软件包进行检查"></a>4．对软件包进行检查</h5><p>  软件包是一种标准化了的、可为不同单位、不同用户使用的封装软件。</p><p>  使用单位的维护人员首先要仔细分析、研究开发商提供的用户手册、操作手册、培训教程、新版本说明、计算机环境要求书，以及开发商提供的验收测试报告等，在此基础上，深入了解本单位的希望和要求，编制软件包的检验程序。该检验程序检查软件包程序所执行的功能是否与用户的要求和条件相一致。</p><h4 id="改进文档"><a href="#改进文档" class="headerlink" title="改进文档"></a>改进文档</h4><p>  程序文档是对程序总目标、程序各组成部分之间的关系、程序设计策略、程序实现过程的历史数据等的说明和补充。程序文档对提高程序的可理解性有着十分重要作用。在软件维护阶段，利用历史文档，可以大大简化维护工作。</p><p>历史文档有如下3种：</p><p>（1）系统开发日志：它记录了项目的开发原则、开发目标、优先次序、选择某种设计方案的理由、决策策略、使用的测试技术和工具、每天出现的问题、计划的成功和失败之处等。</p><p>（2）错误记载：它把出错的历史情况记录下来，对于预测今后可能发生的错误类型及出错频率有很大帮助。也有助于维护人员查明出现故障的程序或模块，以便去修改或替换它们。</p><p>（3）系统维护日志：记录了在维护阶段有关系统修改和修改目的的信息。包括修改的宗旨、修改的策略、存在的问题、问题所在的位置、解决问题的办法、修改要求和说明、注意事项、新版本说明等信息。</p><h2 id="12-软件过程与软件改进"><a href="#12-软件过程与软件改进" class="headerlink" title="12.软件过程与软件改进"></a>12.软件过程与软件改进</h2><h2 id="13-软件项目管理"><a href="#13-软件项目管理" class="headerlink" title="13.软件项目管理"></a>13.软件项目管理</h2><h2 id="14-软件工程标准及软件文档"><a href="#14-软件工程标准及软件文档" class="headerlink" title="14.软件工程标准及软件文档"></a>14.软件工程标准及软件文档</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Part1-软件工程概述&quot;&gt;&lt;a href=&quot;#Part1-软件工程概述&quot; class=&quot;headerlink&quot; title=&quot;Part1.软件工程概述&quot;&gt;&lt;/a&gt;Part1.软件工程概述&lt;/h1&gt;&lt;h2 id=&quot;1-软件与软件工程的概念</summary>
      
    
    
    
    
    <category term="review" scheme="https://github.com/sterne012/sterne012.github.io/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>数据结构题集整理</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/05/13/DataStructuresTest/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/05/13/DataStructuresTest/</id>
    <published>2022-05-13T06:57:54.000Z</published>
    <updated>2022-05-14T10:29:06.085Z</updated>
    
    <content type="html"><![CDATA[<p>因为考试看不到练习的在线题集，所以放一下原题和代码</p><p><del>但是有一说一，因为blog没做目录，这篇翻起来应该相当痛苦（）</del>可恶，为什么时至今日我才发现目录能调出来</p><h1 id="1-tree"><a href="#1-tree" class="headerlink" title="1.tree"></a>1.tree</h1><h2 id="1-1-funx-二叉树的遍历"><a href="#1-1-funx-二叉树的遍历" class="headerlink" title="1-1(funx) 二叉树的遍历"></a>1-1(funx) 二叉树的遍历</h2><p>本题要求给定二叉树的4种遍历。</p><p>函数接口定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PostorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LevelorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>;<br></code></pre></td></tr></table></figure><p>其中<code>BinTree</code>结构定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span> *<span class="hljs-title">Position</span>;</span><br><span class="hljs-keyword">typedef</span> Position BinTree;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span>&#123;</span><br>    ElementType Data;<br>    BinTree Left;<br>    BinTree Right;<br>&#125;;<br></code></pre></td></tr></table></figure><p>要求4个函数分别按照访问顺序打印出结点的内容，格式为一个空格跟着一个字符。</p><p>裁判测试程序样例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> ElementType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span> *<span class="hljs-title">Position</span>;</span><br><span class="hljs-keyword">typedef</span> Position BinTree;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span>&#123;</span><br>    ElementType Data;<br>    BinTree Left;<br>    BinTree Right;<br>&#125;;<br><br><span class="hljs-function">BinTree <span class="hljs-title">CreatBinTree</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">/* 实现细节忽略 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PostorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LevelorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    BinTree BT = <span class="hljs-built_in">CreatBinTree</span>();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Inorder:&quot;</span>);    <span class="hljs-built_in">InorderTraversal</span>(BT);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Preorder:&quot;</span>);   <span class="hljs-built_in">PreorderTraversal</span>(BT);   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Postorder:&quot;</span>);  <span class="hljs-built_in">PostorderTraversal</span>(BT);  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Levelorder:&quot;</span>); <span class="hljs-built_in">LevelorderTraversal</span>(BT); <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/* 你的代码将被嵌在这里 */</span><br></code></pre></td></tr></table></figure><p>输出样例（对于图中给出的树）：</p><img src="/2022/05/13/DataStructuresTest/45.jpg" class="" title="img"><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Inorder</span><span class="hljs-operator">:</span> <span class="hljs-built_in">D</span> <span class="hljs-variable">B</span> <span class="hljs-built_in">E</span> <span class="hljs-variable">F</span> <span class="hljs-variable">A</span> <span class="hljs-variable">G</span> <span class="hljs-variable">H</span> <span class="hljs-built_in">C</span> <span class="hljs-built_in">I</span><br><span class="hljs-variable">Preorder</span><span class="hljs-operator">:</span> <span class="hljs-variable">A</span> <span class="hljs-variable">B</span> <span class="hljs-built_in">D</span> <span class="hljs-variable">F</span> <span class="hljs-built_in">E</span> <span class="hljs-built_in">C</span> <span class="hljs-variable">G</span> <span class="hljs-variable">H</span> <span class="hljs-built_in">I</span><br><span class="hljs-variable">Postorder</span><span class="hljs-operator">:</span> <span class="hljs-built_in">D</span> <span class="hljs-built_in">E</span> <span class="hljs-variable">F</span> <span class="hljs-variable">B</span> <span class="hljs-variable">H</span> <span class="hljs-variable">G</span> <span class="hljs-built_in">I</span> <span class="hljs-built_in">C</span> <span class="hljs-variable">A</span><br><span class="hljs-variable">Levelorder</span><span class="hljs-operator">:</span> <span class="hljs-variable">A</span> <span class="hljs-variable">B</span> <span class="hljs-built_in">C</span> <span class="hljs-built_in">D</span> <span class="hljs-variable">F</span> <span class="hljs-variable">G</span> <span class="hljs-built_in">I</span> <span class="hljs-built_in">E</span> <span class="hljs-variable">H</span><br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c">BinTree q[<span class="hljs-number">10007</span>];<br><span class="hljs-keyword">int</span> front=<span class="hljs-number">0</span>,rear=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(BinTree x)</span></span>&#123;<br>    q[rear++]=x;<br>&#125;<br><span class="hljs-function">BinTree <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> q[front++];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(BT)&#123;<br>        InorderTraversal(BT-&gt;Left);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c&quot;</span>,BT-&gt;Data);<br>        InorderTraversal(BT-&gt;Right);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(BT)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c&quot;</span>,BT-&gt;Data);<br>        PreorderTraversal(BT-&gt;Left);<br>        PreorderTraversal(BT-&gt;Right);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PostorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(BT)&#123;<br>        PostorderTraversal(BT-&gt;Left);<br>        PostorderTraversal(BT-&gt;Right);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c&quot;</span>,BT-&gt;Data);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LevelorderTraversal</span><span class="hljs-params">( BinTree BT )</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(BT) &#123;<br>        push(BT);<br>        <span class="hljs-keyword">while</span> (front != rear) &#123;<br>            BinTree t = pop();<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c&quot;</span>, t-&gt;Data);<br>            <span class="hljs-keyword">if</span> (t-&gt;Left) push(t-&gt;Left);<br>            <span class="hljs-keyword">if</span> (t-&gt;Right) push(t-&gt;Right);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-1-Tree-Traversals-Again"><a href="#1-1-Tree-Traversals-Again" class="headerlink" title="1-1 Tree Traversals Again"></a>1-1 Tree Traversals Again</h2><p>An inorder binary tree traversal can be implemented in a non-recursive way with a stack. For example, suppose that when a 6-node binary tree (with the keys numbered from 1 to 6) is traversed, the stack operations are: push(1); push(2); push(3); pop(); pop(); push(4); pop(); pop(); push(5); push(6); pop(); pop(). Then a unique binary tree (shown in Figure 1) can be generated from this sequence of operations. Your task is to give the postorder traversal sequence of this tree.</p><img src="/2022/05/13/DataStructuresTest/30-16524268907273.jpg" class="" title="img"><p>Figure 1</p><p>Input Specification:</p><p>Each input file contains one test case. For each case, the first line contains a positive integer <em>N</em> (≤30) which is the total number of nodes in a tree (and hence the nodes are numbered from 1 to <em>N</em>). Then 2<em>N</em> lines follow, each describes a stack operation in the format: “Push X” where X is the index of the node being pushed onto the stack; or “Pop” meaning to pop one node from the stack.</p><p>Output Specification:</p><p>For each test case, print the postorder traversal sequence of the corresponding tree in one line. A solution is guaranteed to exist. All the numbers must be separated by exactly one space, and there must be no extra space at the end of the line.</p><p>Sample Input:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs in">6<br>Push 1<br>Push 2<br>Push 3<br>Pop<br>Pop<br>Push 4<br>Pop<br>Pop<br>Push 5<br>Push 6<br>Pop<br>Pop<br></code></pre></td></tr></table></figure><p>Sample Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">3 4 2 6 5 1<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> data;<br>    node *left, *right;<br>    <span class="hljs-keyword">bool</span> lisnull,risnull;<br>    <span class="hljs-built_in">node</span>()&#123;<br>        left= <span class="hljs-literal">nullptr</span>;<br>        right= <span class="hljs-literal">nullptr</span>;<br>        lisnull=<span class="hljs-literal">false</span>;<br>        risnull=<span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;node,*Tree;<br>stack&lt;Tree&gt; st;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateTree</span><span class="hljs-params">(Tree &amp;T)</span></span>&#123;<span class="hljs-comment">//非递归建树模版</span><br>    string s;<span class="hljs-keyword">int</span> x;<br>    cin&gt;&gt;s&gt;&gt;x;<br>    T-&gt;data=x;<br>    st.<span class="hljs-built_in">push</span>(T);<br>    <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>())&#123;<br>        cin&gt;&gt;s;<br>        <span class="hljs-keyword">if</span>(s==<span class="hljs-string">&quot;Push&quot;</span>)&#123;<br>            cin&gt;&gt;x;<br>            Tree temp=<span class="hljs-keyword">new</span> node;<br>            temp-&gt;data=x;<br>            Tree f=st.<span class="hljs-built_in">top</span>();<br>            <span class="hljs-keyword">if</span>(!f-&gt;lisnull) &#123;<br>                f-&gt;left=temp;<br>                f-&gt;lisnull=<span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!f-&gt;risnull) &#123;<br>                f-&gt;right=temp;<br>                f-&gt;risnull=<span class="hljs-literal">true</span>;<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            st.<span class="hljs-built_in">push</span>(temp);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s==<span class="hljs-string">&quot;Pop&quot;</span>)&#123;<br>            Tree p=st.<span class="hljs-built_in">top</span>();<br>            <span class="hljs-keyword">if</span>(!p-&gt;lisnull)&#123;<br>                p-&gt;left= <span class="hljs-literal">nullptr</span>;<br>                p-&gt;lisnull=<span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                p-&gt;right= <span class="hljs-literal">nullptr</span>;<br>                p-&gt;risnull=<span class="hljs-literal">true</span>;<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PostOrder</span><span class="hljs-params">(Tree T)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(T)&#123;<br>        <span class="hljs-built_in">PostOrder</span>(T-&gt;left);<br>        <span class="hljs-built_in">PostOrder</span>(T-&gt;right);<br>        cout&lt;&lt;T-&gt;data;<br>        <span class="hljs-keyword">if</span>(--n!=<span class="hljs-number">0</span>)&#123;cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;&#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    Tree T=<span class="hljs-keyword">new</span> node;<br>    <span class="hljs-built_in">CreateTree</span>(T);<br>    <span class="hljs-built_in">PostOrder</span>(T);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-2-还原二叉树"><a href="#1-2-还原二叉树" class="headerlink" title="1-2 还原二叉树"></a>1-2 还原二叉树</h2><p>给定一棵二叉树的先序遍历序列和中序遍历序列，要求计算该二叉树的高度。</p><p>输入格式:</p><p>输入首先给出正整数N（≤50），为树中结点总数。下面两行先后给出先序和中序遍历序列，均是长度为N的不包含重复英文字母（区别大小写）的字符串。</p><p>输出格式:</p><p>输出为一个整数，即该二叉树的高度。</p><p>输入样例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs in">9<br>ABDFGHIEC<br>FDHGIBEAC<br></code></pre></td></tr></table></figure><p>输出样例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">5<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> Elemtype;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTree</span>&#123;</span><br>    Elemtype data;<br>    BiTree *lchild,*rchild;<br>&#125;BiTree,*Tree;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">10007</span>;<br>Elemtype pre[maxn],in[maxn];<br><span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br><br><span class="hljs-function">Tree <span class="hljs-title">CreateTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pre_l,<span class="hljs-keyword">int</span> pre_r,<span class="hljs-keyword">int</span> in_l,<span class="hljs-keyword">int</span> in_r)</span></span>&#123;<span class="hljs-comment">//DLR LDR的范围</span><br>    <span class="hljs-keyword">auto</span> T=(Tree)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(BiTree));<br>    T-&gt;data=pre[pre_l];<br>    T-&gt;lchild= <span class="hljs-literal">nullptr</span>;<br>    T-&gt;rchild= <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">int</span> llen,rlen;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=in_l;i&lt;=in_r;i++)&#123;<br>        <span class="hljs-keyword">if</span>(in[i]==T-&gt;data)&#123;<br>            llen=i-in_l;<br>            rlen=in_r-i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(llen)&#123;<br>        T-&gt;lchild=<span class="hljs-built_in">CreateTree</span>(pre_l+<span class="hljs-number">1</span>,pre_l+llen,in_l,in_l+llen<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(rlen)&#123;<br>        T-&gt;rchild=<span class="hljs-built_in">CreateTree</span>(pre_r-rlen+<span class="hljs-number">1</span>,pre_r,in_r-rlen+<span class="hljs-number">1</span>,in_r);<br>    &#125;<br>    <span class="hljs-keyword">return</span> T;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getDepth</span><span class="hljs-params">(Tree T)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!T) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">getDepth</span>(T-&gt;lchild), <span class="hljs-built_in">getDepth</span>(T-&gt;rchild))+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n;cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;pre[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;in[i];<br>    &#125;<br><br>    Tree T= <span class="hljs-built_in">CreateTree</span>(<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,n);<br>    cout&lt;&lt;<span class="hljs-built_in">getDepth</span>(T)&lt;&lt;endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">7</span><br><span class="hljs-comment">ABCDEFG</span><br><span class="hljs-comment">CBEDAFG</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="前中后序遍历建树模板"><a href="#前中后序遍历建树模板" class="headerlink" title="*前中后序遍历建树模板"></a>*前中后序遍历建树模板</h2><p>啊，我想想放哪了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Tree <span class="hljs-title">CreateTree</span><span class="hljs-params">(<span class="hljs-keyword">char</span> in[],<span class="hljs-keyword">char</span> post[],<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    node *p=<span class="hljs-keyword">new</span> node;<br>    p-&gt;data=post[n<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(;i&lt;n&amp;&amp;(in[i]!=p-&gt;data);i++);<br>    p-&gt;l= <span class="hljs-built_in">CreateTree</span>(in,post,i);<br>    p-&gt;r= <span class="hljs-built_in">CreateTree</span>(in+<span class="hljs-number">1</span>+i,post+i,n-i<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><span class="hljs-function">Tree <span class="hljs-title">CreateTree2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pre1,<span class="hljs-keyword">int</span> pre2,<span class="hljs-keyword">int</span> in1,<span class="hljs-keyword">int</span> in2)</span></span>&#123;<br>    node *p=<span class="hljs-keyword">new</span> node;<br>    p-&gt;l= <span class="hljs-literal">nullptr</span>;p-&gt;r= <span class="hljs-literal">nullptr</span>;<br>    p-&gt;data=pre[pre1];<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(in[in1+i]!=p-&gt;data) i++;<br>    <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)<br>        p-&gt;l= <span class="hljs-built_in">CreateTree2</span>(pre1+<span class="hljs-number">1</span>,pre2+i,in1,in1+i<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">if</span>(in1+i&lt;in2)<br>        p-&gt;r= <span class="hljs-built_in">CreateTree2</span>(pre1+i+<span class="hljs-number">1</span>,pre2,in1+i+<span class="hljs-number">1</span>,in2);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-3-玩转二叉树"><a href="#1-3-玩转二叉树" class="headerlink" title="1-3 玩转二叉树"></a>1-3 玩转二叉树</h2><p>给定一棵二叉树的中序遍历和前序遍历，请你先将树做个镜面反转，再输出反转后的层序遍历的序列。所谓镜面反转，是指将所有非叶结点的左右孩子对换。这里假设键值都是互不相等的正整数。</p><p>输入格式：</p><p>输入第一行给出一个正整数<code>N</code>（≤30），是二叉树中结点的个数。第二行给出其中序遍历序列。第三行给出其前序遍历序列。数字间以空格分隔。</p><p>输出格式：</p><p>在一行中输出该树反转后的层序遍历的序列。数字间以1个空格分隔，行首尾不得有多余空格。</p><p>输入样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs in">7<br>1 2 3 4 5 6 7<br>4 1 3 2 6 5 7<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">4 6 1 7 5 3 2<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Elemtype;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTree</span>&#123;</span><br>    Elemtype data;<br>    BiTree *lchild,*rchild;<br>&#125;BiTree,*Tree;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">10007</span>;<br>Elemtype pre[maxn],in[maxn];<br><span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-function">Tree <span class="hljs-title">CreateTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pre_l,<span class="hljs-keyword">int</span> pre_r,<span class="hljs-keyword">int</span> in_l,<span class="hljs-keyword">int</span> in_r)</span></span>&#123;<span class="hljs-comment">//DLR LDR的范围 和上一题一样</span><br>    <span class="hljs-keyword">auto</span> T=(Tree)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(BiTree));<br>    T-&gt;data=pre[pre_l];<br>    T-&gt;lchild= <span class="hljs-literal">nullptr</span>;<br>    T-&gt;rchild= <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">int</span> llen,rlen;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=in_l;i&lt;=in_r;i++)&#123;<br>        <span class="hljs-keyword">if</span>(in[i]==T-&gt;data)&#123;<br>            llen=i-in_l;<br>            rlen=in_r-i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(llen)&#123;<br>        T-&gt;lchild=<span class="hljs-built_in">CreateTree</span>(pre_l+<span class="hljs-number">1</span>,pre_l+llen,in_l,in_l+llen<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(rlen)&#123;<br>        T-&gt;rchild=<span class="hljs-built_in">CreateTree</span>(pre_r-rlen+<span class="hljs-number">1</span>,pre_r,in_r-rlen+<span class="hljs-number">1</span>,in_r);<br>    &#125;<br>    <span class="hljs-keyword">return</span> T;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">reverse</span><span class="hljs-params">(Tree T)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(T)&#123;<br>        <span class="hljs-keyword">auto</span> temp=T-&gt;lchild;<br>        T-&gt;lchild=T-&gt;rchild;<br>        T-&gt;rchild=temp;<br>        <span class="hljs-built_in">reverse</span>(T-&gt;lchild);<br>        <span class="hljs-built_in">reverse</span>(T-&gt;rchild);<br>    &#125;<br>&#125;<br>Tree q[<span class="hljs-number">10007</span>];<br><span class="hljs-keyword">int</span> front=<span class="hljs-number">0</span>,rear=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(Tree x)</span></span>&#123;<br>    q[rear++]=x;<br>&#125;<br><span class="hljs-function">Tree <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> q[front++];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LevelorderTraversal</span><span class="hljs-params">( Tree BT )</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(BT) &#123;<br>        <span class="hljs-built_in">push</span>(BT);<br>        <span class="hljs-keyword">while</span> (front != rear) &#123;<br>            Tree t = <span class="hljs-built_in">pop</span>();<br>            cout&lt;&lt;t-&gt;data;<br>            <span class="hljs-keyword">if</span>(--n!=<span class="hljs-number">0</span>) cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>            <span class="hljs-keyword">if</span> (t-&gt;lchild) <span class="hljs-built_in">push</span>(t-&gt;lchild);<br>            <span class="hljs-keyword">if</span> (t-&gt;rchild) <span class="hljs-built_in">push</span>(t-&gt;rchild);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;in[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;pre[i];<br>    &#125;<br><br><br>    Tree T= <span class="hljs-built_in">CreateTree</span>(<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-built_in">reverse</span>(T);<br>    <span class="hljs-built_in">LevelorderTraversal</span>(T);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">7</span><br><span class="hljs-comment">ABCDEFG</span><br><span class="hljs-comment">CBEDAFG</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="1-4-小字辈"><a href="#1-4-小字辈" class="headerlink" title="1-4 小字辈"></a>1-4 小字辈</h2><p>本题给定一个庞大家族的家谱，要请你给出最小一辈的名单。</p><p>输入格式：</p><p>输入在第一行给出家族人口总数 N（不超过 100 000 的正整数） —— 简单起见，我们把家族成员从 1 到 N 编号。随后第二行给出 N 个编号，其中第 i 个编号对应第 i 位成员的父/母。家谱中辈分最高的老祖宗对应的父/母编号为 -1。一行中的数字间以空格分隔。</p><p>输出格式：</p><p>首先输出最小的辈分（老祖宗的辈分为 1，以下逐级递增）。然后在第二行按递增顺序输出辈分最小的成员的编号。编号间以一个空格分隔，行首尾不得有多余空格。</p><p>输入样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs in">9<br>2 6 5 5 -1 5 6 4 7<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs out">4<br>1 9<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1e5</span>+<span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> n,f,maxdep;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; vec[maxn];<br><span class="hljs-keyword">int</span> depth[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(depth,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(depth));<br>    queue&lt;<span class="hljs-keyword">int</span>&gt;que;<br>    que.<span class="hljs-built_in">push</span>(f);<br>    depth[f]=<span class="hljs-number">1</span>;<br>    maxdep=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-keyword">int</span> temp=que.<span class="hljs-built_in">front</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;vec[temp].<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-keyword">int</span> node=vec[temp][i];<br>            depth[node]=depth[temp]+<span class="hljs-number">1</span>;<br>            maxdep=depth[node];<br>            que.<span class="hljs-built_in">push</span>(node);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">int</span> y;cin&gt;&gt;y;<br>        <span class="hljs-keyword">if</span>(y==<span class="hljs-number">-1</span>) f=i;<span class="hljs-comment">//根节点=i</span><br>        vec[y].<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <span class="hljs-built_in">bfs</span>();<br>    cout&lt;&lt;maxdep&lt;&lt;endl;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(depth[i]==maxdep) &#123;<br>            <span class="hljs-keyword">if</span>(!cnt)&#123;<br>                cout&lt;&lt;i;<br>                cnt=<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;i;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-5-列出叶节点"><a href="#1-5-列出叶节点" class="headerlink" title="1-5 列出叶节点"></a>1-5 列出叶节点</h2><p>对于给定的二叉树，本题要求你按从上到下、从左到右的顺序输出其所有叶节点。</p><p>输入格式：</p><p>首先第一行给出一个正整数 <em>N</em>（≤10），为树中结点总数。树中的结点从 0 到 <em>N</em>−1 编号。随后 <em>N</em> 行，每行给出一个对应结点左右孩子的编号。如果某个孩子不存在，则在对应位置给出 “-“。编号间以 1 个空格分隔。</p><p>输出格式：</p><p>在一行中按规定顺序输出叶节点的编号。编号间以 1 个空格分隔，行首尾不得有多余空格。</p><p>输入样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs in">8<br>1 -<br>- -<br>0 -<br>2 7<br>- -<br>- -<br>5 -<br>4 6<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">4 1 5<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> left,right;<br>    <span class="hljs-keyword">int</span> f;<br>&#125;tree[<span class="hljs-number">107</span>];<br>vector&lt;<span class="hljs-keyword">int</span>&gt; ans;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">107</span>;i++)&#123;<br>        tree[i].left=<span class="hljs-number">-1</span>;<br>        tree[i].right=<span class="hljs-number">-1</span>;<br>        tree[i].f=<span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    queue&lt;<span class="hljs-keyword">int</span>&gt;que;<br>    que.<span class="hljs-built_in">push</span>(x);<br>    <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-keyword">int</span> temp=que.<span class="hljs-built_in">front</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">int</span> l=tree[temp].left,r=tree[temp].right;<br>        <span class="hljs-keyword">if</span>(l==<span class="hljs-number">-1</span>&amp;&amp;r==<span class="hljs-number">-1</span>)&#123;<br>            ans.<span class="hljs-built_in">push_back</span>(temp);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(l!=<span class="hljs-number">-1</span>)&#123;<br>            que.<span class="hljs-built_in">push</span>(l);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(r!=<span class="hljs-number">-1</span>)&#123;<br>            que.<span class="hljs-built_in">push</span>(r);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        string x,y;cin&gt;&gt;x&gt;&gt;y;<br>        <span class="hljs-keyword">if</span>(x!=<span class="hljs-string">&quot;-&quot;</span>)&#123;<br>            <span class="hljs-keyword">int</span> t=<span class="hljs-built_in">stoi</span>(x);<br>            tree[i].left=t;<br>            tree[t].f=i;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(y!=<span class="hljs-string">&quot;-&quot;</span>)&#123;<br>            <span class="hljs-keyword">int</span> t=<span class="hljs-built_in">stoi</span>(y);<br>            tree[i].right=t;<br>            tree[t].f=i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(tree[i].f==<span class="hljs-number">-1</span>)&#123;<br>            <span class="hljs-built_in">bfs</span>(i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;ans.<span class="hljs-built_in">size</span>();i++)&#123;<br>        <span class="hljs-keyword">if</span>(!i)cout&lt;&lt;ans[i];<br>        <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;ans[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-6-修理牧场"><a href="#1-6-修理牧场" class="headerlink" title="1-6 修理牧场"></a>1-6 修理牧场</h2><p>农夫要修理牧场的一段栅栏，他测量了栅栏，发现需要<em>N</em>块木头，每块木头长度为整数<em>L**i</em>个长度单位，于是他购买了一条很长的、能锯成<em>N</em>块的木头，即该木头的长度是<em>L**i</em>的总和。</p><p>但是农夫自己没有锯子，请人锯木的酬金跟这段木头的长度成正比。为简单起见，不妨就设酬金等于所锯木头的长度。例如，要将长度为20的木头锯成长度为8、7和5的三段，第一次锯木头花费20，将木头锯成12和8；第二次锯木头花费12，将长度为12的木头锯成7和5，总花费为32。如果第一次将木头锯成15和5，则第二次锯木头花费15，总花费为35（大于32）。</p><p>请编写程序帮助农夫计算将木头锯成<em>N</em>块的最少花费。</p><p>输入格式:</p><p>输入首先给出正整数<em>N</em>（≤104），表示要将木头锯成<em>N</em>块。第二行给出<em>N</em>个正整数（≤50），表示每段木块的长度。</p><p>输出格式:</p><p>输出一个整数，即将木头锯成<em>N</em>块的最少花费。</p><p>输入样例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs in">8<br>4 5 1 2 1 3 1 1<br></code></pre></td></tr></table></figure><p>输出样例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">49<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//huffman树所有非叶节点权值和</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">10007</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span> &#123;</span><br>    <span class="hljs-keyword">int</span> weight;<br>    <span class="hljs-keyword">int</span> pos;<br>    <span class="hljs-keyword">int</span> left,right;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> TreeNode &amp;a)<span class="hljs-keyword">const</span>&#123;<span class="hljs-comment">//使用优先队列，重载小于号，使优先队列变为按照weight值从小到大排序</span><br>        <span class="hljs-keyword">return</span> weight&gt;a.weight;<br>    &#125;<br>    <span class="hljs-built_in">TreeNode</span>() &#123;<span class="hljs-comment">//结构体构造函数</span><br>        weight = inf;<span class="hljs-comment">//将权的初始值置为</span><br>        pos=<span class="hljs-number">0</span>;<br>        left=right=<span class="hljs-number">-1</span>;<br>    &#125;;<br>&#125;;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> a[maxn];<br>TreeNode T[<span class="hljs-number">10</span>*maxn];<br><span class="hljs-function">ll <span class="hljs-title">Huffman</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[],<span class="hljs-keyword">int</span> n)</span></span>&#123;<span class="hljs-comment">//通过给定的权值建立哈夫曼树</span><br>    ll ans=<span class="hljs-number">0</span>;<br>    priority_queue&lt;TreeNode&gt; que;<span class="hljs-comment">//优先队列</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        TreeNode temp;<br>        temp.weight=a[i];<br>        temp.pos=i;<br>        T[i]=temp;<br>        que.<span class="hljs-built_in">push</span>(temp);<br>    &#125;<span class="hljs-comment">//构建结点,将结点存入数组中并存入队列</span><br>    <span class="hljs-keyword">int</span> cnt=n;<br>    <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-keyword">auto</span> n1=que.<span class="hljs-built_in">top</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">auto</span> n2=que.<span class="hljs-built_in">top</span>();<br>        que.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//取出最小的两个权值并将其从队列中删除</span><br>        TreeNode newNode;<span class="hljs-comment">//建n1和n2的父节点，下面是一些赋值操作</span><br>        newNode.weight=n1.weight+n2.weight;<span class="hljs-comment">//父节点权值等于n1和n2权值之和</span><br>        ans+=newNode.weight;<br>        newNode.pos=cnt;<span class="hljs-comment">//记录父节点的位置</span><br>        newNode.left=n1.pos;<span class="hljs-comment">//记录左孩子和右孩子在数组中的位置</span><br>        newNode.right=n2.pos;<br><span class="hljs-comment">//        T[n1.pos].parent=T[n2.pos].parent=newNode.pos;//记录左孩子和右孩子的父节点的位置</span><br>        T[cnt++]=newNode;<span class="hljs-comment">//将父节点存入数组T中</span><br>        <span class="hljs-keyword">if</span>(cnt==<span class="hljs-number">2</span>*n<span class="hljs-number">-1</span>) <span class="hljs-keyword">break</span>;<span class="hljs-comment">//已录入全部结点信息  N = 2*n0-1</span><br>        que.<span class="hljs-built_in">push</span>(newNode);<span class="hljs-comment">//将父节点存入队列，进行下一次循环，再取权值最小的两个节点进行连接</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;a[i];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>) cout&lt;&lt;<span class="hljs-number">0</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-built_in">Huffman</span>(a,n)&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-7-ZigZagging-on-a-Tree"><a href="#1-7-ZigZagging-on-a-Tree" class="headerlink" title="1-7 ZigZagging on a Tree"></a>1-7 ZigZagging on a Tree</h2><p>Suppose that all the keys in a binary tree are distinct positive integers. A unique binary tree can be determined by a given pair of postorder and inorder traversal sequences. And it is a simple standard routine to print the numbers in level-order. However, if you think the problem is too simple, then you are too naive. This time you are supposed to print the numbers in “zigzagging order” – that is, starting from the root, print the numbers level-by-level, alternating between left to right and right to left. For example, for the following tree you must output: 1 11 5 8 17 12 20 15.</p><img src="/2022/05/13/DataStructuresTest/337cbfb0-a7b2-4500-9664-318e9ffc870e.jpg" class="" title="zigzag.jpg"><p>Input Specification:</p><p>Each input file contains one test case. For each case, the first line gives a positive integer N (≤30), the total number of nodes in the binary tree. The second line gives the inorder sequence and the third line gives the postorder sequence. All the numbers in a line are separated by a space.</p><p>Output Specification:</p><p>For each test case, print the zigzagging sequence of the tree in a line. All the numbers in a line must be separated by exactly one space, and there must be no extra space at the end of the line.</p><p>Sample Input:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs in">8<br>12 11 20 17 1 15 8 5<br>12 20 17 11 15 8 5 1<br></code></pre></td></tr></table></figure><p>Sample Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">1 11 5 8 17 12 20 15<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">50</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    node *l,*r;<br>    <span class="hljs-keyword">int</span> data;<br>    <span class="hljs-keyword">int</span> depth;<br>    <span class="hljs-built_in">node</span>()&#123;<br>        l=r= <span class="hljs-literal">nullptr</span>;<br>        data=<span class="hljs-number">0</span>;<br>        depth=<span class="hljs-number">0</span>;<br>    &#125;<br>&#125;node,*Tree;<br><span class="hljs-keyword">int</span> in[maxn],post[maxn];<br><span class="hljs-function">Tree <span class="hljs-title">CreateTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> in[],<span class="hljs-keyword">int</span> post[],<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    node *p=<span class="hljs-keyword">new</span> node;<br>    p-&gt;data=post[n<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(;i&lt;n&amp;&amp;(in[i]!=p-&gt;data);i++);<br>    p-&gt;l= <span class="hljs-built_in">CreateTree</span>(in,post,i);<br>    p-&gt;r= <span class="hljs-built_in">CreateTree</span>(in+<span class="hljs-number">1</span>+i,post+i,n-i<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">point</span>&#123;</span><br>    <span class="hljs-keyword">int</span> data;<br>    <span class="hljs-keyword">int</span> depth;<br>    <span class="hljs-built_in">point</span>()&#123;&#125;<br>    <span class="hljs-built_in">point</span>(<span class="hljs-keyword">int</span> da,<span class="hljs-keyword">int</span> de)&#123;<br>        data=da;<br>        depth=de;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">int</span> depth[maxn];<br>vector&lt;point&gt; ans;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(depth,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(depth));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Zig</span><span class="hljs-params">(Tree T)</span></span>&#123;<span class="hljs-comment">//深度反转</span><br>    queue&lt;Tree&gt;que;<br>    T-&gt;depth=<span class="hljs-number">1</span>;<br>    que.<span class="hljs-built_in">push</span>(T);<br>    <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())&#123;<br>        Tree temp=que.<span class="hljs-built_in">front</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br>        ans.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">point</span>(temp-&gt;data,temp-&gt;depth));<br>        <span class="hljs-keyword">int</span> d=temp-&gt;depth;<br>        <span class="hljs-keyword">if</span>(temp-&gt;l) &#123;<br>            temp-&gt;l-&gt;depth=d+<span class="hljs-number">1</span>;<br>            que.<span class="hljs-built_in">push</span>(temp-&gt;l);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(temp-&gt;r)&#123;<br>            temp-&gt;r-&gt;depth=d+<span class="hljs-number">1</span>;<br>            que.<span class="hljs-built_in">push</span>(temp-&gt;r);<br>        &#125;<br>    &#125;<br>    stack&lt;<span class="hljs-keyword">int</span>&gt;st;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;ans.<span class="hljs-built_in">size</span>();i++)&#123;<br>        <span class="hljs-keyword">if</span>(ans[i].depth%<span class="hljs-number">2</span>)&#123;<br>            st.<span class="hljs-built_in">push</span>(ans[i].data);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>())&#123;<br>                <span class="hljs-keyword">if</span>(!cnt) &#123;<br>                    cout&lt;&lt;st.<span class="hljs-built_in">top</span>();<br>                    cnt++;<br>                &#125;<br>                <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;st.<span class="hljs-built_in">top</span>();<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;ans[i].data;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-keyword">if</span>(!cnt) &#123;<br>            cout&lt;&lt;st.<span class="hljs-built_in">top</span>();<br>            cnt++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;st.<span class="hljs-built_in">top</span>();<br>        &#125;<br>        st.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n;cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;in[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;post[i];<br>    &#125;<br><br>    Tree T= <span class="hljs-built_in">CreateTree</span>(in,post,n);<br>    <span class="hljs-built_in">Zig</span>(T);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="1-8-Path-of-Equal-Weight"><a href="#1-8-Path-of-Equal-Weight" class="headerlink" title="1-8 Path of Equal Weight"></a>1-8 Path of Equal Weight</h2><p>Given a non-empty tree with root <em>R</em>, and with weight $W_i$ assigned to each tree node $T_i$. The weight of a path from $R$ to $L$ is defined to be the sum of the weights of all the nodes along the path from <em>R</em> to any leaf node <em>L</em>.</p><p>Now given any weighted tree, you are supposed to find all the paths with their weights equal to a given number. For example, let’s consider the tree showed in the following figure: for each node, the upper number is the node ID which is a two-digit number, and the lower number is the weight of that node. Suppose that the given number is 24, then there exists 4 different paths which have the same given weight: {10 5 2 7}, {10 4 10}, {10 3 3 6 2} and {10 3 3 6 2}, which correspond to the red edges in the figure.</p><img src="/2022/05/13/DataStructuresTest/212.jpg" class="" title="img"><p>Input Specification:</p><p>Each input file contains one test case. Each case starts with a line containing 0&lt;<em>N</em>≤100, the number of nodes in a tree, <em>M</em> (&lt;<em>N</em>), the number of non-leaf nodes, and 0&lt;<em>S</em>&lt;230, the given weight number. The next line contains <em>N</em> positive numbers where <em>W**i</em> (&lt;1000) corresponds to the tree node <em>T**i</em>. Then <em>M</em> lines follow, each in the format:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ID K ID<span class="hljs-selector-attr">[1]</span> ID<span class="hljs-selector-attr">[2]</span> ... ID<span class="hljs-selector-attr">[K]</span><br></code></pre></td></tr></table></figure><p>where <code>ID</code> is a two-digit number representing a given non-leaf node, <code>K</code> is the number of its children, followed by a sequence of two-digit <code>ID</code>‘s of its children. For the sake of simplicity, let us fix the root ID to be <code>00</code>.</p><p>Output Specification:</p><p>For each test case, print all the paths with weight S in <strong>non-increasing</strong> order. Each path occupies a line with printed weights from the root to the leaf in order. All the numbers must be separated by a space with no extra space at the end of the line.</p><p>Note: sequence {<em>A</em>1,<em>A</em>2,⋯,<em>A**n</em>} is said to be <strong>greater than</strong> sequence {<em>B</em>1,<em>B</em>2,⋯,<em>B**m</em>} if there exists 1≤<em>k</em>&lt;*min*{*n*,*m*} such that *A<em><em>i</em>=<em>B**i</em> for <em>i</em>=1,⋯,<em>k</em>, and <em>A**k</em>+1&gt;*B**k</em>+1.</p><p>Sample Input:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs in">20 9 24<br>10 2 4 3 5 10 2 18 9 7 2 2 1 3 12 1 8 6 2 2<br>00 4 01 02 03 04<br>02 1 05<br>04 2 06 07<br>03 3 11 12 13<br>06 1 09<br>07 2 08 10<br>16 1 15<br>13 3 14 16 17<br>17 2 18 19<br></code></pre></td></tr></table></figure><p>Sample Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs out">10 5 2 7<br>10 4 10<br>10 3 3 6 2<br>10 3 3 6 2<br></code></pre></td></tr></table></figure><p>Special thanks to Zhang Yuan and Yang Han for their contribution to the judge’s data.</p><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//注：未知原因2个测试点不过</span><br><span class="hljs-comment">//max size N</span><br><span class="hljs-comment">//sorting children only is NOT correct</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">300</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">int</span> n,m;<br>ll s;<br>ll weight[maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> num;<br>    ll w;<br>    <span class="hljs-built_in">node</span>(<span class="hljs-keyword">int</span> n)&#123;<br>        num=n;<br>        w=<span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">order</span>&#123;</span><br>    <span class="hljs-keyword">int</span> arr[maxn],l;<br>    <span class="hljs-built_in">order</span>(ll a[],<span class="hljs-keyword">int</span> len)&#123;<br>        l=len;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>            arr[i]=a[i];<br>        &#125;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(order &amp;a,order &amp;b)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;a.l&amp;&amp;i&lt;b.l;i++)&#123;<br>        <span class="hljs-keyword">if</span>(a.arr[i]&gt;b.arr[i]) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>vector&lt;node&gt; T[maxn];<br>vector&lt;ll&gt; route[maxn];<br>vector&lt;order&gt; output;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,ll w)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!T[x].<span class="hljs-built_in">size</span>())&#123;<br>        <span class="hljs-keyword">if</span>(w==s)&#123;<br>            route[x].<span class="hljs-built_in">push_back</span>(weight[x]);<br>            ll arr[maxn];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;route[x].<span class="hljs-built_in">size</span>();i++)&#123;<br>                arr[i]=route[x][i];<br>            &#125;<br>            output.<span class="hljs-built_in">emplace_back</span>(arr,route[x].<span class="hljs-built_in">size</span>());<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;T[x].<span class="hljs-built_in">size</span>();i++)&#123;<br>        <span class="hljs-keyword">int</span> temp=T[x][i].num;<br>        T[x][i].w=w+weight[temp];<br>        route[temp]=route[x];<br>        route[temp].<span class="hljs-built_in">push_back</span>(weight[x]);<br>        <span class="hljs-built_in">dfs</span>(temp,w+weight[temp]);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;weight[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-keyword">int</span> num,mm;cin&gt;&gt;num&gt;&gt;mm;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;mm;j++)&#123;<br>            <span class="hljs-keyword">int</span> x;cin&gt;&gt;x;<br>            T[num].<span class="hljs-built_in">emplace_back</span>(x);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,weight[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">sort</span>(output.<span class="hljs-built_in">begin</span>(),output.<span class="hljs-built_in">end</span>(),cmp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;output.<span class="hljs-built_in">size</span>();i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;output[i].l;j++)&#123;<br>            cout&lt;&lt;output[i].arr[j];<br>            <span class="hljs-keyword">if</span>(j!=output[i].l<span class="hljs-number">-1</span>) cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>        cout&lt;&lt;endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-9-哈夫曼编码"><a href="#1-9-哈夫曼编码" class="headerlink" title="1-9 哈夫曼编码"></a>1-9 哈夫曼编码</h2><p>给定一段文字，如果我们统计出字母出现的频率，是可以根据哈夫曼算法给出一套编码，使得用此编码压缩原文可以得到最短的编码总长。然而哈夫曼编码并不是唯一的。例如对字符串”aaaxuaxz”，容易得到字母 ‘a’、’x’、’u’、’z’ 的出现频率对应为 4、2、1、1。我们可以设计编码 {‘a’=0, ‘x’=10, ‘u’=110, ‘z’=111}，也可以用另一套 {‘a’=1, ‘x’=01, ‘u’=001, ‘z’=000}，还可以用 {‘a’=0, ‘x’=11, ‘u’=100, ‘z’=101}，三套编码都可以把原文压缩到 14 个字节。但是 {‘a’=0, ‘x’=01, ‘u’=011, ‘z’=001} 就不是哈夫曼编码，因为用这套编码压缩得到 00001011001001 后，解码的结果不唯一，”aaaxuaxz” 和 “aazuaxax” 都可以对应解码的结果。本题就请你判断任一套编码是否哈夫曼编码。</p><p>输入格式：</p><p>首先第一行给出一个正整数 <em>N</em>（2≤<em>N</em>≤63），随后第二行给出 <em>N</em> 个不重复的字符及其出现频率，格式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">c<span class="hljs-selector-attr">[1]</span> f<span class="hljs-selector-attr">[1]</span> c<span class="hljs-selector-attr">[2]</span> f<span class="hljs-selector-attr">[2]</span> ... c<span class="hljs-selector-attr">[N]</span> f<span class="hljs-selector-attr">[N]</span><br></code></pre></td></tr></table></figure><p>其中<code>c[i]</code>是集合{‘0’ - ‘9’, ‘a’ - ‘z’, ‘A’ - ‘Z’, ‘_’}中的字符；<code>f[i]</code>是<code>c[i]</code>的出现频率，为不超过 1000 的整数。再下一行给出一个正整数 <em>M</em>（≤1000），随后是 <em>M</em> 套待检的编码。每套编码占 <em>N</em> 行，格式为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">c<span class="hljs-selector-attr">[i]</span> <span class="hljs-selector-tag">code</span><span class="hljs-selector-attr">[i]</span><br></code></pre></td></tr></table></figure><p>其中<code>c[i]</code>是第<code>i</code>个字符；<code>code[i]</code>是不超过63个’0’和’1’的非空字符串。</p><p>输出格式：</p><p>对每套待检编码，如果是正确的哈夫曼编码，就在一行中输出”Yes”，否则输出”No”。</p><p>注意：最优编码并不一定通过哈夫曼算法得到。任何能压缩到最优长度的前缀编码都应被判为正确。</p><p>输入样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs in">7<br>A 1 B 1 C 1 D 3 E 3 F 6 G 6<br>4<br>A 00000<br>B 00001<br>C 0001<br>D 001<br>E 01<br>F 10<br>G 11<br>A 01010<br>B 01011<br>C 0100<br>D 011<br>E 10<br>F 11<br>G 00<br>A 000<br>B 001<br>C 010<br>D 011<br>E 100<br>F 101<br>G 110<br>A 00000<br>B 00001<br>C 0001<br>D 001<br>E 00<br>F 10<br>G 11<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs out">Yes<br>Yes<br>No<br>No<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//注：我tm上学期就见过你了，抄的代码，爬</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> R register</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> L long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> LL long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> I inline</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> U unsigned</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">I LL <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    R LL   x;<br>    R <span class="hljs-keyword">bool</span> f;<br>    R <span class="hljs-keyword">char</span> c;<br>    <span class="hljs-keyword">for</span>(f=<span class="hljs-number">0</span>;(c=<span class="hljs-built_in">getchar</span>())&lt;<span class="hljs-string">&#x27;0&#x27;</span>||c&gt;<span class="hljs-string">&#x27;9&#x27;</span>;f=c==<span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-keyword">for</span>(x=c-<span class="hljs-string">&#x27;0&#x27;</span>;(c=<span class="hljs-built_in">getchar</span>())&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="hljs-string">&#x27;9&#x27;</span>;x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+c-<span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">return</span> f?-x:x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 1000</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>*<span class="hljs-title">l</span>,*<span class="hljs-title">r</span>;</span><br>    <span class="hljs-keyword">int</span>        value;<br>    <span class="hljs-keyword">char</span>       code;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">const</span> node *a,<span class="hljs-keyword">const</span> node *b)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> a-&gt;value&gt;b-&gt;value;<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DataT</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span>  value;<br>    <span class="hljs-keyword">char</span> code;<br>&#125;;<br><br>DataT Data[MAXN];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getValue</span><span class="hljs-params">(<span class="hljs-keyword">char</span> code,<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>        <span class="hljs-keyword">if</span>(Data[i].code==code)<br>            <span class="hljs-keyword">return</span> Data[i].value;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">node*<span class="hljs-title">newNode</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    node*tmp=(node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(node));<br>    tmp-&gt;l=tmp-&gt;r=<span class="hljs-literal">NULL</span>;<br>    tmp-&gt;value=<span class="hljs-number">0</span>;<br>    tmp-&gt;code =<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> tmp;<br>&#125;<br><br><span class="hljs-keyword">bool</span> ERR_FLAG=<span class="hljs-literal">false</span>;<br><br><span class="hljs-function">node*<span class="hljs-title">addTree</span><span class="hljs-params">(node*rt,<span class="hljs-keyword">char</span> c,<span class="hljs-keyword">char</span> s[],<span class="hljs-keyword">int</span> Datan,<span class="hljs-keyword">int</span> sn,<span class="hljs-keyword">int</span> si)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(sn==si)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(rt!=<span class="hljs-literal">NULL</span>)<br>        &#123;<br>            ERR_FLAG=<span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">return</span> rt;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            node*tmp=<span class="hljs-built_in">newNode</span>();<br>            tmp-&gt;value=<span class="hljs-built_in">getValue</span>(c,Datan)*sn;<br>            <span class="hljs-keyword">return</span> tmp;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!rt)rt=<span class="hljs-built_in">newNode</span>();<br>    <span class="hljs-keyword">if</span>(s[si]==<span class="hljs-string">&#x27;0&#x27;</span>)<br>        rt-&gt;l=<span class="hljs-built_in">addTree</span>(rt-&gt;l,c,s,Datan,sn,si+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">else</span><br>        rt-&gt;r=<span class="hljs-built_in">addTree</span>(rt-&gt;r,c,s,Datan,sn,si+<span class="hljs-number">1</span>);<br>    rt-&gt;value=((rt-&gt;l)?(rt-&gt;l-&gt;value):<span class="hljs-number">0</span>)+((rt-&gt;r)?(rt-&gt;r-&gt;value):<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> rt;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ddfs</span><span class="hljs-params">(node *rt,<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(!rt)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(rt-&gt;l||rt-&gt;r)<br>        rt-&gt;value=<span class="hljs-built_in">ddfs</span>(rt-&gt;l,n+<span class="hljs-number">1</span>)+<span class="hljs-built_in">ddfs</span>(rt-&gt;r,n+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        rt-&gt;value*=n;<br>    &#125;<br>    <span class="hljs-keyword">return</span> rt-&gt;value;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getAns</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    priority_queue &lt;node*,vector&lt;node*&gt;,node&gt; q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>    &#123;<br>        node * tmp=<span class="hljs-built_in">newNode</span>();<br>        *tmp=(node)&#123;<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>,Data[i].value,Data[i].code&#125;;<br>        q.<span class="hljs-built_in">push</span>(tmp);<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span>)<br>    &#123;<br>        node* t1=q.<span class="hljs-built_in">top</span>();q.<span class="hljs-built_in">pop</span>();<br>        node* t2=q.<span class="hljs-built_in">top</span>();q.<span class="hljs-built_in">pop</span>();<br>        node * tmp=<span class="hljs-built_in">newNode</span>();<br>        tmp-&gt;l=t1;<br>        tmp-&gt;r=t2;<br>        tmp-&gt;value=t1-&gt;value+t2-&gt;value;<br>        q.<span class="hljs-built_in">push</span>(tmp);<br>    &#125;<br>    <span class="hljs-keyword">return</span>  <span class="hljs-built_in">ddfs</span>(q.<span class="hljs-built_in">top</span>(),<span class="hljs-number">0</span>);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//     freopen(&quot;7-1.in&quot;,&quot;r&quot;,stdin);</span><br><span class="hljs-comment">//  freopen(&quot;7-1.out&quot;,&quot;w&quot;,stdout);</span><br>    <span class="hljs-keyword">int</span>     n=<span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>    &#123;<br>        <span class="hljs-keyword">char</span> s[<span class="hljs-number">10</span>];<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%d&quot;</span>,s,&amp;Data[i].value);<br>        Data[i].code=s[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-built_in">getAns</span>(n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> t=<span class="hljs-built_in">read</span>();t--;)<br>    &#123;<br>        ERR_FLAG=<span class="hljs-literal">false</span>;<br>        node    *rt=<span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i  =<span class="hljs-number">0</span>;i&lt;n;++i)<br>        &#123;<br>            <span class="hljs-keyword">char</span> c[<span class="hljs-number">10</span>],s[MAXN];<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s&quot;</span>,c,s);<br>            <span class="hljs-keyword">if</span>(!ERR_FLAG)<br>                rt=<span class="hljs-built_in">addTree</span>(rt,c[<span class="hljs-number">0</span>],s,n,<span class="hljs-built_in">strlen</span>(s),<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,(!ERR_FLAG&amp;&amp;(!rt||rt-&gt;value==ans))?<span class="hljs-string">&quot;Yes&quot;</span>:<span class="hljs-string">&quot;No&quot;</span>);<br>    &#125;<br>    <br>    <br><span class="hljs-comment">//     fclose(stdin);</span><br><span class="hljs-comment">//     fclose(stdout);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-sort"><a href="#2-sort" class="headerlink" title="2.sort"></a>2.sort</h1><h2 id="2-1-funx-Iterative-Mergesort"><a href="#2-1-funx-Iterative-Mergesort" class="headerlink" title="2-1(funx) Iterative Mergesort"></a>2-1(funx) Iterative Mergesort</h2><p>How would you implement mergesort without using recursion?</p><p>The idea of iterative mergesort is to start from N sorted sublists of length 1, and each time to merge a pair of adjacent sublists until one sorted list is obtained. You are supposed to implement the key function of merging.</p><p>Format of functions:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_pass</span><span class="hljs-params">( ElementType list[], ElementType sorted[], <span class="hljs-keyword">int</span> N, <span class="hljs-keyword">int</span> length )</span></span>;<br></code></pre></td></tr></table></figure><p>The function <code>merge_pass</code> performs one pass of the merge sort that merges adjacent pairs of sublists from <code>list</code> into <code>sorted</code>. <code>N</code> is the number of elements in the <code>list</code> and <code>length</code> is the length of the sublists.</p><p>Sample program of judge:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ElementType int</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 100</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_pass</span><span class="hljs-params">( ElementType list[], ElementType sorted[], <span class="hljs-keyword">int</span> N, <span class="hljs-keyword">int</span> length )</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">( ElementType list[], <span class="hljs-keyword">int</span> N )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;N; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, list[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span>  <span class="hljs-title">merge_sort</span><span class="hljs-params">( ElementType list[],  <span class="hljs-keyword">int</span> N )</span></span><br><span class="hljs-function"></span>&#123;<br>    ElementType extra[MAXN];  <span class="hljs-comment">/* the extra space required */</span><br>    <span class="hljs-keyword">int</span>  length = <span class="hljs-number">1</span>;  <span class="hljs-comment">/* current length of sublist being merged */</span><br>    <span class="hljs-keyword">while</span>( length &lt; N ) &#123; <br>        <span class="hljs-built_in">merge_pass</span>( list, extra, N, length ); <span class="hljs-comment">/* merge list into extra */</span><br>        <span class="hljs-built_in">output</span>( extra, N );<br>        length *= <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">merge_pass</span>( extra, list, N, length ); <span class="hljs-comment">/* merge extra back to list */</span><br>        <span class="hljs-built_in">output</span>( list, N );<br>        length *= <span class="hljs-number">2</span>;<br>    &#125;<br>&#125; <br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> N, i;<br>    ElementType A[MAXN];<br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;N);<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;N; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;A[i]);<br>    <span class="hljs-built_in">merge_sort</span>(A, N);<br>    <span class="hljs-built_in">output</span>(A, N);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* Your function will be put here */</span><br></code></pre></td></tr></table></figure><p>Sample Input:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs in">10<br>8 7 9 2 3 5 1 6 4 0<br></code></pre></td></tr></table></figure><p>Sample Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs out">7 8 2 9 3 5 1 6 0 4 <br>2 7 8 9 1 3 5 6 0 4 <br>1 2 3 5 6 7 8 9 0 4 <br>0 1 2 3 4 5 6 7 8 9 <br>0 1 2 3 4 5 6 7 8 9 <br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_pass</span><span class="hljs-params">( ElementType <span class="hljs-built_in">list</span>[], ElementType sorted[], <span class="hljs-keyword">int</span> N, <span class="hljs-keyword">int</span> length )</span></span>&#123;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;N&amp;&amp;i+length&lt;N;i+=length*<span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">int</span> p=i,q=i+length;<br>        <span class="hljs-keyword">while</span>(p&lt;i+length&amp;&amp;q&lt;i+length*<span class="hljs-number">2</span>&amp;&amp;q&lt;N)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>[p]&lt;<span class="hljs-built_in">list</span>[q]) sorted[cnt++]=<span class="hljs-built_in">list</span>[p++];<br>            <span class="hljs-keyword">else</span> sorted[cnt++]=<span class="hljs-built_in">list</span>[q++];<br>        &#125;<br>        <span class="hljs-keyword">while</span>(p&lt;i+length) sorted[cnt++]=<span class="hljs-built_in">list</span>[p++];<br>        <span class="hljs-keyword">while</span>(q&lt;i+length*<span class="hljs-number">2</span>&amp;&amp;q&lt;N) sorted[cnt++]=<span class="hljs-built_in">list</span>[q++];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(i+length&gt;=N)&#123;<br>        <span class="hljs-keyword">while</span>(i&lt;N) sorted[cnt++]=<span class="hljs-built_in">list</span>[i++];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-funx-The-Kth-Largest-in-BST"><a href="#2-2-funx-The-Kth-Largest-in-BST" class="headerlink" title="2-2(funx)  The Kth Largest in BST"></a>2-2(funx)  The Kth Largest in BST</h2><p>Given a binary search tree, you are supposed to find the node that contains the <em>K</em>-th largest key.</p><p>Format of function:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">BinTree <span class="hljs-title">KthLargest</span> <span class="hljs-params">( BinTree T, <span class="hljs-keyword">int</span> K )</span></span>;<br></code></pre></td></tr></table></figure><p>where <code>BinTree</code> is defined as the following:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span> *<span class="hljs-title">BinTree</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span>&#123;</span><br>    <span class="hljs-keyword">int</span> Key;<br>    BinTree Left;<br>    BinTree Right;<br>&#125;;<br></code></pre></td></tr></table></figure><p>The function <code>KthLargest</code> is supposed to return the pointer that points to the node that contains the <code>K</code>-th largest key in the binary search tree <code>T</code>.</p><p>Here <code>T</code> is not empty and all its keys are distinct positive integers. <code>K</code> is positive and is never more than the total number of nodes in the tree.</p><p>Sample program of judge:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span> *<span class="hljs-title">BinTree</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span>&#123;</span><br>    <span class="hljs-keyword">int</span> Key;<br>    BinTree Left;<br>    BinTree Right;<br>&#125;;<br><br><span class="hljs-function">BinTree <span class="hljs-title">BuildTree</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">/* details omitted */</span><br><span class="hljs-function">BinTree <span class="hljs-title">KthLargest</span> <span class="hljs-params">( BinTree T, <span class="hljs-keyword">int</span> K )</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    BinTree T, P;<br>    <span class="hljs-keyword">int</span> K;<br><br>    T = <span class="hljs-built_in">BuildTree</span>();<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;K);<br>    P = <span class="hljs-built_in">KthLargest</span>(T, K);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, P-&gt;Key);<br>    <span class="hljs-keyword">if</span> (P-&gt;Left) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, P-&gt;Left-&gt;Key);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NULL\n&quot;</span>);<br>    <span class="hljs-keyword">if</span> (P-&gt;Right) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, P-&gt;Right-&gt;Key);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NULL\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/* Your function will be put here */</span><br></code></pre></td></tr></table></figure><p>Sample Input: (for the following tree)</p><img src="/2022/05/13/DataStructuresTest/40d5c4bb-3046-48f3-84ab-0ec0c651edd2.jpg" class="" title="yes.jpg"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><p>Sample Output:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">5</span><br><span class="hljs-literal">NULL</span><br><span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//本质二叉树，RDL</span><br><span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br><span class="hljs-function">BinTree <span class="hljs-title">KthLargest</span> <span class="hljs-params">( BinTree T, <span class="hljs-keyword">int</span> K )</span></span>&#123;<br>    BinTree P,Q;<br>    <span class="hljs-keyword">if</span>(T)&#123;<br>        P=KthLargest(T-&gt;Right,K);<br>        <span class="hljs-keyword">if</span>(P) <span class="hljs-keyword">return</span> P;<span class="hljs-comment">//? 在递归层中返回了T&#x27;，要传回</span><br>        cnt++;<br>        <span class="hljs-keyword">if</span>(cnt==K)&#123;<br>            <span class="hljs-keyword">return</span> T;<br>        &#125;<br>        Q=KthLargest(T-&gt;Left,K);<br>        <span class="hljs-keyword">if</span>(Q) <span class="hljs-keyword">return</span> Q;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-funx-Rank-a-Linked-List-II"><a href="#2-3-funx-Rank-a-Linked-List-II" class="headerlink" title="2-3(funx) Rank a Linked List (II)"></a>2-3(funx) Rank a Linked List (II)</h2><p>A linked list of <em>n</em> nodes is stored in an array of <em>n</em> elements. Each element contains an integer <code>data</code> and a <code>next</code> pointer which is the array index of the next element. It is guaranteed that the given list is linear – that is, every node, except the first one, has a unique previous node; and every node, except the last one, has a unique next node.</p><p>You are supposed to write a function to number these nodes in reverse order, starting from the last node, by numbers from 1 to <em>n</em>. These numbers are called the <code>rank</code>s of the nodes.</p><p>Format of function:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Ranking</span><span class="hljs-params">( List A[], <span class="hljs-keyword">int</span> n )</span></span>;<br></code></pre></td></tr></table></figure><p>where <code>List</code> is defined as the following:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> data;<br>    <span class="hljs-keyword">int</span> next;<br>    <span class="hljs-keyword">int</span> rank;<br>&#125; List;<br></code></pre></td></tr></table></figure><p>Sample program of judge:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NIL -1 <span class="hljs-comment">//represents the NULL pointer</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> data;<br>    <span class="hljs-keyword">int</span> next;<br>    <span class="hljs-keyword">int</span> rank;<br>&#125; List;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Ranking</span><span class="hljs-params">( List A[], <span class="hljs-keyword">int</span> n )</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> n, i;<br>    List *A;<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    A = (List *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(List)*n);<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;A[i].next);<br>    <span class="hljs-built_in">Ranking</span>(A, n);<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;n; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, A[i].rank);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* Your function will be put here */</span><br></code></pre></td></tr></table></figure><p>Sample Input:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs in">5<br>3 -1 0 1 2<br></code></pre></td></tr></table></figure><p>Sample Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">3 1 4 2 5 <br></code></pre></td></tr></table></figure><p>Hint:</p><p>The given linked list is stored as 4-&gt;2-&gt;0-&gt;3-&gt;1-&gt;NULL. Hence the 0th element is ranked 3 since it is the 3rd node counted from the last one in the list; the 1st element is ranked 1 since it is the last node in the list; and so on so forth.</p><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>100 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> vis[<span class="hljs-number">100007</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Ranking</span><span class="hljs-params">( List A[], <span class="hljs-keyword">int</span> n )</span></span>&#123;<br>    <span class="hljs-keyword">int</span> head;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(A[i].rank!=<span class="hljs-number">-1</span>)<br>            vis[A[i].next]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!vis[i]) &#123;<br>            head=i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> cnt=n;<br>    A[head].rank=cnt--;<br>    <span class="hljs-keyword">int</span> temp=A[head].next;<br>    <span class="hljs-keyword">while</span>(temp!=<span class="hljs-number">-1</span>)&#123;<br>        A[temp].rank=cnt--;<br>        temp=A[temp].next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-1-两个有序序列的中位数"><a href="#2-1-两个有序序列的中位数" class="headerlink" title="2-1 两个有序序列的中位数"></a>2-1 两个有序序列的中位数</h2><p>已知有两个等长的非降序序列S1, S2, 设计函数求S1与S2并集的中位数。有序序列<em>A</em>0,<em>A</em>1,⋯,<em>A**N</em>−1的中位数指<em>A</em>(<em>N</em>−1)/2的值,即第⌊(<em>N</em>+1)/2⌋个数（<em>A</em>0为第1个数）。</p><p>输入格式:</p><p>输入分三行。第一行给出序列的公共长度N（0&lt;N≤100000），随后每行输入一个序列的信息，即N个非降序排列的整数。数字用空格间隔。</p><p>输出格式:</p><p>在一行中输出两个输入序列的并集序列的中位数。</p><p>输入样例1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs in">5<br>1 3 5 7 9<br>2 3 4 5 6<br></code></pre></td></tr></table></figure><p>输出样例1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">4<br></code></pre></td></tr></table></figure><p>输入样例2:</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">6<br>-100 -10<span class="hljs-number"> 1 </span>1<span class="hljs-number"> 1 </span>1<br>-50<span class="hljs-number"> 0 </span>2<span class="hljs-number"> 3 </span>4 5<br></code></pre></td></tr></table></figure><p>输出样例2:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>200 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">2e5</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> a[maxn];<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n*<span class="hljs-number">2</span>;i++)&#123;<br>        cin&gt;&gt;a[i];<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(a+<span class="hljs-number">1</span>,a+n*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>    cout&lt;&lt;a[(n*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>]&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-词频统计"><a href="#2-2-词频统计" class="headerlink" title="2-2 词频统计"></a>2-2 词频统计</h2><p>请编写程序，对一段英文文本，统计其中所有不同单词的个数，以及词频最大的前10%的单词。</p><p>所谓“单词”，是指由不超过80个单词字符组成的连续字符串，但长度超过15的单词将只截取保留前15个单词字符。而合法的“单词字符”为大小写字母、数字和下划线，其它字符均认为是单词分隔符。</p><p>输入格式:</p><p>输入给出一段非空文本，最后以符号<code>#</code>结尾。输入保证存在至少10个不同的单词。</p><p>输出格式:</p><p>在第一行中输出文本中所有不同单词的个数。注意“单词”不区分英文大小写，例如“PAT”和“pat”被认为是同一个单词。</p><p>随后按照词频递减的顺序，按照<code>词频:单词</code>的格式输出词频最大的前10%的单词。若有并列，则按递增字典序输出。</p><p>输入样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs in">This is a test.<br><br>The word &quot;this&quot; is the word with the highest frequency.<br><br>Longlonglonglongword should be cut off, so is considered as the same as longlonglonglonee.  But this_8 is different than this, and this, and this...#<br>this line should be ignored.<br></code></pre></td></tr></table></figure><p>输出样例：</p><p>（注意：虽然单词<code>the</code>也出现了4次，但因为我们只要输出前10%（即23个单词中的前2个）单词，而按照字母序，<code>the</code>排第3位，所以不输出。）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs out">23<br>5:this<br>4:is<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>2000 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">100007</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mp</span>&#123;</span><br>    string s;<br>    <span class="hljs-keyword">int</span> n;<br>&#125;m[maxn];<br><span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;<span class="hljs-comment">//不同单词数</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(mp &amp;a,mp &amp;b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a.n==b.n) <span class="hljs-keyword">return</span> a.s&lt;b.s;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> a.n&gt;b.n;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(string &amp;s)</span></span>&#123;<br>    <span class="hljs-built_in">transform</span>(s.<span class="hljs-built_in">begin</span>(),s.<span class="hljs-built_in">end</span>(),s.<span class="hljs-built_in">begin</span>(),::tolower);<span class="hljs-comment">//全转小写</span><br>    <span class="hljs-keyword">bool</span> fl=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;num;i++)&#123;<br>        <span class="hljs-keyword">if</span>(m[i].s==s)&#123;<span class="hljs-comment">//也可以写成vector</span><br>            fl=<span class="hljs-literal">true</span>;<br>            m[i].n++;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!fl)&#123;<br>        m[num].s=s;<br>        m[num++].n=<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//    map&lt;string,int&gt;mp;</span><br>    <span class="hljs-keyword">char</span> c;<br>    string s=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<span class="hljs-comment">//单词长度</span><br>    <span class="hljs-keyword">bool</span> inword;<br>    inword=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">while</span>((c=<span class="hljs-built_in">getchar</span>())!=<span class="hljs-string">&#x27;#&#x27;</span>)&#123;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;#&#x27;</span>) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(!inword&amp;&amp;(<span class="hljs-built_in">isalpha</span>(c)|| <span class="hljs-built_in">isdigit</span>(c)||c==<span class="hljs-string">&#x27;_&#x27;</span>))&#123;<br>            inword=<span class="hljs-literal">true</span>;<br>            len++;<br>            <span class="hljs-keyword">if</span>(len&lt;=<span class="hljs-number">15</span>)&#123;<br>                s+=c;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(inword&amp;&amp;(<span class="hljs-built_in">isalpha</span>(c)|| <span class="hljs-built_in">isdigit</span>(c)||c==<span class="hljs-string">&#x27;_&#x27;</span>))&#123;<br>            len++;<br>            <span class="hljs-keyword">if</span>(len&lt;=<span class="hljs-number">15</span>) s+=c;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(inword&amp;&amp;!(<span class="hljs-built_in">isalpha</span>(c)|| <span class="hljs-built_in">isdigit</span>(c)||c==<span class="hljs-string">&#x27;_&#x27;</span>))&#123;<br>            <span class="hljs-built_in">find</span>(s);<br>            inword=<span class="hljs-literal">false</span>;<br>            len=<span class="hljs-number">0</span>;<br>            s=<span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;num&lt;&lt;endl;<br>    <span class="hljs-built_in">sort</span>(m,m+num,cmp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;(num/<span class="hljs-number">10</span>);i++)&#123;<br>        cout&lt;&lt;m[i].n&lt;&lt;<span class="hljs-string">&#x27;:&#x27;</span>&lt;&lt;m[i].s&lt;&lt;endl;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-符号配对"><a href="#2-3-符号配对" class="headerlink" title="2-3 符号配对"></a>2-3 符号配对</h2><p>请编写程序检查C语言源程序中下列符号是否配对：<code>/*</code>与<code>*/</code>、<code>(</code>与<code>)</code>、<code>[</code>与<code>]</code>、<code>&#123;</code>与<code>&#125;</code>。</p><p>输入格式:</p><p>输入为一个C语言源程序。当读到某一行中只有一个句点<code>.</code>和一个回车的时候，标志着输入结束。程序中需要检查配对的符号不超过100个。</p><p>输出格式:</p><p>首先，如果所有符号配对正确，则在第一行中输出<code>YES</code>，否则输出<code>NO</code>。然后在第二行中指出第一个不配对的符号：如果缺少左符号，则输出<code>?-右符号</code>；如果缺少右符号，则输出<code>左符号-?</code>。</p><p>输入样例1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs in">void test()<br>&#123;<br>    int i, A[10];<br>    for (i=0; i&lt;10; i++) &#123; /*/<br>        A[i] = i;<br>&#125;<br>.<br></code></pre></td></tr></table></figure><p>输出样例1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs out">NO<br>/*-?<br></code></pre></td></tr></table></figure><p>输入样例2：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, A[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++) <span class="hljs-comment">/**/</span><br>        A[i] = i;<br>&#125;]<br>.<br></code></pre></td></tr></table></figure><p>输出样例2：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby">NO<br><span class="hljs-string">?-</span>]<br></code></pre></td></tr></table></figure><p>输入样例3：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i<br>    <span class="hljs-keyword">double</span> A[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++) <span class="hljs-comment">/**/</span><br>        A[i] = <span class="hljs-number">0.1</span>*i;<br>&#125;<br>.<br></code></pre></td></tr></table></figure><p>输出样例3：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">YES</span><br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//抄的，自己写的在遇到/**/时候寄了</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>stack&lt;<span class="hljs-keyword">char</span>&gt; st;<br><span class="hljs-keyword">char</span> tmp[] = &#123;<span class="hljs-string">&#x27;)&#x27;</span>,<span class="hljs-string">&#x27;&#125;&#x27;</span>,<span class="hljs-string">&#x27;]&#x27;</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">(<span class="hljs-keyword">char</span> ch)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;&lt;&#x27;</span>)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;NO\n/*-?&quot;</span>&lt;&lt;endl;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;NO\n&quot;</span>&lt;&lt;ch&lt;&lt;<span class="hljs-string">&quot;-?&quot;</span>&lt;&lt;endl;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">match</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *c,<span class="hljs-keyword">int</span> len)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(++i&lt;len)&#123;<br>        <span class="hljs-keyword">if</span>(c[i]==<span class="hljs-string">&#x27;/&#x27;</span>)&#123;<br>            <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">if</span>(c[i + <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;*&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(c[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;*&#x27;</span>)&#123;<br>                st.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;&lt;&#x27;</span>);<br>                ++i;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">top</span>() == <span class="hljs-string">&#x27;&lt;&#x27;</span> &amp;&amp; c[i + <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;*&#x27;</span>)&#123;<br>                cout&lt;&lt;<span class="hljs-string">&quot;NO\n/*-?&quot;</span>&lt;&lt;endl;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c[i]==<span class="hljs-string">&#x27;*&#x27;</span>)&#123;<br>            <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>())&#123;<br>                <span class="hljs-keyword">if</span>(c[i+<span class="hljs-number">1</span>]!=<span class="hljs-string">&#x27;/&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    cout&lt;&lt;<span class="hljs-string">&quot;NO\n?-*/&quot;</span>&lt;&lt;endl;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">top</span>() == <span class="hljs-string">&#x27;&lt;&#x27;</span> &amp;&amp; c[i + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>                st.<span class="hljs-built_in">pop</span>();<br>                ++i;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">top</span>() != <span class="hljs-string">&#x27;&lt;&#x27;</span> &amp;&amp; c[i + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;/&#x27;</span>)&#123;<br>                <span class="hljs-built_in">output</span>(st.<span class="hljs-built_in">top</span>());<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c[i]==<span class="hljs-string">&#x27;(&#x27;</span>||c[i]==<span class="hljs-string">&#x27;&#123;&#x27;</span>||c[i]==<span class="hljs-string">&#x27;[&#x27;</span>)&#123;<br>            st.<span class="hljs-built_in">push</span>(c[i]);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c[i]==<span class="hljs-string">&#x27;)&#x27;</span>||c[i]==<span class="hljs-string">&#x27;&#125;&#x27;</span>||c[i]==<span class="hljs-string">&#x27;]&#x27;</span> )&#123;<br>            <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>())&#123;<br>                <span class="hljs-keyword">if</span>(c[i]==<span class="hljs-string">&#x27;&#125;&#x27;</span>) j=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c[i]==<span class="hljs-string">&#x27;]&#x27;</span>) j=<span class="hljs-number">2</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span>(c[i]==<span class="hljs-string">&#x27;)&#x27;</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">top</span>() == <span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br>                        st.<span class="hljs-built_in">pop</span>();<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-built_in">output</span>(st.<span class="hljs-built_in">top</span>());<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c[i]==<span class="hljs-string">&#x27;&#125;&#x27;</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">top</span>() == <span class="hljs-string">&#x27;&#123;&#x27;</span>)&#123;<br>                        st.<span class="hljs-built_in">pop</span>();<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-built_in">output</span>(st.<span class="hljs-built_in">top</span>());<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">top</span>() == <span class="hljs-string">&#x27;[&#x27;</span>)&#123;<br>                        st.<span class="hljs-built_in">pop</span>();<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-built_in">output</span>(st.<span class="hljs-built_in">top</span>());<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            cout&lt;&lt;<span class="hljs-string">&quot;NO\n?-&quot;</span>&lt;&lt;tmp[j]&lt;&lt;endl;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string str;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;str)&#123;<br>        <span class="hljs-keyword">char</span> *c = (<span class="hljs-keyword">char</span>*)str.<span class="hljs-built_in">data</span>();<br>        <span class="hljs-keyword">if</span>(c[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;.&#x27;</span>&amp;&amp;c[<span class="hljs-number">1</span>]==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">match</span>(c,str.<span class="hljs-built_in">length</span>()))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>())&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;endl;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">top</span>() == <span class="hljs-string">&#x27;&lt;&#x27;</span>) cout &lt;&lt; <span class="hljs-string">&quot;NO\n/*-?&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;NO\n&quot;</span> &lt;&lt; st.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">&quot;-?&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-4-列车调度"><a href="#2-4-列车调度" class="headerlink" title="2-4 列车调度"></a>2-4 列车调度</h2><p>火车站的列车调度铁轨的结构如下图所示。</p><img src="/2022/05/13/DataStructuresTest/188.jpg" class="" title="img"><p>两端分别是一条入口（Entrance）轨道和一条出口（Exit）轨道，它们之间有<code>N</code>条平行的轨道。每趟列车从入口可以选择任意一条轨道进入，最后从出口离开。在图中有9趟列车，在入口处按照{8，4，2，5，3，9，1，6，7}的顺序排队等待进入。如果要求它们必须按序号递减的顺序从出口离开，则至少需要多少条平行铁轨用于调度？</p><p>输入格式：</p><p>输入第一行给出一个整数<code>N</code> (2 ≤ <code>N</code> ≤105)，下一行给出从1到<code>N</code>的整数序号的一个重排列。数字间以空格分隔。</p><p>输出格式：</p><p>在一行中输出可以将输入的列车按序号递减的顺序调离所需要的最少的铁轨条数。</p><p>输入样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs in">9<br>8 4 2 5 3 9 1 6 7<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">4<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>300 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">2e5</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> a[maxn];<br>set&lt;<span class="hljs-keyword">int</span>&gt;st;<br><span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;a[i];<br>    &#125;<br>    st.<span class="hljs-built_in">insert</span>(a[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">int</span> temp=a[i];<br>        <span class="hljs-keyword">auto</span> iter= st.<span class="hljs-built_in">lower_bound</span>(temp);<br>        <span class="hljs-keyword">if</span>(iter==st.<span class="hljs-built_in">end</span>())&#123;<span class="hljs-comment">//全都比temp小</span><br>            st.<span class="hljs-built_in">insert</span>(temp);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            st.<span class="hljs-built_in">erase</span>(iter);<br>            st.<span class="hljs-built_in">insert</span>(temp);<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;st.<span class="hljs-built_in">size</span>()&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="upper-bound-amp-lower-bound"><a href="#upper-bound-amp-lower-bound" class="headerlink" title="upper_bound&amp;lower_bound"></a>upper_bound&amp;lower_bound</h2><p>lower_bound( begin,end,num)：从数组的begin位置到end-1位置二分查找第一个大于或等于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。</p><p>upper_bound( begin,end,num)：从数组的begin位置到end-1位置二分查找第一个大于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。</p><p>在从大到小的排序数组中，重载lower_bound()和upper_bound()</p><p>lower_bound( begin,end,num,greater<type>() ):从数组的begin位置到end-1位置二分查找第一个小于或等于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。</p><p>upper_bound( begin,end,num,greater<type>() ):从数组的begin位置到end-1位置二分查找第一个小于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。</p><p>greater<int>这样写就可以</p><h1 id="3-graph"><a href="#3-graph" class="headerlink" title="3.graph"></a>3.graph</h1><h2 id="3-1-funx-邻接表存储图的广度优先遍历"><a href="#3-1-funx-邻接表存储图的广度优先遍历" class="headerlink" title="3-1(funx) 邻接表存储图的广度优先遍历"></a>3-1(funx) 邻接表存储图的广度优先遍历</h2><p>试实现邻接表存储图的广度优先遍历。</p><p>函数接口定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFS</span> <span class="hljs-params">( LGraph Graph, Vertex S, <span class="hljs-keyword">void</span> (*Visit)(Vertex) )</span></span>;<br></code></pre></td></tr></table></figure><p>其中<code>LGraph</code>是邻接表存储的图，定义如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/* 邻接点的定义 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AdjVNode</span> *<span class="hljs-title">PtrToAdjVNode</span>;</span> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AdjVNode</span>&#123;</span><br>    Vertex AdjV;        <span class="hljs-comment">/* 邻接点下标 */</span><br>    PtrToAdjVNode Next; <span class="hljs-comment">/* 指向下一个邻接点的指针 */</span><br>&#125;;<br><br><span class="hljs-comment">/* 顶点表头结点的定义 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Vnode</span>&#123;</span><br>    PtrToAdjVNode FirstEdge; <span class="hljs-comment">/* 边表头指针 */</span><br>&#125; AdjList[MaxVertexNum];     <span class="hljs-comment">/* AdjList是邻接表类型 */</span><br><br><span class="hljs-comment">/* 图结点的定义 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span> *<span class="hljs-title">PtrToGNode</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span>&#123;</span>  <br>    <span class="hljs-keyword">int</span> Nv;     <span class="hljs-comment">/* 顶点数 */</span><br>    <span class="hljs-keyword">int</span> Ne;     <span class="hljs-comment">/* 边数   */</span><br>    AdjList G;  <span class="hljs-comment">/* 邻接表 */</span><br>&#125;;<br><span class="hljs-keyword">typedef</span> PtrToGNode LGraph; <span class="hljs-comment">/* 以邻接表方式存储的图类型 */</span><br></code></pre></td></tr></table></figure><p>函数<code>BFS</code>应从第<code>S</code>个顶点出发对邻接表存储的图<code>Graph</code>进行广度优先搜索，遍历时用裁判定义的函数<code>Visit</code>访问每个顶点。当访问邻接点时，要求按邻接表顺序访问。题目保证<code>S</code>是图中的合法顶点。</p><p>裁判测试程序样例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>&#125; <span class="hljs-keyword">bool</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxVertexNum 10   <span class="hljs-comment">/* 最大顶点数设为10 */</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Vertex;       <span class="hljs-comment">/* 用顶点下标表示顶点,为整型 */</span><br><br><span class="hljs-comment">/* 邻接点的定义 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AdjVNode</span> *<span class="hljs-title">PtrToAdjVNode</span>;</span> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AdjVNode</span>&#123;</span><br>    Vertex AdjV;        <span class="hljs-comment">/* 邻接点下标 */</span><br>    PtrToAdjVNode Next; <span class="hljs-comment">/* 指向下一个邻接点的指针 */</span><br>&#125;;<br><br><span class="hljs-comment">/* 顶点表头结点的定义 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Vnode</span>&#123;</span><br>    PtrToAdjVNode FirstEdge; <span class="hljs-comment">/* 边表头指针 */</span><br>&#125; AdjList[MaxVertexNum];     <span class="hljs-comment">/* AdjList是邻接表类型 */</span><br><br><span class="hljs-comment">/* 图结点的定义 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span> *<span class="hljs-title">PtrToGNode</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span>&#123;</span>  <br>    <span class="hljs-keyword">int</span> Nv;     <span class="hljs-comment">/* 顶点数 */</span><br>    <span class="hljs-keyword">int</span> Ne;     <span class="hljs-comment">/* 边数   */</span><br>    AdjList G;  <span class="hljs-comment">/* 邻接表 */</span><br>&#125;;<br><span class="hljs-keyword">typedef</span> PtrToGNode LGraph; <span class="hljs-comment">/* 以邻接表方式存储的图类型 */</span><br><br><span class="hljs-keyword">bool</span> Visited[MaxVertexNum]; <span class="hljs-comment">/* 顶点的访问标记 */</span><br><br><span class="hljs-function">LGraph <span class="hljs-title">CreateGraph</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">/* 创建图并且将Visited初始化为false；裁判实现，细节不表 */</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Visit</span><span class="hljs-params">( Vertex V )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>, V);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFS</span> <span class="hljs-params">( LGraph Graph, Vertex S, <span class="hljs-keyword">void</span> (*Visit)(Vertex) )</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    LGraph G;<br>    Vertex S;<br><br>    G = <span class="hljs-built_in">CreateGraph</span>();<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;S);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;BFS from %d:&quot;</span>, S);<br>    <span class="hljs-built_in">BFS</span>(G, S, Visit);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 你的代码将被嵌在这里 */</span><br></code></pre></td></tr></table></figure><p>输入样例：给定图如下</p><img src="/2022/05/13/DataStructuresTest/102.jpg" class="" title="img"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">BFS from 2: 2 0 3 5 4 1 6<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c">Vertex que[<span class="hljs-number">1007</span>];<span class="hljs-comment">//搓一个最tm简洁的队列</span><br><span class="hljs-keyword">int</span> fro=<span class="hljs-number">0</span>,rear=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> vis[MaxVertexNum];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(Vertex a)</span></span>&#123;<br>    que[rear++]=a;<br>&#125;<br><span class="hljs-function">Vertex <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> que[fro++];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFS</span> <span class="hljs-params">( LGraph Graph, Vertex S, <span class="hljs-keyword">void</span> (*Visit)(Vertex) )</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;MaxVertexNum;i++)&#123;<br>        vis[i]=<span class="hljs-number">0</span>;<br>    &#125;<br>    push(S);<br>    vis[S]=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">while</span>(fro!=rear)&#123;<br>        Vertex e;<br>        e=pop();<br>        Visit(e);<br>        <span class="hljs-keyword">for</span>(PtrToAdjVNode j=Graph-&gt;G[e].FirstEdge;j;j=j-&gt;Next)&#123;<br>            <span class="hljs-keyword">if</span>(!vis[j-&gt;AdjV])&#123;<br>                push(j-&gt;AdjV);<br>                vis[j-&gt;AdjV]=<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-2-funx-邻接矩阵表示及其遍历"><a href="#3-2-funx-邻接矩阵表示及其遍历" class="headerlink" title="3-2(funx) 邻接矩阵表示及其遍历"></a>3-2(funx) 邻接矩阵表示及其遍历</h2><p>本题要求编写函数创建无向图 G 的邻接矩阵存储表示，并求连通分量个数。例如，下图所示一个无向图 G 及其对应的邻接矩阵：</p><img src="/2022/05/13/DataStructuresTest/acef5783-fec5-44a1-903e-f042acba3d58.png" class="" title="gragh_smaller.png"><p>函数接口定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateMGraph</span><span class="hljs-params">(MGraph &amp;G)</span></span>; <span class="hljs-comment">/* 读入顶点数、边数，以及各条边，创建图 G 的邻接矩阵存储表示 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">countCC</span> <span class="hljs-params">(MGraph G)</span></span>;   <span class="hljs-comment">/* 已知无向图 G 采用邻接矩阵表示，函数值返回其连通分量个数 */</span><br></code></pre></td></tr></table></figure><p>已知无向图 G 采用邻接矩阵存储，相关类型定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxVertexNum 100     <span class="hljs-comment">/* 定义最大顶点数 */</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> VertexType;      <span class="hljs-comment">/* 顶点类型，以整型值编号表示（从 1 开始编号） */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-keyword">int</span> arcs[MaxVertexNum+<span class="hljs-number">1</span>][MaxVertexNum+<span class="hljs-number">1</span>]; <span class="hljs-comment">/* 邻接矩阵, 若顶点 i 与 顶点 j 有边相连则 arcs[i][j] 及 arcs[j][i] 均为 1 表示，无边则均为 0 */</span><br>    <span class="hljs-keyword">int</span> vexnum;  <span class="hljs-comment">/* 顶点数 */</span><br>    <span class="hljs-keyword">int</span> arcnum;  <span class="hljs-comment">/* 边数 */</span><br>&#125;MGraph;<br></code></pre></td></tr></table></figure><p>裁判测试程序样例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxVertexNum 100     <span class="hljs-comment">/* 定义最大顶点数 */</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> VertexType;      <span class="hljs-comment">/* 顶点类型，以整型值编号表示（从 1 开始编号） */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-keyword">int</span> arcs[MaxVertexNum + <span class="hljs-number">1</span>][MaxVertexNum + <span class="hljs-number">1</span>]; <span class="hljs-comment">/* 无向图的邻接矩阵, 若顶点 i 与 顶点 j 有边相连则 arcs[i][j] 及 arcs[j][i] 均为 1 表示，无边则均为 0 */</span><br>    <span class="hljs-keyword">int</span> vexnum;  <span class="hljs-comment">/* 顶点数 */</span><br>    <span class="hljs-keyword">int</span> arcnum;  <span class="hljs-comment">/* 边数 */</span><br>&#125;MGraph;<br><br><span class="hljs-keyword">int</span> visited[MaxVertexNum + <span class="hljs-number">1</span>];  <span class="hljs-comment">// 顶点是否被访问标志数组</span><br><br> <span class="hljs-comment">/* 邻接矩阵编号为 i 的顶点所关联的边存放在行 i 及列 i 中 */</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateMGraph</span><span class="hljs-params">(MGraph &amp;G)</span></span>; <span class="hljs-comment">/* 读入顶点数、边数，以及各条边，创建图 G 的邻接矩阵存储表示 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">countCC</span><span class="hljs-params">(MGraph G)</span></span>; <span class="hljs-comment">/* 已知无向图 G 采用邻接矩阵表示，函数值返回其连通分量个数 */</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    MGraph G;<br><br>    <span class="hljs-built_in">CreateMGraph</span>( G );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">countCC</span>( G ));<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 请在这里填写答案 */</span><br></code></pre></td></tr></table></figure><p>输入的第一行为两个整数，分别为图 G 的顶点数 vexnum（0 &lt;= vexnum &lt;= MaxVertexNum） 和边数 arcnum（&gt;= 0），接下来的 arcnum 行是每一条边信息，以关联的两个顶点 i 和 j 给出。<br>输出为图 G 的连通分量个数。题目保证输入数据正确，无冗余。</p><p>输入样例1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs in">4 2<br>1 2<br>4 3<br></code></pre></td></tr></table></figure><p>输出样例1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">2<br></code></pre></td></tr></table></figure><p>输入样例2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs in">4 6<br>1 2<br>1 3<br>1 4<br>2 3<br>2 4<br>3 4<br></code></pre></td></tr></table></figure><p>输出样例2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">1<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> que[<span class="hljs-number">1007</span>];<br><span class="hljs-keyword">int</span> fro=<span class="hljs-number">0</span>,rear=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>&#123;<br>    que[rear++]=a;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> que[fro++];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(MGraph&amp;G,<span class="hljs-keyword">int</span> a)</span></span>&#123;<br>    <span class="hljs-built_in">push</span>(a);<br>    visited[a]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(fro!=rear)&#123;<br>        <span class="hljs-keyword">int</span> b=<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=G.vexnum;i++)&#123;<br>            <span class="hljs-keyword">int</span> x=G.arcs[b][i];<br>            <span class="hljs-keyword">if</span>(x==<span class="hljs-number">1</span>&amp;&amp;!visited[i])&#123;<br>                visited[i]=<span class="hljs-number">1</span>;<br>                <span class="hljs-built_in">push</span>(i);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateMGraph</span><span class="hljs-params">(MGraph &amp;G)</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;G.vexnum,&amp;G.arcnum);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;G.arcnum;i++)&#123;<br>        <span class="hljs-keyword">int</span> x,y;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);<br>        G.arcs[x][y]=<span class="hljs-number">1</span>;<br>        G.arcs[y][x]=<span class="hljs-number">1</span>;<br>    &#125;<br>&#125; <span class="hljs-comment">/* 读入顶点数、边数，以及各条边，创建图 G 的邻接矩阵存储表示 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">countCC</span><span class="hljs-params">(MGraph G)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;MaxVertexNum+<span class="hljs-number">1</span>;i++)&#123;<br>        visited[i]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=G.vexnum;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!visited[i])&#123;<br>            cnt++;<br>            <span class="hljs-built_in">bfs</span>(G,i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt;<br>&#125; <span class="hljs-comment">/* 已知无向图 G 采用邻接矩阵表示，函数值返回其连通分量个数 */</span><br><br></code></pre></td></tr></table></figure><h2 id="3-3-funx-Is-Topological-Order"><a href="#3-3-funx-Is-Topological-Order" class="headerlink" title="3-3(funx) Is Topological Order"></a>3-3(funx) Is Topological Order</h2><p>Write a program to test if a give sequence <code>Seq</code> is a topological order of a given graph <code>Graph</code>.</p><p>Format of functions:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsTopSeq</span><span class="hljs-params">( LGraph Graph, Vertex Seq[] )</span></span>;<br></code></pre></td></tr></table></figure><p>where <code>LGraph</code> is defined as the following:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AdjVNode</span> *<span class="hljs-title">PtrToAdjVNode</span>;</span> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AdjVNode</span>&#123;</span><br>    Vertex AdjV;<br>    PtrToAdjVNode Next;<br>&#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Vnode</span>&#123;</span><br>    PtrToAdjVNode FirstEdge;<br>&#125; AdjList[MaxVertexNum];<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span> *<span class="hljs-title">PtrToGNode</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span>&#123;</span>  <br>    <span class="hljs-keyword">int</span> Nv;<br>    <span class="hljs-keyword">int</span> Ne;<br>    AdjList G;<br>&#125;;<br><span class="hljs-keyword">typedef</span> PtrToGNode LGraph;<br></code></pre></td></tr></table></figure><p>The function <code>IsTopSeq</code> must return <code>true</code> if <code>Seq</code> does correspond to a topological order; otherwise return <code>false</code>.</p><p><strong>Note:</strong> Although the vertices are numbered from 1 to MaxVertexNum, they are <strong>indexed from 0</strong> in the LGraph structure.</p><p>Sample program of judge:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>&#125; <span class="hljs-keyword">bool</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxVertexNum 10  <span class="hljs-comment">/* maximum number of vertices */</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Vertex;      <span class="hljs-comment">/* vertices are numbered from 1 to MaxVertexNum */</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AdjVNode</span> *<span class="hljs-title">PtrToAdjVNode</span>;</span> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">AdjVNode</span>&#123;</span><br>    Vertex AdjV;<br>    PtrToAdjVNode Next;<br>&#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Vnode</span>&#123;</span><br>    PtrToAdjVNode FirstEdge;<br>&#125; AdjList[MaxVertexNum];<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span> *<span class="hljs-title">PtrToGNode</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">GNode</span>&#123;</span>  <br>    <span class="hljs-keyword">int</span> Nv;<br>    <span class="hljs-keyword">int</span> Ne;<br>    AdjList G;<br>&#125;;<br><span class="hljs-keyword">typedef</span> PtrToGNode LGraph;<br><br><span class="hljs-function">LGraph <span class="hljs-title">ReadG</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">/* details omitted */</span><br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsTopSeq</span><span class="hljs-params">( LGraph Graph, Vertex Seq[] )</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, j, N;<br>    Vertex Seq[MaxVertexNum];<br>    LGraph G = <span class="hljs-built_in">ReadG</span>();<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;N);<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;N; i++) &#123;<br>        <span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>; j&lt;G-&gt;Nv; j++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;Seq[j]);<br>        <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">IsTopSeq</span>(G, Seq)==<span class="hljs-literal">true</span> ) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;yes\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* Your function will be put here */</span><br></code></pre></td></tr></table></figure><p>Sample Input (for the graph shown in the figure):</p><img src="/2022/05/13/DataStructuresTest/5373e878-196d-45dd-a82f-555b1fea6929.JPG" class="" title="topord.JPG"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs in">6 8<br>1 2<br>1 3<br>5 2<br>5 4<br>2 3<br>2 6<br>3 4<br>6 4<br>5<br>1 5 2 3 6 4<br>5 1 2 6 3 4<br>5 1 2 3 6 4<br>5 2 1 6 3 4<br>1 2 3 4 5 6<br></code></pre></td></tr></table></figure><p>Sample Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs out">yes<br>yes<br>yes<br>no<br>no<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> in[MaxVertexNum];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsTopSeq</span><span class="hljs-params">( LGraph Graph, Vertex Seq[] )</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=MaxVertexNum;i++)&#123;<br>        in[i]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;Graph-&gt;Nv;i++)&#123;<br>        <span class="hljs-keyword">for</span>(PtrToAdjVNode j=Graph-&gt;G[i].FirstEdge;j;j=j-&gt;Next)&#123;<br>            in[j-&gt;AdjV]++;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//    for(int i=0;i&lt;Graph-&gt;Nv;i++)&#123;</span><br><span class="hljs-comment">//        printf(&quot;%d &quot;,in[i]);</span><br><span class="hljs-comment">//    &#125;</span><br>    <span class="hljs-keyword">bool</span> fl=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;Graph-&gt;Nv;i++)&#123;<br>        <span class="hljs-keyword">int</span> temp=Seq[i]<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span>(in[temp]==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">for</span>(PtrToAdjVNode j=Graph-&gt;G[temp].FirstEdge;j;j=j-&gt;Next)&#123;<br>                in[j-&gt;AdjV]--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            fl=<span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> fl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-1-畅通工程之最低成本建设问题"><a href="#3-1-畅通工程之最低成本建设问题" class="headerlink" title="3-1 畅通工程之最低成本建设问题"></a>3-1 畅通工程之最低成本建设问题</h2><p>某地区经过对城镇交通状况的调查，得到现有城镇间快速道路的统计数据，并提出“畅通工程”的目标：使整个地区任何两个城镇间都可以实现快速交通（但不一定有直接的快速道路相连，只要互相间接通过快速路可达即可）。现得到城镇道路统计表，表中列出了有可能建设成快速路的若干条道路的成本，求畅通工程需要的最低成本。</p><p>输入格式:</p><p>输入的第一行给出城镇数目<em>N</em> (1&lt;<em>N</em>≤1000)和候选道路数目<em>M</em>≤3<em>N</em>；随后的<em>M</em>行，每行给出3个正整数，分别是该条道路直接连通的两个城镇的编号（从1编号到<em>N</em>）以及该道路改建的预算成本。</p><p>输出格式:</p><p>输出畅通工程需要的最低成本。如果输入数据不足以保证畅通，则输出“Impossible”。</p><p>输入样例1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs in">6 15<br>1 2 5<br>1 3 3<br>1 4 7<br>1 5 4<br>1 6 2<br>2 3 4<br>2 4 6<br>2 5 2<br>2 6 6<br>3 4 6<br>3 5 1<br>3 6 1<br>4 5 10<br>4 6 8<br>5 6 3<br></code></pre></td></tr></table></figure><p>输出样例1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">12<br></code></pre></td></tr></table></figure><p>输入样例2:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>输出样例2:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Impossible</span><br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">1007</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> u,v,w;<br>    <span class="hljs-built_in">node</span>(<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> v,<span class="hljs-keyword">int</span> w):<span class="hljs-built_in">u</span>(u),<span class="hljs-built_in">v</span>(v),<span class="hljs-built_in">w</span>(w)&#123;&#125;;<br>&#125;;<br>vector&lt;node&gt; E;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node &amp;a,node &amp;b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a.w&lt;b.w;<br>&#125;<br><span class="hljs-keyword">int</span> f[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;maxn;i++)&#123;<br>        f[i]=i;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(f[a]==a) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> f[a]=<span class="hljs-built_in">find</span>(f[a]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> temp=<span class="hljs-built_in">find</span>(a);<br>    f[temp]=<span class="hljs-built_in">find</span>(b);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">find</span>(a)==<span class="hljs-built_in">find</span>(b);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">sort</span>(E.<span class="hljs-built_in">begin</span>(),E.<span class="hljs-built_in">end</span>(),cmp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">check</span>(E[i].u,E[i].v))&#123;<br>            <span class="hljs-built_in">merge</span>(E[i].u,E[i].v);<br>            cnt++;ans+=E[i].w;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(cnt&lt;n<span class="hljs-number">-1</span>) cout&lt;&lt;<span class="hljs-string">&quot;Impossible&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">else</span> cout&lt;&lt;ans&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-keyword">int</span> x,y,z;<br>        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;<br>        E.<span class="hljs-built_in">emplace_back</span>(x,y,z);<br>    &#125;<br>    <span class="hljs-built_in">kruskal</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-2-How-Long-Does-It-Take"><a href="#3-2-How-Long-Does-It-Take" class="headerlink" title="3-2 How Long Does It Take"></a>3-2 How Long Does It Take</h2><p>Given the relations of all the activities of a project, you are supposed to find the earliest completion time of the project.</p><p>Input Specification:</p><p>Each input file contains one test case. Each case starts with a line containing two positive integers <em>N</em> (≤100), the number of activity check points (hence it is assumed that the check points are numbered from 0 to <em>N</em>−1), and <em>M</em>, the number of activities. Then <em>M</em> lines follow, each gives the description of an activity. For the <code>i</code>-th activity, three non-negative numbers are given: <code>S[i]</code>, <code>E[i]</code>, and <code>L[i]</code>, where <code>S[i]</code> is the index of the starting check point, <code>E[i]</code> of the ending check point, and <code>L[i]</code> the lasting time of the activity. The numbers in a line are separated by a space.</p><p>Output Specification:</p><p>For each test case, if the scheduling is possible, print in a line its earliest completion time; or simply output “Impossible”.</p><p>Sample Input 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs in">9 12<br>0 1 6<br>0 2 4<br>0 3 5<br>1 4 1<br>2 4 1<br>3 5 2<br>5 4 0<br>4 6 9<br>4 7 7<br>5 7 4<br>6 8 2<br>7 8 4<br></code></pre></td></tr></table></figure><p>Sample Output 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">18<br></code></pre></td></tr></table></figure><p>Sample Input 2:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>Sample Output 2:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Impossible</span><br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">107</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> to,w;<br>    <span class="hljs-built_in">node</span>(<span class="hljs-keyword">int</span> to,<span class="hljs-keyword">int</span> w):<span class="hljs-built_in">to</span>(to),<span class="hljs-built_in">w</span>(w)&#123;&#125;;<br>&#125;;<br>vector&lt;node&gt; fro[maxn],to[maxn];<br><span class="hljs-keyword">int</span> in[maxn];<br><span class="hljs-keyword">bool</span> vis[maxn];<br>queue&lt;<span class="hljs-keyword">int</span>&gt;que;<br>vector&lt;<span class="hljs-keyword">int</span>&gt;tpo1,tpo2;<br><span class="hljs-keyword">int</span> ve[maxn],vl[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(ve,<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(ve));<br>    <span class="hljs-built_in">memset</span>(vl,inf,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(vl));<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tpo</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> cnt=<span class="hljs-number">0</span>,ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!in[i])&#123;<br>            que.<span class="hljs-built_in">push</span>(i);<br>            vis[i]=<span class="hljs-literal">true</span>;<br>            cnt++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-keyword">int</span> temp=que.<span class="hljs-built_in">front</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br>        tpo1.<span class="hljs-built_in">push_back</span>(temp);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;fro[temp].<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-keyword">int</span> t=fro[temp][i].to;<br>            ve[t]=<span class="hljs-built_in">max</span>(ve[t],ve[temp]+fro[temp][i].w);<br>            ans=(ans,ve[t]);<br>            in[t]--;<br>            <span class="hljs-keyword">if</span>(in[t]==<span class="hljs-number">0</span>&amp;&amp;!vis[t])&#123;<br>                que.<span class="hljs-built_in">push</span>(t);<br>                vis[t]=<span class="hljs-literal">true</span>;<br>                cnt++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(cnt!=n)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Impossible&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> cout&lt;&lt;ans;<br>&#125;<br><br><br><span class="hljs-comment">//void critical_path()&#123;</span><br><span class="hljs-comment">//    init();</span><br><span class="hljs-comment">//    int ans=0;</span><br><span class="hljs-comment">//    for(int i=0;i&lt;tpo1.size();i++)&#123;</span><br><span class="hljs-comment">//        int temp=tpo1[i];</span><br><span class="hljs-comment">//        for(int j=0;j&lt;fro[temp].size();j++)&#123;</span><br><span class="hljs-comment">//            if(ve[fro[temp][j].to]&lt;ve[temp]+fro[temp][j].w)&#123;</span><br><span class="hljs-comment">//                ve[fro[temp][j].to]=ve[temp]+fro[temp][j].w;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="hljs-comment">//        vl[i]=ve[i];</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//    for(int i=0;i&lt;tpo2.size();i++)&#123;</span><br><span class="hljs-comment">//        int temp=tpo2[i];</span><br><span class="hljs-comment">//        for(int j=0;j&lt;to[temp].size();j++)&#123;</span><br><span class="hljs-comment">//            if(vl[temp]-to[temp][j].w&lt;vl[to[temp][j].to])&#123;</span><br><span class="hljs-comment">//                vl[to[temp][j].to]=vl[temp]-to[temp][j].w;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="hljs-comment">//        for(int j=0;j&lt;fro[i].size();j++)&#123;</span><br><span class="hljs-comment">//            int e=ve[i];</span><br><span class="hljs-comment">//            int l=vl[fro[i][j].to]-fro[i][j].w;</span><br><span class="hljs-comment">//            if(e==l)&#123;//突然发现，也许我们的目的根本不是。。。</span><br><span class="hljs-comment">//                cout&lt;&lt;i&lt;&lt;&#x27; &#x27;&lt;&lt;fro[i][j].to&lt;&lt;&#x27; &#x27;&lt;&lt;fro[i][j].w&lt;&lt;endl;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-keyword">int</span> x,y,z;<br>        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;<br>        fro[x].<span class="hljs-built_in">emplace_back</span>(y,z);<br>        to[y].<span class="hljs-built_in">emplace_back</span>(x,z);<br>        in[y]++;<br>    &#125;<br>    <span class="hljs-built_in">tpo</span>();<br><span class="hljs-comment">//    critical_path();</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-3-Harry-Potter’s-Exam"><a href="#3-3-Harry-Potter’s-Exam" class="headerlink" title="3-3 Harry Potter’s Exam"></a>3-3 Harry Potter’s Exam</h2><p>In Professor McGonagall’s class of Transfiguration, Harry Potter is learning how to transform one object into another by some spells. He has learnt that, to turn a cat into a mouse one can say <code>docamo</code>! To reverse the effect, simply say <code>decamo</code>! Formally speaking, the transfiguration spell to transform between object A and object B is said to be <code>S</code> if there are two spells, <code>doS</code> and <code>deS</code>, to turn A into B and vice versa, respectively.</p><p>In some cases, short-cut spells are defined to make transfiguration easier. For example, suppose that the spell to transform a cat to a mouse is <code>docamo</code>, and that to transform a mouse into a fatmouse is <code>dofamo</code>, then to turn a cat into a fatmouse one may say <code>docamodofamo</code>! Or if a shot-cut spell is defined to be <code>cafam</code>, one may get the same effect by saying <code>docafam</code>!</p><p>Time is passing by quickly and the Final Exam is coming. By the end of the transfiguration exam, students will be requested to show Professor McGonagall several objects transformed from the initial objects they bring to the classroom. Each of them is allowed to bring 1 object only.</p><p>Now Harry is coming to you for help: he needs a program to select the object he must take to the exam, so that the maximum length of any spell he has to say will be minimized. For example, if cat, mouse, and fatmouse are the only three objects involved in the exam, then mouse is the one that Harry should take, since it will take a 6-letter spell to turn a mouse into either a cat or a fatmouse. Cat is not a good choice since it will take at least a 7-letter spell to turn it into a fatmouse. And for the same reason Harry must not take a fatmouse.</p><p>Input Specification:</p><p>Each input file contains one test case. For each case, the first line contains two positive integers <em>N</em> (≤100) and <em>M</em>, which are the total number of objects involved in the exam and the number of spells to be tested, respectively. For the sake of simplicity, the objects are numbered from 1 to <em>N</em>. Then <em>M</em> lines follow, each contains 3 integers, separated by a space: the numbers of two objects, and the length of the spell to transform between them.</p><p>Output Specification:</p><p>For each test case, print in one line the number of the object which Harry must take to the exam, and the maximum length of the spell he may have to say. The numbers must be separated by a space.</p><p>If it is impossible to complete all the transfigurations by taking one object only, simply output 0. If the solution is not unique, output the one with the smallest number.</p><p>Sample Input:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs in">6 11<br>3 4 70<br>1 2 1<br>5 4 50<br>2 6 50<br>5 6 60<br>1 3 70<br>4 6 60<br>3 6 80<br>5 1 100<br>2 4 60<br>5 2 80<br></code></pre></td></tr></table></figure><p>Sample Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">4 70<br></code></pre></td></tr></table></figure><p>Code Size Limit</p><p>16 KB</p><p>Time Limit</p><p>400 ms</p><p>Memory Limit</p><p>64 MB</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//某天梯赛模拟，故copy</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">307</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">int</span> f[maxn][maxn];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">lenlen</span>&#123;</span><br>    <span class="hljs-keyword">int</span> point,len,fl;<br>&#125;len[maxn];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br>        len[i].fl=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;=n;j++)&#123;<br>            f[i][j]=inf;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(lenlen &amp;a,lenlen &amp;b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a.fl||b.fl)&#123;<br>        <span class="hljs-keyword">return</span> a.fl&lt;b.fl;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(a.len==b.len) <span class="hljs-keyword">return</span> a.point&lt;b.point;<br>    <span class="hljs-keyword">return</span> a.len&lt;b.len;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-keyword">int</span> x,y,z;<br>        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;<br>        f[x][y]=z;<br>        f[y][x]=z;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>;k&lt;=n;k++)&#123;<br>                <span class="hljs-keyword">if</span>(f[j][i]+f[i][k]&lt;f[j][k])&#123;<br>                    f[j][k]=f[j][i]+f[i][k];<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            <span class="hljs-keyword">if</span>(j!=i) &#123;<br>                len[i].point = i;<br>                <span class="hljs-keyword">if</span> (f[i][j] != inf) len[i].len = <span class="hljs-built_in">max</span>(len[i].len, f[i][j]);<br>                <span class="hljs-keyword">if</span> (f[i][j] == inf) len[i].fl = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(len+<span class="hljs-number">1</span>,len+<span class="hljs-number">1</span>+n,cmp);<br>    <span class="hljs-keyword">if</span>(len[<span class="hljs-number">1</span>].fl) cout&lt;&lt;<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>        cout&lt;&lt;len[<span class="hljs-number">1</span>].point&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;len[<span class="hljs-number">1</span>].len;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;因为考试看不到练习的在线题集，所以放一下原题和代码&lt;/p&gt;
&lt;p&gt;&lt;del&gt;但是有一说一，因为blog没做目录，这篇翻起来应该相当痛苦（）&lt;/del&gt;可恶，为什么时至今日我才发现目录能调出来&lt;/p&gt;
&lt;h1 id=&quot;1-tree&quot;&gt;&lt;a href=&quot;#1-tree&quot; cla</summary>
      
    
    
    
    
    <category term="cpp" scheme="https://github.com/sterne012/sterne012.github.io/tags/cpp/"/>
    
    <category term="c" scheme="https://github.com/sterne012/sterne012.github.io/tags/c/"/>
    
    <category term="review" scheme="https://github.com/sterne012/sterne012.github.io/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-循环神经网络</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/05/13/deep-rnn/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/05/13/deep-rnn/</id>
    <published>2022-05-13T06:57:29.000Z</published>
    <updated>2022-05-13T07:00:39.436Z</updated>
    
    <content type="html"><![CDATA[<img src="/2022/05/13/deep-rnn/image-20220513145900239.png" class="" title="image-20220513145900239"><img src="/2022/05/13/deep-rnn/image-20220513145925130.png" class="" title="image-20220513145925130"><img src="/2022/05/13/deep-rnn/image-20220513145941266.png" class="" title="image-20220513145941266"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">在 IMDB 情感分类任务上训练双向 LSTM。</span><br><span class="hljs-string">Output after 4 epochs on CPU: ~0.8146. Time per epoch on CPU (Core i7): ~150s.</span><br><span class="hljs-string">在 CPU 上经过 4 个轮次后的输出：〜0.8146。 CPU（Core i7）上每个轮次的时间：〜150s。</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-comment"># os.environ[&quot;CUDA_VISIBLE_DEVICES&quot;] = &quot;-1&quot;</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-keyword">import</span> ssl<br><span class="hljs-keyword">from</span> tensorflow.keras.preprocessing <span class="hljs-keyword">import</span> sequence<br><span class="hljs-keyword">from</span> tensorflow.keras.models <span class="hljs-keyword">import</span> Sequential<br><span class="hljs-keyword">from</span> tensorflow.keras.layers <span class="hljs-keyword">import</span> Dense, Dropout, Embedding<br><span class="hljs-keyword">from</span> tensorflow.keras.layers <span class="hljs-keyword">import</span> LSTM,Bidirectional<br><span class="hljs-keyword">from</span> tensorflow.keras.optimizers <span class="hljs-keyword">import</span> Adam,SGD<br><span class="hljs-keyword">from</span> tensorflow.keras.datasets <span class="hljs-keyword">import</span> imdb<br><span class="hljs-keyword">from</span> tensorflow.keras.utils <span class="hljs-keyword">import</span> plot_model<br><br>ssl._create_default_https_context = ssl._create_unverified_context<br>os.environ[<span class="hljs-string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="hljs-string">&#x27;2&#x27;</span><br>os.environ[<span class="hljs-string">&#x27;KMP_DUPLICATE_LIB_OK&#x27;</span>] = <span class="hljs-string">&quot;TRUE&quot;</span><br>np.set_printoptions(threshold=np.inf)<br><br><span class="hljs-keyword">if</span> <span class="hljs-number">1</span> == <span class="hljs-number">0</span>:<br>    gpus = tf.config.experimental.list_physical_devices(device_type=<span class="hljs-string">&#x27;GPU&#x27;</span>)<br>    <span class="hljs-keyword">for</span> gpu <span class="hljs-keyword">in</span> gpus:<br>        tf.config.experimental.set_memory_growth(gpu, <span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">1</span>==<span class="hljs-number">0</span>:<br>            tf.config.experimental.set_virtual_device_configuration(gpu, [<br>                tf.config.experimental.VirtualDeviceConfiguration(memory_limit=<span class="hljs-number">800</span>)])<br><span class="hljs-keyword">if</span> <span class="hljs-number">1</span>==<span class="hljs-number">1</span>:<br>    config = tf.compat.v1.ConfigProto()<br>    config.gpu_options.allow_growth = <span class="hljs-literal">True</span><br>    session =tf.compat.v1.InteractiveSession(config=config)<br><br><br><br><br><span class="hljs-keyword">import</span> pylab <span class="hljs-keyword">as</span> plt<br><br><br>max_features = <span class="hljs-number">20000</span><br><span class="hljs-comment"># 在此数量的单词之后剪切文本（取最常见的 max_features 个单词）</span><br>maxlen = <span class="hljs-number">80</span><br><span class="hljs-comment"># maxlen = 580</span><br>batch_size = <span class="hljs-number">32</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;maxlen %d batch size %d &quot;</span> % (maxlen,batch_size))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Loading data...&#x27;</span>)<br><span class="hljs-comment"># (x_train, y_train), (x_test, y_test) = imdb.load_data(&#x27;/home/ubuntu/work/DNNcourse2022/RNN/imdb.npz&#x27;,num_words=max_features)</span><br>(x_train, y_train), (x_test, y_test) = imdb.load_data(<span class="hljs-string">&#x27;./imdb.npz&#x27;</span>,num_words=max_features)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(x_train), <span class="hljs-string">&#x27;train sequences&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(x_test), <span class="hljs-string">&#x27;test sequences&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Pad sequences (samples x time)&#x27;</span>)<br>x_train = sequence.pad_sequences(x_train, maxlen=maxlen)<br>x_test = sequence.pad_sequences(x_test, maxlen=maxlen)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x_train shape:&#x27;</span>, x_train.shape)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x_test shape:&#x27;</span>, x_test.shape)<br>y_train = np.array(y_train)<br>y_test = np.array(y_test)<br><br>model = Sequential()<br>model.add(Embedding(max_features, <span class="hljs-number">128</span>, input_length=maxlen))<br>model.add(Bidirectional(LSTM(<span class="hljs-number">64</span>)))<br><br>model.add(Dropout(<span class="hljs-number">0.5</span>))<br>model.add(Dense(<span class="hljs-number">1</span>, activation=<span class="hljs-string">&#x27;sigmoid&#x27;</span>))<br><br><span class="hljs-comment"># 尝试使用不同的优化器和优化器配置</span><br>optimizer = Adam(<span class="hljs-number">1e-4</span>)<br><span class="hljs-comment"># model.compile(optimizer=&#x27;adam&#x27;, &#x27;binary_crossentropy&#x27;, metrics=[&#x27;accuracy&#x27;])</span><br>model.<span class="hljs-built_in">compile</span>(optimizer=optimizer, loss=<span class="hljs-string">&#x27;binary_crossentropy&#x27;</span>, metrics=[<span class="hljs-string">&#x27;accuracy&#x27;</span>])<br>model.summary()<br>plot_model(model,  to_file=<span class="hljs-string">&#x27;./Figs/test2.png&#x27;</span>,show_shapes=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># exit()</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Train...&#x27;</span>)<br><br>os.makedirs(<span class="hljs-string">&quot;logs&quot;</span>,exist_ok=<span class="hljs-number">1</span>==<span class="hljs-number">1</span>)<br>history=model.fit(x_train, y_train,<br>          batch_size=batch_size,<br>          epochs=<span class="hljs-number">20</span>,<br>          validation_data=(x_test, y_test) )<br><br>os.makedirs(<span class="hljs-string">&quot;Figs&quot;</span>,exist_ok=<span class="hljs-number">1</span>==<span class="hljs-number">1</span>)<br>plt.plot(history.history[<span class="hljs-string">&#x27;accuracy&#x27;</span>])<br>plt.plot(history.history[<span class="hljs-string">&#x27;val_accuracy&#x27;</span>])<br>plt.title(<span class="hljs-string">&#x27;Model accuracy&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Accuracy&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;Epoch&#x27;</span>)<br>plt.legend([<span class="hljs-string">&#x27;Train&#x27;</span>, <span class="hljs-string">&#x27;Test&#x27;</span>], loc=<span class="hljs-string">&#x27;upper left&#x27;</span>)<br>plt.savefig(<span class="hljs-string">&#x27;./Figs/test2_accuracy.png&#x27;</span>)<br>plt.show()<br><br><span class="hljs-comment"># 绘制训练 &amp; 验证的损失值</span><br>plt.plot(history.history[<span class="hljs-string">&#x27;loss&#x27;</span>])<br>plt.plot(history.history[<span class="hljs-string">&#x27;val_loss&#x27;</span>])<br>plt.title(<span class="hljs-string">&#x27;Model loss&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Loss&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;Epoch&#x27;</span>)<br>plt.legend([<span class="hljs-string">&#x27;Train&#x27;</span>, <span class="hljs-string">&#x27;Test&#x27;</span>], loc=<span class="hljs-string">&#x27;upper left&#x27;</span>)<br>plt.savefig(<span class="hljs-string">&#x27;./Figs/test2_loss.png&#x27;</span>)<br>plt.show()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/2022/05/13/deep-rnn/image-20220513145900239.png&quot; class=&quot;&quot; title=&quot;image-20220513145900239&quot;&gt;

&lt;img src=&quot;/2022/05/13/deep-rnn/image-</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
    <category term="deeplearning" scheme="https://github.com/sterne012/sterne012.github.io/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>Arcaea-从零开始的萌星生活</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/05/10/Arcaea2/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/05/10/Arcaea2/</id>
    <published>2022-05-10T07:55:18.000Z</published>
    <updated>2023-03-07T13:06:36.324Z</updated>
    
    <content type="html"><![CDATA[<p>记录自摘星以来的些许进步 </p><h2 id="2022-05-10-12-0"><a href="#2022-05-10-12-0" class="headerlink" title="2022/05/10 12.0"></a>2022/05/10 12.0</h2><img src="/2022/05/10/Arcaea2/CA07EBFF49B5515B7E762997B90686A7.png" class="" title="img"><p>2022/05/12</p><p>爽p！没想到后面稳住了没翻车</p><p>也是目前pm定数最高（（好菜，9+性了好几首</p><img src="/2022/05/10/Arcaea2/5EEE702598A483A9BD5C06228EC538B6.png" class="" title="img"><h2 id="2022-08-13-12-1"><a href="#2022-08-13-12-1" class="headerlink" title="2022/08/13 12.1"></a>2022/08/13 12.1</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记录自摘星以来的些许进步 &lt;/p&gt;
&lt;h2 id=&quot;2022-05-10-12-0&quot;&gt;&lt;a href=&quot;#2022-05-10-12-0&quot; class=&quot;headerlink&quot; title=&quot;2022/05/10 12.0&quot;&gt;&lt;/a&gt;2022/05/10 12.0&lt;/h2&gt;</summary>
      
    
    
    
    
    <category term="games" scheme="https://github.com/sterne012/sterne012.github.io/tags/games/"/>
    
    <category term="Arc" scheme="https://github.com/sterne012/sterne012.github.io/tags/Arc/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-resnet</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/04/22/deep-resnet/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/04/22/deep-resnet/</id>
    <published>2022-04-22T08:09:41.000Z</published>
    <updated>2022-04-22T14:16:15.652Z</updated>
    
    <content type="html"><![CDATA[<p>这次用了jupyter</p><p>然后weights文件爆了（131万行后爆炸…）</p><img src="/2022/04/22/deep-resnet/image-20220422161143650.png" class="" title="image-20220422161143650"><p>曲线</p><img src="/2022/04/22/deep-resnet/image-20220422161158541.png" class="" title="image-20220422161158541"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> tensorflow.keras.layers <span class="hljs-keyword">import</span> Conv2D, BatchNormalization, Activation, MaxPool2D, Dropout, Flatten, Dense<br><span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> Model<br><span class="hljs-keyword">import</span> ssl<br><br>ssl._create_default_https_context = ssl._create_unverified_context<br>os.environ[<span class="hljs-string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="hljs-string">&#x27;2&#x27;</span><br>os.environ[<span class="hljs-string">&#x27;KMP_DUPLICATE_LIB_OK&#x27;</span>] = <span class="hljs-string">&quot;TRUE&quot;</span><br>np.set_printoptions(threshold=np.inf)<br><br>cifar10 = tf.keras.datasets.cifar10<br>(x_train, y_train), (x_test, y_test) = cifar10.load_data()<br>x_train, x_test = x_train / <span class="hljs-number">255.0</span>, x_test / <span class="hljs-number">255.0</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResnetBlock</span>(<span class="hljs-params">Model</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, filters, strides=<span class="hljs-number">1</span>, residual_path=<span class="hljs-literal">False</span></span>):</span><br>        <span class="hljs-built_in">super</span>(ResnetBlock, self).__init__()<br>        self.filters = filters<br>        self.strides = strides<br>        self.residual_path = residual_path<br><br>        self.c1 = Conv2D(filters, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), strides=strides, padding=<span class="hljs-string">&#x27;same&#x27;</span>, use_bias=<span class="hljs-literal">False</span>)<br>        self.b1 = BatchNormalization()<br>        self.a1 = Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)<br><br>        self.c2 = Conv2D(filters, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), strides=<span class="hljs-number">1</span>, padding=<span class="hljs-string">&#x27;same&#x27;</span>, use_bias=<span class="hljs-literal">False</span>)<br>        self.b2 = BatchNormalization()<br><br>        <span class="hljs-comment"># residual_path为True时，对输入进行下采样，即用1x1的卷积核做卷积操作，保证x能和F(x)维度相同，顺利相加</span><br>        <span class="hljs-keyword">if</span> residual_path:<br>            self.down_c1 = Conv2D(filters, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), strides=strides, padding=<span class="hljs-string">&#x27;same&#x27;</span>, use_bias=<span class="hljs-literal">False</span>)<br>            self.down_b1 = BatchNormalization()<br>        <br>        self.a2 = Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span>(<span class="hljs-params">self, inputs</span>):</span><br>        residual = inputs  <span class="hljs-comment"># residual等于输入值本身，即residual=x</span><br>        <span class="hljs-comment"># 将输入通过卷积、BN层、激活层，计算F(x)</span><br>        x = self.c1(inputs)<br>        x = self.b1(x)<br>        x = self.a1(x)<br><br>        x = self.c2(x)<br>        y = self.b2(x)<br><br>        <span class="hljs-keyword">if</span> self.residual_path:<br>            residual = self.down_c1(inputs)<br>            residual = self.down_b1(residual)<br><br>        out = self.a2(y + residual)  <span class="hljs-comment"># 最后输出的是两部分的和，即F(x)+x或F(x)+Wx,再过激活函数</span><br>        <span class="hljs-keyword">return</span> out<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResNet18</span>(<span class="hljs-params">Model</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, block_list, initial_filters=<span class="hljs-number">64</span></span>):</span>  <span class="hljs-comment"># block_list表示每个block有几个卷积层</span><br>        <span class="hljs-built_in">super</span>(ResNet18, self).__init__()<br>        self.num_blocks = <span class="hljs-built_in">len</span>(block_list)  <span class="hljs-comment"># 共有几个block</span><br>        self.block_list = block_list<br>        self.out_filters = initial_filters<br>        self.c1 = Conv2D(self.out_filters, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), strides=<span class="hljs-number">1</span>, padding=<span class="hljs-string">&#x27;same&#x27;</span>, use_bias=<span class="hljs-literal">False</span>)<br>        self.b1 = BatchNormalization()<br>        self.a1 = Activation(<span class="hljs-string">&#x27;relu&#x27;</span>)<br>        self.blocks = tf.keras.models.Sequential()<br>        <span class="hljs-comment"># 构建ResNet网络结构</span><br>        <span class="hljs-keyword">for</span> block_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(block_list)):  <span class="hljs-comment"># 第几个resnet block</span><br>            <span class="hljs-keyword">for</span> layer_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(block_list[block_id]):  <span class="hljs-comment"># 第几个卷积层</span><br><br>                <span class="hljs-keyword">if</span> block_id != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> layer_id == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 对除第一个block以外的每个block的输入进行下采样</span><br>                    block = ResnetBlock(self.out_filters, strides=<span class="hljs-number">2</span>, residual_path=<span class="hljs-literal">True</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    block = ResnetBlock(self.out_filters, residual_path=<span class="hljs-literal">False</span>)<br>                self.blocks.add(block)  <span class="hljs-comment"># 将构建好的block加入resnet</span><br>            self.out_filters *= <span class="hljs-number">2</span>  <span class="hljs-comment"># 下一个block的卷积核数是上一个block的2倍</span><br>        self.p1 = tf.keras.layers.GlobalAveragePooling2D()<br>        self.f1 = tf.keras.layers.Dense(<span class="hljs-number">10</span>, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>, kernel_regularizer=tf.keras.regularizers.l2())<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call</span>(<span class="hljs-params">self, inputs</span>):</span><br>        x = self.c1(inputs)<br>        x = self.b1(x)<br>        x = self.a1(x)<br>        x = self.blocks(x)<br>        x = self.p1(x)<br>        y = self.f1(x)<br>        <span class="hljs-keyword">return</span> y<br><br><br>model = ResNet18([<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>])<br><br>model.<span class="hljs-built_in">compile</span>(optimizer=<span class="hljs-string">&#x27;adam&#x27;</span>,<br>              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="hljs-literal">False</span>),<br>              metrics=[<span class="hljs-string">&#x27;sparse_categorical_accuracy&#x27;</span>])<br><br>checkpoint_save_path = <span class="hljs-string">&quot;./checkpoint/ResNet18.ckpt&quot;</span><br><span class="hljs-keyword">if</span> os.path.exists(checkpoint_save_path + <span class="hljs-string">&#x27;.index&#x27;</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-------------load the model-----------------&#x27;</span>)<br>    model.load_weights(checkpoint_save_path)<br><br>cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_save_path,<br>                                                 save_weights_only=<span class="hljs-literal">True</span>,<br>                                                 save_best_only=<span class="hljs-literal">True</span>)<br><br>history = model.fit(x_train, y_train, batch_size=<span class="hljs-number">32</span>, epochs=<span class="hljs-number">5</span>, validation_data=(x_test, y_test), validation_freq=<span class="hljs-number">1</span>,<br>                    callbacks=[cp_callback])<br>model.summary()<br><br><span class="hljs-comment"># print(model.trainable_variables)</span><br>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./weights.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> model.trainable_variables:<br>    file.write(<span class="hljs-built_in">str</span>(v.name) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    file.write(<span class="hljs-built_in">str</span>(v.shape) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    file.write(<span class="hljs-built_in">str</span>(v.numpy()) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>file.close()<br><br><br><span class="hljs-comment"># 显示训练集和验证集的acc和loss曲线</span><br>acc = history.history[<span class="hljs-string">&#x27;sparse_categorical_accuracy&#x27;</span>]<br>val_acc = history.history[<span class="hljs-string">&#x27;val_sparse_categorical_accuracy&#x27;</span>]<br>loss = history.history[<span class="hljs-string">&#x27;loss&#x27;</span>]<br>val_loss = history.history[<span class="hljs-string">&#x27;val_loss&#x27;</span>]<br><br>plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br>plt.plot(acc, label=<span class="hljs-string">&#x27;Training Accuracy&#x27;</span>)<br>plt.plot(val_acc, label=<span class="hljs-string">&#x27;Validation Accuracy&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;Training and Validation Accuracy&#x27;</span>)<br>plt.legend()<br><br>plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br>plt.plot(loss, label=<span class="hljs-string">&#x27;Training Loss&#x27;</span>)<br>plt.plot(val_loss, label=<span class="hljs-string">&#x27;Validation Loss&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;Training and Validation Loss&#x27;</span>)<br>plt.legend()<br>plt.show()<br><br></code></pre></td></tr></table></figure><p>话说回来inception是什么算法 吗？</p><img src="/2022/04/22/deep-resnet/image-20220422184707986.png" class="" title="image-20220422184707986"><p>cnn_baseline的也存一下</p><img src="/2022/04/22/deep-resnet/image-20220422221614706.png" class="" title="image-20220422221614706">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这次用了jupyter&lt;/p&gt;
&lt;p&gt;然后weights文件爆了（131万行后爆炸…）&lt;/p&gt;
&lt;img src=&quot;/2022/04/22/deep-resnet/image-20220422161143650.png&quot; class=&quot;&quot; title=&quot;image-2022</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
    <category term="deeplearning" scheme="https://github.com/sterne012/sterne012.github.io/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>嘤语学习助手-数据库课设</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/04/21/tnndsql/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/04/21/tnndsql/</id>
    <published>2022-04-21T08:44:08.000Z</published>
    <updated>2022-06-10T07:14:49.877Z</updated>
    
    <content type="html"><![CDATA[<p>夏日重现的ed是真的耐听(然而播放器还是失效了，悲)</p><div class="aplayer-box" data-url='https://sterne012.github.io/pubilc/music/cadode - 回夏.mp3' data-name='回夏' data-artist='cadode' data-cover data-lrc data-lrcType='3' ></div><p>做完了，见新一篇</p><h1 id="1-数据库"><a href="#1-数据库" class="headerlink" title="1.数据库"></a>1.数据库</h1><h2 id="0-连接"><a href="#0-连接" class="headerlink" title="0.连接"></a>0.连接</h2><p>终于把sql server（以下sql均指sql server）修好了。。。</p><p>昨天弄了一下午，真的不想玩辣，觉得用mysql摆烂算了，然后发现mysql的触发器和tsql不会写，寄</p><p>前段时间需求分析差不多的时候发现它从我的电脑上直接消失（一个什么配置管理器），然后正确的修复方法应该不是重装，或者不只是重装，在sql安装程序-&gt;维护-&gt;修复的地方修一下之后我才看到TCP/IP端口重现天日。。然后SSL什么的报错，改了jdbc里面的一段话（改的是idea里面jdbc的）</p><blockquote><p><strong>D:\jdk\jre\lib\security</strong>下就会有这个<strong>java.security</strong></p></blockquote><p>直接在idea安装路径下搜java.security，记事本打开，搜jdk.tls，将3DES_EDE_CBC删除</p><p>我超，行了！</p><h2 id="1-导入数据"><a href="#1-导入数据" class="headerlink" title="1.导入数据"></a>1.导入数据</h2><p>使用unicode(utf-8)字符集才能正确导入音标，否则一片问号</p><p>xlsx文件用excel打开后另存为-&gt;用csv保存-&gt;工具-&gt;编码-&gt;选unicode(utf-8)！选utf-8不行</p><p>在datagrip中导入，选utf-8</p><p>然后终于开始写触发器了</p><h2 id="2-数据库代码"><a href="#2-数据库代码" class="headerlink" title="2.数据库代码"></a>2.数据库代码</h2><p>同时也是备份</p><p><del>什么嘛，我这不是挺能写的，不要停下来啊</del></p><p>把type属性去掉了，拼字符串那种事情不要啊</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database EN_learning;<br>use EN_learning;<br><span class="hljs-keyword">ALTER</span> DATABASE EN_learning <span class="hljs-keyword">COLLATE</span> Chinese_PRC_CI_AS<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> Admin<br>(<br>    admin_id <span class="hljs-type">char</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">primary</span> key,<br>    admin_passwd <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>)<br>)<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> users<br>(<br>    user_id <span class="hljs-type">char</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">primary</span> key,<br>    user_passwd <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>),<br>    user_name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>    user_date <span class="hljs-type">date</span> <span class="hljs-keyword">default</span>(getdate()),<span class="hljs-comment">--注册时间</span><br>    user_learn <span class="hljs-type">smallint</span> <span class="hljs-keyword">default</span>(<span class="hljs-number">0</span>)<br>)<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> en_list<br>(<br>    word      <span class="hljs-type">char</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">primary</span> key,<br>    symbol    nvarchar(max),<br>    trans     nvarchar(max),<br>    frequency <span class="hljs-type">int</span> <span class="hljs-keyword">default</span>(<span class="hljs-number">0</span>),<br>    img       image,<br>    vocal     image<br>)<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> motto<br>(<br>    sentence nvarchar(max),<br>    trans    nvarchar(max)<br>)<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> jp_list <span class="hljs-comment">--计划后续添加</span><br>(<br>    word        nvarchar(<span class="hljs-number">80</span>) <span class="hljs-keyword">primary</span> key ,<br>    symbol      nvarchar(<span class="hljs-number">80</span>),<br>    trans       nvarchar(max),<br>    frequency   <span class="hljs-type">int</span> <span class="hljs-keyword">default</span>(<span class="hljs-number">0</span>),<br>    img         image,<br>    vocal       image<br>)<br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">--用户------------------------------------------------------</span><br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">--创建用户后触发：生成一张用户的新表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> users_add <span class="hljs-keyword">on</span> users after <span class="hljs-keyword">insert</span> <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<br>            <span class="hljs-variable">@create</span>_table <span class="hljs-type">varchar</span>(<span class="hljs-number">300</span>),<br>            <span class="hljs-variable">@create</span>_view <span class="hljs-type">varchar</span>(<span class="hljs-number">300</span>),<br>            <span class="hljs-variable">@sel</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">300</span>)<br>    <span class="hljs-keyword">select</span> <span class="hljs-variable">@user</span>_id<span class="hljs-operator">=</span>user_id <span class="hljs-keyword">from</span> inserted<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@create</span>_table<span class="hljs-operator">=</span><span class="hljs-string">&#x27;create table user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><br>                      <span class="hljs-string">&#x27; (&#x27;</span> <span class="hljs-operator">+</span><br>    <span class="hljs-string">&#x27;</span><br><span class="hljs-string">        rank      smallint default(0),</span><br><span class="hljs-string">        word      char(40) primary key,</span><br><span class="hljs-string">        symbol    nvarchar(max),</span><br><span class="hljs-string">        trans     nvarchar(max),</span><br><span class="hljs-string">        add_date  date default(getdate()),</span><br><span class="hljs-string">        del_date  date</span><br><span class="hljs-string">    )&#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@create</span>_table)<br><br>    <span class="hljs-comment">--生词表（view）user_1001001001 默认按rank降序排序</span><br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select rank,word,symbol,trans,add_date&#x27;</span> <span class="hljs-operator">+</span><br>             <span class="hljs-string">&#x27; from user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; where rank&gt;=0&#x27;</span><br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@create</span>_view<span class="hljs-operator">=</span><span class="hljs-string">&#x27;create view user_1_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; as &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@sel</span><br>    <span class="hljs-keyword">exec</span> (<span class="hljs-variable">@create</span>_view)<br><br>    <span class="hljs-comment">--熟词表（view）</span><br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select word,symbol,trans,add_date,del_date&#x27;</span> <span class="hljs-operator">+</span><br>             <span class="hljs-string">&#x27; from user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; where rank&lt;0&#x27;</span><br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@create</span>_view<span class="hljs-operator">=</span><span class="hljs-string">&#x27;create view user_2_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; as &#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@sel</span><br>    <span class="hljs-keyword">exec</span> (<span class="hljs-variable">@create</span>_view)<br>go<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(user_id, user_passwd, user_name) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>)<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(user_id, user_passwd, user_name) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;1001001002&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>,<span class="hljs-string">&#x27;test2&#x27;</span>)<br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--注销用户后触发：删除用户的表&amp;视图</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> users_del <span class="hljs-keyword">on</span> users after <span class="hljs-keyword">delete</span> <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@user</span>_id <span class="hljs-type">char</span>(<span class="hljs-number">10</span>),<br>            <span class="hljs-variable">@drop</span>_table <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>),<br>            <span class="hljs-variable">@drop</span>_view <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">select</span> <span class="hljs-variable">@user</span>_id<span class="hljs-operator">=</span>user_id <span class="hljs-keyword">from</span> deleted<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@drop</span>_table<span class="hljs-operator">=</span><span class="hljs-string">&#x27;drop table user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<br>    <span class="hljs-keyword">exec</span> (<span class="hljs-variable">@drop</span>_table)<br><br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@drop</span>_view<span class="hljs-operator">=</span><span class="hljs-string">&#x27;drop view user_1_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<br>    <span class="hljs-keyword">exec</span> (<span class="hljs-variable">@drop</span>_view)<br><br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@drop</span>_view<span class="hljs-operator">=</span><span class="hljs-string">&#x27;drop view user_2_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<br>    <span class="hljs-keyword">exec</span> (<span class="hljs-variable">@drop</span>_view)<br>go<br><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> user_id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1001001001&#x27;</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> user_id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1001001002&#x27;</span><br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">--词库-----------------------------------------------------</span><br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">--单词总量统计</span><br><span class="hljs-keyword">create</span> proc en_list_counter <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> en_list<br>go<br><br><span class="hljs-keyword">exec</span> en_list_counter<br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">--使用单词模糊查找，找到后词频+1</span><br><span class="hljs-keyword">create</span> proc EN_search <span class="hljs-variable">@word</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@word</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;%&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@word</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;%&#x27;</span><br>    <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> en_list <span class="hljs-keyword">where</span> word <span class="hljs-keyword">like</span> <span class="hljs-variable">@word</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@w</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>),<br>            <span class="hljs-variable">@frequency</span> <span class="hljs-type">int</span><br>    <span class="hljs-keyword">declare</span> csr <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span><br>    <span class="hljs-keyword">select</span> word,frequency <span class="hljs-keyword">from</span> en_list<br>    <span class="hljs-keyword">where</span> word <span class="hljs-keyword">like</span> <span class="hljs-variable">@word</span><br>    <span class="hljs-keyword">open</span> csr<br>    <span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> csr <span class="hljs-keyword">into</span> <span class="hljs-variable">@w</span>,<span class="hljs-variable">@frequency</span><br>    while @<span class="hljs-variable">@FETCH</span>_STATUS<span class="hljs-operator">=</span><span class="hljs-number">0</span><br>    <span class="hljs-keyword">begin</span><br>        update en_list <span class="hljs-keyword">set</span> frequency<span class="hljs-operator">=</span><span class="hljs-variable">@frequency</span><span class="hljs-operator">+</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-variable">@w</span><br>        <span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> csr <span class="hljs-keyword">into</span> <span class="hljs-variable">@w</span>,<span class="hljs-variable">@frequency</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">close</span> csr<br>    <span class="hljs-keyword">deallocate</span> csr<br>go<br><br><span class="hljs-keyword">exec</span> EN_search <span class="hljs-string">&#x27;cat&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--使用中文或词性模糊查找，找到后词频+1</span><br><span class="hljs-keyword">create</span> proc CH_search <span class="hljs-variable">@trans</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@w</span> <span class="hljs-type">char</span>(<span class="hljs-number">40</span>),<br>            <span class="hljs-variable">@frequency</span> <span class="hljs-type">int</span><br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@trans</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;%&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@trans</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;%&#x27;</span><br>    <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> en_list<br>    <span class="hljs-keyword">where</span> trans <span class="hljs-keyword">like</span> <span class="hljs-variable">@trans</span><br><br>    <span class="hljs-keyword">declare</span> csr <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span><br>        <span class="hljs-keyword">select</span> word,frequency <span class="hljs-keyword">from</span> en_list<br>        <span class="hljs-keyword">where</span> trans <span class="hljs-keyword">like</span> <span class="hljs-variable">@trans</span><br>        <span class="hljs-keyword">open</span> csr<br>        <span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> csr <span class="hljs-keyword">into</span> <span class="hljs-variable">@w</span>,<span class="hljs-variable">@frequency</span><br>        while @<span class="hljs-variable">@FETCH</span>_STATUS<span class="hljs-operator">=</span><span class="hljs-number">0</span><br>            <span class="hljs-keyword">begin</span><br>                update en_list <span class="hljs-keyword">set</span> frequency<span class="hljs-operator">=</span><span class="hljs-variable">@frequency</span><span class="hljs-operator">+</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-variable">@w</span><br>                <span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> csr <span class="hljs-keyword">into</span> <span class="hljs-variable">@w</span>,<span class="hljs-variable">@frequency</span><br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">close</span> csr<br>        <span class="hljs-keyword">deallocate</span> csr<br>go<br><br><span class="hljs-keyword">exec</span> CH_search <span class="hljs-string">&#x27;好&#x27;</span><br><span class="hljs-keyword">exec</span> CH_search <span class="hljs-string">&#x27;prep&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--词库中单词按词频排序，输出</span><br><span class="hljs-keyword">create</span> proc order_en_list_fre <span class="hljs-variable">@order</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">as</span><br>    if(<span class="hljs-variable">@order</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;ASC&#x27;</span>)<br>    <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> en_list<br>        <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> frequency <span class="hljs-keyword">asc</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> if(<span class="hljs-variable">@order</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;DESC&#x27;</span>)<br>    <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> en_list<br>        <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> frequency <span class="hljs-keyword">desc</span><br>    <span class="hljs-keyword">end</span><br>go<br><br><span class="hljs-keyword">exec</span> order_en_list_fre <span class="hljs-string">&#x27;ASC&#x27;</span><br><span class="hljs-keyword">exec</span> order_en_list_fre <span class="hljs-string">&#x27;DESC&#x27;</span><br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">--用户表-----------------------------------------------------</span><br><span class="hljs-comment">------------------------------------------------------------</span><br><span class="hljs-comment">--用户手动向生词表添加，一个一个加</span><br><span class="hljs-keyword">create</span> proc en_list_to_user <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<span class="hljs-variable">@word</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@ins</span> nvarchar(max)<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@ins</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;insert into user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27;(word,symbol,trans)&#x27;</span> <span class="hljs-operator">+</span><br>             <span class="hljs-string">&#x27;select word,symbol,trans from en_list where word=&#x27;&#x27;&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@word</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@ins</span>)<br>go<br><br><span class="hljs-keyword">exec</span> en_list_to_user <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-string">&#x27;accomplished&#x27;</span><br><br><span class="hljs-comment">------------------------------------------------------------------</span><br><span class="hljs-comment">--每日生成生词表（向其中添加一定数目的单词）</span><br><span class="hljs-keyword">create</span> proc day_en_word <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<span class="hljs-variable">@num</span> <span class="hljs-type">smallint</span>,<span class="hljs-variable">@val</span> <span class="hljs-type">smallint</span> <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@word</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>),<br>            <span class="hljs-variable">@csr</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">300</span>)<br>    if(<span class="hljs-variable">@val</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>)<span class="hljs-comment">--根据词库word正序选取（从字典序最小开始）</span><br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">set</span> <span class="hljs-variable">@csr</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;declare csr cursor for &#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;select top &#x27;</span><span class="hljs-operator">+</span><span class="hljs-keyword">convert</span>(<span class="hljs-type">char</span>,<span class="hljs-variable">@num</span>)<span class="hljs-operator">+</span><span class="hljs-string">&#x27; word from en_list &#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;where word not in(select word from user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27;)&#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;order by word asc&#x27;</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> if(<span class="hljs-variable">@val</span><span class="hljs-operator">=</span><span class="hljs-number">2</span>)<span class="hljs-comment">--根据word倒序选取（从字典序最大开始）</span><br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">set</span> <span class="hljs-variable">@csr</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;declare csr cursor for &#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;select top &#x27;</span><span class="hljs-operator">+</span><span class="hljs-keyword">convert</span>(<span class="hljs-type">char</span>,<span class="hljs-variable">@num</span>)<span class="hljs-operator">+</span><span class="hljs-string">&#x27; word from en_list &#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;where word not in(select word from user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27;)&#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;order by word desc&#x27;</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> if(<span class="hljs-variable">@val</span><span class="hljs-operator">=</span><span class="hljs-number">3</span>)<span class="hljs-comment">--根据词频选取，最大词频优先</span><br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">set</span> <span class="hljs-variable">@csr</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;declare csr cursor for &#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;select top &#x27;</span><span class="hljs-operator">+</span><span class="hljs-keyword">convert</span>(<span class="hljs-type">char</span>,<span class="hljs-variable">@num</span>)<span class="hljs-operator">+</span><span class="hljs-string">&#x27; word from en_list &#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;where word not in(select word from user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27;)&#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;order by frequency desc&#x27;</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> if(<span class="hljs-variable">@val</span><span class="hljs-operator">=</span><span class="hljs-number">4</span>)<span class="hljs-comment">--随机抽选</span><br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">set</span> <span class="hljs-variable">@csr</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;declare csr cursor for &#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;select top &#x27;</span><span class="hljs-operator">+</span><span class="hljs-keyword">convert</span>(<span class="hljs-type">char</span>,<span class="hljs-variable">@num</span>)<span class="hljs-operator">+</span><span class="hljs-string">&#x27; word from en_list &#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;where word not in(select word from user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27;)&#x27;</span> <span class="hljs-operator">+</span><br>                     <span class="hljs-string">&#x27;order by newid()&#x27;</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">exec</span> (<span class="hljs-variable">@csr</span>)<br>    <span class="hljs-keyword">open</span> csr<br>    <span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> csr <span class="hljs-keyword">into</span> <span class="hljs-variable">@word</span><br>    while @<span class="hljs-variable">@FETCH</span>_STATUS<span class="hljs-operator">=</span><span class="hljs-number">0</span><br>    <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">exec</span> en_list_to_user <span class="hljs-variable">@user</span>_id,<span class="hljs-variable">@word</span><br>        <span class="hljs-keyword">fetch</span> next <span class="hljs-keyword">from</span> csr <span class="hljs-keyword">into</span> <span class="hljs-variable">@word</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">close</span> csr<br>    <span class="hljs-keyword">deallocate</span> csr<br>go<br><br><span class="hljs-keyword">exec</span> day_en_word <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span><br><span class="hljs-keyword">exec</span> day_en_word <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">4</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--增加某个单词rank，上限为10（在前端检测并提示）</span><br><span class="hljs-keyword">create</span> proc rank_up <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<span class="hljs-variable">@word</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@update</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@update</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;update user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; set rank=rank+1 where word=&#x27;&#x27;&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@word</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@update</span>)<br>go<br><br><span class="hljs-keyword">exec</span> rank_up <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-keyword">exec</span> rank_up <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-string">&#x27;above&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--降低某个单词rank，下限为0</span><br><span class="hljs-keyword">create</span> proc rank_down <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<span class="hljs-variable">@word</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@update</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@update</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;update user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; set rank=rank-1 where word=&#x27;&#x27;&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@word</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@update</span>)<br>go<br><span class="hljs-keyword">exec</span> rank_down <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--从生词表删除移到熟词表</span><br><span class="hljs-keyword">create</span> proc rank_move <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<span class="hljs-variable">@word</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@update</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@update</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;update user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; set rank=-1,del_date=getdate() where word=&#x27;&#x27;&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@word</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@update</span>)<br>go<br><span class="hljs-keyword">exec</span> rank_move <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-string">&#x27;accomplished&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--按rank排序</span><br><span class="hljs-keyword">create</span> proc order_user1_rank <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<span class="hljs-variable">@order</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@sel</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    if(<span class="hljs-variable">@order</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;ASC&#x27;</span>)<br>    <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select * from user_1_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; order by rank asc&#x27;</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> if(<span class="hljs-variable">@order</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;DESC&#x27;</span>)<br>    <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select * from user_1_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; order by rank desc&#x27;</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@sel</span>)<br>go<br><br><span class="hljs-keyword">exec</span> order_user1_rank <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-string">&#x27;desc&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--按添加时间排序，方便看今天新添加的</span><br><span class="hljs-keyword">create</span> proc order_user1_date <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<span class="hljs-variable">@order</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@sel</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    if(<span class="hljs-variable">@order</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;ASC&#x27;</span>)<br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select * from user_1_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; order by add_date asc&#x27;</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> if(<span class="hljs-variable">@order</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;DESC&#x27;</span>)<br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select * from user_1_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; order by add_date desc&#x27;</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@sel</span>)<br>go<br><br><span class="hljs-keyword">exec</span> order_user1_date <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-string">&#x27;desc&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--报表：今日掌握的单词</span><br><span class="hljs-keyword">create</span> proc day_learn <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">as</span><br>    update users <span class="hljs-keyword">set</span> user_learn<span class="hljs-operator">=</span>user_learn<span class="hljs-operator">+</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> user_id<span class="hljs-operator">=</span><span class="hljs-variable">@user</span>_id<br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@sel</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select word,symbol,trans from user_2_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; where del_date=convert(date,getdate())&#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@sel</span>)<br>go<br><br><span class="hljs-keyword">exec</span> day_learn <span class="hljs-string">&#x27;1001001001&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--根据已学单词随机生成测试题，每次10词（前提是熟词表中有这么多）</span><br><span class="hljs-comment">--底层实现为随机从熟词表中select10个单词，前端可以选择不显示单词或者释义之类的</span><br><span class="hljs-keyword">create</span> proc user_en_test <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@sel</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select top 10 word,symbol,trans from user_2_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><br>             <span class="hljs-string">&#x27; order by newid()&#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@sel</span>)<br>go<br><br><span class="hljs-keyword">exec</span> user_en_test  <span class="hljs-string">&#x27;1001001001&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--随机名言，用于各种界面</span><br><span class="hljs-keyword">create</span> proc day_motto <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> sentence,trans <span class="hljs-keyword">from</span> motto <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> newid()<br>go<br><br><span class="hljs-keyword">exec</span> day_motto<br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><span class="hljs-comment">--图片&amp;音频导入</span><br>update en_list <span class="hljs-keyword">set</span> img<span class="hljs-operator">=</span>BulkColumn <span class="hljs-keyword">from</span> openrowset(bulk N<span class="hljs-string">&#x27;D:\#DownLoad\2.2\数据库\img\cat.png&#x27;</span>,single_blob) <span class="hljs-keyword">as</span> <span class="hljs-type">blob</span><br><span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-string">&#x27;cat&#x27;</span><br>update en_list <span class="hljs-keyword">set</span> img<span class="hljs-operator">=</span>BulkColumn <span class="hljs-keyword">from</span> openrowset(bulk N<span class="hljs-string">&#x27;D:\#DownLoad\2.2\数据库\img\dog.png&#x27;</span>,single_blob) <span class="hljs-keyword">as</span> <span class="hljs-type">blob</span><br><span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-string">&#x27;dog&#x27;</span><br>update en_list <span class="hljs-keyword">set</span> img<span class="hljs-operator">=</span>BulkColumn <span class="hljs-keyword">from</span> openrowset(bulk N<span class="hljs-string">&#x27;D:\#DownLoad\2.2\数据库\img\amphibian.png&#x27;</span>,single_blob) <span class="hljs-keyword">as</span> <span class="hljs-type">blob</span><br><span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-string">&#x27;amphibian&#x27;</span><br>update en_list <span class="hljs-keyword">set</span> img<span class="hljs-operator">=</span>BulkColumn <span class="hljs-keyword">from</span> openrowset(bulk N<span class="hljs-string">&#x27;D:\#DownLoad\2.2\数据库\img\aback.png&#x27;</span>,single_blob) <span class="hljs-keyword">as</span> <span class="hljs-type">blob</span><br><span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-string">&#x27;aback&#x27;</span><br><span class="hljs-keyword">exec</span> EN_search <span class="hljs-string">&#x27;amphibian&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br>update en_list <span class="hljs-keyword">set</span> vocal<span class="hljs-operator">=</span>BulkColumn <span class="hljs-keyword">from</span> openrowset(bulk N<span class="hljs-string">&#x27;D:\#DownLoad\2.2\数据库\vocal\aback.mp3&#x27;</span>,single_blob) <span class="hljs-keyword">as</span> <span class="hljs-type">blob</span><br><span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-string">&#x27;aback&#x27;</span><br>update en_list <span class="hljs-keyword">set</span> vocal<span class="hljs-operator">=</span>BulkColumn <span class="hljs-keyword">from</span> openrowset(bulk N<span class="hljs-string">&#x27;D:\#DownLoad\2.2\数据库\vocal\cat.mp3&#x27;</span>,single_blob) <span class="hljs-keyword">as</span> <span class="hljs-type">blob</span><br><span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-string">&#x27;cat&#x27;</span><br>update en_list <span class="hljs-keyword">set</span> vocal<span class="hljs-operator">=</span>BulkColumn <span class="hljs-keyword">from</span> openrowset(bulk N<span class="hljs-string">&#x27;D:\#DownLoad\2.2\数据库\vocal\dog.mp3&#x27;</span>,single_blob) <span class="hljs-keyword">as</span> <span class="hljs-type">blob</span><br><span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-string">&#x27;dog&#x27;</span><br>update en_list <span class="hljs-keyword">set</span> vocal<span class="hljs-operator">=</span>BulkColumn <span class="hljs-keyword">from</span> openrowset(bulk N<span class="hljs-string">&#x27;D:\#DownLoad\2.2\数据库\vocal\amphibian.mp3&#x27;</span>,single_blob) <span class="hljs-keyword">as</span> <span class="hljs-type">blob</span><br><span class="hljs-keyword">where</span> word<span class="hljs-operator">=</span><span class="hljs-string">&#x27;amphibian&#x27;</span><br><span class="hljs-keyword">exec</span> EN_search <span class="hljs-string">&#x27;dog&#x27;</span><br><span class="hljs-comment">-------------------------------------------------------------------</span><br><br></code></pre></td></tr></table></figure><h3 id="新增："><a href="#新增：" class="headerlink" title="新增："></a>新增：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询前多少个单词</span><br><span class="hljs-keyword">create</span> proc order_en_list <span class="hljs-variable">@top</span> <span class="hljs-type">int</span> <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@sel</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select top &#x27;</span><span class="hljs-operator">+</span><span class="hljs-keyword">convert</span>(<span class="hljs-type">varchar</span>,<span class="hljs-variable">@top</span>)<span class="hljs-operator">+</span><span class="hljs-string">&#x27; * from en_list&#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@sel</span>)<br><br><span class="hljs-comment">--熟词表按照日期倒序显示</span><br><span class="hljs-keyword">create</span> proc order_user2_date <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">declare</span> <span class="hljs-variable">@sel</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@sel</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;select * from user_2_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; order by del_date desc &#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@sel</span>)<br><br><span class="hljs-keyword">exec</span> order_user2_date <span class="hljs-string">&#x27;1001001001&#x27;</span><br><br><span class="hljs-comment">--熟词表移回生词表</span><br><span class="hljs-keyword">create</span> proc rank_re <span class="hljs-variable">@user</span>_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<span class="hljs-variable">@word</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">as</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@update</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">set</span> <span class="hljs-variable">@update</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;update user_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@user</span>_id<span class="hljs-operator">+</span><span class="hljs-string">&#x27; set rank=0,del_date=null where word=&#x27;&#x27;&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@word</span><span class="hljs-operator">+</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">exec</span>(<span class="hljs-variable">@update</span>)<br><br><span class="hljs-keyword">exec</span> rank_re <span class="hljs-string">&#x27;1001001001&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="2-web"><a href="#2-web" class="headerlink" title="2.web"></a>2.web</h1><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h2><ul><li><p>inStream parameter is null</p><p>druid.properties要复制两份放在resources和target/classes两个目录下</p></li><li><p>5月 07, 2022 3:30:50 下午 com.alibaba.druid.support.logging.JakartaCommonsLoggingImpl error<br>严重: testWhileIdle is true, validationQuery not set</p><p>5月 07, 2022 3:30:51 下午 com.alibaba.druid.support.logging.JakartaCommonsLoggingImpl info<br>信息: {dataSource-1} inited</p><p><a href="https://blog.csdn.net/qq_45954145/article/details/111073583">https://blog.csdn.net/qq_45954145/article/details/111073583</a></p></li><li><p> BeanUtils.populate(loginuser,map);</p></li></ul><p>  使用时前端的name要和后端user类对象名一样，否则调试时卡死</p><ul><li><p>实例化Servlet类异常</p><p>我真服了，真的，我改了一下包名（就是开头S统一成小写s结果找不到这个类。。。）</p></li><li><p>找不到jstl包</p><p>下载<code>jakarta-taglibs-standard-1.1.0</code>版本，将lib目录中两个jar都丢到项目lib目录</p></li><li><p>input找不到属性，属性值为空</p><p>不要设置input标签为disabled，设置为readonly就好</p></li></ul><h2 id="2-web代码-复制用"><a href="#2-web代码-复制用" class="headerlink" title="2.web代码(复制用)"></a>2.web代码(复制用)</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span> %&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span>%&gt;<br><br>&lt;%@ include file=<span class="hljs-string">&quot;bootstrap.jsp&quot;</span>%&gt;<br>&lt;title&gt;Login -EN Learning Assistant-&lt;/title&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;js/jquery.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;&lt;/script&gt;<br><br><br>&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;not empty user&#125;&quot;</span>&gt;&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;user_nav.jsp&quot;</span>%&gt;&lt;/c:<span class="hljs-keyword">if</span>&gt;<br>&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;not empty admin&#125;&quot;</span>&gt;&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;admin_nav.jsp&quot;</span>%&gt;&lt;/c:<span class="hljs-keyword">if</span>&gt;<br>&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;empty user &amp;&amp; not empty admin&#125;&quot;</span>&gt;&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;nav.jsp&quot;</span>%&gt;&lt;/c:<span class="hljs-keyword">if</span>&gt;<br><br><br>&lt;%@ include file=<span class="hljs-string">&quot;copyright.jsp&quot;</span>%&gt;<br></code></pre></td></tr></table></figure><h1 id="3-进度统计"><a href="#3-进度统计" class="headerlink" title="3.进度统计"></a>3.进度统计</h1><p>目前没做的功能：</p><ol><li><p>lib&amp;用户表的分页(lib完成，用户表不想做了)</p></li><li><p>点开始之后(完成)</p></li><li><p>查询功能(终于写对了)(导航栏的也写好了)</p></li><li><p>注册(什么校验都没有版（好看版）)</p></li><li><p>用户表里边一堆小按钮(完成)</p></li><li><p>打卡(完成，可能有一些bug)</p></li><li><p>单词测试（没做表单校验）</p></li><li><p>单词表的vocal和img(实际试了，估计是不支持动态的路径吧，不行)(？！行了好耶，用了百词斩的一些图)</p><p>突然想到办法去做这个，改成string类型存路径。输出之后放在img标签的src里就OK了；再简化一点甚至不用改底层，图片只要叫words.word.jpg就ok，好诶</p></li></ol><p>完善&amp;优化：</p><ol start="2"><li>打卡界面优化，打卡后的操作（完成）</li><li>单词测试（完成，但是校验写的比较简单）</li><li>单词的vocal</li><li>数据库备份咋整（哇哦）</li><li>我超你管理员还一点没写吧（蠕动）<ol><li>哼哼啊啊啊啊啊登录（ok）</li><li>个人信息（ok）</li><li>登出（ok）</li><li>单词修改（ok）</li><li>单词删除（ok）</li><li>单词添加（ok）</li><li>用户查看（ok）</li><li>用户修改（ko）</li><li>用户注销（ko）</li></ol></li><li>bug：用户从lib选取单词的时候没有校验？(好了)</li><li>motto的随机</li></ol><p>bug：</p><ol><li>管理员信息没做返回键</li><li>单词测试没有返回</li><li><img src="/2022/04/21/tnndsql/image-20220531094926485.png" class="" title="image-20220531094926485">怎么会是呢</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;夏日重现的ed是真的耐听(然而播放器还是失效了，悲)&lt;/p&gt;
&lt;div class=&quot;aplayer-box&quot; data-url=&#39;https://sterne012.github.io/pubilc/music/cadode - 回夏.mp3&#39; data-name=&#39;回夏</summary>
      
    
    
    
    
    <category term="sql" scheme="https://github.com/sterne012/sterne012.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>并行化编程练习</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/04/16/HPC/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/04/16/HPC/</id>
    <published>2022-04-16T03:41:52.000Z</published>
    <updated>2022-05-13T08:59:31.446Z</updated>
    
    <content type="html"><![CDATA[<p>HPC-高性能计算</p><p>说起高性能当然是atri了！</p><img src="/2022/04/16/HPC/image-20220416114456837.png" class="" title="image-20220416114456837"><img src="/2022/04/16/HPC/image-20220416114511405.png" class="" title="image-20220416114511405">robo真是太屑了（<p>不过真的好多刀，建议不玩呜呜</p><p>不扯了，正经点</p><p>由于学校server里的c版本比较低，所以大部分是用c语言写的</p><h1 id="mpi"><a href="#mpi" class="headerlink" title="mpi"></a>mpi</h1><p>这部分打到服务器上去了。。找时间把他们下回来qwq</p><h1 id="openmp"><a href="#openmp" class="headerlink" title="openmp"></a>openmp</h1><h2 id="常用编译指导语句"><a href="#常用编译指导语句" class="headerlink" title="常用编译指导语句"></a>常用编译指导语句</h2><ol><li><h3 id="并行域结构"><a href="#并行域结构" class="headerlink" title="并行域结构"></a>并行域结构</h3></li></ol><p>  parallel语句：创建线程组并行执行程序</p><ol start="2"><li><h3 id="共享任务结构"><a href="#共享任务结构" class="headerlink" title="共享任务结构"></a>共享任务结构</h3></li></ol><p>  for循环语句：将for循环分配给各线程并行执行</p><p>  sections语句：非迭代共享任务结构，将任务分配给各线程</p><p>  single语句：将代码段交由1个线程执行</p><ol start="3"><li><h3 id="同步与临界区"><a href="#同步与临界区" class="headerlink" title="同步与临界区"></a>同步与临界区</h3></li></ol><p>  barrier语句：实现线程组中所有线程同步</p><p>  ordered语句：位于循环内，按序串行执行</p><p>  critical语句：同一时刻只能有一个线程执行</p><p>  atomic语句：指定的存储单元被原子地更新</p><p>  master语句：代码段由主线程执行，其他线程忽略</p><p>•OpenMP程序在同一个共享内存空间上执行</p><p>•可以任意使用这个共享内存空间上的变量进行线程间的数据传递</p><p>•内存分布结构如图</p><p>•每一个线程的栈空间都是私有的</p><p>•全局变量以及程序代码都是全局共享</p><p>•动态分配的堆空间也是共享的</p><p>•通过threadprivate指出的数据结构在每一个线程中都会有一个副本 </p><p>•shared定义变量作用域是共享的</p><p>•private定义变量作用域是私有的 </p><img src="/2022/04/16/HPC/image-20220416115344365.png" class="" title="image-20220416115344365"><h2 id="1-hello-world并行化高性能版"><a href="#1-hello-world并行化高性能版" class="headerlink" title="1 hello world并行化高性能版"></a>1 hello world并行化高性能版</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel</span><br>   &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world\n&quot;</span>);<br>   &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-高性能算pi"><a href="#2-高性能算pi" class="headerlink" title="2 高性能算pi"></a>2 高性能算pi</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NUM_THREADS 16</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> num_steps=<span class="hljs-number">1000000000</span>;<br>    <span class="hljs-keyword">double</span> step;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">double</span> x,pi,sum=<span class="hljs-number">0.0</span>;<br>    step=<span class="hljs-number">1.0</span>/(<span class="hljs-keyword">double</span>) num_steps;<br>    omp_set_num_threads(NUM_THREADS);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for reduction(+:sum) private(x)</span><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;num_steps;i++)<br>&#123;<br>    x=(i+<span class="hljs-number">0.5</span>)*step;<br>    sum+=<span class="hljs-number">4.0</span>/(<span class="hljs-number">1.0</span>+x*x);<br>&#125;<br>    pi=step*sum;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Pi=%21.20f(%ld steps)\n&quot;</span>,pi,num_steps);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-私有变量的初始化和终结"><a href="#3-私有变量的初始化和终结" class="headerlink" title="3 私有变量的初始化和终结"></a>3 私有变量的初始化和终结</h2><p>private子句用于将一个或多个变量声明成线程私有的变量，变量声明成私有变量后，指定每个线程都有它自己的变量私有副本，其他线程无法访问私有副本。即使在并行区域外有同名的共享变量，共享变量在并行区域内不起任何作用，并且并行区域内不会操作到外面的共享变量。</p><p>private声明的私有变量不能继承同名变量的值，但实际情况中有时需要继承原有共享变量的值，OpenMP提供了firstprivate子句来实现这个功能。若上述程序使用firstprivate(k)，则并行区域内的私有变量k继承了外面共享变量k的值100作为初始值，并且在退出并行区域后，共享变量k的值保持为100未变。</p><p>有时在并行区域内的私有变量的值经过计算后，在退出并行区域时，需要将它的值赋给同名的共享变量，前面的private和firstprivate子句在退出并行区域时都没有将私有变量的最后取值赋给对应的共享变量，lastprivate子句就是用来实现在退出并行区域时将私有变量的值赋给共享变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> val=<span class="hljs-number">8</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for firstprivate(val) lastprivate(val)</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">2</span>;i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i=%d val=%d\n&quot;</span>,i,val);<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)<br>        val=<span class="hljs-number">10000</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i=%d val=%d\n&quot;</span>,i,val);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;val=%d\n&quot;</span>,val);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-循环嵌套"><a href="#4-循环嵌套" class="headerlink" title="4 循环嵌套"></a>4 循环嵌套</h2><p>在一个循环体内包涵另一个循环体，循环体产生嵌套</p><p>循环并行化编译指导语句可以加在任一循环之前，对应的最近的循环语句被并行化，其它部分不变</p><p>并行化作用于嵌套循环中的某一个循环，其他部分由执行到的线程负责执行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">30</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-keyword">int</span> i,j;<br>    <span class="hljs-keyword">int</span> a[maxn][maxn];<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;maxn;i++)&#123;<br>        a[<span class="hljs-number">0</span>][i]=<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;maxn; i++) &#123;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for</span><br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; maxn; j++) &#123;<br>            a[i][j] = <span class="hljs-number">2</span> * a[i - <span class="hljs-number">1</span>][j];<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a[%d][%d] = %d\n&quot;</span>, i, j, a[i][j]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>下面这个是并行化i的，但是运行时出现了一些问题？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">30</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-keyword">int</span> i,j;<br>    <span class="hljs-keyword">int</span> a[maxn][maxn];<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;maxn;i++)&#123;<br>        a[<span class="hljs-number">0</span>][i]=<span class="hljs-number">1</span>;<br>    &#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;maxn; i++) &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; maxn; j++) &#123;<br>            a[i][j] = <span class="hljs-number">2</span> * a[i - <span class="hljs-number">1</span>][j];<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a[%d][%d] = %d\n&quot;</span>, i, j, a[i][j]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-循环调度策略"><a href="#5-循环调度策略" class="headerlink" title="5 循环调度策略"></a>5 循环调度策略</h2><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>循环变量区域分为n等份，每个线程平分n份任务</p><p>适用：各个cpu性能差距不大</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">30</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for schedule(static, 2)</span><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;thread id = %d  value = %d\n&quot;</span>,omp_get_thread_num(),i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="dynamic"><a href="#dynamic" class="headerlink" title="dynamic"></a>dynamic</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">30</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for schedule(dynamic, 2)</span><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;thread id = %d  value = %d\n&quot;</span>,omp_get_thread_num(),i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="guided"><a href="#guided" class="headerlink" title="guided"></a>guided</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">30</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for schedule(guided, 80)</span><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">800</span>; ++i)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;thread id = %d  value = %d\n&quot;</span>,omp_get_thread_num(),i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>两个cpu，那么任务分配如下：</p><p>•第一个任务： [800/(2*2)] = 200</p><p>•第二个任务：第一个任务分了200，还有600，那么[600/(2*2)] = 150</p><p>•第三个任务：第二个任务分了150，还有450，那么[450/2*2)] = 113</p><p>•第四个人任务：第三个任务分了113，还有337，那么[337/(2*2)] = 85</p><p>•第五个任务：第四个任务分了85，还有252，那么[252/(2*2)] = 63, 小于声明的80，那么这里为80</p><p>•第六个任务：第五个任务分了80，还有172，根据声明，这里为80（因为会小于80）</p><p>•第七个任务：第六个任务分了80，还有92，根据声明，这里为80（因为会小于80）</p><p>•第八个任务：第七个任务分了80，还有12，根据声明，这里为12（因为不够80）</p><h3 id="runtime"><a href="#runtime" class="headerlink" title="runtime"></a>runtime</h3><p>schedule(runtime)</p><h2 id="6-规约reduction"><a href="#6-规约reduction" class="headerlink" title="6 规约reduction"></a>6 规约reduction</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">30</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> i;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for num_threads(10) private(i)</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">101</span>;i++)<br>        a=a+i;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a1=%d\n&quot;</span>,a);<br>    a=<span class="hljs-number">0</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel for num_threads(10) private(i) reduction(+:a)</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">101</span>;i++)<br>        a=a+i;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a2=%d\n&quot;</span>,a);<br>    a=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">101</span>;i++)<br>        a=a+i;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a3=%d\n&quot;</span>,a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-section"><a href="#7-section" class="headerlink" title="7 section"></a>7 section</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;omp.h&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">30</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a,b,c;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp parallel sections</span><br>&#123;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp section</span><br>    a = <span class="hljs-number">1</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp section</span><br>    b = <span class="hljs-number">2</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> omp section</span><br>    c = <span class="hljs-number">3</span>;<br><br>&#125;<br>    <span class="hljs-keyword">int</span> d=a+b+c;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;d = %d&quot;</span>,d);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-互斥锁"><a href="#8-互斥锁" class="headerlink" title="8 互斥锁"></a>8 互斥锁</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;HPC-高性能计算&lt;/p&gt;
&lt;p&gt;说起高性能当然是atri了！&lt;/p&gt;
&lt;img src=&quot;/2022/04/16/HPC/image-20220416114456837.png&quot; class=&quot;&quot; title=&quot;image-20220416114456837&quot;&gt;&lt;img </summary>
      
    
    
    
    
    <category term="c" scheme="https://github.com/sterne012/sterne012.github.io/tags/c/"/>
    
    <category term="HPC" scheme="https://github.com/sterne012/sterne012.github.io/tags/HPC/"/>
    
  </entry>
  
  <entry>
    <title>常用网站整理</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/04/15/web/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/04/15/web/</id>
    <published>2022-04-15T13:49:55.000Z</published>
    <updated>2022-05-13T09:00:43.447Z</updated>
    
    <content type="html"><![CDATA[<p>凯尔希在看着你.jpg（图片与内容无关，只是开服到现在终于满了，留个纪念） </p><h1 id="啥都有"><a href="#啥都有" class="headerlink" title="啥都有"></a>啥都有</h1><h4 id="Gayhub-https-github-com-sterne012"><a href="#Gayhub-https-github-com-sterne012" class="headerlink" title="Gayhub https://github.com/sterne012"></a>Gayhub <a href="https://github.com/sterne012">https://github.com/sterne012</a></h4><h4 id="GPUserver-http-219-231-164-76"><a href="#GPUserver-http-219-231-164-76" class="headerlink" title="GPUserver http://219.231.164.76/"></a>GPUserver <a href="http://219.231.164.76/">http://219.231.164.76/</a></h4><p>学校里的gpu服务器，主要是python&amp;jupyter，深度学习可用</p><h4 id="Twitter-https-twitter-com-home"><a href="#Twitter-https-twitter-com-home" class="headerlink" title="Twitter https://twitter.com/home"></a>Twitter <a href="https://twitter.com/home">https://twitter.com/home</a></h4><p><del>来一次紧张刺激的壁外调查吧</del></p><h4 id="Arcaea查分器-https-redive-estertion-win-arcaea-probe"><a href="#Arcaea查分器-https-redive-estertion-win-arcaea-probe" class="headerlink" title="Arcaea查分器 https://redive.estertion.win/arcaea/probe/"></a>Arcaea查分器 <a href="https://redive.estertion.win/arcaea/probe/">https://redive.estertion.win/arcaea/probe/</a></h4><p><del>ptt-0.01</del></p><h4 id="pytorch-https-pytorch-apachecn-org"><a href="#pytorch-https-pytorch-apachecn-org" class="headerlink" title="pytorch https://pytorch.apachecn.org/#/"></a>pytorch <a href="https://pytorch.apachecn.org/#/">https://pytorch.apachecn.org/#/</a></h4><h1 id="OJ"><a href="#OJ" class="headerlink" title="OJ"></a>OJ</h1><h4 id="PTA-https-pintia-cn"><a href="#PTA-https-pintia-cn" class="headerlink" title="PTA https://pintia.cn/"></a>PTA <a href="https://pintia.cn/">https://pintia.cn/</a></h4><h4 id="vj-https-vjudge-net"><a href="#vj-https-vjudge-net" class="headerlink" title="vj https://vjudge.net/"></a>vj <a href="https://vjudge.net/">https://vjudge.net/</a></h4><h4 id="CF-https-codeforces-com"><a href="#CF-https-codeforces-com" class="headerlink" title="CF https://codeforces.com/"></a>CF <a href="https://codeforces.com/">https://codeforces.com/</a></h4><h4 id="洛谷-https-www-luogu-com-cn"><a href="#洛谷-https-www-luogu-com-cn" class="headerlink" title="洛谷 https://www.luogu.com.cn/"></a>洛谷 <a href="https://www.luogu.com.cn/">https://www.luogu.com.cn/</a></h4><h1 id="SRTP相关"><a href="#SRTP相关" class="headerlink" title="SRTP相关"></a>SRTP相关</h1><h4 id="NASA-ADS-https-ui-adsabs-harvard-edu"><a href="#NASA-ADS-https-ui-adsabs-harvard-edu" class="headerlink" title="NASA/ADS https://ui.adsabs.harvard.edu/"></a>NASA/ADS <a href="https://ui.adsabs.harvard.edu/">https://ui.adsabs.harvard.edu/</a></h4><h4 id="ARXIV-https-arxiv-org"><a href="#ARXIV-https-arxiv-org" class="headerlink" title="ARXIV https://arxiv.org/"></a>ARXIV <a href="https://arxiv.org/">https://arxiv.org/</a></h4><h4 id="巡天-数据源-https-archive-stsci-edu"><a href="#巡天-数据源-https-archive-stsci-edu" class="headerlink" title="巡天/数据源 https://archive.stsci.edu/"></a>巡天/数据源 <a href="https://archive.stsci.edu/">https://archive.stsci.edu/</a></h4><h4 id="SDSS-https-www-sdss-org"><a href="#SDSS-https-www-sdss-org" class="headerlink" title="SDSS https://www.sdss.org/"></a>SDSS <a href="https://www.sdss.org/">https://www.sdss.org/</a></h4><h4 id="变星分类-http-sunguoyou-lamost-org-bxfl-html"><a href="#变星分类-http-sunguoyou-lamost-org-bxfl-html" class="headerlink" title="变星分类 http://sunguoyou.lamost.org/bxfl.html"></a>变星分类 <a href="http://sunguoyou.lamost.org/bxfl.html">http://sunguoyou.lamost.org/bxfl.html</a></h4><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><h4 id="Bootstrap-https-www-bootcss-com"><a href="#Bootstrap-https-www-bootcss-com" class="headerlink" title="Bootstrap https://www.bootcss.com/"></a>Bootstrap <a href="https://www.bootcss.com/">https://www.bootcss.com/</a></h4><h4 id="live2d-https-www-fghrsh-net-post-123-html"><a href="#live2d-https-www-fghrsh-net-post-123-html" class="headerlink" title="live2d https://www.fghrsh.net/post/123.html"></a>live2d <a href="https://www.fghrsh.net/post/123.html">https://www.fghrsh.net/post/123.html</a></h4><h1 id="bot"><a href="#bot" class="headerlink" title="bot"></a>bot</h1><p>但总体而言都没研究懂</p><h4 id="nonebot-https-v2-nonebot-dev"><a href="#nonebot-https-v2-nonebot-dev" class="headerlink" title="nonebot https://v2.nonebot.dev/"></a>nonebot <a href="https://v2.nonebot.dev/">https://v2.nonebot.dev/</a></h4><h4 id="go-cqhttp-https-docs-go-cqhttp-org"><a href="#go-cqhttp-https-docs-go-cqhttp-org" class="headerlink" title="go-cqhttp https://docs.go-cqhttp.org/"></a>go-cqhttp <a href="https://docs.go-cqhttp.org/">https://docs.go-cqhttp.org/</a></h4>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;凯尔希在看着你.jpg（图片与内容无关，只是开服到现在终于满了，留个纪念） &lt;/p&gt;
&lt;h1 id=&quot;啥都有&quot;&gt;&lt;a href=&quot;#啥都有&quot; class=&quot;headerlink&quot; title=&quot;啥都有&quot;&gt;&lt;/a&gt;啥都有&lt;/h1&gt;&lt;h4 id=&quot;Gayhub-https-gi</summary>
      
    
    
    
    <category term="帮助文档" scheme="https://github.com/sterne012/sterne012.github.io/categories/%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>SRTP-时域变源证认与分类的机器学习研究</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/04/15/SRTP/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/04/15/SRTP/</id>
    <published>2022-04-15T13:38:46.000Z</published>
    <updated>2022-05-13T09:00:24.141Z</updated>
    
    <content type="html"><![CDATA[<p>纯干货（）这就是立项原文，仅供参考，严禁原文再次发表或使用</p><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p>时域天文学主要研究天体的各种性质如何随时间变化，这可能是由于天体本征性质发生改变，也可能源自其运动。分属时域天文领域的变星是光度随时间（周期）变化的恒星，其作为天体物理学中的重要研究对象，可应用于银河系和附近星系的结构和运动学示踪，星系化学演化示踪，研究恒星可变性也有助于我们理解恒星本身的演化和物理特性等，是许多领域的主要科学驱动力。随着科技进步，观测手段不断改进，在海量天体观测数据中对变源进行证认，仅凭目视分类法在时间和人力上都难以实现。藉由计算机领域的机器学习方法，对变星及其它变源（如系外行星凌星、活动星系核AGN等）进行特征提取并分类，是时域天文学前沿领域的重要课题，也是本项目的主要研究方向。本项目研究成果可应用于当前及未来时域巡天观测项目（如司天等）。</p><h2 id="研究综述"><a href="#研究综述" class="headerlink" title="研究综述"></a>研究综述</h2><p>至少归纳总结5个同类课题的研究观点/结论</p><ol><li><p>光变曲线特征提取</p><p>提取变星周期使用的方法为周期图，其核心思想为傅里叶变换，该方法同样适用于恒星星震信号、恒星自转信号的搜索。傅立叶变换是一种线性的积分变换，常用 来对信号进行时域到频域的处理，对光变数据的傅立叶分析就是一个从时域到频域的 变换．我们使用Lom-Scargle(L-S)周期图和Box Least Squares(BLS)周期图法，其中L-S周期图(Lomb-Scargle)算法能很好地检测和提 取不均匀采样时域中的周期性，并且在不同学科的时序分析中得到了广泛的应用，它允许对不均匀采样的数据进行傅里叶变换，从而可以直观地表征光变周期.在L-S算法中， 只有时间序列中t时刻为实测值时才对光变数据进行处理，如果序列yi(ti)由N个数据点构成，将角频率w&gt;0位变量的L-S周期频谱用Px来表示，则根据Lomb和Scargle的工作，可以按下式对Px进行计算：</p><img src="/2022/04/15/SRTP/image-20220419200514604.png" class="" title="image-20220419200514604"><p>另一种方法是BLS周期图，当凌星过程占行星轨道周期的比例较小时，BLS周期图 更加精确，对较长周期行星凌星使用BLS周期图法，利用该方法相较于L-S周期图可以找到更准确的信号峰值。（唐延柯、盖宁et al,2021,TESS空间卫星单扇区变星的周期性研究）</p></li><li><p>K-Means聚类方法属于迭代算法，根据分类个数随机生成相应个数的聚类中心，然后进入内循环，不断重复簇分配和移动聚类中心两个步骤，原则上靠近哪个聚类中心就被分为哪一类，可以用颜色区分标记，再移动聚类中心置属于该聚类中心的特征类的均值中心，簇分配和移动聚类中心的过程就是在不断地最小化代价函数。(Zafiirah Hosenie,Robert Lyon, Benjamin Stappers, Arrykrishna Mootoovaloo, 2019, Comparing Multi-class, Binary and Hierarchical Machine Learning Classification schemes for variable stars)</p></li><li><p>主成分分析方法（PCA）主要是通过数据压缩，或者说降维的方法来加速学习过程，通过数据可视化、均值归一化和特征规范化的方法使得均值为0，且数值在可比较的范围内，就此寻找低维平面，将数据投影使得数据到平面的距离的平方（投影误差）最短；独立成分分析方法（ICA）同样用于降维，但相较于PCA多了独立性。在不同样本重叠的时候，ICA的特征分离效果更显著，效率更高。(Suman Paul, Tanuka Chattopadhyay, 2022, Structural properties and classification of variable stars: A study through unsupervised machine learning techniques)</p></li><li><p>SOM算法将一个N维的数据集（由N个估计值或参数组成）还原成一个由mxn个单元组成的二维网格。这使得SOM成为可视化高维数据集中相关关系的有力工具。SOM优势在于，它不仅能够稳健地识别给定AGN数据集中的可变光曲线，而且也是研究多维空间中物理参数之间相关性的工具–例如AGN可变性与其宿主星系属性之间的联系。(Faisst et al, 2019, How to Find Variable Active Galactic Nuclei with Machine Learning)</p></li><li><p>关于 SOM 的训练，其输入参数有两个，分别是影响 Kohonen 层中像素调整速率的初始学习率$\alpha_0$和影响组大小的初始学习半径$\sigma_0$。对于一系列迭代，将每个输入的相位曲线与 Kohonen 层进行比较，并最小化像素元素和相位曲线之间的差异，找到层中的最佳匹配像素，然后按照以下表达式（Kohonen 层为二维的情况）更新每个像素：</p><img src="/2022/04/15/SRTP/image-20220420152120449.png" class="" title="image-20220420152120449"><p>其中：</p><ul><li>$m_{xy,k,new}$是相位曲线中元素$k$、坐标$x,y$处的像素值。</li><li>$d_{xy}$是该层中这个像素与最佳匹配像素的欧几里得距离。</li><li>$s_k$是所考虑的相位曲线的第$k$个元素。</li></ul><p>&emsp;&emsp;对每个相位曲线执行该操作后，$\alpha$和$\sigma$将按照以下公式更新：</p><img src="/2022/04/15/SRTP/image-20220420152137880.png" class="" title="image-20220420152137880"><p>其中：</p><ul><li>i 是当前迭代轮数。</li><li>r 是 Kohonen 层最大维度的大小。</li><li>$n_{iter}$是进行迭代的次数。</li></ul></li><li><p>Repeating this project with a dataset that is larger, more balanced between categories, and has a lower proportion of edge cases, is recommended.（T. N. Stenborg，2020，Machine Learning Classification of Candidate Variable Stars in Python）</p></li><li><p>Image classification was automated here via multinomial logistic regression. The six classes used were: pulsator, rotator, EA/EB type, EW type, unknown and junk. （T. N. Stenborg，2020，Machine Learning Classification of Candidate Variable Stars in Python）</p></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>Zafiirah Hosenie,Robert Lyon, Benjamin Stappers, Arrykrishna Mootoovaloo, 2019, Comparing Multi-class, Binary and Hierarchical Machine Learning Classification schemes for variable stars</li><li>Suman Paul, Tanuka Chattopadhyay, 2022, Structural properties and classification of variable stars: A study through unsupervised machine learning techniques</li><li>Xiaodian Chen1 , Shu Wang et al. 2020, The Zwicky Transient Facility Catalog of Periodic Variable Stars</li><li>T. N. Stenborg, 2020, Machine Learning Classification of Candidate Variable Stars in Python</li><li>Andreas L. Faisst, Abhishek Prakash, Peter L. Capak, and Bomee Lee, 2019, How to Find Variable Active Galactic Nuclei with Machine Learning</li><li>Joseph W. Richards, Dan L. Starr et al. 2011, ON MACHINE-LEARNED CLASSIFICATION OF VARIABLE STARS WITH SPARSE AND NOISY TIME-SERIES DATA</li><li>D. J. Armstrong, J. Kirk, K. W. F. Lam et al. 2016, K2 variable catalogue – II. Machine learning classification of variable stars and eclipsing binaries in K2 fields 0–4</li><li>Ilya N. Pashchenko, Kirill V. Sokolovsky, and Panagiotis Gavras, 2017, Machine learning search for variable stars</li><li>Jan van Roestel, Dmitry A. Duev, Ashish A. Mahabal et al. 2021, The ZTF Source Classification Project. I. Methods and Infrastructure</li><li>唐延柯,盖宁 et al. 2021, TESS空间卫星单扇区变星的周期性研究</li><li>王瑞, 2021, 深度学习在LAMOST光谱恒星参数测量中的应用</li></ol><h2 id="研究方案"><a href="#研究方案" class="headerlink" title="研究方案"></a>研究方案</h2><h3 id="研究内容"><a href="#研究内容" class="headerlink" title="研究内容"></a>研究内容</h3><p>本项目计划首先对变星数据进行数据获取和预处理，提取光变曲线主要特征，后使用DNN和SOM两种算法对变星分类，然后根据训练结果和测试结果进行超参数调优和优化器调整，预期得出准确率较高的分类结果。后期计划尝试其他无监督学习算法，与主要的两种算法进行对比；并尝试添加变星除光变曲线之外的其他观测特征进行Meta Learning训练。</p><h3 id="研究方法"><a href="#研究方法" class="headerlink" title="研究方法"></a>研究方法</h3><ol><li>收集整理相关变源时序测光数据，处理分析测光数据，提取数据光变特征信息；</li><li>将获取的测光数据进行分类，处理可能出现的不平衡的数据情况，组成训练集和测试集；</li><li>搭建深度神经网络DNN和自组织映射SOM 算法，对变源进行证认、分类测试；</li><li>分析证认分类效果，优化改进算法，研究相关优化器并对超参数等进行调整，提高算法分类的准确率；</li><li>测试其他相关算法，并与主要的两种算法效果进行对比，得出结论；</li><li>综合以上研究，给出适用于大样本变源自动证认与分类的普适性算法、程序。</li></ol><h3 id="进度安排"><a href="#进度安排" class="headerlink" title="进度安排"></a>进度安排</h3><p>计划将研究过程分为三个阶段：</p><ol><li>项目前期：学习时域天文学、机器学习相关内容，做好知识储备；获取相关天文观测数据，掌握从光变曲线中分析提取特征、消除噪声的方法，并进行数据集的初步处理；查阅相关文献，学习文章所涉及ML分类算法，进行迁移应用；</li><li>项目中期：确定训练集和测试集，并对可能存在数据不平衡情况进行处理；结合所学构建ML主体算法，进行超参数调优，优化器调试等，最终得到准确率较高的分类结果；进行其他ML算法的尝试，并与主体算法相对比，比较二者（或多者）的优劣；尝试添加变星除光变曲线之外的其他观测特征进行训练。</li><li>项目后期：完成上述工作后，对所得结果进行分析，并最终以论文的形式阐述研究结果，进行发表。</li></ol><h3 id="重点难点"><a href="#重点难点" class="headerlink" title="重点难点"></a>重点难点</h3><ol><li>不同于常规的机器学习项目，有关时域天文领域的数据具有其自身特点，难以将现有的、发展完备的算法直接应用到相关数据分析当中；</li><li>观测数据量大，难以直接使用原始光变曲线进行分析，可能需要依据变星特征提取重要光变信息作处理；</li><li>天文观测数据易受天气条件限制，同一类数据受不同噪声的影响呈现效果有所不同，易造成分类准确率下降；</li><li>对于某些变星，仅凭借光变曲线这一特征不足以对其进行正确分类，可能需要其他相关数据的配合；</li><li>目前的观测数据中，脉动变星、食变双星的观测数据量较多，而相比之下喷发变星、激变或爆发变星观测数据量较少，易导致数据集产生不平衡的问题，从而可能对分类的精确率和召回率产生影响；</li><li>特殊地，某些变星根据天文学的分类方式可以同时分属两个系统，对此类数据的分析处理存在一定困难。</li></ol><h3 id="创新之处"><a href="#创新之处" class="headerlink" title="创新之处"></a>创新之处</h3><ol><li>天文学传统的目视分类法难以满足目前迅速增长的观测数据量的支持，使用机器学习进行分类能大量减少目前目视证认变星的负担，代替人类完成分类工作；</li><li>机器学习在时域天文学的应用刚刚起步，发展前景广阔，本项目发掘有效的变星分类手段，为时域天文学领域发展做出贡献；</li><li>项目并不局限于一种分类方式，而是有监督、无监督学习均有涉及，通过多种算法的尝试得出最终结论。</li><li>本项目研究成果可应用于当前及未来时域巡天观测项目（如司天等）。</li></ol><h3 id="研究基础"><a href="#研究基础" class="headerlink" title="研究基础"></a>研究基础</h3><p>本项目有关的研究工作积累或相关课程经验积累</p><ol><li>项目成员对天文学有浓厚兴趣，已学习天文学新概论、基础天文学等课程内容，并阅读变星相关文献进行学习；</li><li>目前已有大量变源观测数据可供研究使用，如K2、TESS、ZTF等观测项目；</li><li>机器学习方面计算机专业成员已有相关课程（机器学习、深度学习等）提供理论支持，并拓展课外相关知识，主动学习；</li><li>指导老师认真负责，在天文学领域造诣颇深，为项目组成员提供切实有效课题知识指导。</li></ol><h2 id="指导老师意见"><a href="#指导老师意见" class="headerlink" title="指导老师意见"></a>指导老师意见</h2><p>本项目针对当前天文学与天体物理学研究的热门前沿领域之一的“时域天文学”，利用机器学习、人工智能AI等创新方法手段对变源进行自动证认与分类研究分析，可帮助解决大数据背景下的重要科学问题，也可进一步促进机器学习方法在天文学中应用，加强天文物理与计算机信息技术、数学统计等领域的交叉融合，此外其研究成果可应用于当前及未来时域巡天观测项目（如司天等），具有重要意义。强烈建议项目立项！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;纯干货（）这就是立项原文，仅供参考，严禁原文再次发表或使用&lt;/p&gt;
&lt;h2 id=&quot;项目简介&quot;&gt;&lt;a href=&quot;#项目简介&quot; class=&quot;headerlink&quot; title=&quot;项目简介&quot;&gt;&lt;/a&gt;项目简介&lt;/h2&gt;&lt;p&gt;时域天文学主要研究天体的各种性质如何随时间变化，这</summary>
      
    
    
    
    
    <category term="srtp" scheme="https://github.com/sterne012/sterne012.github.io/tags/srtp/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-优化器对比</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/04/15/deep-optimizer/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/04/15/deep-optimizer/</id>
    <published>2022-04-15T13:28:49.000Z</published>
    <updated>2022-04-15T14:26:31.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SGD"><a href="#SGD" class="headerlink" title="SGD"></a>SGD</h2><p>SGD全称Stochastic Gradient Descent，随机梯度下降，1847年提出。每次选择一个mini-batch，而不是全部样本，使用梯度下降来更新模型参数。它解决了随机小批量样本的问题，但仍然有自适应学习率、容易卡在梯度较小点等问题。</p><p>（lr=0.1  epoch=500  batch=32 sgdm momentum=0.1）下的图像</p><img src="/2022/04/15/deep-optimizer/image-20220415214125579.png" class="" title="image-20220415214125579"><img src="/2022/04/15/deep-optimizer/image-20220415214153593.png" class="" title="image-20220415214153593"><h2 id="SGDM"><a href="#SGDM" class="headerlink" title="SGDM"></a>SGDM</h2><p>在SGD的基础上添加动量参数momentum，相比SGD优势明显，加入动量后，参数更新就可以保持之前更新趋势，而不会卡在当前梯度较小的点了。</p><img src="/2022/04/15/deep-optimizer/image-20220415214311664.png" class="" title="image-20220415214311664"><img src="/2022/04/15/deep-optimizer/image-20220415214331433.png" class="" title="image-20220415214331433"><p>Adagrad</p><p>它利用迭代次数和累积梯度，对学习率进行自动衰减，2011年提出。从而使得刚开始迭代时，学习率较大，可以快速收敛。而后来则逐渐减小，精调参数，使得模型可以稳定找到最优点。</p><p>与SGD的区别在于，学习率除以 前t-1 迭代的梯度的平方和。故称为自适应梯度下降。</p><p>Adagrad有个致命问题，就是没有考虑迭代衰减。极端情况，如果刚开始的梯度特别大，而后面的比较小，则学习率基本不会变化了，也就谈不上自适应学习率了。这个问题在RMSProp中得到了修正。</p><img src="/2022/04/15/deep-optimizer/image-20220415214427346.png" class="" title="image-20220415214427346"><img src="/2022/04/15/deep-optimizer/image-20220415214440459.png" class="" title="image-20220415214440459"><h2 id="RMSprop"><a href="#RMSprop" class="headerlink" title="RMSprop"></a>RMSprop</h2><img src="/2022/04/15/deep-optimizer/image-20220415214511114.png" class="" title="image-20220415214511114"><img src="/2022/04/15/deep-optimizer/image-20220415214526011.png" class="" title="image-20220415214526011"><h2 id="Adam"><a href="#Adam" class="headerlink" title="Adam"></a>Adam</h2><p>Adam是SGDM和RMSProp的结合，它基本解决了之前提到的梯度下降的一系列问题，比如随机小样本、自适应学习率、容易卡在梯度较小点等问题。</p><img src="/2022/04/15/deep-optimizer/image-20220415214544714.png" class="" title="image-20220415214544714"><img src="/2022/04/15/deep-optimizer/image-20220415214557602.png" class="" title="image-20220415214557602"><p>代码运行上没有遇到太多问题，在绘制图像时使用keras.Callback.History()中返回的数值进行绘制，使用的损失函数为交叉熵损失函数，具体图像如下：</p><p>不过感觉epoch=500的情况下训练时间相当长（GPU加速有装，但可能没成功调用？这一块有待研究）</p><p>分析数据，Rmsprop算法一定程度上出现了过拟合的问题，Rmsprop的测试集loss曲线几乎一直在保持上升态势；</p><p>而Adam算法得到的训练效果并不好，准确率仅有约66%，而且测试集的loss相当高。</p><p>总体而言，对于minst数据集，sgd、sgdm、adagrad优化器的优化效果是不错的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-keyword">import</span> tensorflow.keras<br><span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> optimizers<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> os<br><br>os.environ[<span class="hljs-string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="hljs-string">&#x27;2&#x27;</span><br>os.environ[<span class="hljs-string">&quot;KMP_DUPLICATE_LIB_OK&quot;</span>] = <span class="hljs-string">&quot;TRUE&quot;</span><br><br>mnist = tf.keras.datasets.mnist<br>(x_train, y_train), (x_test, y_test) = mnist.load_data()<br><span class="hljs-comment"># (x_train, y_train), (x_test, y_test) = load_data(path=&#x27;mnist.npz&#x27;)</span><br>x_train, x_test = x_train / <span class="hljs-number">255.0</span>, x_test / <span class="hljs-number">255.0</span><br><br>model = tf.keras.models.Sequential([<br>    tf.keras.layers.Flatten(),<br>    tf.keras.layers.Dense(<span class="hljs-number">128</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>    tf.keras.layers.Dense(<span class="hljs-number">10</span>, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>)<br>])<br><br><span class="hljs-comment">#主要通过修改compile中optimizer来尝试各种优化器</span><br>model.<span class="hljs-built_in">compile</span>(optimizer=optimizers.Adam(learning_rate=<span class="hljs-number">0.1</span>),<br>              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="hljs-literal">False</span>),<br>              metrics=[<span class="hljs-string">&#x27;sparse_categorical_accuracy&#x27;</span>])<br>start = datetime.datetime.now()<br>hist = model.fit(x_train, y_train, batch_size=<span class="hljs-number">32</span>, epochs=<span class="hljs-number">500</span>, validation_data=(x_test, y_test), validation_freq=<span class="hljs-number">1</span>)<br>end = datetime.datetime.now()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;time:&#x27;</span>+<span class="hljs-built_in">str</span>(end-start))<br><br>model.summary()<br><br>plt.figure()<br><br>acc = hist.history[<span class="hljs-string">&#x27;sparse_categorical_accuracy&#x27;</span>]<br>val_acc = hist.history[<span class="hljs-string">&#x27;val_sparse_categorical_accuracy&#x27;</span>]<br>loss = hist.history[<span class="hljs-string">&#x27;loss&#x27;</span>]<br>val_loss = hist.history[<span class="hljs-string">&#x27;val_loss&#x27;</span>]<br><br>epochs = <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(loss))<br><br>plt.plot(epochs, acc, label=<span class="hljs-string">&#x27;Training acc&#x27;</span>)  <span class="hljs-comment"># &#x27;bo&#x27;为画蓝色圆点，不连线</span><br>plt.plot(epochs, val_acc, label=<span class="hljs-string">&#x27;Validation acc&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;Training and validation accuracy&#x27;</span>)<br>plt.legend()  <span class="hljs-comment"># 绘制图例，默认在右上角</span><br><br>plt.figure()<br><br>plt.plot(epochs, loss, label=<span class="hljs-string">&#x27;Training loss&#x27;</span>)<br>plt.plot(epochs, val_loss, label=<span class="hljs-string">&#x27;Validation loss&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;Training and validation loss&#x27;</span>)<br>plt.legend()<br><br>plt.show()<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SGD&quot;&gt;&lt;a href=&quot;#SGD&quot; class=&quot;headerlink&quot; title=&quot;SGD&quot;&gt;&lt;/a&gt;SGD&lt;/h2&gt;&lt;p&gt;SGD全称Stochastic Gradient Descent，随机梯度下降，1847年提出。每次选择一个mini-batch，而</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
    <category term="deeplearning" scheme="https://github.com/sterne012/sterne012.github.io/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-手写数字识别</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/03/23/deep-digit-reco/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/03/23/deep-digit-reco/</id>
    <published>2022-03-23T06:46:28.000Z</published>
    <updated>2022-03-23T06:47:34.757Z</updated>
    
    <content type="html"><![CDATA[<p>简单贴一下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> layers, optimizers, datasets, Sequential<br><span class="hljs-keyword">from</span> tensorflow.keras.layers <span class="hljs-keyword">import</span> Dense, Dropout, Activation<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">from</span> tensorflow.python.keras.optimizer_v2.gradient_descent <span class="hljs-keyword">import</span> SGD<br><span class="hljs-keyword">from</span> tensorflow.python.keras.utils <span class="hljs-keyword">import</span> np_utils<br><br>os.environ[<span class="hljs-string">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class="hljs-string">&#x27;2&#x27;</span><br>os.environ[<span class="hljs-string">&quot;KMP_DUPLICATE_LIB_OK&quot;</span>] = <span class="hljs-string">&quot;TRUE&quot;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_data</span>(<span class="hljs-params">path</span>):</span><br>    f = np.load(path)<br>    x_train, y_train = f[<span class="hljs-string">&#x27;x_train&#x27;</span>], f[<span class="hljs-string">&#x27;y_train&#x27;</span>]<br>    x_test, y_test = f[<span class="hljs-string">&#x27;x_test&#x27;</span>], f[<span class="hljs-string">&#x27;y_test&#x27;</span>]<br>    f.close()<br>    x_train = x_train.reshape(x_train.shape[<span class="hljs-number">0</span>], <span class="hljs-number">28</span> * <span class="hljs-number">28</span>)<br>    x_test = x_test.reshape(x_test.shape[<span class="hljs-number">0</span>], <span class="hljs-number">28</span> * <span class="hljs-number">28</span>)<br>    x_train = x_train.astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>    x_test = x_test.astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>    y_train = np_utils.to_categorical(y_train, <span class="hljs-number">10</span>)<br>    y_test = np_utils.to_categorical(y_test, <span class="hljs-number">10</span>)<br>    x_train = x_train / <span class="hljs-number">255</span><br>    x_test = x_test / <span class="hljs-number">255</span><br>    <span class="hljs-keyword">return</span> (x_train, y_train), (x_test, y_test)<br><br><br>(x_train, y_train), (x_test, y_test) = load_data(path=<span class="hljs-string">&#x27;mnist.npz&#x27;</span>)<br><br><span class="hljs-comment"># 输出少量测试集结果</span><br><span class="hljs-comment"># print(x_train.shape)</span><br><span class="hljs-comment"># print(x_train[0])</span><br><span class="hljs-comment"># print(y_train.shape)</span><br><span class="hljs-comment"># print(y_train[0])</span><br><span class="hljs-comment"># plt.Figure()</span><br><span class="hljs-comment"># for i in range(10):</span><br><span class="hljs-comment">#     im = x_train[i].reshape(28, 28)</span><br><span class="hljs-comment">#     plt.imshow(im, &#x27;gray&#x27;)</span><br><span class="hljs-comment">#     print(y_train[i])</span><br><span class="hljs-comment">#     plt.pause(0.5)</span><br><span class="hljs-comment"># plt.show()</span><br><br>model = Sequential()<br>model.add(Dense(input_dim=<span class="hljs-number">28</span> * <span class="hljs-number">28</span>, units=<span class="hljs-number">500</span>, activation=<span class="hljs-string">&#x27;sigmoid&#x27;</span>))<br>model.add(Dense(units=<span class="hljs-number">500</span>, activation=<span class="hljs-string">&#x27;sigmoid&#x27;</span>))<br>model.add(Dense(units=<span class="hljs-number">500</span>, activation=<span class="hljs-string">&#x27;sigmoid&#x27;</span>))<br>model.add(Dense(units=<span class="hljs-number">10</span>, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>))<br><br>model.<span class="hljs-built_in">compile</span>(loss=<span class="hljs-string">&#x27;categorical_crossentropy&#x27;</span>, optimizer=SGD(lr=<span class="hljs-number">0.1</span>), metrics=[<span class="hljs-string">&#x27;accuracy&#x27;</span>])<br><br>model.fit(x_train, y_train, batch_size=<span class="hljs-number">100</span>, epochs=<span class="hljs-number">20</span>)<br><br>result = model.evaluate(x_test, y_test)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nTest loss:&#x27;</span>, result[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\nTest Accuracy:&#x27;</span>, result[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;简单贴一下代码&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span</summary>
      
    
    
    
    
    <category term="python" scheme="https://github.com/sterne012/sterne012.github.io/tags/python/"/>
    
    <category term="deeplearning" scheme="https://github.com/sterne012/sterne012.github.io/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>Arcaea-从零开始的玩蛇生活</title>
    <link href="https://github.com/sterne012/sterne012.github.io/2022/03/22/Arcaea/"/>
    <id>https://github.com/sterne012/sterne012.github.io/2022/03/22/Arcaea/</id>
    <published>2022-03-22T08:00:00.000Z</published>
    <updated>2022-05-13T08:57:32.433Z</updated>
    
    <content type="html"><![CDATA[<p>ARCAEA——这是一款促进人类进化的出张模拟器。</p><p><del>暴论：mush是纵连模拟器，lanota倒打模拟器，ADOFAI音押模拟器，arc出张模拟器，phi要素过多</del></p><p>欢迎萌新多多入坑，大佬多多暴打</p><hr><h2 id="2021-6-18-入坑"><a href="#2021-6-18-入坑" class="headerlink" title="2021/6/18 入坑"></a>2021/6/18 入坑</h2><p>第一个fr，同时这首也是先前打phi萌新时期的练手谱</p><img src="/2022/03/22/Arcaea/577F99608F8237EDB8A2A9B2FEF510DA.png" class="" title="img"><hr><h2 id="2021-8-12-10-0"><a href="#2021-8-12-10-0" class="headerlink" title="2021/8/12 10.0"></a>2021/8/12 10.0</h2><p>经过一个考试月+军训的折磨之后终于10.0</p><img src="/2022/03/22/Arcaea/6D9DE46978DB36666E9BD2959D02DEF9.png" class="" title="img"><hr><p>2021/8/30</p><p>第一个p的8</p><img src="/2022/03/22/Arcaea/57C1AF723391D8EC8B1F692676F2B19C.png" class="" title="img"><p>当时的我仍未理解这个游戏到底该怎么玩</p><hr><h2 id="2021-11-24-11-0"><a href="#2021-11-24-11-0" class="headerlink" title="2021/11/24 11.0"></a>2021/11/24 11.0</h2><p>本文原标题：arcaea红框纪念</p><p>所以这里格外长</p><p>不愧是我 </p><img src="/2022/03/22/Arcaea/9A9326969C9F34F7F56C1111D854AD06.jpg" class="" title="img"><img src="/2022/03/22/Arcaea/3E4EACE455AF0B5E2F9D8AE953A4775F.jpg" class="" title="img"><img src="/2022/03/22/Arcaea/8D55AF670FE801E48BF4C3669F03C411.jpg" class="" title="img"><img src="/2022/03/22/Arcaea/image-20211124150310139.png" class="" title="image-20211124150310139"><p>红框时间2021-11-23-16:00左右</p><p>我音游龄算长了，大概小学就在玩，大概从乐动时代（都没什么人听说过的音游）到少量节奏大师、诺亚瓶子、cy2、喵赛克、phigros/musedash、Arcaea的历程，时间跨度还是挺大的，不过arc真的是一上来就让我感觉这个音游挺难，也可能是因为phi打习惯了吧，换手接蛇，按不到键等等…</p><p>不过当初想玩主要是因为phi瓶颈很久了（2.0的rks14.4左右），想玩Arc提提准度，于是六七月份左右开始玩</p><p>这个美术风格真的好棒，Seirra老师很早就有所听闻了，Arc也像cy2一样很有自己的风格。</p><p>然后经历了9-11月的躺平之后我们社团办了个音游挑战赛在结识各路神仙之后就开始尝试红</p><p>挑战赛冠军说他当时红只用了25天，我直接进行亿个您的喊并祝他早日制霸</p><p>最主要还是要靠多练，每天都打打一定有进步这是真的</p><p>再就有个明确的目标吧，比如我就是想红，（然后现在红了又躺平了）于是就比较有动力去推一些难曲</p><p>作为一个4k gamer，也许个人差和二指比较大，毕竟四指主要是靠协调然后弥补那些自己二指底力不够的操作</p><p>还有一个很好用的软件叫音乐游戏训练（界面一看就是机翻hh），ios商店有，安卓不太清楚，可以把自己的录像放进去调倍速拆谱用，图上Vindication有一段3+3+3双押就是拆出来才打会的，但是感觉蛇不太好拆，就纯靠多练吧</p><p>虽然没人问过我但是我调成English纯因为中文页面那个字体太丑了233 英文真的很好康</p><p>phi的近况是比赛的时候收了一个然后直接进决赛了233 不过打了arc之后准度确实有提升，但是底力永远都不是一蹴而就的，还有很多15我都是靠糊</p><p>下一步继续练双押，然后多推一推九级上位曲吧？暂时没有什么目标了，摘星离我还有挺遥远的距离</p><p>突然发现这个还挺有的写（水），可能以后想说点什么还会有吧~诶嘿</p><hr><p>嘿嘿 好看捏（轻微剧透？</p><img src="/2022/03/22/Arcaea/33C28A3BB3C874D387572693CE4FDF38.png" class="" title="img"><img src="/2022/03/22/Arcaea/AC838C3A0A7C8B5ED2B27CA32A33458B.png" class="" title="img"><img src="/2022/03/22/Arcaea/F77ECE19347A6D21F602C9C7A9AED981.png" class="" title="img"><p>arcahv解锁时候忘了调中文然后。。。悲叹自己的英语水平太差了</p><hr><h2 id="2021-12-29-11-4"><a href="#2021-12-29-11-4" class="headerlink" title="2021/12/29 11.4"></a>2021/12/29 11.4</h2><p>学了一天（概率论+课程论文）后的底力爆发之夜11.39-11.43</p><img src="/2022/03/22/Arcaea/F37611351E7CAAAC9D62F84AE01D1FF7.png" class="" title="img"><img src="/2022/03/22/Arcaea/F2D98DD3274ABD548C63E917A74526C6.png" class="" title="img"><p>我的评价是，ej交互难个球，难的是天地散打（</p><p>后将vt推上986w再加0.01</p><hr><p>2021/1/1</p><p>元旦觉醒了光</p><img src="/2022/03/22/Arcaea/4DAAB4806E15DC38976B5A0C4E4DCB70.png" class="" title="img"><p>细看背景是p歌列表（）以一堆7-8和少量水9为主</p><hr><h2 id="2021-1-16-11-5"><a href="#2021-1-16-11-5" class="headerlink" title="2021/1/16 11.5"></a>2021/1/16 11.5</h2><p>如今打算把这一篇当作玩arc的记录ww</p><p>11.50了，很艰难，短时间内必不可能摘星</p><img src="/2022/03/22/Arcaea/B2BD4BE67B24A5F4AB5242F53F1717C2.png" class="" title="img"><p>这首在b30里凑了个数然后终于11.5了……</p><p>抛开众多的小二连三连不提，本身配置并不难，但真的好吃爆发力，这种我是拆不成交互就只能硬抗了。。</p><p>并且11.5多由9+曲目堆积而成，10里面打得好的就变石（会了真的简单）、魔女（第一个上ex+的10，但癖了），会一点点的mirzam（暴far，总之打不好）、xanatos（尾杀寄）、黑魔王（同尾杀寄）、vh（还是尾杀寄）、vt（底力爆发时打上best1后至今一直到不了当时水平），嫖了里红（很有代表性的位移天地交互不会）以及上面的felis</p><p>欢迎各位大爹加好友多多暴打我OOOOOOOOOrz</p><img src="/2022/03/22/Arcaea/6D481B9BB81AF9C1BAEC27CF1990328C.jpg" class="" title="6D481B9BB81AF9C1BAEC27CF1990328C"><hr><p>2022/2/17</p><p>升天</p><p>梦 幻 联 动</p><p>这个游戏也去玩了下…然后第一周目使我明白我只想做个咸鱼我不想要那么多粉，后面开始刷成就狂魔然后逐渐失去本心了，不过有些结局那确实相当有意思ww</p><p>然后看过花花直播发现确实有连播30d的可能，于是刷出了近900w粉的结局…</p><img src="/2022/03/22/Arcaea/881719DA24446994B53B9C22C49B9815.png" class="" title="img"><p>然后发现爆小p户后来又小推了一下</p><hr><p>2022/2/26</p><p>来学校，练了四五天vt一点进步都没然后打了把vh手感起飞</p><img src="/2022/03/22/Arcaea/0091A3BCABECCB6BEC18C3C846868797.png" class="" title="img"><hr><h2 id="2022-3-2-11-6"><a href="#2022-3-2-11-6" class="headerlink" title="2022/3/2 11.6"></a>2022/3/2 11.6</h2><p>谢谢新出background的random随机到xanatos，虽然我不理解为什么就990</p><img src="/2022/03/22/Arcaea/EB48515E6A67EF23905A2D1ABDD0A106.png" class="" title="img"><p>看到群里巨佬爆鲨体罚，然后再次被体罚打爆</p><p><del>这就是寄点突然飞升的原因吗？</del></p><p>天地交互可能略微的好了那么一点点点吧..应该说谢谢vt和ac（ac练了一下午，现在970-&gt;11.5爽嫖状态）</p><img src="/2022/03/22/Arcaea/478B0BD9373FE15C501332FB01DEF50C.png" class="" title="img"><p>几乎全在推10的上升到11.6了。。</p><p>整体上没有11.5时候那么着急的想去提一提ptt什么的了，这大概就目前的水平，底力耗尽了牡蛎牡蛎</p><p>后面怎么办捏</p><p>首先周年庆全曲一下，但是支线包齐了，ether drop+55</p><p>黑魔王尾杀好了一些，慢速看一下中间4双押4交互段，练练后边</p><p>剩下的随缘吧，想打啥打啥</p><p>另外红枪真的听着好塑料啊</p><img src="/2022/03/22/Arcaea/FD5BE1A3A52A93BC908BD54422D7510E.png" class="" title="img"><p>另外新background好看！期待很久啦</p><img src="/2022/03/22/Arcaea/B51B1661FB54F8594534CF0704AB2247.png" class="" title="img"><p>关于我查了个分然后群友针对牛奶和vh谁是10.0最上吵起来后打三把牛奶上ex+并推分这件事</p><p>每 天 一 杯 奶，强 壮 音 游 人</p><p>里红除了天地位移交互的读不懂之外其他打的基本没什么毛病（不过印象中这把当时板子非常不顺滑还漏蛇（</p><img src="/2022/03/22/Arcaea/8FC96AF697B62B97C1DA253347B1E6BF.png" class="" title="img"><p>你倒是p啊！p！</p><p>打歌方差很大，这个状态好的时候几乎不失误，状态差的时候撑死986</p><img src="/2022/03/22/Arcaea/485F623C1246E7918AC033B242FDD9E7.png" class="" title="img"><h2 id="2022-3-22-11-7"><a href="#2022-3-22-11-7" class="headerlink" title="2022/3/22 11.7"></a>2022/3/22 11.7</h2><p>历经20d ptt+0.1</p><p>谢谢衔尾蛇。。虽然我感觉我还是没打明白，第一个单曲定数12.0了耶</p><img src="/2022/03/22/Arcaea/0B468E376885FFE8F21409279112AEE3.png" class="" title="img"><p>地板已经萌新线了淦。。。通常这个时候大佬差不多都已经摘了吧（</p><p>首先是终于把病女给解了</p><p>但是提不动（估计是因为越级），卡在965上不去了T T</p><img src="/2022/03/22/Arcaea/67160F55CD2D7234200BC3117F21AC98.png" class="" title="img"><p>红枪以来第二个从头far到尾，节奏怪难的，而且减速段打不好</p><img src="/2022/03/22/Arcaea/140A2A33F9397B538E29E0AD985E1631.png" class="" title="img"><p>掌握了一首自己很喜欢听的歌多是一件美事啊~</p><p>lfdy真的很上头，但是蛇也是相当容易漏，开头漏蛇重灾区，中段那一堆更是给我整不会了</p><img src="/2022/03/22/Arcaea/7E104C93C7B1BBB05B38D8BA595549D2.png" class="" title="img"><img src="/2022/03/22/Arcaea/A6F2A4715972B9D96D674C0E969DFA8E.png" class="" title="img"><p>恋歌2已经鲨疯，所以为什么你的恋歌1还是打的稀烂？</p><img src="/2022/03/22/Arcaea/651F9585B481C1C63B1052248B57E73C.png" class="" title="img"><p>反手依旧打的不太好</p><img src="/2022/03/22/Arcaea/C262159C2AE8E29F09767A906A9D5E91.png" class="" title="img"><p>哈哈，不过就是b30里面又多了一个性了的歌罢了，哈哈</p><img src="/2022/03/22/Arcaea/E3EFCC69A2EF02206106532943952D4E.png" class="" title="img"><h2 id="2022-4-12-11-8"><a href="#2022-4-12-11-8" class="headerlink" title="2022/4/12 11.8"></a>2022/4/12 11.8</h2><p>《镜像为什么是神》</p><p>这我才意识到vt真的癖得有些严重</p><img src="/2022/03/22/Arcaea/DAB7E723B2CF8BC62D348860A486E315.png" class="" title="img"><p>可莉max，没有休息段（后来发现中间还是有一点的），才发现曲名真实的反映了没有休息段的铺面（）</p><p>USAO佬的xp还是一向让人难以捉摸（这不加？？这不加？）</p><img src="/2022/03/22/Arcaea/FEADDC611AA41F946D2828D29392C685.png" class="" title="img"><p>只能说到目前为止都不太上手的绿魔王qwq<img src="/2022/03/22/Arcaea/D57DA5FF607740E754C9618CE40C889E.png" class="" title="img"></p><p>爬梯子随手打了一下，我超（</p><p>但是当时打又没觉得自己打的很好。。中间五个hold加蛇那还是漏，意料之外了</p><img src="/2022/03/22/Arcaea/694874285BBDDBAE6305E0B3576A14A0.png" class="" title="img"><hr><p>又推了一下绿魔王和翡翠鸡，截止4/14是11.84</p><p>绿魔王逐渐的能看得懂双押段了，但肯定还是有漏，后面没感觉到太多难点？但是准度不是很好，还能提（</p><p>翡翠鸡emm，有高速版的类似恋歌的交互，打打就全成far了，不太稳（不过感觉和起手有很大关系）</p><hr><p>《镜像为什么是神 2》</p><img src="/2022/03/22/Arcaea/E013742644D126BF7A2B393832AD7D4E.png" class="" title="img"><p>然后补一下11.8的b30，前几天查分器坏了（我超 r10居然快摘了）</p><p>感慨一下最大瓶颈就在11.4-11.6附近…怪不得11.5叫萌新线，之前能几乎全靠9+，之后必须得推10。。现在感觉打起来比以前顺畅好多了，虽说摘星还有一段距离吧，但是也对ptt没有特别高的追求，一点点练的话肯定会感觉有提升的</p><p>目前也没有非常明确的推哪一首的目标…要说非常喜欢哪首的话当然是overwhelm，然后RG应该也能提，然后病女。。还是不想动它了（悲）真的嫖不动；说起寄点应该也能推，但是最近一直手感不佳，放置了</p><p>还有求里红那种天地交互的练习方法？慢一点的就打的来（比如红枪和寄点）一快就很难打（黑魔王中间有一个也是这样的也是经常的far和lost）</p><img src="/2022/03/22/Arcaea/C06BA0D6ABF39FED6F46C489E7344074.jpg" class="" title="img"><img src="/2022/03/22/Arcaea/0051577B019217A7872917F23244AB6F.png" class="" title="img"><img src="/2022/03/22/Arcaea/89A888C383AB5731D75A2C53E7985FDC.png" class="" title="img"><p>GDP！起飞！</p><p>就是中间那段和结尾突然很有感觉，左右分别打不同的节奏，然后就突然的打了995</p><img src="/2022/03/22/Arcaea/42B2AF1C56E69304FA23FC2A73791535.png" class="" title="img"><img src="/2022/03/22/Arcaea/99BC2C6A3E1E5436CC0DF6D5A776758C.png" class="" title="img"><p>上面这两个是4月22日的</p><h2 id="2022-5-4-11-9"><a href="#2022-5-4-11-9" class="headerlink" title="2022/5/4 11.9"></a>2022/5/4 11.9</h2><p>隔了十多天才推上去这最后0.01</p><p>我甚至都觉得这会是新的一个瓶颈了，11.89</p><p>先不说想要摘星的心情，光是想上11.9，的热情，就慢慢被现实打垮，几乎所有10都推过试过但是没什么提升，要么停留在原来分数附近，要么甚至大不如前</p><p>然后今天早晨随口在群里问了问，说推rg，我看了看我976的rg，打了一遍，我不理解</p><p>遂去慢速练了几遍，虽说我是真的不想练的，打歌就是要随心所欲！放飞自我！</p><p>但是</p><p>但是</p><p>但是</p><p>？！</p><img src="/2022/03/22/Arcaea/A33A7EFD31CDB05D1A6B374A0615750F.png" class="" title="img"><p>我更不理解了</p><p>但是好诶</p><p>那么下一次记录，会是什么时候呢</p><p>会是20天之后吗</p><p>我不敢想</p><p>但终有一天</p><p>我会到达那个地方</p><p><del>不 要 停 下 来 啊，打 音 游 的 大 姐 姐</del></p><img src="/2022/03/22/Arcaea/F04915FA6B71A9D5CA7AF4AEFF21A3FA.png" class="" title="img"><p>榨出来了！！！好耶</p><p>对立好好看，<del>超市我超市我，</del>这个眼神真是绝了ww挺符合现在我的状态（伞对立和猫对立做得到吗？）</p><img src="/2022/03/22/Arcaea/908815E2EAF9FCC9F349B4DC2CD82550.png" class="" title="img"><p>开头狂far，后面打的倒还好，看上次成绩971w就，每次开头寄了就退出，这次好歹没退然后上分了（</p><img src="/2022/03/22/Arcaea/8CA86F2CCDB9C0BB5526B42FF67D8A27.png" class="" title="img"><img src="/2022/03/22/Arcaea/8FFCAEE0BDEEAB75F420A436C2FA8D0B.png" class="" title="img"><p>本来只是突然想到大爹的b30里面有994w的寄点，算出来好像有12.4多，就感觉我这天花板不够啊，是不是应该有一个ex+的10+，然后随手一打…..好耶！</p><img src="/2022/03/22/Arcaea/37DD558ACBA013C9163B4B83F4BDA3E0.png" class="" title="img"><p>感觉慢速看一下体罚和骨折光是有机会的</p><p>那就用骨折光摘吧！</p><p>5月9日，顶级折磨</p><p>虽然+0.02很美好，但是11.998</p><img src="/2022/03/22/Arcaea/B8D2EC6AFDF96A2042FAA9C930EA27AE.png" class="" title="img"><img src="/2022/03/22/Arcaea/42BDC846F037DB615EF50E89AFAD9A01.png" class="" title="img"><p>这衔尾蛇打到最后觉得应该都结束了，摘星什么的大概也就这样了，然后出来一看</p><p>KEEP</p><p>淦，差0.002，然后试了好多首都丝毫不动，打体罚打了好几次985w，逐渐状态非常不好，看来今天是没希望了</p><p>想开点，单日很大突破了，这三首还有LC ex+，烈华还是刚刚学会的</p><img src="/2022/03/22/Arcaea/CBB6ADEE8325E1F43E8985751468A35F.png" class="" title="img"><h2 id="2022-5-10-12-0-摘星！"><a href="#2022-5-10-12-0-摘星！" class="headerlink" title="2022/5/10 12.0 摘星！"></a>2022/5/10 12.0 摘星！</h2><p>前情提要</p><img src="/2022/03/22/Arcaea/image-20220510155147642.png" class="" title="image-20220510155147642"><p>对立，我爱你，拉格兰，对不起</p><p>终于动辣！！！！！感觉就像过了十几天一样</p><img src="/2022/03/22/Arcaea/CA07EBFF49B5515B7E762997B90686A7.png" class="" title="img"><img src="/2022/03/22/Arcaea/B904B3886915A027714370A617F7935E.jpg" class="" title="img"><p>所以严格来说瓶颈是10.5和11.5附近吗（</p><img src="/2022/03/22/Arcaea/image-20220510155429672.png" class="" title="image-20220510155429672"><p>接下来休息，然后练习基础的9，推8的PM</p><p>再开一篇更新捏</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ARCAEA——这是一款促进人类进化的出张模拟器。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;暴论：mush是纵连模拟器，lanota倒打模拟器，ADOFAI音押模拟器，arc出张模拟器，phi要素过多&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;欢迎萌新多多入坑，大佬多多暴打&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id</summary>
      
    
    
    
    
    <category term="games" scheme="https://github.com/sterne012/sterne012.github.io/tags/games/"/>
    
    <category term="Arc" scheme="https://github.com/sterne012/sterne012.github.io/tags/Arc/"/>
    
  </entry>
  
</feed>
